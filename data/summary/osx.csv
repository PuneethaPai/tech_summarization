command,doc_url,doc_text,man_entry,tldr_summary
head,,,"
HEAD(1) 		  BSD General Commands Manual		       HEAD(1)

NAME
     head -- display first lines of a file

SYNOPSIS
     head [-n count | -c bytes] [file ...]

DESCRIPTION
     This filter displays the first count lines or bytes of each of the speci-
     fied files, or of the standard input if no files are specified.  If count
     is omitted it defaults to 10.

     If more than a single file is specified, each file is preceded by a
     header consisting of the string ``==> XXX <=='' where ``XXX'' is the name
     of the file.

EXIT STATUS
     The head utility exits 0 on success, and >0 if an error occurs.

SEE ALSO
     tail(1)

HISTORY
     The head command appeared in PWB UNIX.

BSD				 June 6, 1993				   BSD
","# head

> Output the first part of files.

- Output the first few lines of a file:

`head -n {{count_of_lines}} {{filename}}`

- Output the first few bytes of a file:

`head -c {{number_in_bytes}} {{filename}}`
"
reboot,,,"
REBOOT(8)		  BSD System Manager's Manual		     REBOOT(8)

NAME
     halt, reboot -- stopping and restarting the system

SYNOPSIS
     halt [-lnqu]
     reboot [-lnq]

DESCRIPTION
     The halt and reboot utilities flush the file system cache to disk, send
     all running processes a SIGTERM (and subsequently a SIGKILL) and, respec-
     tively, halt or restart the system.  The action is logged, including
     entering a shutdown record into the wtmp(5) file.

     When the system is halted with the halt command, the system is powered
     off.

     The options are as follows:

     -l      The halt or reboot is not recorded in the system log.  This
	     option is intended for applications such as shutdown(8), that
	     call reboot or halt and log this themselves.

     -n      The file system cache is not flushed.  This option should proba-
	     bly not be used.

     -q      The system is halted or restarted quickly and ungracefully, and
	     only the flushing of the file system cache is performed (if the
	     -n option is not specified).  This option should probably not be
	     used.

     -u      The system is halted up until the point of removing system power,
	     but waits before removing power for 5 minutes so that an external
	     UPS (uninterruptible power supply) can forcibly remove power.
	     This simulates a dirty shutdown to permit a later automatic power
	     on. OS X uses this mode automatically with supported UPSs in
	     emergency shutdowns.

     Normally, the shutdown(8) utility is used when the system needs to be
     halted or restarted, giving users advance warning of their impending doom
     and cleanly terminating specific programs.

SIGTERM TO SIGKILL INTERVAL
     The SIGKILL will follow the SIGTERM by an intentionally indeterminate
     period of time.  Programs are expected to take only enough time to flush
     all dirty data and exit.  Developers are encouraged to file a bug with
     the OS vendor, should they encounter an issue with this functionality.

SEE ALSO
     wtmp(5), shutdown(8), sync(8)

HISTORY
     A reboot utility appeared in Version 6 AT&T UNIX.

BSD				 June 9, 1993				   BSD
","# reboot

> Reboot the system.

- Reboot immediately:

`sudo reboot`

- Reboot immediately without gracefully shutting down:

`sudo reboot -q`
"
system_profiler,,,"
SYSTEM_PROFILER(8)	  BSD System Manager's Manual	    SYSTEM_PROFILER(8)

NAME
     system_profiler -- reports system hardware and software configuration.

SYNOPSIS
     system_profiler [-usage]
     system_profiler [-listDataTypes]
     system_profiler [-xml] dataType1 ... dataTypeN
     system_profiler [-xml] [-detailLevel level]

DESCRIPTION
     system_profiler reports on the hardware and software configuration of the
     system.  It can generate plain text reports or XML reports which can be
     opened with System Information.app

     Progress and error messages are printed to stderr while actual report
     data is printed to stdout. Redirect stderr to /dev/null to suppress
     progress and error messages.

     The following options are available:

     -xml		 Generates a report in XML format.  If the XML report
			 is redirected to a file with a "".spx"" suffix that
			 file can be opened with System Information.app.

     -listDataTypes	 Lists the available datatypes.

     -detailLevel level  Specifies the level of detail for the report:

			 mini	       report with no personal information

			 basic	       basic hardware and network information

			 full	       all available information

     -timeout		 Specifies the maximum time to wait in seconds for
			 results.  If some information is not available within
			 the specified time limit then an incomplete or par-
			 tial report will be generated. The default timeout is
			 180 seconds. Specifying a timeout of 0 means no time-
			 out.

     -usage		 Prints usage info and examples.

EXAMPLES
     system_profiler
       Generates a text report with the standard detail level.

     system_profiler -detailLevel mini
       Generates a short report containing no personal information.

     system_profiler -listDataTypes
       Shows a list of the available data types.

     system_profiler SPSoftwareDataType SPNetworkDataType
       Generates a text report containing only software and network data.

     system_profiler -xml > MyReport.spx
       Creates a XML file which can be opened by System Profiler.app

AUTHORS
     Apple Computer, Inc.

Darwin				 June 30, 2003				Darwin
","# system_profiler

> Report system hardware and software configuration.

- Display a full system profiler report which can be opened by System Profiler.app:

`system_profiler -xml > MyReport.spx`

- Display a hardware overview (Model, CPU, Memory, Serial, etc):

`system_profiler SPHardwareDataType`

- Print the system serial number:

`system_profiler SPHardwareDataType|grep ""Serial Number (system)"" |awk '{print $4}'`
"
pmset,,,"
PMSET(1)		  BSD General Commands Manual		      PMSET(1)

NAME
     pmset -- manipulate power management settings

SYNOPSIS
     pmset [-a | -b | -c | -u] [setting value] [...]
     pmset -u [haltlevel percent] [haltafter minutes] [haltremain minutes]
     pmset -g [option]
     pmset schedule [cancel | cancelall] type date+time [owner]
     pmset repeat cancel
     pmset repeat type weekdays time
     pmset relative [wake | poweron] seconds
     pmset [touch | sleepnow | displaysleepnow | boot]

DESCRIPTION
     pmset manages power management settings such as idle sleep timing, wake
     on administrative access, automatic restart on power loss, etc.

     Note that processes may dynamically override these power management set-
     tings by using I/O Kit power assertions.  Whenever processes override any
     system power settings, pmset will list those processes and their power
     assertions in -g and -g assertions. See caffeinate(8).

SETTING
     pmset can modify the values of any of the power management settings
     defined below. You may specify one or more setting & value pairs on the
     command-line invocation of pmset.	The -a, -b, -c, -u flags determine
     whether the settings apply to battery ( -b ), charger (wall power) ( -c
     ), UPS ( -u ) or all ( -a ).

     Use a minutes argument of 0 to set the idle time to never for sleep
     disksleep and displaysleep

     pmset must be run as root in order to modify any settings.

SETTINGS
     displaysleep - display sleep timer; replaces 'dim' argument in 10.4
     (value in minutes, or 0 to disable)
     disksleep - disk spindown timer; replaces 'spindown' argument in 10.4
     (value in minutes, or 0 to disable)
     sleep - system sleep timer (value in minutes, or 0 to disable)
     womp - wake on ethernet magic packet (value = 0/1). Same as ""Wake for
     network access"" in the Energy Saver preferences.
     ring - wake on modem ring (value = 0/1)
     powernap - enable/disable Power Nap on supported machines (value = 0/1)
     proximitywake - On supported systems, this option controls system wake
     from sleep based on proximity of devices using same iCloud id. (value =
     0/1)
     autorestart - automatic restart on power loss (value = 0/1)
     lidwake - wake the machine when the laptop lid (or clamshell) is opened
     (value = 0/1)
     acwake - wake the machine when power source (AC/battery) is changed
     (value = 0/1)
     lessbright - slightly turn down display brightness when switching to this
     power source (value = 0/1)
     halfdim - display sleep will use an intermediate half-brightness state
     between full brightness and fully off  (value = 0/1)
     sms - use Sudden Motion Sensor to park disk heads on sudden changes in G
     force (value = 0/1)
     hibernatemode - change hibernation mode. Please use caution. (value =
     integer)
     hibernatefile - change hibernation image file location. Image may only be
     located on the root volume. Please use caution. (value = path)
     ttyskeepawake - prevent idle system sleep when any tty (e.g. remote login
     session) is 'active'. A tty is 'inactive' only when its idle time exceeds
     the system sleep timer. (value = 0/1)
     networkoversleep - this setting affects how OS X networking presents
     shared network services during system sleep. This setting is not used by
     all platforms; changing its value is unsupported.
     destroyfvkeyonstandby - Destroy File Vault Key when going to standby
     mode. By default File vault keys are retained even when system goes to
     standby. If the keys are destroyed, user will be prompted to enter the
     password while coming out of standby mode.(value: 1 - Destroy, 0 -
     Retain)

GETTING
     -g (with no argument) will display the settings currently in use.
     -g live displays the settings currently in use.
     -g custom displays custom settings for all power sources.
     -g cap displays which power management features the machine supports.
     -g sched displays scheduled startup/wake and shutdown/sleep events.
     -g ups displays UPS emergency thresholds.
     -g ps / batt displays status of batteries and UPSs.
     -g pslog displays an ongoing log of power source (battery and UPS) state.
     -g rawlog displays an ongoing log of battery state as read directly from
     battery.
     -g therm shows thermal conditions that affect CPU speed. Not available on
     all platforms.
     -g thermlog shows a log of thermal notifications that affect CPU speed.
     Not available on all platforms.
     -g assertions displays a summary of power assertions. Assertions may pre-
     vent system sleep or display sleep. Available 10.6 and later.
     -g assertionslog shows a log of assertion creations and releases. Avail-
     able 10.6 and later.
     -g sysload displays the ""system load advisory"" - a summary of system
     activity available from the IOGetSystemLoadAdvisory API. Available 10.6
     and later.
     -g sysloadlog displays an ongoing log of lives changes to the system load
     advisory. Available 10.6 and later.
     -g ac / adapter will display details about an attached AC power adapter.
     Only supported for MacBook and MacBook Pro.
     -g log displays a history of sleeps, wakes, and other power management
     events. This log is for admin & debugging purposes.
     -g uuid displays the currently active sleep/wake UUID; used within OS X
     to correlate sleep/wake activity within one sleep cycle.  history
     -g uuidlog displays the currently active sleep/wake UUID, and prints a
     new UUID as they're set by the system.
     -g history is a debugging tool. Prints a timeline of system sleeplwake
     UUIDs, when enabled with boot-arg io=0x3000000.
     -g historydetailed Prints driver-level timings for a sleep/wake. Pass a
     UUID as an argument.
     -g powerstate [class names] Prints the current power states for I/O Kit
     drivers. Caller may provide one or more I/O Kit class names (separated by
     spaces) as an argument. If no classes are provided, it will print all
     drivers' power states.
     -g powerstatelog [-i interval] [class names] Periodically prints the
     power state residency times for some drivers. Caller may provide one or
     more I/O Kit class names (separated by spaces). If no classes are pro-
     vided, it will log the IOPower plane's root registry entry. Caller may
     specify a polling interval, in seconds with -i <polling interval>; other-
     wise it defaults to 5 seconds.
     -g stats Prints the counts for number sleeps and wakes system has gone
     thru since boot.
     -g systemstate Prints the current power state of the system and available
     capabilites.
     -g everything Prints output from every argument under the GETTING header.
     This is useful for quickly collecting all the output that pmset provides.
     Available in 10.8.

SAFE SLEEP ARGUMENTS
     hibernatemode supports values of 0, 3, or 25. Whether or not a hiberna-
     tion image gets written is also dependent on the values of standby and
     autopoweroff

     For example, on desktops that support standby a hibernation image will be
     written after the specified standbydelay time. To disable hibernation
     images completely, ensure hibernatemode standby and autopoweroff are all
     set to 0.

     hibernatemode = 0 by default on desktops. The system will not back memory
     up to persistent storage. The system must wake from the contents of mem-
     ory; the system will lose context on power loss. This is, historically,
     plain old sleep.

     hibernatemode = 3 by default on portables. The system will store a copy
     of memory to persistent storage (the disk), and will power memory during
     sleep. The system will wake from memory, unless a power loss forces it to
     restore from hibernate image.

     hibernatemode = 25 is only settable via pmset. The system will store a
     copy of memory to persistent storage (the disk), and will remove power to
     memory. The system will restore from disk image. If you want ""hiberna-
     tion"" - slower sleeps, slower wakes, and better battery life, you should
     use this setting.

     Please note that hibernatefile may only point to a file located on the
     root volume.

STANDBY ARGUMENTS
     standby causes kernel power management to automatically hibernate a
     machine after it has slept for a specified time period. This saves power
     while asleep. This setting defaults to ON for supported hardware. The
     setting standby will be visible in pmset -g if the feature is supported
     on this machine.

     standbydelayhigh and standbydelaylow specify the delay, in seconds,
     before writing the hibernation image to disk and powering off memory for
     Standby.  standbydelayhigh is used when the remaining battery capacity is
     above highstandbythreshold , and standbydelaylow is used when the remain-
     ing battery capacity is below highstandbythreshold.

     highstandbythreshold has a default value of 50 percent.

     autopoweroff is enabled by default on supported platforms as an implemen-
     tation of Lot 6 to the European Energy-related Products Directive. After
     sleeping for <autopoweroffdelay> seconds, the system will write a hiber-
     nation image and go into a lower power chipset sleep. Wakeups from this
     state will take longer than wakeups from regular sleep.

     autopoweroffdelay specifies the delay, in seconds, before entering
     autopoweroff mode.

UPS SPECIFIC ARGUMENTS
     UPS-specific arguments are only valid following the -u option. UPS set-
     tings also have an on/off value. Use a -1 argument instead of percent or
     minutes to turn any of these settings off. If multiple halt conditions
     are specified, the system will halt on the first condition that occurs in
     a low power situation.

     haltlevel - when draining UPS battery, battery level at which to trigger
     an emergency shutdown (value in %)
     haltafter - when draining UPS battery, trigger emergency shutdown after
     this long running on UPS power (value in minutes, or 0 to disable)
     haltremain - when draining UPS battery, trigger emergency shutdown when
     this much time remaining on UPS power is estimated (value in minutes, or
     0 to disable)

     Note: None of these settings are observed on a system with support for an
     internal battery, such as a laptop. UPS emergency shutdown settings are
     for desktop and server only.

SCHEDULED EVENT ARGUMENTS
     pmset allows you to schedule system sleep, shutdown, wakeup and/or power
     on. ""schedule"" is for setting up one-time power events, and ""repeat"" is
     for setting up daily/weekly power on and power off events. Note that you
     may only have one pair of repeating events scheduled - a ""power on"" event
     and a ""power off"" event. For sleep cycling applications, pmset can sched-
     ule a ""relative"" wakeup or poweron to occur in seconds from the end of
     system sleep/shutdown, but this event cannot be cancelled and is inher-
     ently imprecise.

     type - one of sleep, wake, poweron, shutdown, wakeorpoweron
     date/time - ""MM/dd/yy HH:mm:ss"" (in 24 hour format; must be in quotes)
     time - HH:mm:ss
     weekdays - a subset of MTWRFSU (""M"" and ""MTWRF"" are valid strings)
     owner - a string describing the person or program who is scheduling this
     one-time power event (optional)

POWER SOURCE ARGUMENTS
     -g with a 'batt' or 'ps' argument will show the state of all attached
     power sources.

     -g with a 'pslog' or 'rawlog' argument is normally used for debugging,
     such as isolating a problem with an aging battery.

OTHER ARGUMENTS
     boot - tell the kernel that system boot is complete (normally LoginWindow
     does this). May be useful to Darwin users.
     touch - PM re-reads existing settings from disk.
     noidle - pmset prevents idle sleep by creating a PM assertion to prevent
     idle sleep(while running; hit ctrl-c to cancel). This argument is depre-
     cated in favor of caffeinate(8). Please use caffeinate(8) instead.
     sleepnow - causes an immediate system sleep.
     restoredefaults - Restores Energy Saver settings to their default values.
     (Like clicking ""Restore Defaults"" in Energy Saver GUI).
     displaysleepnow - causes display to go to sleep immediately.
     resetdisplayambientparams - resets the ambient light parameters for cer-
     tain Apple displays.
     dim - deprecated in 10.4 in favor of 'displaysleep'. 'dim' will continue
     to work.
     spindown - deprecated in 10.4 in favor of 'disksleep'. 'spindown' will
     continue to work.

EXAMPLES
     This command sets displaysleep to a 5 minute timer on battery power,
     leaving other settings on battery power and other power sources unper-
     turbed.

     pmset -b displaysleep 5

     Sets displaysleep to 10, disksleep to 10, system sleep to 30, and turns
     on WakeOnMagicPacket for ALL power sources (AC, Battery, and UPS) as
     appropriate

     pmset -a displaysleep 10 disksleep 10 sleep 30 womp 1

     Restores the system's energy settings to their default values.

     For a system with an attached and supported UPS, this instructs the sys-
     tem to perform an emergency shutdown when UPS battery drains to below
     40%.

     pmset -u haltlevel 40

     For a system with an attached and supported UPS, this instructs the sys-
     tem to perform an emergency shutdown when UPS battery drains to below
     25%, or when the UPS estimates it has less than 30 minutes remaining run-
     time. The system shuts down as soon as either of these conditions is met.

     pmset -u haltlevel 25 haltremain 30

     For a system with an attached and supported UPS, this instructs the sys-
     tem to perform an emergency shutdown after 2 minutes of running on UPS
     battery power.

     pmset -u haltafter 2

     Schedules the system to automatically wake from sleep on July 4, 2016, at
     8PM.

     pmset schedule wake ""07/04/16 20:00:00""

     Schedules a repeating shutdown to occur each day, Tuesday through Satur-
     day, at 11AM.

     pmset repeat shutdown TWRFS 11:00:00

     Schedules a repeating wake or power on event every tuesday at 12:00 noon,
     and a repeating sleep event every night at 8:00 PM.

     pmset repeat wakeorpoweron T 12:00:00 sleep MTWRFSU 20:00:00

     Prints the power management settings in use by the system.

     pmset -g

     Prints a snapshot of battery/power source state at the moment.

     pmset -g batt

     If your system suddenly sleeps on battery power with 20-50% of capacity
     remaining, leave this command running in a Terminal window. When you see
     the problem and later power and wake the computer, you'll be able to
     detect sudden discontinuities (like a jump from 30% to 0%) indicative of
     an aging battery.

     pmset -g pslog

SEE ALSO
     caffeinate(8)

FILES
     All changes made through pmset are saved in a persistent preferences file
     (per-system, not per-user) at
     /Library/Preferences/SystemConfiguration/com.apple.PowerManagement.plist

     Scheduled power on/off events are stored separately in
     /Library/Preferences/SystemConfiguration/com.apple.AutoWake.plist

     pmset modifies the same file that System Preferences Energy Saver modi-
     fies.

Darwin			       November 9, 2012 			Darwin
","# pmset

> Configure macOS power management settings, as one might do in System Preferences > Energy Saver.
> Commands that modify settings must begin with `sudo`.

- Display the current power management settings:

`pmset -g`

- Display the current power source and battery levels:

`pmset -g batt`

- Set display to never sleep when on charger power:

`sudo pmset -c displaysleep 0`

- Set display to sleep after 15 minutes when on battery power:

`sudo pmset -b displaysleep 15`

- Schedule computer to automatically wake up every weekday at 9 AM:

`sudo pmset repeat wake MTWRF 09:00:00`

- Restore to system defaults:

`sudo pmset -a displaysleep 10 disksleep 10 sleep 30 womp 1`
"
open,,,"
OPEN(1) 		  BSD General Commands Manual		       OPEN(1)

NAME
     open -- open files and directories

SYNOPSIS
     open [-e] [-t] [-f] [-F] [-W] [-R] [-n] [-g] [-j] [-h] [-s sdk]
	  [-b bundle_identifier] [-a application] file ... [--args arg1 ...]

DESCRIPTION
     The open command opens a file (or a directory or URL), just as if you had
     double-clicked the file's icon. If no application name is specified, the
     default application as determined via LaunchServices is used to open the
     specified files.

     If the file is in the form of a URL, the file will be opened as a URL.

     You can specify one or more file names (or pathnames), which are inter-
     preted relative to the shell or Terminal window's current working direc-
     tory. For example, the following command would open all Word files in the
     current working directory:

     open *.doc

     Opened applications inherit environment variables just as if you had
     launched the application directly through its full path.  This behavior
     was also present in Tiger.

     The options are as follows:

     -a application
	 Specifies the application to use for opening the file

     -b bundle_indentifier
	 Specifies the bundle identifier for the application to use when open-
	 ing the file

     -e  Causes the file to be opened with /Applications/TextEdit

     -t  Causes the file to be opened with the default text editor, as deter-
	 mined via LaunchServices

     -f  Reads input from standard input and opens the results in the default
	 text editor.  End input by sending EOF character (type Control-D).
	 Also useful for piping output to open and having it open in the
	 default text editor.

     -F  Opens the application ""fresh,"" that is, without restoring windows.
	 Saved persistent state is lost, except for Untitled documents.

     -W  Causes open to wait until the applications it opens (or that were
	 already open) have exited.  Use with the -n flag to allow open to
	 function as an appropriate app for the $EDITOR environment variable.

     -R  Reveals the file(s) in the Finder instead of opening them.

     -n  Open a new instance of the application(s) even if one is already run-
	 ning.

     -g  Do not bring the application to the foreground.

     -j  Launches the app hidden.

     -h  Searches header locations for a header whose name matches the given
	 string and then opens it.  Pass a full header name (such as NSView.h)
	 for increased performance.

     -s  For -h, partial or full SDK name to use; if supplied, only SDKs whose
	 names contain the argument value are searched. Otherwise the highest
	 versioned SDK in each platform is used.

     --args
	 All remaining arguments are passed to the opened application in the
	 argv parameter to main().  These arguments are not opened or inter-
	 preted by the open tool.

EXAMPLES
     ""open '/Volumes/Macintosh HD/foo.txt'"" opens the document in the default
     application for its type (as determined by LaunchServices).

     ""open '/Volumes/Macintosh HD/Applications/'"" opens that directory in the
     Finder.

     ""open -a /Applications/TextEdit.app '/Volumes/Macintosh HD/foo.txt'""
     opens the document in the application specified (in this case, TextEdit).

     ""open -b com.apple.TextEdit '/Volumes/Macintosh HD/foo.txt'"" opens the
     document in the application specified (in this case, TextEdit).

     ""open -e '/Volumes/Macintosh HD/foo.txt'"" opens the document in TextEdit.

     ""ls | open -f"" writes the output of the 'ls' command to a file in /tmp
     and opens the file in the default text editor (as determined by Launch-
     Services).

     ""open http://www.apple.com/"" opens the URL in the default browser.

     ""open 'file://localhost/Volumes/Macintosh HD/foo.txt'"" opens the document
     in the default application for its type (as determined by LaunchSer-
     vices).

     ""open 'file://localhost/Volumes/Macintosh HD/Applications/'"" opens that
     directory in the Finder.

     ""open -h NSView"" lists headers whose names contain NSView and allows you
     to choose which ones to open.

     ""open -h NSView.h"" immediately opens NSView.h.

     ""open -h NSView -s OSX10.12"" lists headers whose names contain NSView in
     the MacOSX 10.12 SDK and allows you to choose which ones to open.

HISTORY
     First appeared in NextStep.

macOS				April 14, 2017				 macOS
","# open

> Opens files, directories and applications.

- Open a file with the associated application:

`open {{file.ext}}`

- Run a graphical macOS application:

`open -a {{Application}}`

- Run a graphical macOS app based on the bundle identifier (refer to `osascript` for an easy way to get this):

`open -b {{com.domain.application}}`

- Open the current directory in Finder:

`open .`

- Reveal a file in Finder:

`open -R {{path/to/file}}`

- Open all the files of a given extension in the current directory with the associated application:

`open {{*.ext}}`
"
stat,,,"
STAT(1) 		  BSD General Commands Manual		       STAT(1)

NAME
     readlink, stat -- display file status

SYNOPSIS
     stat [-FLnq] [-f format | -l | -r | -s | -x] [-t timefmt] [file ...]
     readlink [-n] [file ...]

DESCRIPTION
     The stat utility displays information about the file pointed to by file.
     Read, write or execute permissions of the named file are not required,
     but all directories listed in the path name leading to the file must be
     searchable.  If no argument is given, stat displays information about the
     file descriptor for standard input.

     When invoked as readlink, only the target of the symbolic link is
     printed.  If the given argument is not a symbolic link, readlink will
     print nothing and exit with an error.

     The information displayed is obtained by calling lstat(2) with the given
     argument and evaluating the returned structure.

     The options are as follows:

     -F      As in ls(1), display a slash (`/') immediately after each path-
	     name that is a directory, an asterisk (`*') after each that is
	     executable, an at sign (`@') after each symbolic link, a percent
	     sign (`%') after each whiteout, an equal sign (`=') after each
	     socket, and a vertical bar (`|') after each that is a FIFO.  The
	     use of -F implies -l.

     -f format
	     Display information using the specified format.  See the FORMATS
	     section for a description of valid formats.

     -L      Use stat(2) instead of lstat(2).  The information reported by
	     stat will refer to the target of file, if file is a symbolic
	     link, and not to file itself.

     -l      Display output in ls -lT format.

     -n      Do not force a newline to appear at the end of each piece of out-
	     put.

     -q      Suppress failure messages if calls to stat(2) or lstat(2) fail.
	     When run as readlink, error messages are automatically sup-
	     pressed.

     -r      Display raw information.  That is, for all the fields in the stat
	     structure, display the raw, numerical value (for example, times
	     in seconds since the epoch, etc.).

     -s      Display information in ``shell output'', suitable for initializ-
	     ing variables.

     -t timefmt
	     Display timestamps using the specified format.  This format is
	     passed directly to strftime(3).

     -x      Display information in a more verbose way as known from some
	     Linux distributions.

   Formats
     Format strings are similar to printf(3) formats in that they start with
     %, are then followed by a sequence of formatting characters, and end in a
     character that selects the field of the struct stat which is to be for-
     matted.  If the % is immediately followed by one of n, t, %, or @, then a
     newline character, a tab character, a percent character, or the current
     file number is printed, otherwise the string is examined for the follow-
     ing:

     Any of the following optional flags:

     #	     Selects an alternate output form for octal and hexadecimal out-
	     put.  Non-zero octal output will have a leading zero, and non-
	     zero hexadecimal output will have ``0x'' prepended to it.

     +	     Asserts that a sign indicating whether a number is positive or
	     negative should always be printed.  Non-negative numbers are not
	     usually printed with a sign.

     -	     Aligns string output to the left of the field, instead of to the
	     right.

     0	     Sets the fill character for left padding to the `0' character,
	     instead of a space.

     space   Reserves a space at the front of non-negative signed output
	     fields.  A `+' overrides a space if both are used.

     Then the following fields:

     size    An optional decimal digit string specifying the minimum field
	     width.

     prec    An optional precision composed of a decimal point `.' and a deci-
	     mal digit string that indicates the maximum string length, the
	     number of digits to appear after the decimal point in floating
	     point output, or the minimum number of digits to appear in
	     numeric output.

     fmt     An optional output format specifier which is one of D, O, U, X,
	     F, or S.  These represent signed decimal output, octal output,
	     unsigned decimal output, hexadecimal output, floating point out-
	     put, and string output, respectively.  Some output formats do not
	     apply to all fields.  Floating point output only applies to
	     timespec fields (the a, m, and c fields).

	     The special output specifier S may be used to indicate that the
	     output, if applicable, should be in string format.  May be used
	     in combination with:

	     amc     Display date in strftime(3) format.

	     dr      Display actual device name.

	     gu      Display group or user name.

	     p	     Display the mode of file as in ls -lTd.

	     N	     Displays the name of file.

	     T	     Displays the type of file.

	     Y	     Insert a `` -> '' into the output.  Note that the default
		     output format for Y is a string, but if specified explic-
		     itly, these four characters are prepended.

     sub     An optional sub field specifier (high, middle, low).  Only
	     applies to the p, d, r, and T output formats.  It can be one of
	     the following:

	     H	     ``High'' -- specifies the major number for devices from r
		     or d, the ``user'' bits for permissions from the string
		     form of p, the file ``type'' bits from the numeric forms
		     of p, and the long output form of T.

	     L	     ``Low'' -- specifies the minor number for devices from r
		     or d, the ``other'' bits for permissions from the string
		     form of p, the ``user'', ``group'', and ``other'' bits
		     from the numeric forms of p, and the ls -F style output
		     character for file type when used with T (the use of L
		     for this is optional).

	     M	     ``Middle'' -- specifies the ``group'' bits for permis-
		     sions from the string output form of p, or the ``suid'',
		     ``sgid'', and ``sticky'' bits for the numeric forms of p.

     datum   A required field specifier, being one of the following:

	     d	     Device upon which file resides.

	     i	     file's inode number.

	     p	     File type and permissions.

	     l	     Number of hard links to file.

	     u, g    User ID and group ID of file's owner.

	     r	     Device number for character and block device special
		     files.

	     a, m, c, B
		     The time file was last accessed or modified, of when the
		     inode was last changed, or the birth time of the inode.

	     z	     The size of file in bytes.

	     b	     Number of blocks allocated for file.

	     k	     Optimal file system I/O operation block size.

	     f	     User defined flags for file.

	     v	     Inode generation number.

	     The following four field specifiers are not drawn directly from
	     the data in struct stat, but are:

	     N	     The name of the file.

	     T	     The file type, either as in ls -F or in a more descrip-
		     tive form if the sub field specifier H is given.

	     Y	     The target of a symbolic link.

	     Z	     Expands to ``major,minor'' from the rdev field for char-
		     acter or block special devices and gives size output for
		     all others.

     Only the % and the field specifier are required.  Most field specifiers
     default to U as an output form, with the exception of p which defaults to
     O, a, m, and c which default to D, and Y, T, and N which default to S.

EXIT STATUS
     The stat and readlink utilities exit 0 on success, and >0 if an error
     occurs.

EXAMPLES
     Given a symbolic link foo that points from /tmp/foo to /, you would use
     stat as follows:

	   > stat -F /tmp/foo
	   lrwxrwxrwx 1 jschauma cs 1 Apr 24 16:37:28 2002 /tmp/foo@ -> /

	   > stat -LF /tmp/foo
	   drwxr-xr-x 16 root wheel 512 Apr 19 10:57:54 2002 /tmp/foo/

     To initialize some shell variables, you could use the -s flag as follows:

	   > csh
	   % eval set `stat -s .cshrc`
	   % echo $st_size $st_mtimespec
	   1148 1015432481

	   > sh
	   $ eval $(stat -s .profile)
	   $ echo $st_size $st_mtimespec
	   1148 1015432481

     In order to get a list of the kind of files including files pointed to if
     the file is a symbolic link, you could use the following format:

	   $ stat -f ""%N: %HT%SY"" /tmp/*
	   /tmp/bar: Symbolic Link -> /tmp/foo
	   /tmp/output25568: Regular File
	   /tmp/blah: Directory
	   /tmp/foo: Symbolic Link -> /

     In order to get a list of the devices, their types and the major and
     minor device numbers, formatted with tabs and linebreaks, you could use
     the following format:

	   stat -f ""Name: %N%n%tType: %HT%n%tMajor: %Hr%n%tMinor: %Lr%n%n"" /dev/*
	   [...]
	   Name: /dev/wt8
		   Type: Block Device
		   Major: 3
		   Minor: 8

	   Name: /dev/zero
		   Type: Character Device
		   Major: 2
		   Minor: 12

     In order to determine the permissions set on a file separately, you could
     use the following format:

	   > stat -f ""%Sp -> owner=%SHp group=%SMp other=%SLp"" .
	   drwxr-xr-x -> owner=rwx group=r-x other=r-x

     In order to determine the three files that have been modified most
     recently, you could use the following format:

	   > stat -f ""%m%t%Sm %N"" /tmp/* | sort -rn | head -3 | cut -f2-
	   Apr 25 11:47:00 2002 /tmp/blah
	   Apr 25 10:36:34 2002 /tmp/bar
	   Apr 24 16:47:35 2002 /tmp/foo

SEE ALSO
     file(1), ls(1), lstat(2), readlink(2), stat(2), printf(3), strftime(3)

HISTORY
     The stat utility appeared in NetBSD 1.6 and FreeBSD 4.10.

AUTHORS
     The stat utility was written by Andrew Brown <atatat@NetBSD.org>.	This
     man page was written by Jan Schaumann <jschauma@NetBSD.org>.

BSD				  May 8, 2003				   BSD
","# stat

> Display file status.

- Show file properties such as size, permissions, creation and access dates among others:

`stat {{file}}`

- Same as above but verbose (more similar to linux's `stat`):

`stat -x {{file}}`

- Show only octal file permissions:

`stat -f %Mp%Lp {{file}}`

- Show owner and group of the file:

`stat -f ""%Su %Sg"" {{file}}`

- Show the size of the file in bytes:

`stat -f ""%z %N"" {{file}}`
"
runit,,,,"# runit

> 3-stage init system.

- Start runit's 3-stage init scheme:

`runit`

- Shut down runit:

`kill --CONT {{runit_pid}}`
"
nm,,,"NM(1)									 NM(1)



NAME
       nm - display name list (symbol table)

SYNOPSIS
       llvm-nm [ -agnoprumxjlPA ] [ - ] [ -t format ] [[ -arch arch_flag ]...]
       [ file ... ] [ -s segname sectname ]

       nm-classic [ -agnoprumxjlfPA [ s segname sectname ]] [ - ] [ -t	format
       ] [[ -arch arch_flag ]...] [ file ... ]

DESCRIPTION
       As  of  Xcode  8.0  the default nm(1) tool is llvm-nm(1).  They for the
       most part have the same options except for -f and -s which the  differ-
       ences are noted below.  More help on options for llvm-nm(1) is provided
       when running it with the --help option.

       Nm displays the name list (symbol table of nlist  structures)  of  each
       object  file  in  the  argument list.  In some cases, as with an object
       that has had strip(1) with its -T option used on the object,  that  can
       be different than the dyld information.	For that information use dyld-
       info(1).

       If an argument is an archive, a listing for each object file in the ar-
       chive  will be produced.  File can be of the form libx.a(x.o), in which
       case only symbols from that member of the object file are listed.  (The
       parentheses  have  to  be  quoted  to get by the shell.)  If no file is
       given, the symbols in a.out are listed.

       Each symbol name is  preceded  by  its  value  (blanks  if  undefined).
       Unless the -m option is specified, this value is followed by one of the
       following characters, representing the symbol type:  U  (undefined),  A
       (absolute),  T  (text  section symbol), D (data section symbol), B (bss
       section symbol), C  (common  symbol),  -  (for  debugger  symbol  table
       entries; see -a below), S (symbol in a section other than those above),
       or I (indirect symbol).	If the symbol  is  local  (non-external),  the
       symbol's  type  is  instead  represented by the corresponding lowercase
       letter.	A lower case u in a dynamic shared library indicates  a  unde-
       fined  reference  to  a	private external in another module in the same
       library.

       If  the	symbol	is  a  Objective  C  method,  the   symbol   name   is
       +-[Class_name(category_name)  method:name:],  where  `+'  is  for class
       methods, `-' is for instance methods, and  (category_name)  is  present
       only when the method is in a category.

       The output is sorted alphabetically by default.

       Options are:

       -a     Display  all  symbol table entries, including those inserted for
	      use by debuggers.

       -g     Display only global (external) symbols.

       -n     Sort numerically rather than alphabetically.

       -o     Prepend file or archive element name to each output line, rather
	      than only once.

       -p     Don't sort; display in symbol-table order.

       -r     Sort in reverse order.

       -u     Display only undefined symbols.

       -U     Don't display undefined symbols.

       -m     Display  the  N_SECT  type  symbols  (Mach-O  symbols)  as (seg-
	      ment_name, section_name) followed by  either  external  or  non-
	      external	and then the symbol name.  Undefined, common, absolute
	      and indirect symbols get	displayed  as  (undefined),  (common),
	      (absolute), and (indirect), respectively.

       -x     Display  the  symbol  table entry's fields in hexadecimal, along
	      with the name as a string.

       -j     Just display the symbol names (no value or type).

       -s segname sectname
	      List only those symbols in the section (segname,sectname).   For
	      llvm-nm(1)  this	option	must  be last on the command line, and
	      after the files.

       -l     List a pseudo symbol .section_start if  no  symbol  has  as  its
	      value  the  starting address of the section.  (This is used with
	      the -s option above.)

       -arch arch_type
	      Specifies the architecture, arch_type, of the file for nm(1)  to
	      operate  on  when  the file is a universal file (see arch(3) for
	      the currently known arch_types).	The arch_type can be ""all""  to
	      operate  on  all	architectures  in the file.  The default is to
	      display the symbols from only the host architecture, if the file
	      contains	it;  otherwise,  symbols  for all architectures in the
	      file are displayed.

       -f  format
	      For llvm-nm(1) this specifies the output format.	 Where	format
	      can be bsd, sysv, posix or darwin.

       -f     For  nm-classic(1)  this	displays the symbol table of a dynamic
	      library flat (as one file not separate modules).	This is  obso-
	      lete and not supported with llvm-nm(1).

       -A     Write the pathname or library name of an object on each line.

       -P     Write information in a portable output format.

       -t format
	      For the -P output, write the numeric value in the specified for-
	      mat. The format shall be dependent on the single character  used
	      as the format option-argument:

       d      The value shall be written in decimal (default).

       o      The value shall be written in octal.

       x      The value shall be written in hexadecimal.

       -L     Display  the  symbols in the bitcode files in the (__LLVM,__bun-
	      dle) section if present instead of the  object's	symbol	table.
	      This  is the default if the object has no symbol table and there
	      is an (__LLVM,__bundle) section.

SEE ALSO
       ar(1), ar(5), Mach-O(5), stab(5), nlist(3), dyldinfo(1)

BUGS
       Displaying Mach-O symbols with -m is too verbose.  Without the -m, sym-
       bols in the Objective C sections get displayed as an `s'.



Apple, Inc.			 May 23, 2017				 NM(1)
","# nm

> List symbol names in object files.

- List global (extern) functions in a file (prefixed with T):

`nm -g {{file.o}}`

- List only undefined symbols in a file:

`nm -u {{file.o}}`

- List all symbols, even debugging symbols:

`nm -a {{file.o}}`

- Demangle C++ symbols (make them readable):

`nm -demangle {{file.o}}`
"
defaults,,,"
DEFAULTS(1)		  BSD General Commands Manual		   DEFAULTS(1)

NAME
     defaults -- access the Mac OS X user defaults system

SYNOPSIS
     defaults [-currentHost | -host hostname] read [domain [key]]

     defaults [-currentHost | -host hostname] read-type domain key

     defaults [-currentHost | -host hostname] write domain { 'plist' | key
	      'value' }

     defaults [-currentHost | -host hostname] rename domain old_key new_key

     defaults [-currentHost | -host hostname] delete [domain [key]]

     defaults [-currentHost | -host hostname] { domains | find word | help }

DESCRIPTION
     Defaults allows users to read, write, and delete Mac OS X user defaults
     from a command-line shell. Mac OS X applications and other programs use
     the defaults system to record user preferences and other information that
     must be maintained when the applications aren't running (such as default
     font for new documents, or the position of an Info panel). Much of this
     information is accessible through an application's Preferences panel, but
     some of it isn't, such as the position of the Info panel. You can access
     this information with defaults

     Note: Since applications do access the defaults system while they're run-
     ning, you shouldn't modify the defaults of a running application. If you
     change a default in a domain that belongs to a running application, the
     application won't see the change and might even overwrite the default.

     User defaults belong to domains, which typically correspond to individual
     applications. Each domain has a dictionary of keys and values represent-
     ing its defaults; for example, ""Default Font"" = ""Helvetica"". Keys are
     always strings, but values can be complex data structures comprising
     arrays, dictionaries, strings, and binary data. These data structures are
     stored as XML Property Lists.

     Though all applications, system services, and other programs have their
     own domains, they also share a domain named NSGlobalDomain.  If a default
     isn't specified in the application's domain, but is specified in
     NSGlobalDomain, then the application uses the value in that domain.

     The commands are as follows:

     read	  Prints all of the user's defaults, for every domain, to
		  standard output.

     read domain  Prints all of the user's defaults for domain to standard
		  output.

     read domain key
		  Prints the value for the default of domain identified by
		  key.

     read-type domain key
		  Prints the plist type for the given domain identified by
		  key.

     write domain key 'value'
		  Writes value as the value for key in domain.	value must be
		  a property list, and must be enclosed in single quotes.  For
		  example:

			defaults write com.companyname.appname ""Default Color"" '(255, 0, 0)'

		  sets the value for Default Color to an array containing the
		  strings 255, 0, 0 (the red, green, and blue components).
		  Note that the key is enclosed in quotation marks because it
		  contains a space.

     write domain 'plist'
		  Overwrites the defaults information in domain with that
		  given as plist.  plist must be a property list representa-
		  tion of a dictionary, and must be enclosed in single quotes.
		  For example:

			defaults write com.companyname.appname '{ ""Default Color"" = (255, 0, 0);
							""Default Font"" = Helvetica; }';

		  erases any previous defaults for com.companyname.appname and
		  writes the values for the two names into the defaults sys-
		  tem.

     delete domain
		  Removes all default information for domain.

     delete domain key
		  Removes the default named key from domain.

     domains	  Prints the names of all domains in the user's defaults sys-
		  tem.

     find word	  Searches for word in the domain names, keys, and values of
		  the user's defaults, and prints out a list of matches.

     help	  Prints a list of possible command formats.

OPTIONS
     Specifying domains:

     domain    If no flag is specified, domain is a domain name of the form
	       com.companyname.appname.  Example:

		     defaults read com.apple.TextEdit

     -app application
	       The name of an application may be provided instead of a domain
	       using the -app flag. Example:

		     defaults read -app TextEdit

     filepath  Domains may also be specified as a path to an arbitrary plist
	       file, with or without the '.plist' extension. For example:

		     defaults read ~/Library/Containers/com.apple.TextEdit/Data/Library/Preferences/com.apple.TextEdit.plist

	       normally gives the same result as the two previous examples.
	       In the following example:

		     defaults write ~/Desktop/TestFile foo bar

	       will write the key 'foo' with the value 'bar' into the plist
	       file 'TestFile.plist' that is on the user's desktop. If the
	       file does not exist, it will be created. If it does exist, the
	       key-value pair will be added, overwriting the value of 'foo' if
	       it already existed.

	       WARNING: The defaults command will be changed in an upcoming
	       major release to only operate on preferences domains. General
	       plist manipulation utilities will be folded into a different
	       command-line program.

     -g | -globalDomain | NSGlobalDomain
	       Specify the global domain. '-g' and '-globalDomain' may be used
	       as synonyms for NSGlobalDomain.

     Specifying value types for preference keys:

		 If no type flag is provided, defaults will assume the value
		 is a string. For best results, use one of the type flags,
		 listed below.

     -string	 Allows the user to specify a string as the value for the
		 given preference key.

     -data	 Allows the user to specify a bunch of raw data bytes as the
		 value for the given preference key.  The data must be pro-
		 vided in hexidecimal.

     -int[eger]  Allows the user to specify an integer as the value for the
		 given preference key.

     -float	 Allows the user to specify a floating point number as the
		 value for the given preference key.

     -bool[ean]  Allows the user to specify a boolean as the value for the
		 given preference key.	Value must be TRUE, FALSE, YES, or NO.

     -date	 Allows the user to specify a date as the value for the given
		 preference key.

     -array	 Allows the user to specify an array as the value for the
		 given preference key:

		       defaults write somedomain preferenceKey -array element1 element2 element3

		 The specified array overwrites the value of the key if the
		 key was present at the time of the write. If the key was not
		 present, it is created with the new value.

     -array-add  Allows the user to add new elements to the end of an array
		 for a key which has an array as its value. Usage is the same
		 as -array above. If the key was not present, it is created
		 with the specified array as its value.

     -dict	 Allows the user to add a dictionary to the defaults database
		 for a domain.	Keys and values are specified in order:

		       defaults write somedomain preferenceKey -dict key1 value1 key2 value2

		 The specified dictionary overwrites the value of the key if
		 the key was present at the time of the write. If the key was
		 not present, it is created with the new value.

     -dict-add	 Allows the user to add new key/value pairs to a dictionary
		 for a key which has a dictionary as its value. Usage is the
		 same as -dict above. If the key was not present, it is cre-
		 ated with the specified dictionary as its value.

     Specifying a host for preferences:

     Operations on the defaults database normally apply to any host the user
     may log in on, but may be restricted to apply only to a specific host.

	       If no host is provided, preferences operations will apply to
	       any host the user may log in on.

     -currentHost
	       Restricts preferences operations to the host the user is cur-
	       rently logged in on.

     -host hostname
	       Restricts preferences operations to hostname.

BUGS
     Defaults can be structured in very complex ways, making it difficult for
     the user to enter them with this command.

HISTORY
     First appeared in NeXTStep.

Mac OS X			  Nov 3, 2003			      Mac OS X
","# defaults

> Read and write macOS user configuration for applications.

- Read system defaults for an application option:

`defaults read {{application}} {{option}}`

- Read default values for an application option:

`defaults read -app {{application}} {{option}}`

- Write the default value of an application option:

`defaults write {{application}} {{option}} {{-type}} {{value}}`

- Speed up Mission Control animations:

`defaults write com.apple.Dock expose-animation-duration -float 0.1`

- Delete all defaults of an application:

`defaults delete {{application}}`
"
runsvchdir,,,,"# runsvchdir

> Change the directory `runsvdir` uses by default.

- Switch `runsvdir` directories:

`sudo runsvchdir {{/path/to/directory}}`
"
textutil,,,"
TEXTUTIL(1)		  BSD General Commands Manual		   TEXTUTIL(1)

NAME
     textutil -- text utility

SYNOPSIS
     textutil [command_option] [other_options] file ...

DESCRIPTION
     textutil can be used to manipulate text files of various formats, using
     the mechanisms provided by the Cocoa text system.

     The first argument indicates the operation to perform, one of:

     -help	   Show the usage information for the command and exit.  This
		   is the default command option if none is specified.

     -info	   Display information about the specified files.

     -convert fmt  Convert the specified files to the indicated format and
		   write each one back to the file system.

     -cat fmt	   Read the specified files, concatenate them, and write the
		   result out as a single file in the indicated format.

		   fmt is one of:  txt, html, rtf, rtfd, doc, docx, wordml,
				   odt, or webarchive

     There are some additional options for general use:

     -extension ext  Specify an extension to be used for output files (by
		     default, the extension will be determined from the for-
		     mat).

     -output path    Specify the file name to be used for the first output
		     file.

     -stdin	     Specify that input should be read from stdin rather than
		     from files.

     -stdout	     Specify that the first output file should go to stdout.

     -encoding IANA_name | NSStringEncoding
		     Specify the encoding to be used for plain text or HTML
		     output files (by default, the output encoding will be
		     UTF-8).  NSStringEncoding refers to one of the numeric
		     values recognized by NSString.  IANA_name refers to an
		     IANA character set name as understood by CFString.  The
		     operation will fail if the file cannot be converted to
		     the specified encoding.

     -inputencoding IANA_name | NSStringEncoding
		     Force all plain text input files to be interpreted using
		     the specified encoding (by default, a file's encoding
		     will be determined from its BOM).	The operation will
		     fail if the file cannot be interpreted using the speci-
		     fied encoding.

     -format fmt     Force all input files to be interpreted using the indi-
		     cated format (by default, a file's format will be deter-
		     mined from its contents).

     -font font      Specify the name of the font to be used for converting
		     plain to rich text.

     -fontsize size  Specify the size in points of the font to be used for
		     converting plain to rich text.

     -- 	     Specify that all further arguments are file names.

     There are some additional options for HTML and WebArchive files:

     -noload	      Do not load subsidiary resources.

     -nostore	      Do not write out subsidiary resources.

     -baseurl url     Specify a base URL to be used for relative URLs.

     -timeout t       Specify the time in seconds to wait for resources to
		      load.

     -textsizemultiplier x
		      Specify a numeric factor by which to multiply font
		      sizes.

     -excludedelements (tag1, tag2, ...)
		      Specify which HTML elements should not be used in gener-
		      ated HTML (the list should be a single argument, and so
		      will usually need to be quoted in a shell context).

     -prefixspaces n  Specify the number of spaces by which to indent nested
		      elements in generated HTML (default is 2).

     There are some additional options for treating metadata:

     -strip	   Do not copy metadata from input files to output files.

     -title val    Specify the title metadata attribute for output files.

     -author val   Specify the author metadata attribute for output files.

     -subject val  Specify the subject metadata attribute for output files.

     -keywords (val1, val2, ...)
		   Specify the keywords metadata attribute for output files
		   (the list should be a single argument, and so will usually
		   need to be quoted in a shell context).

     -comment val  Specify the comment metadata attribute for output files.

     -editor val   Specify the editor metadata attribute for output files.

     -company val  Specify the company metadata attribute for output files.

     -creationtime yyyy-mm-ddThh:mm:ssZ
		   Specify the creation time metadata attribute for output
		   files.

     -modificationtime yyyy-mm-ddThh:mm:ssZ
		   Specify the modification time metadata attribute for output
		   files.

EXAMPLES
	 textutil -info foo.rtf

     displays information about foo.rtf.

	 textutil -convert html foo.rtf

     converts foo.rtf into foo.html.

	 textutil -convert rtf -font Times -fontsize 10 foo.txt

     converts foo.txt into foo.rtf, using Times 10 for the font.

	 textutil -cat html -title ""Several Files"" -output index.html *.rtf

     loads all RTF files in the current directory, concatenates their con-
     tents, and writes the result out as index.html with the HTML title set to
     ""Several Files"".

DIAGNOSTICS
     The textutil command exits 0 on success, and 1 on failure.

CAUTIONS
     Some options may require a connection to the window server.

HISTORY
     The textutil command first appeared in Mac OS X 10.4.

macOS			       September 9, 2004			 macOS
","# textutil

> Used to manipulate text files of various formats.

- Display information about foo.rtf:

`textutil -info {{foo.rtf}}`

- Convert foo.rtf into foo.html:

`textutil -convert {{html}} {{foo.rtf}}`

- Convert rich text to normal text:

`textutil {{foo.rtf}} -convert {{txt}}`

- Convert foo.txt into foo.rtf, using Times 10 for the font:

`textutil -convert {{rtf}} -font {{Times}} -fontsize {{10}} {{foo.txt}}`

- Load all RTF files in the current directory, concatenates their contents, and writes the result out as index.html with the HTML title set to ""Several Files"":

`textutil -cat {{html}} -title ""Several Files"" -output {{index.html}} *.rtf`
"
xattr,,,"
XATTR(1)		  BSD General Commands Manual		      XATTR(1)

NAME
     xattr -- display and manipulate extended attributes

SYNOPSIS
     xattr [-lrsvx] file ...
     xattr -p [-lrsvx] attr_name file ...
     xattr -w [-rsx] attr_name attr_value file ...
     xattr -d [-rsv] attr_name file ...
     xattr -c [-rsv] file ...
     xattr -h | --help

DESCRIPTION
     The xattr command can be used to display, modify or remove the extended
     attributes of one or more files, including directories and symbolic
     links.  Extended attributes are arbitrary metadata stored with a file,
     but separate from the filesystem attributes (such as modification time or
     file size).  The metadata is often a null-terminated UTF-8 string, but
     can also be arbitrary binary data.

     One or more files may be specified on the command line.  For the first
     two forms of the command, when there are more than one file, the file
     name is displayed along with the actual results.  When only one file is
     specified, the display of the file name is usually suppressed (unless the
     -v option described below, is also specified).

     In the first form of the command (without any other mode option speci-
     fied), the names of all extended attributes are listed.  Attribute names
     can also be displayed using ``ls -l@''.

     In the second form, using the -p option (``print''), the value associated
     with the given attribute name is displayed.  Attribute values are usually
     displayed as strings.  However, if nils are detected in the data, the
     value is displayed in a hexadecimal representation.

     The third form, with the -w option (``write''), causes the given
     attribute name to be assigned the given value.

     The fourth form, with the -d option (``delete''), causes the given
     attribute name (and associated value), to be removed.

     In the fifth form, with the -c option (``clear''), causes all attributes
     (including their associated values), to be removed.

     Finally, the last form, with either the -h or --help option, displays a
     short help message and exits immediately.

OPTIONS
     -l  By default, the first two command forms either displays just the
	 attribute names or values, respectively.  The -l option causes both
	 the attribute names and corresponding values to be displayed.	For
	 hexadecimal display of values, the output is preceeded with the hexa-
	 decimal offset values and followed by ASCII display, enclosed by
	 ``|''.

     -r  If a file argument is a directory, act as if the entire contents of
	 the directory recursively were also specified (so that every file in
	 the directory tree is acted upon).

     -s  If a file argument is a symbolic link, act on the symbolic link
	 itself, rather than the file that the symbolic link points at.

     -v  Force the the file name to be displayed, even for a single file.

     -x  Force the attribute value to be displayed in the hexadecimal repre-
	 sentation.

	 The -w option normally assumes the input attribute value is a string.
	 Specifying the -x option causes xattr to expect the input in hexadec-
	 imal (whitespace is ignored).	The xxd(1) command can be used to cre-
	 ate hexadecimal representations from exising binary data, to pass to
	 xattr.

EXIT STATUS
     The xattr command exits with zero status on success.  On error, non-zero
     is returned, and an error message is printed to the standard error.  For
     system call errors, both the error code and error string are printed (see
     getxattr(2), listxattr(2), removexattr(2) and setxattr(2) for a complete
     list of possible error codes).

     Some attribute data may have a fixed length that is enforced by the sys-
     tem.  For example,

	   % xattr -w com.apple.FinderInfo 0 foo
	   xattr: [Errno 34] Result too large: 'foo'

     The com.apple.FinderInfo attribute must be 32 bytes in length.

EXAMPLES
     This example copies the com.apple.FinderInfo attribute from the /usr
     directory to the MyDir directory:

	   % xattr -px com.apple.FinderInfo /usr
	   00 00 00 00 00 00 00 00 40 00 00 00 00 00 00 00
	   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
	   % xattr -l MyDir
	   % xattr -wx com.apple.FinderInfo \
	     ""`xattr -px com.apple.FinderInfo /usr`"" MyDir
	   % xattr -l MyDir
	   com.apple.FinderInfo:
	   00000000  00 00 00 00 00 00 00 00 40 00 00 00 00 00 00 00  |........@.......|
	   00000010  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  |................|
	   00000020

SEE ALSO
     ls(1), xxd(1), getxattr(2), listxattr(2), removexattr(2), setxattr(2)

BSD				 Nov 29, 2010				   BSD
","# xattr

> Utility to work with extended filesystem attributes.

- List key:value extended attributes for a given file:

`xattr -l {{file}}`

- Write an attribute for a given file:

`xattr -w {{attribute_key}} {{attribute_value}} {{file}}`

- Delete an attribute from a given file:

`xattr -d {{com.apple.quarantine}} {{file}}`

- Delete all extended attributes from a given file:

`xattr -c {{file}}`

- Recursively delete an attribute in a given directory:

`xattr -rd {{attribute_key}} {{directory}}`
"
mdfind,,,"
mdfind(1)		  BSD General Commands Manual		     mdfind(1)

NAME
     mdfind -- finds files matching a given query

SYNOPSIS
     mdfind [-live] [-count] [-onlyin directory] [-name fileName] query

DESCRIPTION
     The mdfind command consults the central metadata store and returns a list
     of files that match the given metadata query. The query can be a string
     or a query expression.

     The following options are available:

     -0 	 Prints an ASCII NUL character after each result path.	This
		 is useful when used in conjunction with xargs -0.

     -live	 Causes the mdfind command to provide live-updates to the num-
		 ber of files matching the query.  When an update causes the
		 query results to change the number of matches is updated.
		 The find can be cancelled by typing ctrl-C.

     -count	 Causes the mdfind command to output the total number of
		 matches, instead of the path to the matching items.

     -onlyin dir
		 Limit the scope of the search to the directory specified.

     -name fileName
		 Searches for matching file names only.

     -literal	 Force the provided query string to be taken as a literal
		 query string, without interpretation.

     -interpret  Force the provided query string to be interpreted as if the
		 user had typed the string into the Spotlight menu.  For exam-
		 ple, the string ""search"" would produce the following query
		 string:
		       (* = search* cdw || kMDItemTextContent = search* cdw)

EXAMPLES
     The following examples are shown as given to the shell.

     This returns all files with any metadata attribute value matching the
     string ""image"":

	   mdfind image

     This returns all files that contain ""MyFavoriteAuthor"" in the kMDItemAu-
     thor metadata attribute:

	   mdfind ""kMDItemAuthors == '*MyFavoriteAuthor*'""

     This returns all files with any metadata attribute value matching the
     string ""skateboard"".  The find continues to run after gathering the ini-
     tial results, providing a count of the number of files that match the
     query.

	   mdfind -live skateboard

     To get a list of the available attributes for use in constructing
     queries, see mdimport(1), particularly the -X switch.

SEE ALSO
     mdimport(1), mdls(1), mdutil(1), xargs(1)

Mac OS X			 June 10, 2004			      Mac OS X
","# mdfind

> List files matching a given query.

- Find a file by its name:

`mdfind -name {{file}}`

- Find a file by its content:

`mdfind {{query}}`

- Find a file containing a string, in a given directory:

`mdfind -onlyin {{directory}} {{query}}`
"
as,,,"AS(1)									 AS(1)



NAME
       as - Mac OS X Mach-O GNU-based assemblers

SYNOPSIS
       as [ option ...	] [ file ...  ]

DESCRIPTION
       The  as	command  translates assembly code in the named files to object
       code.  If no files are specified, as reads from stdin.	All  undefined
       symbols	in  the  assembly  are	treated  as global.  The output of the
       assembly is left in the file a.out by default.

       The program /usr/bin/as is actually a driver that  executes  assemblers
       for specific target architectures.  If no target architecture is speci-
       fied, it defaults to the architecture of the host it is running on.

OPTIONS
       -o name
	      Name the output file name instead of a.out.

       -arch arch_type
	      Specifies the target architecture, arch_type, of	the  assembler
	      to be executed.  The target assemblers for each architecture are
	      in	    /usr/libexec/gcc/darwin/arch_type/as	    or
	      /usr/local/libexec/gcc/darwin/arch_type/as.   There  is only one
	      assembler for an architecture family.  If the  specified	target
	      architecture is a machine-specific implementation, the assembler
	      for   that    architecture    family    is    executed	(e.g.,
	      /usr/libexec/gcc/darwin/ppc/as  for -arch ppc604e).  See arch(3)
	      for the currently known arch_types.

       -arch_multiple
	      Precede any displayed messages with a line stating  the  program
	      name  (as) and the architecture (from the -arch arch_type flag),
	      to distinguish which architecture the error messages  refer  to.
	      When  the cc(1) driver program is run with multiple -arch flags,
	      it invokes as with the -arch_multiple option.

       -force_cpusubtype_ALL
	      By default, the assembler will produce the CPU subtype  ALL  for
	      the  object file it is assembling if it finds no implementation-
	      specific instructions.  Also  by	default,  the  assembler  will
	      allow  implementation-specific instructions and will combine the
	      CPU subtype for those specific implementations.	The  combining
	      of  specific  implementations is architecture-dependent; if some
	      combination of instructions is not allowed, an error  is	gener-
	      ated.    With   the  optional  -force_cpusubtype_ALL  flag,  all
	      instructions are allowed and the object file's CPU subtype  will
	      be  the  ALL subtype.  If the target architecture specified is a
	      machine-specific	implementation	(e.g.,	-arch  ppc603,	 -arch
	      i486),  the  assembler will flag as errors instructions that are
	      not supported on that  architecture,  and  it  will  produce  an
	      object  file  with the CPU subtype for that specific implementa-
	      tion (even if no implementation-specific instructions are used).
	      The  -force_cpusubtype_ALL  flag	is the default for all x86 and
	      x86_64 architectures.

       -dynamic
	      Enables dynamic linking features.  This is the default.

       -static
	      Causes the assembler to treat  as  an  error  any  features  for
	      dynamic linking.	Also causes the .text directive to not include
	      the pure_instructions section attribute.

       --     Use stdin for the assembly source input.

       -n     Instructs the assembler not to assume  that  the	assembly  file
	      starts  with  a .text directive.	Use this option when an output
	      file is not to contain a (__TEXT,__text) section or this section
	      is not to be first one in the output file.

       -f     Fast;  no  need  for  the assembler preprocessor (``app'').  The
	      assembler preprocessor can also be turned off  by  starting  the
	      assembly	file  with  ""#NO_APP\n"".   This is intended for use by
	      compilers which produce assembly code in a strict ""clean"" format
	      that  specifies  exactly where whitespace can go.  The assembler
	      preprocessor needs to be	run  on  hand-written  assembly  files
	      and/or  files  that have been preprocessed by the C preprocessor
	      cpp.  This is typically needed when assembler files  are	assem-
	      bled  through  the use of the cc(1) command, which automatically
	      runs the C preprocessor on assembly source files.  The assembler
	      preprocessor strips out excess spaces, turns single-quoted char-
	      acters into a decimal constants, and turns # <number> <filename>
	      <level>  into  .line <number>;.file <filename>  pairs.  When the
	      assembler preprocessor has been turned off by a  ""#NO_APP\n""  at
	      the start of a file, it can be turned back on and off again with
	      pairs of ""#APP\n"" and ""#NO_APP\n"" at the	beginnings  of	lines.
	      This  is	used  by the compiler to wrap assembly statements pro-
	      duced from asm() statements.

       -g     Produce debugging information for the symbolic  debugger	gdb(1)
	      so  that	the assembly source can be debugged symbolically.  The
	      debugger depends on correct use of the C preprocessor's #include
	      directive  or  the  assembler's .include directive:  Any include
	      file that produces instructions in the  (__TEXT,__text)  section
	      must be included while a .text directive is in effect.  In other
	      words, there must be a .text directive before the  include,  and
	      the  .text  directive  must still be in effect at the end of the
	      include file.  Otherwise, the debugger will get confused when in
	      that assembly file.

       -v     Display  the version of the assembler (both the Mac OS X version
	      and the GNU version it is based on).

       -V     Print the path and the command line of the assembler the	assem-
	      bler driver is using.

       -Idir  Add  the	directory dir to the list of directories to search for
	      files included with the .include directive.  The	default  place
	      to search is the current directory.

       -W     Suppress warnings.

       -L     Save  non-global	defined  labels  beginning  with an 'L'; these
	      labels are normally discarded to save  space  in	the  resultant
	      symbol table.  The compiler generates such temporary labels.

       -q     Use  the	clang(1) integrated assembler instead of the GNU based
	      system assembler.  This is the  default  for  the  x86  and  arm
	      architectures.

       -Q     Use the GNU based system assembler.

Assembler options for the PowerPC processors
       -static_branch_prediction_Y_bit
	      Treat  a	single trailing '+' or '-' after a conditional PowerPC
	      branch instruction as a static branch prediction that  sets  the
	      Y-bit  in the opcode.  Pairs of trailing ""++"" or ""--"" always set
	      the AT-bits. This is the default for Mac OS X.

       -static_branch_prediction_AT_bits
	      Treat a single trailing '+' or '-' after a  conditional  PowerPC
	      branch  instruction  as a static branch prediction that sets the
	      AT-bits in the opcode. Pairs of trailing ""++"" or ""--"" always set
	      the  AT-bits  but  with  this option a warning is issued if this
	      syntax is used.  With this flag the assembler behaves  like  the
	      IBM tools.

       -no_ppc601
	      Treat any PowerPC 601 instructions as an error.

FILES
       a.out	 output file

SEE ALSO
       The  Mac  OS  X	Assembler Reference in the Xcode documentation viewer:
       Perform a title search for ""assembler"" in Apple > Developer Tools  Ref-
       erence Library.
       The assembler source in the cctools module of the Darwin sources.
       cc(1), ld(1), nm(1), otool(1), arch(3), Mach-O(5)



Apple Inc.		       February 12, 2015			 AS(1)
","# as

> Portable GNU assembler.
> Primarily intended to assemble output from `gcc` to be used by `ld`.

- Assemble a file, writing the output to a.out:

`as {{file.s}}`

- Assemble the output to a given file:

`as {{file.s}} -o {{out.o}}`

- Generate output faster by skipping whitespace and comment preprocessing. (Should only be used for trusted compilers):

`as -f {{file.s}}`

- Include a given path to the list of directories to search for files specified in .include directives:

`as -I {{path/to/directory}} {{file.s}}`
"
runsv,,,,"# runsv

> Start and manage a runit service.

- Start a runit service as the current user:

`runsv {{path/to/service}}`

- Start a runit service as root:

`sudo runsv {{path/to/service}}`
"
popd,,,"
BUILTIN(1)		  BSD General Commands Manual		    BUILTIN(1)

NAME
     builtin, !, %, ., :, @, {, }, alias, alloc, bg, bind, bindkey, break,
     breaksw, builtins, case, cd, chdir, command, complete, continue, default,
     dirs, do, done, echo, echotc, elif, else, end, endif, endsw, esac, eval,
     exec, exit, export, false, fc, fg, filetest, fi, for, foreach, getopts,
     glob, goto, hash, hashstat, history, hup, if, jobid, jobs, kill, limit,
     local, log, login, logout, ls-F, nice, nohup, notify, onintr, popd,
     printenv, pushd, pwd, read, readonly, rehash, repeat, return, sched, set,
     setenv, settc, setty, setvar, shift, source, stop, suspend, switch,
     telltc, test, then, time, times, trap, true, type, ulimit, umask,
     unalias, uncomplete, unhash, unlimit, unset, unsetenv, until, wait,
     where, which, while -- shell built-in commands

SYNOPSIS
     builtin [-options] [args ...]

DESCRIPTION
     Shell builtin commands are commands that can be executed within the run-
     ning shell's process.  Note that, in the case of csh(1) builtin commands,
     the command is executed in a subshell if it occurs as any component of a
     pipeline except the last.

     If a command specified to the shell contains a slash ``/'', the shell
     will not execute a builtin command, even if the last component of the
     specified command matches the name of a builtin command.  Thus, while
     specifying ``echo'' causes a builtin command to be executed under shells
     that support the echo builtin command, specifying ``/bin/echo'' or
     ``./echo'' does not.

     While some builtin commands may exist in more than one shell, their oper-
     ation may be different under each shell which supports them.  Below is a
     table which lists shell builtin commands, the standard shells that sup-
     port them and whether they exist as standalone utilities.

     Only builtin commands for the csh(1) and sh(1) shells are listed here.
     Consult a shell's manual page for details on the operation of its builtin
     commands.	Beware that the sh(1) manual page, at least, calls some of
     these commands ``built-in commands'' and some of them ``reserved words''.
     Users of other shells may need to consult an info(1) page or other
     sources of documentation.

     Commands marked ``No**'' under External do exist externally, but are
     implemented as scripts using a builtin command of the same name.

	   Command	 External    csh(1)    sh(1)
	   !		 No	     No        Yes
	   %		 No	     Yes       No
	   .		 No	     No        Yes
	   :		 No	     Yes       Yes
	   @		 No	     Yes       Yes
	   {		 No	     No        Yes
	   }		 No	     No        Yes
	   alias	 No**	     Yes       Yes
	   alloc	 No	     Yes       No
	   bg		 No**	     Yes       Yes
	   bind 	 No	     No        Yes
	   bindkey	 No	     Yes       No
	   break	 No	     Yes       Yes
	   breaksw	 No	     Yes       No
	   builtin	 No	     No        Yes
	   builtins	 No	     Yes       No
	   case 	 No	     Yes       Yes
	   cd		 No**	     Yes       Yes
	   chdir	 No	     Yes       Yes
	   command	 No**	     No        Yes
	   complete	 No	     Yes       No
	   continue	 No	     Yes       Yes
	   default	 No	     Yes       No
	   dirs 	 No	     Yes       No
	   do		 No	     No        Yes
	   done 	 No	     No        Yes
	   echo 	 Yes	     Yes       Yes
	   echotc	 No	     Yes       No
	   elif 	 No	     No        Yes
	   else 	 No	     Yes       Yes
	   end		 No	     Yes       No
	   endif	 No	     Yes       No
	   endsw	 No	     Yes       No
	   esac 	 No	     No        Yes
	   eval 	 No	     Yes       Yes
	   exec 	 No	     Yes       Yes
	   exit 	 No	     Yes       Yes
	   export	 No	     No        Yes
	   false	 Yes	     No        Yes
	   fc		 No**	     No        Yes
	   fg		 No**	     Yes       Yes
	   filetest	 No	     Yes       No
	   fi		 No	     No        Yes
	   for		 No	     No        Yes
	   foreach	 No	     Yes       No
	   getopts	 No**	     No        Yes
	   glob 	 No	     Yes       No
	   goto 	 No	     Yes       No
	   hash 	 No	     No        Yes
	   hashstat	 No	     Yes       No
	   history	 No	     Yes       No
	   hup		 No	     Yes       No
	   if		 No	     Yes       Yes
	   jobid	 No	     No        Yes
	   jobs 	 No**	     Yes       Yes
	   kill 	 Yes	     Yes       No
	   limit	 No	     Yes       No
	   local	 No	     No        Yes
	   log		 No	     Yes       No
	   login	 Yes	     Yes       No
	   logout	 No	     Yes       No
	   ls-F 	 No	     Yes       No
	   nice 	 Yes	     Yes       No
	   nohup	 Yes	     Yes       No
	   notify	 No	     Yes       No
	   onintr	 No	     Yes       No
	   popd 	 No	     Yes       No
	   printenv	 Yes	     Yes       No
	   pushd	 No	     Yes       No
	   pwd		 Yes	     No        Yes
	   read 	 No**	     No        Yes
	   readonly	 No	     No        Yes
	   rehash	 No	     Yes       No
	   repeat	 No	     Yes       No
	   return	 No	     No        Yes
	   sched	 No	     Yes       No
	   set		 No	     Yes       Yes
	   setenv	 No	     Yes       No
	   settc	 No	     Yes       No
	   setty	 No	     Yes       No
	   setvar	 No	     No        Yes
	   shift	 No	     Yes       Yes
	   source	 No	     Yes       No
	   stop 	 No	     Yes       No
	   suspend	 No	     Yes       No
	   switch	 No	     Yes       No
	   telltc	 No	     Yes       No
	   test 	 Yes	     No        Yes
	   then 	 No	     No        Yes
	   time 	 Yes	     Yes       No
	   times	 No	     No        Yes
	   trap 	 No	     No        Yes
	   true 	 Yes	     No        Yes
	   type 	 No	     No        Yes
	   ulimit	 No	     No        Yes
	   umask	 No**	     Yes       Yes
	   unalias	 No**	     Yes       Yes
	   uncomplete	 No	     Yes       No
	   unhash	 No	     Yes       No
	   unlimit	 No	     Yes       No
	   unset	 No	     Yes       Yes
	   unsetenv	 No	     Yes       No
	   until	 No	     No        Yes
	   wait 	 No**	     Yes       Yes
	   where	 No	     Yes       No
	   which	 Yes	     Yes       No
	   while	 No	     Yes       Yes

SEE ALSO
     csh(1), echo(1), false(1), info(1), kill(1), login(1), nice(1), nohup(1),
     printenv(1), pwd(1), sh(1), test(1), time(1), true(1), which(1)

HISTORY
     The builtin manual page first appeared in FreeBSD 3.4.

AUTHORS
     This manual page was written by Sheldon Hearn <sheldonh@FreeBSD.org>.

BSD			       February 23, 2005			   BSD
","# popd

> Remove a directory placed on the directory stack via the pushd shell built-in.

- Remove the top directory from the stack and cd to it:

`popd`

- Remove the Nth directory (starting from zero to the left from the list printed with `dirs`):

`popd +N`

- Remove the Nth directory (starting from zero to the right from the list printed with `dirs`):

`popd -N`
"
pushd,,,"
BUILTIN(1)		  BSD General Commands Manual		    BUILTIN(1)

NAME
     builtin, !, %, ., :, @, {, }, alias, alloc, bg, bind, bindkey, break,
     breaksw, builtins, case, cd, chdir, command, complete, continue, default,
     dirs, do, done, echo, echotc, elif, else, end, endif, endsw, esac, eval,
     exec, exit, export, false, fc, fg, filetest, fi, for, foreach, getopts,
     glob, goto, hash, hashstat, history, hup, if, jobid, jobs, kill, limit,
     local, log, login, logout, ls-F, nice, nohup, notify, onintr, popd,
     printenv, pushd, pwd, read, readonly, rehash, repeat, return, sched, set,
     setenv, settc, setty, setvar, shift, source, stop, suspend, switch,
     telltc, test, then, time, times, trap, true, type, ulimit, umask,
     unalias, uncomplete, unhash, unlimit, unset, unsetenv, until, wait,
     where, which, while -- shell built-in commands

SYNOPSIS
     builtin [-options] [args ...]

DESCRIPTION
     Shell builtin commands are commands that can be executed within the run-
     ning shell's process.  Note that, in the case of csh(1) builtin commands,
     the command is executed in a subshell if it occurs as any component of a
     pipeline except the last.

     If a command specified to the shell contains a slash ``/'', the shell
     will not execute a builtin command, even if the last component of the
     specified command matches the name of a builtin command.  Thus, while
     specifying ``echo'' causes a builtin command to be executed under shells
     that support the echo builtin command, specifying ``/bin/echo'' or
     ``./echo'' does not.

     While some builtin commands may exist in more than one shell, their oper-
     ation may be different under each shell which supports them.  Below is a
     table which lists shell builtin commands, the standard shells that sup-
     port them and whether they exist as standalone utilities.

     Only builtin commands for the csh(1) and sh(1) shells are listed here.
     Consult a shell's manual page for details on the operation of its builtin
     commands.	Beware that the sh(1) manual page, at least, calls some of
     these commands ``built-in commands'' and some of them ``reserved words''.
     Users of other shells may need to consult an info(1) page or other
     sources of documentation.

     Commands marked ``No**'' under External do exist externally, but are
     implemented as scripts using a builtin command of the same name.

	   Command	 External    csh(1)    sh(1)
	   !		 No	     No        Yes
	   %		 No	     Yes       No
	   .		 No	     No        Yes
	   :		 No	     Yes       Yes
	   @		 No	     Yes       Yes
	   {		 No	     No        Yes
	   }		 No	     No        Yes
	   alias	 No**	     Yes       Yes
	   alloc	 No	     Yes       No
	   bg		 No**	     Yes       Yes
	   bind 	 No	     No        Yes
	   bindkey	 No	     Yes       No
	   break	 No	     Yes       Yes
	   breaksw	 No	     Yes       No
	   builtin	 No	     No        Yes
	   builtins	 No	     Yes       No
	   case 	 No	     Yes       Yes
	   cd		 No**	     Yes       Yes
	   chdir	 No	     Yes       Yes
	   command	 No**	     No        Yes
	   complete	 No	     Yes       No
	   continue	 No	     Yes       Yes
	   default	 No	     Yes       No
	   dirs 	 No	     Yes       No
	   do		 No	     No        Yes
	   done 	 No	     No        Yes
	   echo 	 Yes	     Yes       Yes
	   echotc	 No	     Yes       No
	   elif 	 No	     No        Yes
	   else 	 No	     Yes       Yes
	   end		 No	     Yes       No
	   endif	 No	     Yes       No
	   endsw	 No	     Yes       No
	   esac 	 No	     No        Yes
	   eval 	 No	     Yes       Yes
	   exec 	 No	     Yes       Yes
	   exit 	 No	     Yes       Yes
	   export	 No	     No        Yes
	   false	 Yes	     No        Yes
	   fc		 No**	     No        Yes
	   fg		 No**	     Yes       Yes
	   filetest	 No	     Yes       No
	   fi		 No	     No        Yes
	   for		 No	     No        Yes
	   foreach	 No	     Yes       No
	   getopts	 No**	     No        Yes
	   glob 	 No	     Yes       No
	   goto 	 No	     Yes       No
	   hash 	 No	     No        Yes
	   hashstat	 No	     Yes       No
	   history	 No	     Yes       No
	   hup		 No	     Yes       No
	   if		 No	     Yes       Yes
	   jobid	 No	     No        Yes
	   jobs 	 No**	     Yes       Yes
	   kill 	 Yes	     Yes       No
	   limit	 No	     Yes       No
	   local	 No	     No        Yes
	   log		 No	     Yes       No
	   login	 Yes	     Yes       No
	   logout	 No	     Yes       No
	   ls-F 	 No	     Yes       No
	   nice 	 Yes	     Yes       No
	   nohup	 Yes	     Yes       No
	   notify	 No	     Yes       No
	   onintr	 No	     Yes       No
	   popd 	 No	     Yes       No
	   printenv	 Yes	     Yes       No
	   pushd	 No	     Yes       No
	   pwd		 Yes	     No        Yes
	   read 	 No**	     No        Yes
	   readonly	 No	     No        Yes
	   rehash	 No	     Yes       No
	   repeat	 No	     Yes       No
	   return	 No	     No        Yes
	   sched	 No	     Yes       No
	   set		 No	     Yes       Yes
	   setenv	 No	     Yes       No
	   settc	 No	     Yes       No
	   setty	 No	     Yes       No
	   setvar	 No	     No        Yes
	   shift	 No	     Yes       Yes
	   source	 No	     Yes       No
	   stop 	 No	     Yes       No
	   suspend	 No	     Yes       No
	   switch	 No	     Yes       No
	   telltc	 No	     Yes       No
	   test 	 Yes	     No        Yes
	   then 	 No	     No        Yes
	   time 	 Yes	     Yes       No
	   times	 No	     No        Yes
	   trap 	 No	     No        Yes
	   true 	 Yes	     No        Yes
	   type 	 No	     No        Yes
	   ulimit	 No	     No        Yes
	   umask	 No**	     Yes       Yes
	   unalias	 No**	     Yes       Yes
	   uncomplete	 No	     Yes       No
	   unhash	 No	     Yes       No
	   unlimit	 No	     Yes       No
	   unset	 No	     Yes       Yes
	   unsetenv	 No	     Yes       No
	   until	 No	     No        Yes
	   wait 	 No**	     Yes       Yes
	   where	 No	     Yes       No
	   which	 Yes	     Yes       No
	   while	 No	     Yes       Yes

SEE ALSO
     csh(1), echo(1), false(1), info(1), kill(1), login(1), nice(1), nohup(1),
     printenv(1), pwd(1), sh(1), test(1), time(1), true(1), which(1)

HISTORY
     The builtin manual page first appeared in FreeBSD 3.4.

AUTHORS
     This manual page was written by Sheldon Hearn <sheldonh@FreeBSD.org>.

BSD			       February 23, 2005			   BSD
","# pushd

> Place a directory on a stack so it can be accessed later.
> See also `popd` to switch back to original directory.

- Switch to directory and push it on the stack:

`pushd {{directory}}`

- Switch first and second directories on the stack:

`pushd`

- Rotate stack by making the 5th element the top of the stack:

`pushd +4`
"
chflags,,,"
CHFLAGS(1)		  BSD General Commands Manual		    CHFLAGS(1)

NAME
     chflags -- change file flags

SYNOPSIS
     chflags [-fhv] [-R [-H | -L | -P]] flags file ...

DESCRIPTION
     The chflags utility modifies the file flags of the listed files as speci-
     fied by the flags operand.

     The options are as follows:

     -f      Do not display a diagnostic message if chflags could not modify
	     the flags for file, nor modify the exit status to reflect such
	     failures.

     -H      If the -R option is specified, symbolic links on the command line
	     are followed.  (Symbolic links encountered in the tree traversal
	     are not followed.)

     -h      If the file is a symbolic link, change the file flags of the link
	     itself rather than the file to which it points.

     -L      If the -R option is specified, all symbolic links are followed.

     -P      If the -R option is specified, no symbolic links are followed.
	     This is the default.

     -R      Change the file flags for the file hierarchies rooted in the
	     files instead of just the files themselves.

     -v      Cause chflags to be verbose, showing filenames as the flags are
	     modified.	If the -v option is specified more than once, the old
	     and new flags of the file will also be printed, in octal nota-
	     tion.

     The flags are specified as an octal number or a comma separated list of
     keywords.	The following keywords are currently defined:

	   arch, archived
		   set the archived flag (super-user only)

	   opaque  set the opaque flag (owner or super-user only).  [Directory
		   is opaque when viewed through a union mount]

	   nodump  set the nodump flag (owner or super-user only)

	   sappnd, sappend
		   set the system append-only flag (super-user only)

	   schg, schange, simmutable
		   set the system immutable flag (super-user only)

	   uappnd, uappend
		   set the user append-only flag (owner or super-user only)

	   uchg, uchange, uimmutable
		   set the user immutable flag (owner or super-user only)

	   hidden  set the hidden flag [Hide item from GUI]

     Putting the letters ``no'' before or removing the letters ``no'' from a
     keyword causes the flag to be cleared.  For example:

	   nouchg  clear the user immutable flag (owner or super-user only)
	   dump    clear the nodump flag (owner or super-user only)

     Unless the -H or -L options are given, chflags on a symbolic link always
     succeeds and has no effect.  The -H, -L and -P options are ignored unless
     the -R option is specified.  In addition, these options override each
     other and the command's actions are determined by the last one specified.

     You can use ""ls -lO"" to see the flags of existing files.

EXIT STATUS
     The chflags utility exits 0 on success, and >0 if an error occurs.

SEE ALSO
     ls(1), chflags(2), stat(2), fts(3), symlink(7)

HISTORY
     The chflags command first appeared in 4.4BSD.

BUGS
     Only a limited number of utilities are chflags aware.  Some of these
     tools include ls(1), cp(1), find(1), install(1), dump(8), and restore(8).
     In particular a tool which is not currently chflags aware is the pax(1)
     utility.

BSD				 March 3, 2006				   BSD
","# chflags

> Change file or directory flags.

- Set the `hidden` flag for a file:

`chflags {{hidden}} {{path/to/file}}`

- Unset the `hidden` flag for a file:

`chflags {{nohidden}} {{path/to/file}}`

- Recursively set the `uchg` flag for a directory:

`chflags -R {{uchg}} {{path/to/directory}}`

- Recursively unset the `uchg` flag for a directory:

`chflags -R {{nouchg}} {{path/to/directory}}`
"
whatis,http://www.linfo.org/whatis.html,"


How to use the whatis Command -- by The Linux Information Project (LINFO)

LINFO
The whatis Command


The whatis command provides very brief descriptions of command line programs (i.e., all-text mode programs) and other topics related to Linux and other Unix-like operating systems.


It accomplishes this by searching the short descriptions in the whatis database for each keyword provided to it as an argument (i.e., input data). This database contains just the title, section number and description from the NAME section of each page in the man manual that is built into most Unix-like systems.


The syntax for whatis is:



whatis keyword(s)



For example, the following provides a single line summary of the head command (which by default displays the first ten lines of each file that is provided to it as an argument):



whatis head



whatis can be used to simultaneously search for information about multiple topics. For example, the following would provide information about both head and tail (which by default reads the final ten lines of files):



whatis head tail



The output of whatis is limited by the fact that it provides only a single line for each keyword found in the database; thus it supplies incomplete information about even moderately complex commands. For example, the following use of whatis to obtain information about the cat command generates the output ""concatenate files and print on the standard output"":



whatis cat



However, this omits some important information about cat, particularly the facts that it is very convenient to use for reading files and that it is also used to create and write to files. 


whatis is similar to the apropos command. However, apropos is more powerful in that its arguments are not limited to complete words but can also be strings (i.e., any finite sequences of characters) which comprise parts of words. Both commands are unusual in that they have no options. 


The man command (which is used to read the built-in manual pages), when used with its -f option, produces the same output as whatis. Thus, for example,



man -f cat



is equivalent to



whatis cat



The whatis database is a plain text (i.e., human-readable characters) file that is generated automatically by the makewhatis program. Its location varies according to the particular system; in the case of Red Hat Linux 9, for example, its full path is /var/cache/man/whatis.


If desired, the database can be viewed using a command such as the following: 



cat /var/cache/man/whatis | less



In this command the output of cat /var/cache/man/whatis is piped (i.e., sent) to the less command in order to make it easier to read by displaying only a single page at a time rather than scrolling down the screen at high speed. 





Created May 18, 2005. Updated May 7, 2007.
Copyright © 2005 The Linux Information Project. All Rights Reserved.
","whatis(1)							     whatis(1)



NAME
       whatis - search the whatis database for complete words.

SYNOPSIS
       whatis keyword ...

DESCRIPTION
       whatis  searches  a set of database files containing short descriptions
       of system commands for keywords and displays the result on the standard
       output.	Only complete word matches are displayed.

       The  whatis  database  is  created using the command /usr/libexec/make-
       whatis.

AUTHOR
       John W. Eaton was the  original	author	of  man.   Zeyd  M.  Ben-Halim
       released  man  1.2,  and  Andries Brouwer followed up with versions 1.3
       thru 1.5p.  Federico  Lucifredi	<flucifredi@acm.org>  is  the  current
       maintainer.

SEE ALSO
       apropos(1), man(1).



			      September 19, 2005		     whatis(1)
","# whatis

> Tool that searches a set of database files containing short descriptions of system commands for keywords.
> More information: <http://www.linfo.org/whatis.html>.

- Search for informations about keyword:

`whatis {{keyword}}`

- Search for information about multiple keywords:

`whatis {{first_keyword}} {{second_keyword}}`
"
split,,,"
SPLIT(1)		  BSD General Commands Manual		      SPLIT(1)

NAME
     split -- split a file into pieces

SYNOPSIS
     split [-a suffix_length] [-b byte_count[k|m]] [-l line_count]
	   [-p pattern] [file [name]]

DESCRIPTION
     The split utility reads the given file and breaks it up into files of
     1000 lines each.  If file is a single dash (`-') or absent, split reads
     from the standard input.

     The options are as follows:

     -a suffix_length
	     Use suffix_length letters to form the suffix of the file name.

     -b byte_count[k|m]
	     Create smaller files byte_count bytes in length.  If ``k'' is
	     appended to the number, the file is split into byte_count kilo-
	     byte pieces.  If ``m'' is appended to the number, the file is
	     split into byte_count megabyte pieces.

     -l line_count
	     Create smaller files n lines in length.

     -p pattern
	     The file is split whenever an input line matches pattern, which
	     is interpreted as an extended regular expression.	The matching
	     line will be the first line of the next output file.  This option
	     is incompatible with the -b and -l options.

     If additional arguments are specified, the first is used as the name of
     the input file which is to be split.  If a second additional argument is
     specified, it is used as a prefix for the names of the files into which
     the file is split.  In this case, each file into which the file is split
     is named by the prefix followed by a lexically ordered suffix using
     suffix_length characters in the range ``a-z''.  If -a is not specified,
     two letters are used as the suffix.

     If the name argument is not specified, the file is split into lexically
     ordered files named with the prefix ``x'' and with suffixes as above.

ENVIRONMENT
     The LANG, LC_ALL, LC_CTYPE and LC_COLLATE environment variables affect
     the execution of split as described in environ(7).

EXIT STATUS
     The split utility exits 0 on success, and >0 if an error occurs.

SEE ALSO
     csplit(1), re_format(7)

STANDARDS
     The split utility conforms to IEEE Std 1003.1-2001 (``POSIX.1'').

HISTORY
     A split command appeared in Version 3 AT&T UNIX.

BUGS
     The maximum line length for matching patterns is 65536.

BSD				August 21, 2005 			   BSD
","# split

> Split a file into pieces.

- Split a file, each split having 10 lines (except the last split):

`split -l {{10}} {{filename}}`

- Split a file by a regular expression. The matching line will be the first line of the next output file:

`split -p {{cat|^[dh]og}} {{filename}}`

- Split a file with 512 bytes in each split (except the last split; use 512k for kilobytes and 512m for megabytes):

`split -b {{512}} {{filename}}`
"
diskutil,,,"

DISKUTIL(8)		  BSD System Manager's Manual		   DISKUTIL(8)

NAME
     diskutil -- modify, verify and repair local disks

SYNOPSIS
     diskutil [quiet] verb [options]

DESCRIPTION
     diskutil manipulates the structure of local disks.  It provides informa-
     tion about, and allows the administration of, the partitioning schemes,
     layouts, and formats of disks. This includes hard disks, solid state
     disks, optical discs, disk images, APFS volumes, CoreStorage volumes, and
     AppleRAID sets.  It generally manipulates whole volumes instead of indi-
     vidual files and directories.

VERBS
     Each verb is listed with its description and individual arguments.

     list [-plist] [internal | external] [physical | virtual] [device]
		List disks, including internal and external disks, whole disks
		and partitions, and various kinds of virtual or offline disks.

		If no argument is given, then all whole disks and their parti-
		tions are listed.

		You can limit the number of disks shown by specifying filter-
		ing arguments such as internal above, and/or a device disk.
		When limiting by a disk, you can specify either a whole disk,
		e.g. disk0, or any of its slices, e.g. disk0s3, but filtering
		is only done at the whole disk level (disk0s3 is a synonym for
		disk0 in this case).

		If -plist is specified, then a property list will be emitted
		instead of the normal user-readable output.

		A script could interpret the results of diskutil list -plist
		and use diskutil info -plist as well as diskutil
		listFilesystems -plist for more detailed information.

		The top-to-bottom appearance of all whole disks is sorted in
		numerical order by unit (whole disk) number.  However, within
		each whole disk's ""sublist"" of partitions, the ordering indi-
		cates actual on-disk location. The first disk item listed rep-
		resents the partition which is located most near the beginning
		of its encompassing whole disk, and so on.

		When viewed this way, the slice (partition) parts of the BSD
		disk identifiers may, in certain circumstances, not appear in
		numerical order.  This is normal and is likely the result of a
		recent partition map editing operation in which volumes were
		kept mounted.

		Note that both human-readable and plist output are sorted as
		described above.

		See the DEVICES section below for the various forms that the
		device specification may take for this and all of the other
		diskutil verbs.

     info | information [-plist] device | -all
		Get detailed information about a specific whole disk or parti-
		tion.  If -plist is specified, then a property list instead of
		the normal user-readable output will be emitted.  If -all is
		specified, then all disks (whole disks and their partitions)
		are processed.

     activity
		Continuously display system-wide disk manipulation activity as
		reported by the Disk Arbitration framework until interrupted
		with a signal (e.g. by typing Control-C).

		This can be useful to watch system-wide activity of disks com-
		ing on-line or being ejected, volumes on disks being mounted
		or unmounted, volumes being renamed, etc.  However, this out-
		put must never be parsed; programs should become Disk Arbitra-
		tion clients instead.

		For debugging information, such as the monitoring of applica-
		tions dissenting (attempting to deny) activities for disks for
		which they have registered an interest, you must use the log-
		ging features of the diskarbitrationd daemon. Programs needing
		this information must become Disk Arbitration clients.

     listFilesystems [-plist]
		Show the file system personalities available for formatting in
		diskutil when using the erasing and partitioning verbs.  This
		is a subset of the complete set of personalities exported by
		the various file system bundles that may be installed in the
		system.  Also shown are some shortcut aliases for common per-
		sonalities.  See the FORMAT section below for more details.
		If -plist is specified, then a property list instead of the
		normal user-readable output will be emitted.

     unmount | umount [force] device
		Unmount a single volume.  Force will force-unmount the volume
		(less kind to any open files; see also umount (8)).

     unmountDisk | umountDisk [force] device
		Given a disk containing a partition map, unmount all of its
		volumes. That is, unmounts are attempted for the map's parti-
		tions containing file system volumes, as well as for ""virtual""
		volumes exported by storage systems which import data from the
		map's partitions.  Storage systems supported include APFS,
		AppleRAID, and CoreStorage.

		Force will force-unmount the volumes (less kind to any open
		files; see also umount (8)).

		You should specify a whole disk, but all volumes of the whole
		disk are attempted to be unmounted even if you specify a par-
		tition.

     eject device
		Eject a disk.  Media will become offline for the purposes of
		being a data store for file systems or being a member of con-
		structs such as software RAID or direct data.  Additionally,
		removable media will become eligible for safe manual removal;
		automatically-removable media will begin its physical (motor-
		ized) eject sequence.

     mount [readOnly] [-mountPoint path] device
		Mount a single volume.	If readOnly is specified, then the
		file system is mounted read-only, even if the volume's under-
		lying file system and/or device and/or media supports writing;
		even the super-user may not write to it; this is the same as
		the rdonly option to mount (8).  If a -mountPoint is speci-
		fied, then that path, rather than the standard path of /Vol-
		umes/VolumeName, will be used as the view into the volume file
		content; a directory at that path must already exist.

     mountDisk device
		Mount all mountable and UI-browsable volumes on the given par-
		tition map; that is, a mount is attempted on the directly-
		mountable volume, if any, on each of the whole disk's parti-
		tions. However, ""virtual"" volumes, such as those are implied
		by e.g. Core Storage Physical Volumes, AppleRAID Members,
		etc., are not handled.	You should specify a whole disk, but
		all volumes of the whole disk are attempted to be mounted even
		if you specify a partition.

     rename | renameVolume device name
		Rename a volume.  Volume names are subject to file system-spe-
		cific alphabet and length restrictions.

     enableJournal device
		Enable journaling on an HFS+ volume.  This works whether or
		not the volume is currently mounted (the volume is temporarily
		mounted if necessary).	Ownership of the affected disk is
		required.

     disableJournal [force] device
		Disable journaling on an HFS+ volume.  This normally works
		whether or not the volume is currently mounted (the volume is
		temporarily mounted if necessary).  If the force option is
		specified, then journaling is disabled directly on disk; in
		this case, the volume must not be mounted.  Ownership of the
		affected disk is required.

     moveJournal external journalDevice device
		Create a 512MB Apple_Journal partition using the journalDevice
		partition to serve as a journal for the volume device. For
		best results, journalDevice should be a partition on a differ-
		ent whole-disk than the volume itself.

		The journal for device will be moved externally onto the newly
		created Apple_Journal partition.

		Since the journalDevice you specify will invariably be larger
		than 512MB, a new HFS+ partition will be created following the
		Apple_Journal partition to fill the remaining space.

		Moving the journal works whether or not the volume is mounted,
		provided journaling is enabled on that volume. No errors are
		currently supported to flag attempts to move journals on vol-
		umes that do not have journaling enabled.  If you have multi-
		ple volumes for which you want external journals, each must
		have its own external Apple_Journal partition.	Ownership of
		the affected disks is required.

     moveJournal internal device
		Move the journal for device back locally (onto that same
		device).  Ownership of the affected disk is required.

     enableOwnership device
		Enable ownership of a volume.  The on-root-disk Volume Data-
		base at /var/db/volinfo.database is manipulated such that the
		User and Group ID settings of files, directories, and links
		(file system objects, or ""FSOs"") on the target volume are
		taken into account.

		This setting for a particular volume is persistent across
		ejects and injects of that volume as seen by the current OS,
		even across reboots of that OS, because of the entries in this
		OS's Volume Database.  Note thus that the setting is not kept
		on the target disk, nor is it in-memory.

		For some locations of devices (e.g. internal hard disks), con-
		sideration of ownership settings on FSOs is the default.  For
		others (e.g. plug-in USB disks), it is not.

		When ownership is disabled, Owner and Group ID settings on
		FSOs appear to the user and programs as the current user and
		group instead of their actual on-disk settings, in order to
		make it easy to use a plug-in disk of which the user has phys-
		ical possession.

		When ownership is enabled, the Owner and Group ID settings
		that exist on the disk are taken into account for determining
		access, and exact settings are written to the disk as FSOs are
		created.  A common reason for having to enable ownership is
		when a disk is to contain FSOs whose User and Group ID set-
		tings, and thus permissions behavior overall, is critically
		important, such as when the plug-in disk contains system files
		to be changed or added to.

		See also the vsdbutil(8) command.  Running as root is
		required.

     disableOwnership device
		Disable ownership of a volume.	See enableOwnership above.
		Running as root is required.

     verifyVolume device
		Verify the file system data structures of a volume.  The
		appropriate fsck program is executed and the volume is
		attempted to be left mounted or unmounted as it was before the
		command.  Any underlying Storage System (e.g. Core Storage,
		APFS) is verified before the target volume itself.  In certain
		cases, ""live"" verify, including of the boot volume, is sup-
		ported.  Ownership of the disk to be verified is required.

     repairVolume device
		Repair the file system data structures of a volume.  The
		appropriate fsck program is executed and the volume is
		attempted to be left mounted or unmounted as it was before the
		command.  Any underlying Storage System (e.g. Core Storage,
		APFS) is repaired before the given target volume.  In most
		cases (e.g. except mount-read-only), the target volume must be
		unmountable; in all cases, the underlying storage media must
		be writable.  ""Live"" repair (e.g. of a file-writable mounted
		volume) is not supported.  Ownership of the affected disk is
		required.

     verifyDisk device
		Verify the partition map layout of a whole disk intended for
		booting or data use on a Macintosh.  The checks further
		include, but are not limited to, the integrity of the EFI Sys-
		tem Partition, the integrity of any Core Storage Physical Vol-
		ume partitions, and provisioning of space for boot loaders.
		Ownership of the disk to be verified is required; it must be a
		whole disk and must have a partition map.

     repairDisk device
		Repair the partition map layout of a whole disk intended for
		booting or data use on a Macintosh.  The repairs further
		include, but are not limited to, the repair or creation of an
		EFI System Partition, the integrity of any Core Storage Physi-
		cal Volume partitions, and the provisioning of space for boot
		loaders.  Ownership of the affected disk is required; it must
		be a whole disk and must have a partition map.

     resetFusion
		For Fusion Drive machine hardware configurations, reset the
		disk devices in the machine to a factory-like state (one empty
		Fusion volume).  This command requires the machine to contain
		exactly one internal solid-state device (SSD) and one internal
		rotational device (HDD); if so, you are prompted, and if you
		confirm, both devices are (re)-partitioned with GPT maps and a
		Core Storage Fusion Drive volume is created.  No system soft-
		ware is installed and no user data is restored.  All data on
		the machine is lost, including any ""extra"" partitions (e.g.
		for Boot Camp or other ""user"" purposes). You generally must be
		booted from the Internet Recovery System (CMD-OPT-R) or from
		an externally-connected macOS boot disk (e.g. a USB drive),
		because you cannot erase a volume with a currently-running
		macOS.	Ownership of the affected disks is required.

     eraseDisk format name [APM[Format] | MBR[Format] | GPT[Format]] device
		Erase an existing disk, removing all volumes and writing out a
		new partitioning scheme containing one new empty file system
		volume.  If the partitioning scheme is not specified, then an
		appropriate one for the current machine is chosen.  Format is
		discussed below in the section for the partitionDisk verb.
		Ownership of the affected disk is required.

     eraseVolume format name device
		Write out a new empty file system volume (erasing any current
		file system volume) on an existing partition.  The partition
		remains but its data is lost.  Format is discussed below in
		the section for the partitionDisk verb.

		If you specify Free Space for format, the partition itself is
		deleted (removed entirely) from the partition map instead of
		merely being erased.  Ownership of the affected disk is
		required.

     reformat device
		Erase an existing volume by writing out a new empty file sys-
		tem of the same personality (type) and with the same volume
		name.  Ownership of the affected disk is required.

     eraseOptical [quick] device
		Erase optical media (CD/RW, DVD/RW, etc.).  Quick specifies
		whether the disc recording system software should do a full
		erase or a quick erase.  Ownership of the affected disk is
		required.

     zeroDisk [force] device
		Erase a device, writing zeros to the media.  The device can be
		a whole-disk or a partition.  In either case, in order to be
		useful again, zeroed whole-disks will need to be (re)parti-
		tioned, or zeroed partitions will need to be (re)formatted
		with a file system, e.g. by using the partitionDisk,
		eraseDisk, or eraseVolume verbs.  If you desire a more sophis-
		ticated erase algorithm or if you need to erase only free
		space not in use for files, use the secureErase verb.  The
		force parameter causes best-effort, non-error-terminating,
		forced unmounts and shared-mode writes to be attempted; how-
		ever, this is still no guarantee against drivers which claim
		the disk exclusively. In such cases, you may have to first
		unmount all overlying logical volumes (e.g. CoreStorage or
		AppleRAID). If a disk is partially damaged in just a certain
		unlucky way, you might even have to un-install a kext or erase
		the disk elsewhere.  Ownership of the affected disk is
		required.

     randomDisk [times] device
		Erase a whole disk, writing random data to the media.  Times
		is the optional (defaults to 1) number of times to write ran-
		dom information.  The device can be a whole-disk or a parti-
		tion.  In either case, in order to be useful again, randomized
		whole-disks will need to be (re)partitioned, or randomized
		partitions will need to be (re)formatted with a file system,
		e.g. by using the partitionDisk, eraseDisk, or eraseVolume
		verbs.	If you desire a more sophisticated erase algorithm or
		if you need to erase only free space not in use for files, use
		the secureErase verb.  Ownership of the affected disk is
		required.

     secureErase [freespace] level device
		Erase, using a ""secure"" (but see the NOTE below) method,
		either a whole-disk (including all of its partitions if parti-
		tioned), or, only the free space (not in use for files) on a
		currently-mounted volume.  Secure erasing makes it harder to
		recover data using ""file recovery"" software.

		Erasing a whole-disk will leave it useless until it is parti-
		tioned again.  Erasing freespace on a volume will leave your
		files intact, indeed, from an end-user perspective, it will
		appear unchanged, with the exception that it will have
		attempted to make it impossible to recover deleted files.

		If you need to erase all contents of a partition but not its
		hosting whole-disk, use the zeroDisk or randomDisk verbs.
		Ownership of the affected disk is required.

		Level should be one of the following:

		      o   0 - Single-pass zero-fill erase.

		      o   1 - Single-pass random-fill erase.

		      o   2 - US DoD 7-pass secure erase.

		      o   3 - Gutmann algorithm 35-pass secure erase.

		      o   4 - US DoE algorithm 3-pass secure erase.

		NOTE: This kind of secure erase is no longer considered safe.
		Modern devices have wear-leveling, block-sparing, and possi-
		bly-persistent cache hardware, which cannot be completely
		erased by these commands. The modern solution for quickly and
		securely erasing your data is encryption. Strongly-encrypted
		data can be instantly ""erased"" by destroying (or losing) the
		key (password), because this renders your data irretrievable
		in practical terms.  Consider using APFS encryption (File-
		Vault).

     partitionDisk device [numberOfPartitions] [APM[Format] | MBR[Format] |
		GPT[Format]] [part1Format part1Name part1Size part2Format
		part2Name part2Size part3Format part3Name part3Size ...]

		(re)Partition a disk, removing all volumes.  All volumes on
		this disk will be destroyed.  The device parameter specifies
		which whole disk is to be partitioned.	The optional
		numberOfPartitions parameter specifies the number of parti-
		tions to create; if given then the number of parameter
		triplets (see below) is expected to match; else, the number of
		triplets alone given will determine the number of partitions
		created.

		The optional partitioning scheme parameter forces a particular
		partitioning scheme; if not specified, a suitable default is
		chosen.  They are:

		      o   APM[Format] specifies that an Apple Partition Map
			  scheme should be used.  This is the traditional
			  Apple partitioning scheme used to start up a Pow-
			  erPC-based Macintosh computer, to use the disk as a
			  non-startup disk with any Mac, or to create a multi-
			  platform compatible startup disk.

		      o   MBR[Format] specifies that a Master Boot Record
			  scheme should be used.  This is the DOS/Windows-com-
			  patible partitioning scheme.

		      o   GPT[Format] specifies that a GUID Partitioning Table
			  scheme should be used.  This is the partitioning
			  scheme used to start up an Intel-based Macintosh
			  computer.

		For each partition, a triplet of the desired file system for-
		mat, volume name, and size must be specified.  Several other
		diskutil verbs allow these triplets as well (and for them, the
		numberOfPartitions parameter is also optional).  The triplets
		must be as follows:

		      o   Format names are of the form jhfs+, HFS+, MS-DOS,
			  etc.; a list of formattable file systems (more pre-
			  cisely, specific file system personalities exported
			  by the installed file system bundles) and common
			  aliases is available from the listFilesystems verb.

			  Format guides diskutil both in what partition type
			  to set for the partitions (slices) as well as what
			  file system structures to initialize therein, using
			  the file system bundle's plist's FormatExecutable
			  setting which usually points to the appropriate for-
			  matter program such as newfs_hfs(8).

			  You can specify a format of Free Space to skip an
			  area of the disk.

			  You can specify the partition type manually and
			  directly with a format of %<human-readable partition
			  type>% such as %Apple_HFS% or %<GPT partition type
			  UUID constant>% such as
			  %48465300-0000-11AA-AA11-00306543ECAC%; these imply
			  a name of %noformat% (below).  Human-readable types
			  must be known to the system but UUID types (GPT
			  scheme only) can be arbitrary.

		      o   Names are the initial volume names; they must con-
			  form to file system specific restrictions.

			  If a name of %noformat% is specified, then the par-
			  tition is left blank such that the partition space
			  is carved out, the partition type is set according
			  to the file system format name or explicit type, the
			  partition space is partially erased (""wiped""), but a
			  file system structure is not initialized with any
			  file system's formatter program (e.g.  newfs_hfs(8);
			  this is useful for setting up partitions that will
			  contain user-defined (not necessarily file system)
			  data.

			  For a triplet whose format is Free Space or a
			  directly-specified partition type, its name is
			  ignored but a dummy name must nevertheless be
			  present.

		      o   Sizes are floating point numbers followed by a let-
			  ter or percent sign as described in the SIZES sec-
			  tion at the end of this page (e.g. 165536000, 55.3T,
			  678M, 75%, R).

		In addition to explicitly-requested partitions, space (gaps)
		might be allocated to satisfy certain filesystems' position
		and length alignment requirements; space might be allocated
		for possible future booter partition insertion; and indeed,
		actual booter partitions might be implicitly created.

		In particular, there is a rule that unrecognized partitions
		1GiB or larger automatically acquire booters.  Thus, if you
		create an arbitrary partition with e.g.  diskutil
		partitionDisk disk0 gpt %11112222-1111-2222-1111-111122221111%
		%noformat% 3gib jhfs+ Untitled r, then a booter partition will
		also be created. You can always delete that booter with
		diskutil eraseVolume ""Free Space"" dummy disk0s3.

		The last partition is usually automatically lengthened to the
		end of the partition map (disk).  You can specify an exact
		size for your last partition by specifying it as the penulti-
		mate triplet and specifying an additional (last) triplet as
		Free Space.  Or you can use the R (remainder) size specifier
		for one of your middle partitions while specifying an exact
		size for your last partition.

		Ownership of the affected disk is required.

     resizeVolume device limits | mapsize [-plist] | R | size
		[numberOfPartitions] [part1Format part1Name part1Size
		part2Format part2Name part2Size part3Format part3Name
		part3Size ...]
		Non-destructively resize a volume (partition); you may
		increase or decrease its size.	Alternatively, take no action
		and print information.

		Specifying limits instead of size takes no action, but instead
		prints the range of valid values for the target partition,
		taking into account current file system and partition map con-
		ditions such as files in use and other (immovable) partitions
		following the target.

		Specifying mapsize instead of size takes no action, but
		instead prints the size of the encompassing whole-disk device,
		as well as the size of the entire partition map (all parti-
		tions less map overhead). The whole-disk device might be
		larger than the partition map if the whole-disk device has
		grown since the partition map was created. Growing a whole-
		disk device is possible with certain enterprise disk (RAID)
		systems.

		The -plist option will print partition or whole-disk size
		inquiry information in property list format.

		You can grow a volume (partition) (back) to its maximum size
		possible, provided no new partitions have been created that
		are in the way, by specifying R for the new volume size. You
		should use R instead of attempting an absolute value such as
		100% because the latter cannot count partition map overhead.

		When decreasing the size, new partitions may optionally be
		created to fill the newly-freed space.	To do this, specify
		the numberOfPartitions, format, name, and size parameters in
		the same manner as the triplet description for the
		partitionDisk verb.

		Resizing a volume that is currently set as the computer's
		startup disk will invalidate that setting; use the Startup
		Disk System Preferences panel or bless (8) to reset the
		resized volume as the startup disk.

		Device refers to a volume; the volume's file system must be
		journaled HFS+.  Valid sizes are a number followed by a capi-
		tal letter multiplier or percent sign suffix as described in
		the SIZES section at the end of this page (e.g. 1.5T, 128M,
		50%).  Ownership of the affected disk is required.

     splitPartition device [numberOfPartitions] [part1Format part1Name
		part1Size part2Format part2Name part2Size part3Format
		part3Name part3Size ...]
		Destructively split a volume into multiple partitions.	You
		must supply a list of new partitions to create in the space of
		the old partition; specify these with the numberOfPartitions,
		format, name, and size parameters in the same manner as the
		triplet description for the partitionDisk verb.

		For one of your triplets, you can optionally specify the R
		meta-size in lieu of a constant number value for the size
		parameter: the substituted value will be exactly the amount of
		space necessary to complete the re-filling of the original
		partition with all of your triplets.

		Device refers to a volume.  Ownership of the affected disk is
		required.

     mergePartitions [force] format name fromDevice toDevice
		Merge two or more partitions on a disk.  All data on merged
		partitions other than the first will be lost.  Data on the
		first partition will be lost as well if the force argument is
		given.

		If force is not given, and the first partition has a resizable
		file system (e.g. JHFS+), the file system will be preserved
		and grown in a data-preserving manner; your format and name
		parameters are ignored in this case. If force is not given,
		and the first partition is not resizable, you are prompted if
		you want to format.  You will also be prompted to format if
		the first partition has an (HFS) Allocation Block Size which
		is too small to support the required growth of the first par-
		tition; see the -b option for newfs_hfs (8).

		If force is given, the final resulting partition is always
		(re)formatted. You should do this if you wish to (re)format to
		a new file system type.  You will be prompted to confirm.

		Format and name must always be given, but they have an effect
		only when force is given.

		Merged partitions are required to be ordered sequentially on
		disk (see diskutil list for the actual on-disk ordering).  All
		partitions in the range, except for the first one, must be
		unmountable.  Ownership of the affected disk is required.

     APFS | ap apfsVerb [...]
		Apple APFS is a system of virtual volumes.  APFS verbs can be
		used to create, manipulate and destroy APFS Containers and
		their APFS Volumes.  Apple APFS defines these types of
		objects:

		      o   Container - An APFS Container imports one or more
			  APFS Physical Store disks and exports zero or more
			  APFS Volume disks.  Zero or more APFS Containers can
			  exist in (might be attached to) the system at any
			  one time.

			  While attached, the ""handle"" by which an APFS Con-
			  tainer is identified is by its APFS Container
			  Reference disk (device). You should treat this as an
			  opaque reference token.

			  The Container Reference disk is a synthesized whole-
			  disk which is exported by APFS for identification
			  purposes only; it has no storage. It is associated
			  with the AppleAPFSContainerScheme node in the IO
			  Registry. While APFS Volume device identifiers
			  appear to be of a related form, you should never use
			  the Container Reference as a basis to create device
			  identifiers yourself; use the listing verbs with
			  their plist options instead.

		      o   Physical Store - An APFS Physical Store is a disk
			  which is imported into (that is, which backs, indeed
			  defines) an APFS Container. An APFS Container can
			  import more than one Physical Store, e.g. for
			  Fusion-style Containers.

			  An APFS Physical Store disk is not necessarily a
			  disk from a partition map; it could be e.g. an
			  AppleRAID Set disk. Therefore, you must never assume
			  that an APFS Physical Store's disk identifier is a
			  2-part form such as disk0s2.

		      o   Volume - An APFS Volume is an [un]mountable file
			  system volume which is exported from an APFS Con-
			  tainer.  Zero or more APFS Volumes may be exported
			  out of an APFS Container.

			  APFS Volumes have no specified ""size"" (capacity).
			  Instead, all APFS Volumes consume capacity out of
			  the remaining free space of their parent APFS Con-
			  tainer, consuming or returning such capacity as user
			  file data is added or deleted. Note that this means
			  that all Volumes within a Container compete for the
			  Container's remaining capacity. However, you can
			  manage Volume allocation with the optional reserve
			  and quota size values.

			  The optional reserve size requests an assured mini-
			  mum capacity for an APFS Volume. If successfully
			  created, the Volume is guaranteed to be able to
			  store at least this many bytes of user file data.
			  Note that beyond this, the Volume might be able to
			  store even more until constrained by reaching zero
			  free space in its parent Container or by reaching a
			  quota, if any. You can use a reserve to prevent run-
			  ning out of capacity due to competition from other
			  Volumes or from a Container shrink attempt.

			  The optional quota size applies a maximum capacity
			  to an APFS Volume, placing a limit on the number of
			  bytes of user file data which can be stored on the
			  Volume. Note that you might not be able to reach
			  this limit if its parent Container becomes full
			  first. You can use a quota to enforce accounting or
			  to manage against ""unfair"" premature filling-up of
			  the parent Container due solely to this Volume at
			  the expense of sibling Volumes.

			  Efficient file copy cloning (copy-on-write) is sup-
			  ported (see copyfile (3)'s COPYFILE_CLONE).

			  Optional file-level encryption is supported.

			  The format of an APFS Volume's device identifier is
			  that of a slice disk of a special whole-disk; both
			  disks are synthesized by APFS. The ""whole"" identi-
			  fier number (a positive possibly-multi-digit inte-
			  ger) is arbitrary, and the ""slice"" numbers (positive
			  possibly-multi-digit integers) count up from 1 with
			  each new Volume. Deleting Volumes may cause gaps in
			  the numbering.  This form appears the same as a par-
			  tition (map) scheme and partitions, but it is com-
			  pletely unrelated.  For example: If ""disk3s2"" is a
			  Physical Store defining a Container, then ""disk5s1"",
			  ""disk5s2"", and ""disk5s3"" might be the Container's
			  Volumes; ""disk5"" exists but is never used directly.

			  Although it has a device node, an APFS Volume's data
			  may only be accessed through its files; you cannot
			  open an APFS Volume device node to ""directly"" access
			  its on-disk bytes.

		      o   Snapshot - An APFS Snapshot represents a read-only
			  copy of its parent APFS Volume, frozen at the moment
			  of its creation.  An APFS Volume can have zero or
			  more associated APFS Snapshots.

			  APFS Snapshots are neither listed nor discoverable
			  when their Volume is not mounted. Snapshots are
			  uniquely identified within their parent Volume's
			  namespace by either a numeric identifier (preferred)
			  or by their name; Snapshots can be renamed, but APFS
			  will never allow duplication of names (within a Vol-
			  ume) to occur.

			  APFS Snapshots are mountable; when this occurs, its
			  mount point (separate from and simultaneous with its
			  parent Volume) provides a read-only historic version
			  of the Volume content at Snapshot creation time.

			  You can revert the present state of an APFS Volume
			  back to equality with a Snapshot in its history.
			  This is a destructive reset/restore operation: Once
			  a Volume is reverted, it cannot be brought forward.
			  Any Snaphots between the revert point and the
			  present are lost as well.

			  You can delete a Snapshot; this removes the possi-
			  bility of ever reverting to that Snapshot's state,
			  but does not affect the Volume's present-time con-
			  tent.

			  An APFS Snapshot mount point's ""source device"" (its
			  statfs (2) f_mntfromname shown by mount (8)) is not
			  a device node (e.g. disk0s2) as is common; it is the
			  Snapshot name followed by the '@' character and the
			  ""parent"" Volume's device node, e.g. ""Snap-
			  Name123@/dev/disk2s1"".  See mount_apfs -s (8) and
			  fs_snapshot_create (2).

		APFS itself has no provision for backing up your data.	Back-
		ups should be always be performed on a regular basis and
		before modifying any APFS Container using these commands.

		The following is a list of APFS sub-verbs with their descrip-
		tions and individual arguments.

		list [-plist] [containerReferenceDevice]
			   Display APFS objects as a tree. AFPS Container(s)
			   are shown with their imported Physical Store(s) and
			   exported Volume(s).

			   All currently-attached APFS Containers in the sys-
			   tem are listed unless you specify a
			   containerReferenceDevice, which limits the output
			   to that specific APFS Container family.

			   If -plist is specified, then a property list will
			   be emitted instead of the normal user-readable out-
			   put.

		convert device [-dryrun] [-prebootSource yourStagingDirectory]
			   [-noPrebootAdditions]
			   Non-destructively convert an HFS volume to an APFS
			   Container with a single (but see below) APFS Vol-
			   ume. The APFS Container can later be manipulated
			   (e.g. adding and deleting APFS Volumes) as usual.
			   This verb can be used to convert nonbootable
			   ""data""-only volumes as well as ""macOS"" volumes (see
			   below).

			   The source HFS volume can be located on a GPT par-
			   tition or on an encrypted or non-encrypted, Fusion
			   or non-Fusion CoreStorage logical volume (LV).  In
			   the latter case, the CoreStorage logical volume
			   group (LVG) is dismantled, including automatic
			   removal of any related Boot Camp Assistant parti-
			   tion(s).

			   If -dryrun is specified, all calculations, checks,
			   and some data moving is performed, but your disk is
			   left as valid HFS (headers remain declared as HFS,
			   partition types are left alone, etc).

			   For volumes currently or planned to be macOS-bear-
			   ing (and bootable), you can optionally specify
			   -prebootSource with your own staging directory of
			   macOS boot items; a Preboot Role APFS Volume with a
			   UUID directory will automatically be created as
			   part of the conversion process to facilitate macOS
			   bootstrap.  Normally your directory should be
			   writable; additional (cryptographic and EFI render-
			   ing) items are automatically added to your direc-
			   tory prior to conversion and are not removed after-
			   wards.  You can opt-out of automatic item addition
			   with the -noPrebootAdditions option.

			   Ownership of the affected disks is required.

		create device [device] name
			   Convenience verb which creates an empty APFS Con-
			   tainer and then adds one APFS Volume with the given
			   name.  The APFS Volume will have default attributes
			   such as no encryption, no capacity reserve nor
			   quota, etc.	If you specify more than one device, a
			   Fusion Container is created, with the performance
			   roles assigned automatically.  This is a combina-
			   tion of the diskutil apfs createContainer and
			   diskutil apfs addVolume verbs.

			   Ownership of the affected disks is required.

		createContainer [-main] device [-secondary] [device]
			   Create an empty APFS Container.  The device(s)
			   specified become APFS Physical Stores.

			   If you specify more than one device, a Fusion Con-
			   tainer is created, with the performance roles
			   assigned automatically (preferred) unless you use
			   the -main and -secondary options, in which case,
			   the secondary device is assumed by APFS's perfor-
			   mance algorithms to be on ""slower"" hardware.  The
			   secondary device is often used to store associated
			   ""auxiliary"" data, such as a Boot Camp Assistant
			   partition.  If you need to make a choice among mul-
			   tiple hardware devices, you should assign any rota-
			   tional (not solid state) and/or larger devices to
			   be secondary.

			   You may then add APFS Volumes with the diskutil
			   apfs addVolume verb.

			   Ownership of the affected disks is required.

		deleteContainer [-force] containerReferenceDevice |
			   physicalStoreDevice [name]
			   Destroy an existing APFS Container, including all
			   of its APFS Volumes.  You can identify the APFS
			   Container by its Container Reference disk (pre-
			   ferred), or by its Physical Store disk.

			   The APFS Volumes are unmounted first; this process
			   may not succeed if one or more is busy. If this
			   happens, the operation is aborted and everything is
			   left intact.  Otherwise, all APFS Volumes are
			   deleted as well as its APFS Container, and the APFS
			   Container's former Physical Store disks will be
			   reformatted as HFS; data on all APFS Volumes will
			   be lost.

			   You can optionally specify a new name, or else
			   ""Untitled"" will be chosen.  If there were multiple
			   Physical Stores, a space and a number suffix is
			   added for each.

			   If your APFS Container is damaged, a Container Ref-
			   erence for it might not exist or it might not be
			   functional. In this case, you can reclaim your for-
			   mer APFS Physical Store disk(s) by specifying the
			   -force option; this activates an alternate last-
			   resort mode. In this mode, if you had more than one
			   Physical Store (e.g. the Fusion case) and the Con-
			   tainer is sufficiently damaged, you might have to
			   delete each Physical Store manually.  You should
			   normally avoid this mode.

			   Ownership of the affected disks is required.

		resizeContainer containerReferenceDevice | physicalStoreDevice
			   limits [-plist] | size [part1Format part1Name
			   part1Size part2Format part2Name part2Size
			   part3Format part3Name part3Size ...]
			   Resize an existing APFS Container by specifying
			   either an APFS Container Reference (preferred) or
			   an APFS Physical Store partition, plus a proposed
			   new size.  Alternatively, take no action and print
			   constraint information.  The operation is live,
			   non-destructive, and does not mount or unmount any
			   APFS Volumes.

			   If you specify an APFS Container Reference and that
			   Container imports more than one Physical Store (in
			   e.g. Fusion setups), the appropriate Physical Store
			   will be chosen automatically.

			   Specifying limits instead of a size causes no
			   action to be taken, but instead prints a range of
			   valid values, taking into account various con-
			   straints; the -plist option will print this infor-
			   mation in property list format.

			   Shrinks are constrained by the amount of data usage
			   by all APFS Volumes on the targeted or implied APFS
			   Container.  Contributing to this data usage is the
			   file content on the APFS Volumes, the existence of
			   quotas and/or reserves, the usage of APFS Snapshots
			   (e.g. by Time Machine), and metadata overhead.

			   Grows are constrained by the amount of partition
			   map free space trailing the targeted or implied
			   Physical Store partition.

			   When shrinking, new partitions may optionally be
			   created to fill the newly-freed space.  To do this,
			   specify the format, name, and size parameters in
			   the same manner as the triplet description for the
			   partitionDisk verb.

			   You can specify a size of zero (0) to grow the tar-
			   geted APFS Physical Store such that all remaining
			   space is filled to the next partition or the end of
			   the partition map.

			   Ownership of the affected disks is required, and
			   all APFS Volumes on the Container must be unlocked.

		addVolume  containerReferenceDevice filesystem name
			   [-passprompt] | [-passphrase passphrase] |
			   [-stdinpassphrase] [-passphraseHint passphraseHint]
			   [-reserve reserve] [-quota quota] [-role roles]
			   [-nomount] [-mountpoint mountpoint]
			   Add a new APFS Volume to an existing APFS Con-
			   tainer. Files can then be stored on this newly-cre-
			   ated APFS Volume.

			   The filesystem parameter sets the permanent APFS
			   personality for this new APFS Volume; you should
			   specify APFS or Case-sensitive APFS.

			   The new APFS Volume will be unencrypted unless you
			   specify one of the passphrase options, in which
			   case the volume will be encrypted from the begin-
			   ning of its existence (as opposed to having encryp-
			   tion applied later); the user which is added will
			   be the ""Disk User"".	The optional passphraseHint is
			   a user-defined string that can be displayed even
			   while an encrypted APFS Volume is locked.

			   APFS Volumes have no fixed size; they allocate
			   backing store on an as-needed basis.  You can spec-
			   ify the reserve parameter to guarantee a minimum
			   amount of space for your volume; at least that many
			   bytes will be available for file data.  You can
			   also specify the quota parameter to limit your vol-
			   ume's file usage to a maximum amount; no more than
			   that many bytes will be available for file data,
			   even if there is otherwise enough space in the par-
			   ent APFS Container.	You can specify both reserve
			   and quota simultaneously; however, the reserve is
			   not allowed to be larger than the quota.

			   APFS Volumes can carry certain metadata hint flags;
			   you can supply the role parameter with any combina-
			   tion of one or more of the characters BRVI, or 0 as
			   a no-op for scripting convenience.

			   The new APFS Volume is explicitly mounted after
			   creation; you can specify -nomount to leave it
			   unmounted, or, you can supply a ""custom"" mountpoint
			   path, in which case you must be root, the directory
			   must already exist, and you must delete the direc-
			   tory yourself when you unmount.

			   Ownership of the affected disks is required.

		deleteVolume volumeDevice
			   Remove the given APFS Volume from its APFS Con-
			   tainer. All of the Volume's data will be lost.

			   Ownership of the affected disks is required.

		eraseVolume volumeDevice -name newName [-passprompt] |
			   [-passphrase passphrase] | [-stdinpassphrase]
			   [-passphraseHint passphraseHint]
			   Erase the contents of an existing APFS Volume; all
			   of its data will be lost.  Unlike diskutil apfs
			   deleteVolume, the APFS Volume is not removed from
			   its APFS Container.

			   The ""new"" APFS Volume will inherit the APFS file
			   system type (Case-sensitive or not) but will not
			   inherit attributes such as name, reserve, quota, or
			   encryption status.

			   The ""new"" APFS Volume be unencrypted, unless you
			   supply passphrase options in the same manner as
			   diskutil apfs addVolume in which case it will be
			   encrypted and initially accessible by the ""Disk
			   User"".

			   If you need more control, you should delete and
			   (re-)add the Volume instead.

			   Ownership of the affected disks is required.

		changeVolumeRole | chrole volumeDevice roles
			   Change the role metadata flag bits of an existing
			   APFS Volume.

			   The roles should be any combination of one or more
			   of the characters brviBRVI in much the same manner
			   as diskutil apfs addVolume above, in which unspeci-
			   fied flags are left alone, use of lower-case causes
			   flags to be cleared, and use of upper-case causes
			   flags to be set.  Alternatively, clear will remove
			   all flags, or 0 can be used as a no-op for script-
			   ing convenience.  You should not make any assump-
			   tions about the usage or legal combinations of role
			   bits.

			   Ownership of the affected disks is required.

		unlockVolume | unlock volumeDevice [-user disk | -user
			   cryptoUserUUID | -recoverykeychain file]
			   [-passphrase passphrase] | [-stdinpassphrase]
			   [-nomount | -mountpoint mountpoint] [-verify]
			   [-plist]
			   Unlock and mount an encrypted and locked APFS Vol-
			   ume or verify a passphrase.

			   If you do not supply the -user option, then all
			   cryptographic users on that APFS Volume are
			   searched for a match; if you supply -user disk then
			   the Disk UUID (which equals the APFS Volume UUID)
			   user is assumed; if you supply -user with a UUID
			   then that specific user is assumed; if you instead
			   supply -recoverykeychain then the Institutional
			   Recovery user (see below) is assumed.

			   You will be prompted interactively for a passphrase
			   unless you specify a passphrase parameter with
			   -passphrase or pipe your passphrase into stdin and
			   use -stdinpassphrase.

			   As an alternative to a passphrase, you can specify
			   -recoverykeychain with a full path to a keychain
			   file if an Institutional Recovery Key has been pre-
			   viously set up on the APFS Volume. The keychain
			   must be unlocked; see security(1) and fdesetup(8)
			   for more information.

			   You can skip the explicit mounting step with the
			   -nomount option, or specify a ""custom"" mountpoint
			   with the -mountpoint option. If you specify your
			   own mountpoint path, it must exist and you must
			   have write privileges on it (e.g. usually you must
			   be root).

			   Specifying -verify will test passphrase correctness
			   without affecting the locked or unlocked state.

			   If -plist is specified, then a property list will
			   be emitted instead of the normal user-readable out-
			   put; additional details are available here.

			   To re-lock the volume, unmount it, e.g. with
			   diskutil unmount or diskutil apfs lockVolume.

			   Ownership of the affected disks is required.

		lockVolume | lock volumeDevice
			   Unmount and lock an encrypted unlocked APFS Volume.
			   This is mostly a synonym for diskutil unmount.

			   Ownership of the affected disks is required.

		listCryptoUsers | listUsers | listCryptoKeys | listKeys
			   [-plist] volumeDevice
			   Show all cryptographic users and special-purpose
			   (e.g. recovery) ""users"" (keys) that are currently
			   associated with the given APFS Volume, each by
			   their Cryptographic User UUID and usage ""type"".

			   The usual purpose of an APFS Cryptographic User is
			   to authenticate for unlocking its APFS Volume; any
			   of its users can do so.

			   An APFS Volume need not be encrypted in order to
			   contain crypto users; indeed, other than the Disk
			   User, they should be added before encrypting.

			   Types of Cryptographic Users include at-most-one-
			   per-Volume ""Disk"" user, whose UUID value always
			   matches its Volume's UUID; iCloud or personal
			   ""Recovery Keys"", which are not users per se, but
			   instead store partial crypto keys and are associ-
			   ated with corresponding ""Recovery Users"" and have
			   fixed-constant UUID values; and ""Open Directory""
			   users, whose UUID values match corresponding local
			   macOS Open Directory account user GUIDs.

			   If -plist is specified, then a property list will
			   be emitted instead of the normal user-readable out-
			   put.

		changePassphrase | changeCryptoUserPassphrase | passwd
			   volumeDevice -user disk | cryptoUserUUID
			   [-oldPassphrase oldPassphrase |
			   -oldStdinpassphrase] [-newPassphrase newPassphrase
			   | -newStdinpassphrase]
			   Change the passphrase of the given cryptographic
			   user associated with the given APFS Volume.

			   The old and new passphrases are specified in the
			   same manner as diskutil apfs addVolume; you will be
			   interactively prompted as necessary if you do not
			   specify both.

			   Ownership of the affected disks is required.

		setPassphraseHint | setCryptoUserPassphraseHint | hint
			   volumeDevice -user disk | cryptoUserUUID -hint
			   hintMessage | -clear
			   Set an arbitrary hint string to aid recall of a
			   passphrase for the given cryptographic user associ-
			   ated with the given APFS Volume. Specifying -clear
			   will clear any existing hint (no hint is the
			   default).

			   Ownership of the affected disks is required.

		encryptVolume | encrypt | enableFileVault volumeDevice -user
			   disk | existingCryptoUserUUID [-passphrase
			   existingOrNewPassphrase | -stdinpassphrase]
			   Start encryption of a currently-unencrypted APFS
			   Volume (""Enable FileVault"").  Depending on hard-
			   ware, the operation may be accomplished immedi-
			   ately, or it may proceed ""in the background"".

			   You can supply an existing cryptographic user UUID,
			   in which case you must supply its corresponding
			   passphrase, or you can supply disk (or the
			   Disk/Volume UUID) and the corresponding passphrase
			   of the ""Disk User"", provided the ""Disk User""
			   already exists.

			   Alternatively, if no users exist yet on this APFS
			   Volume, you can still supply disk (or the Disk/Vol-
			   ume UUID), and a ""Disk User"" will be created with a
			   new passphrase which you supply.  This is the only
			   way using diskutil in which an APFS Volume that has
			   no cryptographics users on it yet can acquire the
			   first such user.

			   The passphrase, interactive or not, is specified in
			   the same manner as diskutil apfs addVolume.

			   Ownership of the affected disks is required.

		decryptVolume | decrypt | disableFileVault volumeDevice [-user
			   disk | existingCryptoUserUUID | -recoverykeychain
			   file] [-passphrase existingPassphrase |
			   -stdinpassphrase]
			   Start decryption of a currently-encrypted APFS Vol-
			   ume (""Disable FileVault"").  Depending on hardware,
			   the operation may be accomplished immediately, or
			   it may proceed ""in the background"".

			   The APFS Volume must be unlocked before beginning
			   this operation.

			   One (any) of the existing cryptographic user and
			   passphrase pair(s) on the APFS Volume must be sat-
			   isfied (this is not the case prior to macOS
			   10.13.2).  You choose that user with
			   existingCryptoUserUUID; if you do not supply it (or
			   supply the word disk) then the ""Disk User"" is
			   assumed.

			   As an alternative to a passphrase, you can specify
			   -recoverykeychain with a full path, in the same
			   fashion as the unlockVolume verb.

			   If you do not supply a passphrase, yet one is
			   required, you will be prompted interactively by
			   cryptographic user UUID.

			   Ownership of the affected disks is required.

		listSnapshots | list[Volume]Snaps[hots] [-plist] volumeDevice
			   Show all snapshots that are currently associated
			   with the given APFS Volume, each with information
			   such as its numeric XID identifier, name, and pos-
			   sibly other fields.

			   If -plist is specified, then a property list will
			   be emitted instead of the normal user-readable out-
			   put.

		deleteSnapshot volumeDevice -xid xid | -name name
			   Remove the given APFS Snapshot from its APFS Vol-
			   ume.  The ability to restore the state of the APFS
			   Volume back to that point in its evolution will be
			   lost.

			   Ownership of the affected disks is required.

		defragment containerDevice | volumeDevice status | enable |
			   disable
			   Manage defragmentation of APFS at the Container or
			   Volume level. The ""status"" command shows whether
			   automatic defragmentation is enabled. You can set
			   this automatic defragmentation behavior by specify-
			   ing ""enable"" or ""disable"".

			   Ownership of the affected disks is required.

     appleRAID | ar raidVerb [...]
		AppleRAID verbs can be used to create, manipulate and destroy
		AppleRAID volumes (Software RAID).  AppleRAID supports three
		basic types of RAID sets:

		      o   ""stripe"" - Striped Volume (RAID 0)

		      o   ""mirror"" - Mirrored Volume (RAID 1)

		      o   ""concat"" - Concatenated Volume (Spanning)

		Of these three basic types, only the ""mirror"" type increases
		fault-tolerance.  Mirrors may have more than two disks to fur-
		ther increase their fault-tolerance.  Striped and concaten-
		tated volumes are, in fact, more vulnerable to faults than
		single disk volumes.

		From these basic types, ""stacked"" or ""nested"" RAID volumes can
		be created.  Stacked RAID sets that make use of mirrored RAID
		sets are fault-tolerant.  For example, these are some of the
		more common combinations of stacked RAID sets:

		      o   RAID 50 - A striped RAID set of hardware RAID 5
			  disks.

		      o   RAID 10 - A striped RAID set of mirrored RAID sets.

		      o   RAID 0+1 - A mirrored RAID set of striped RAID sets.

		      o   Concatenated Mirror - A concatenation of mirrored
			  RAID sets.

		When creating new RAID sets or adding disks, if possible, it
		is better to specify the entire disk instead of a partition on
		that disk.  This allows the software to reformat the entire
		disk using the most current partition layouts.	When using
		whole disks, the type of partitioning used is selected based
		on the platform type (PPC = APMFormat, Intel = GPTFormat).
		GPT and APM partition formats cannot be mixed in the same RAID
		set.

		In addition to whole disk and partition device names,
		AppleRAID uses UUIDs to refer to existing RAID sets and their
		members.  Existing RAID sets may also be specified by mount
		point (e.g.  /Volume/raidset). In many cases, using the UUID
		for the device argument is preferred because disk device names
		may change over time when disks are added, disks are removed
		or when the system is rebooted.  If RAID members have been
		physically disconnected from the system or are no longer
		responding, you must use the member's UUID as the command
		argument.  Messages in the system log will refer to RAID sets
		and their member disks by UUID.  For more information on spec-
		ifying device arguments, see the DEVICES section below.

		AppleRAID is not a replacement for backing up your data.
		Backups should be always be performed on a regular basis and
		before modifying any RAID set using these commands.

		The following is a list of appleRAID sub-verbs with their
		descriptions and individual arguments.

		list [-plist | UUID]
			   Display AppleRAID volumes with current status and
			   associated member disks.  If UUID is specified,
			   only list the RAID set with that AppleRAID Set
			   UUID.  If -plist is specified, then a property list
			   will be emitted instead of user-formatted output.
			   The -plist and UUID arguments may not both be spec-
			   ified.  diskutil listRAID and diskutil checkRAID
			   are deprecated synonyms for diskutil appleRAID
			   list.

		create mirror | stripe | concat setName format devices ...
			   Create a new RAID set consisting of multiple disks
			   and/or RAID sets.  setName is used for both the
			   name of the created RAID volume and the RAID set
			   itself (as displayed in list). e.g. 'diskutil cre-
			   ateRAID stripe MyArray JHFS+ disk1 disk2 disk3
			   disk4'.  Ownership of the affected disks is
			   required.  diskutil createRAID is a deprecated syn-
			   onym for diskutil appleRAID create.

		delete raidVolume
			   Destroy an existing RAID set.  If the RAID set is a
			   mirror with a resizable file system, delete will
			   attempt to convert each of the member partitions
			   back into a non-RAID volume while retaining the
			   contained file system.  For concatenated RAID sets
			   with a resizable file system, delete will attempt
			   to shrink the file system to fit on the first mem-
			   ber partition and convert that to a non-RAID vol-
			   ume.  Ownership of the affected disks is required.
			   diskutil destroyRAID is a deprecated synonym for
			   diskutil appleRAID delete.

		repairMirror raidVolume newDevice
			   Repair a degraded mirror by adding a ""new"" disk
			   given as newDevice to the RAID mirror set whose
			   exported disk device or set UUID is given as
			   raidVolume. The new disk must be the same size or
			   larger than the existing disks in the RAID set.
			   After running this command, you should manually
			   remove the old (orphaned, failed) member(s) with
			   diskutil appleRAID remove. Ownership of the
			   affected disk is required.  diskutil repairMirror
			   is a deprecated synonym for diskutil appleRAID
			   repairMirror.

		add type newDevice raidVolume
			   Add a new member or hot spare to an existing RAID
			   set.  Type can be either member or spare.  New
			   disks are added live, the RAID volume does not need
			   to be unmounted.  Mirrored volumes support adding
			   both members and hot spares, concatenated volumes
			   only support adding members.  When adding to a mir-
			   rored RAID set, the new disk must be the same size
			   or larger than the existing disks in the RAID set.
			   Adding a hot spare to a mirror will enable autore-
			   building for that mirror.  Adding a new member to a
			   concatenated RAID set appends the member and
			   expands the RAID volume.  Ownership of the affected
			   disk is required.  diskutil addToRAID is a depre-
			   cated synonym for diskutil appleRAID add.

		remove oldDevice raidVolume
			   Remove a member or spare from an existing RAID set.
			   Old disks are removed live; the RAID volume does
			   not need to be unmounted.  For missing devices,
			   oldDevice must be the device's UUID.  Online mirror
			   members with a resizable file system will be con-
			   verted to non-RAID volumes, spare and offline mem-
			   bers will be marked free.  For concatenated RAID
			   sets, only the last member can be removed.  For
			   resizable file systems remove will first attempt to
			   shrink the concatenated RAID set so that the file
			   system fits on the remaining disks.	Ownership of
			   the affected disk is required.  diskutil
			   removeFromRAID is a deprecated synonym for diskutil
			   appleRAID remove.

		enable mirror | concat device
			   Convert a non-RAID disk partition containing a
			   resizable file system (such as JHFS+) into an
			   unpaired mirror or single disk concatenated RAID
			   set.  Disks that were originally partitioned on Mac
			   OS X 10.2 Jaguar or earlier or were partitioned to
			   be Mac OS 9 compatible may not be resizable.  Own-
			   ership of the affected disk is required.  diskutil
			   enableRAID is a deprecated synonym for diskutil
			   appleRAID enable.

		update key value raidVolume
			   Update the key value parameters of an existing RAID
			   set.  Valid keys are:

				 o   AutoRebuild - If true, the system
				     attempts to rebuild degraded mirrored
				     volumes automatically.  When looking for
				     devices for rebuild, AppleRAID first
				     looks for hot spares and then degraded
				     members.  Use a value of ""1"" for true and
				     ""0"" for false.

				 o   SetTimeout - Controls how long the system
				     waits (in seconds) for a missing device
				     before degrading a mirrored raid set.
				     Also controls the amount of time you have
				     to disconnect all devices from an
				     unmounted mirror without degrading it.

			   Ownership of the affected disk is required.
			   diskutil updateRAID is a deprecated synonym for
			   diskutil appleRAID update.

     coreStorage | cs coreStorageVerb [...]
		CoreStorage verbs can be used to create, manipulate and
		destroy CoreStorage volumes.

		CoreStorage maintains a world of virtual disks, somewhat like
		RAID, in which one can easily add or remove imported backing
		store disks, as well as exported usable volumes, to or from a
		pool (or several pools). This provides the user with flexibil-
		ity in allocating their hardware; user or operating system
		data can span multiple physical disks seamlessly, for example.

		Apple CoreStorage defines four types of objects, instances of
		which are uniquely represented by a UUID:

		      o   Logical Volume Group (LVG)

		      o   Physical Volume (PV)

		      o   Logical Volume Family (LVF)

		      o   Logical Volume (LV)

		The Logical Volume Group (LVG) is the top or ""pool"" level;
		zero or more may exist during any OS boot time session.

		An LVG imports one or more Physical Volumes (PVs). A PV repre-
		sents a device that feeds the LVG storage space; a PV is nor-
		mally real media but it can be a disk image or even an
		AppleRAID Set. A disk offered to be a PV must be a partition
		and the encompassing scheme must be GPT.

		An LVG exports zero or more Logical Volume Families (LVFs). An
		LVF contains properties which govern and bind together all of
		its descendant Logical Volumes (LVs). These properties provide
		settings for Full Disk Encryption (FDE) (such as whether the
		LVG is encrypted, which users have access, etc) and other ser-
		vices.	However, at the present time, for new LVF creation,
		only zero or one LVF per LVG is supported.

		A Logical Volume Family (LVF) exports one or more Logical Vol-
		umes (LVs).  However, at the present time, only and exactly
		one LV per LVF is supported.

		A Logical Volume (LV) exports a dev node, upon which a file
		system (such as Journaled HFS+) resides.

		For more information on specifying device arguments, see the
		DEVICES section below.

		CoreStorage is not a replacement for backing up your data.
		Backups should be always be performed on a regular basis and
		before modifying any CoreStorage volumes using these commands.

		The following is a list of coreStorage sub-verbs with their
		descriptions and individual arguments.

		list [-plist | UUID]
			   Display a tree view of the CoreStorage world for
			   all current logical volume groups (LVGs) with mem-
			   ber disks (PVs) and exported volumes (LVFs and
			   LVs), with properties and status for each level.
			   If -plist is specified then a property list will be
			   emitted instead of the formatted tree output; the
			   UUIDs can be used with the diskutil coreStorage
			   information verb to get properties for the object
			   represented by that UUID.  If UUID is specified
			   then an attempt is made to list only that UUID
			   (whatever type of CoreStorage object it may repre-
			   sent).  The -plist and UUID arguments may not both
			   be specified.

		info | information [-plist] UUID | device
			   Display properties of the CoreStorage object (LVG,
			   PV, LVF, or LV) associated with the given CoreStor-
			   age UUID or disk.

		convert device [-stdinpassphrase | -passphrase [passphrase]]
			   Convert a regular Journaled HFS+ or Case-sensitive
			   Journaled HFS+ volume (must be on a partition and
			   within a GPT partitioning scheme) into a CoreStor-
			   age logical volume.

			   If -passphrase is specified, the on-disk bytes will
			   be encrypted. You will be prompted for a new
			   passphrase interactively, or you can specify the
			   passphrase on the command line. Alternatively, if
			   you specify -stdinpassphrase the standard input is
			   read for the passphrase so that a program could
			   execute diskutil and send the passphrase through a
			   pipe without having to expose it as a command-line
			   parameter.

			   The volume is encrypted with an FDE ""Disk""
			   passphrase, which is distinct from the ""User"" ID
			   and passphrase combination which FileVault asso-
			   ciates with a volume.  Therefore, if you want to
			   encrypt a macOS ""OS-bearing"" volume (with its user
			   accounts), you must use FileVault in Security Pref-
			   erences or the contextual menu in the Finder.

			   The volume must be resizable (the above types are)
			   and also mounted. Conversion is done live and in-
			   place; targeting the boot volume is supported; as
			   much of the conversion as possible is done before
			   an eject or reboot is necessary.

			   After slightly shrinking the source volume to make
			   room for CoreStorage data structures at the end,
			   its partition type is changed to Apple_CoreStorage
			   and it becomes a CoreStorage Physical Volume.  A
			   new CoreStorage Logical Volume Group is then cre-
			   ated with this Physical Volume as the backing
			   store, followed by the creation of a Logical Volume
			   Family and Logical Volume pair.

			   At this point, the new CoreStorage PV/LVG/LVF/LV
			   stack is ready for use, although the ""old"" mount-
			   point must first be unmounted; yet it might not be
			   unmountable. This will occur if the target (now the
			   PV) is the current boot volume.

			   Just before exiting, diskutil coreStorage convert
			   will try to unmount the target disk (which is now
			   the ""old"" mount point and the new PV). If success-
			   ful (target is not the boot disk), the volume now
			   becomes mounted from the LV. If unsuccessful (tar-
			   get is the boot disk), a reboot is necessary.

			   At this point, if no encryption was specified, all
			   is done. Otherwise, the bytes-on-disk will begin to
			   be encrypted in-place by CoreStorage automatically
			   ""in the background"" while the PV/LVG/LVF/LV stack
			   continues to be usable. Encryption progress may be
			   monitored with diskutil coreStorage list.

			   When encryption is finished, a Disk passphrase will
			   be required the next time the LV is ejected and re-
			   attached.  If the LV is hosting the boot volume,
			   this passphrase requirement will thus occur at the
			   next reboot.

			   Note that all on-disk data is not secured immedi-
			   ately; it is a deliberate process of encrypting all
			   on-disk bytes while the CoreStorage driver keeps
			   publishing the (usable) LVG/LV.

			   Ownership of the affected disk is required.

		revert device | lvUUID [-stdinpassphrase] | [-passphrase
			   passphrase] | [-recoverykeychain file]
			   Convert a CoreStorage logical volume back to its
			   native type.  The volume must have been created by
			   means of conversion, e.g. with diskutil coreStorage
			   convert.

			   If the volume was not created with a passphrase,
			   then simple ownership of the affected disk is
			   required; otherwise, a Disk passphrase must be sup-
			   plied, either interactively or via one of the
			   parameters or a keychain file in the same manner as
			   diskutil coreStorage unlockVolume.

		create | createLVG lvgName devices ...
			   Create a CoreStorage logical volume group. The
			   disks specified will become the (initial) set of
			   physical volumes; more than one may be specified.
			   You can specify partitions (which will be re-typed
			   to be Apple_CoreStorage) or whole-disks (which will
			   be partitioned as GPT and will contain an
			   Apple_CoreStorage partition).  The resulting LVG
			   UUID can then be used with createVolume below.  All
			   existing data on the drive(s) will be lost.	Owner-
			   ship of the affected disk is required.

		delete | deleteLVG lvgUUID | lvgName
			   Delete a CoreStorage logical volume group. All log-
			   ical volume families with their logical volumes are
			   removed, the logical volume group is destroyed, and
			   the now-orphaned physical volumes are erased and
			   partition-typed as Journaled HFS+.

		rename | renameLVG lvgUUID | lvgName newName
			   Rename a CoreStorage logical volume group. Do not
			   confuse this name with the LV name or the volume
			   name of the file system volume on the LV.

		createVolume | createLV lvgUUID | lvgName type name size
			   [-stdinpassphrase | -passphrase [passphrase]]
			   Export a new logical volume family, with a new log-
			   ical volume under it, out of a CoreStorage logical
			   volume group.  Type is the file system personality
			   to initialize on the new logical volume. Valid
			   types are Journaled HFS+ or Case-sensitive Jour-
			   naled HFS+ or their aliases.  Size is the amount of
			   space to allocate from the parent LVG. It is given
			   in the same manner as the triplet description for
			   the partitionDisk verb, and you can also specify
			   with % a percentage of the currently remaining
			   unallocated space in the LVG.

			   If -passphrase or -stdinpassphrase is specified, in
			   the same manner as with diskutil coreStorage
			   convert above, on-disk data will be stored in an
			   encrypted form as the Logical Volume is filled;
			   otherwise, the data will remain plain.

		deleteVolume | deleteLV lvUUID | device
			   Remove an exported logical volume (and its logical
			   volume family as appropriate) from a CoreStorage
			   logical volume group. Any data on that logical vol-
			   ume will be lost.  This operation will thus result
			   in an increase in free space in the logical volume
			   group.

			   It is assumed that the logical volume is used as a
			   backing store for a file system; therefore, an
			   unmount attempt is made which must succeed before
			   the removal of the logical volume is done.

		encryptVolume | encryptLV lvUUID | device [-stdinpassphrase] |
			   [-passphrase passphrase]
			   Begin a live background process of encrypting the
			   on-disk backing bytes of an existing plain
			   CoreStorage logical volume (LV).

			   That is, the on-disk bytes that are backing the
			   user data are all visited, read, and re-written in
			   an encrypted form; this process can take a long
			   time (minutes to hours). This process continues
			   seamlessly across reboots. The logical volume
			   remains usable at all times.  When this command
			   returns, the operation will be ongoing; you can
			   check progress with diskutil coreStorage list.

			   The entire logical volume family (LVF) is affected
			   since all LVs in an LVF share the same encryption
			   settings.

			   Any new user data written while this background
			   operation is in progress will be in encrypted form.

			   Specifying -passphrase or -stdinpassphrase or
			   interactively entering a passphrase is mandatory;
			   you do so in the same manner as with diskutil
			   coreStorage convert above.

			   The volume is encrypted with an FDE ""Disk""
			   passphrase, which is distinct from the ""User"" ID
			   and passphrase combination which FileVault asso-
			   ciates with a volume.  Therefore, if you want to
			   encrypt a macOS ""OS-bearing"" volume (with its user
			   accounts), you must use FileVault in Security Pref-
			   erences or the contextual menu in the Finder.

		decryptVolume | decryptLV lvUUID | device [-stdinpassphrase] |
			   [-passphrase passphrase]
			   Begin a live background process of decrypting the
			   on-disk backing bytes of an existing encrypted
			   CoreStorage logical volume (LV). Bytes are read,
			   decrypted, and written back to disk in plain form.
			   The LV must be unlocked before beginning this oper-
			   ation.

			   Like as in diskutil coreStorage encryptVolume
			   above, all on-disk bytes are visited and converted,
			   the process is seamless across reboots, the logical
			   volume remains usable at all times, the entire log-
			   ical volume family (LVF) is affected, any new user
			   data written will be in plain form, and the opera-
			   tion will be ongoing when this command returns.

			   Credentials must be supplied; you can use
			   -passphrase or -stdinpassphrase to supply a Disk
			   passphrase, or you can specify that a recovery key-
			   chain file be used, in the same manner as diskutil
			   coreStorage unlockVolume.

		unlockVolume | unlockLV [-nomount] lvUUID [-stdinpassphrase] |
			   [-passphrase passphrase] | [-recoverykeychain file]
			   Unlock a logical volume and file system, causing it
			   to be attached and mounted.

			   Data is then accessible in plain form to the file
			   system and applications, while the on-physical-disk
			   backing bytes remain in encrypted form.

			   The locked state means that the CoreStorage driver
			   has not been given authentication information (a
			   passphrase) to interpret the encrypted bytes on
			   disk and thus export a dev node.  This verb unlocks
			   a logical volume family (LVF) and its logical vol-
			   umes (LVs) by providing that authentication; as the
			   LVs thus appear as dev nodes, any file systems upon
			   them are automatically mounted unless the -nomount
			   option is given.

			   To re-lock the volume, make it offline again by
			   ejecting it, e.g. with diskutil eject.

			   Credentials must be supplied. You must either sup-
			   ply a Disk passphrase interactively, with one of
			   the -passphrase or -stdinpassphrase parameters in
			   the same manner as with diskutil coreStorage
			   convert above, or you must specify that a recovery
			   keychain file be used.

			   You can specify -recoverykeychain with a path to a
			   keychain file.  The keychain must be unlocked; see
			   security(1) for more information.

		changeVolumePassphrase | passwd lvUUID [-recoverykeychain
			   file] [-oldpassphrase oldpassphrase]
			   [-newpassphrase newpassphrase] [-stdinpassphrase]
			   Change the Disk passphrase of an existing encrypted
			   volume. It need not be unlocked nor mounted. The
			   parameters, while variously optional, must be given
			   in the above order.

			   You must authenticate either via the -oldpassphrase
			   parameter, via the -stdinpassphrase parameter (with
			   newline or eof-terminated data given to stdin), or
			   via an interactive prompt (if no parameters are
			   given), in the same manner as diskutil coreStorage
			   convert above.  Alternatively, you can authenticate
			   by specifying -recoverykeychain with a path to a
			   keychain file.

			   A new passphrase must then be supplied, again via
			   one of the three methods above (interactive,
			   -newpassphrase, or -stdinpassphrase).

			   If you are supplying both the old and new
			   passphrases via stdin, they must be separated with
			   a newline character.

			   Only the Disk passphrase is supported; you cannot
			   change credentials for various users that were set
			   up with FileVault or the Finder; to edit creden-
			   tials for such users, you should use fdesetup (8).

		resizeVolume | resizeLV lvUUID | device size
			   Resize a logical volume (LV). If you shrink an LV,
			   more space becomes available in its logical volume
			   group (LVG); if you grow an LV, less space becomes
			   available. You can check the free space with
			   diskutil coreStorage list. The file system volume
			   which resides inside the LV is grown or shrunk as
			   needed.

			   You can specify a size of zero (0) to fill up all
			   remaining space in the parent LVG with the given
			   LV.

		resizeDisk | resizePV pvUUID size [part1Format part1Name
			   part1Size part2Format part2Name part2Size
			   part3Format part3Name part3Size ...]
			   Resize a physical volume (PV). If you shrink a PV,
			   less space becomes available in its logical volume
			   group (LVG); if you grow a PV, more space becomes
			   available. The partition in which the PV resides is
			   changed to accommodate, and the associated booter
			   partition, if present, is automatically moved.

			   Note that you cannot ordinarily grow a PV unless
			   there is free space in the partition map beyond it;
			   note also that you cannot ordinarily shrink a PV
			   unless the LVG has some free space in it (e.g. by
			   shrinking an overlying LV first).

			   When decreasing the size (shrinking), new parti-
			   tions may optionally be created to fill the newly-
			   freed space.  To do this, specify the format, name,
			   and size parameters in the same manner as the
			   triplet description for the partitionDisk verb.

			   You can specify a size of zero (0) to fill up all
			   remaining space to the next partition or the end of
			   the partition map, if possible.

		resizeStack lvUUID | device [pvUUID] size [part1Format
			   part1Name part1Size part2Format part2Name part2Size
			   part3Format part3Name part3Size ...]
			   Combine the actions of diskutil coreStorage
			   resizePV and diskutil coreStorage resizeLV in the
			   correct sequence in order to effect a shrink or a
			   grow in an entire LVG setup.

			   This is done by making a change to the size of a
			   logical volume (LV), after or before which (one of
			   its) physical volume(s) (PV) also changes its size
			   accordingly.  The (HFS) file system ""on top of"" the
			   LV and the disk partition ""below"" the PV, as well
			   as the location of the PV's associated booter par-
			   tition, are automatically adjusted.

			   When decreasing the size (shrinking), new parti-
			   tions may optionally be created to fill the newly-
			   freed space.  To do this, specify the format, name,
			   and size parameters in the same manner as the
			   triplet description for the partitionDisk verb.

			   Since an LVG might have one (e.g. Full Disk Encryp-
			   tion (FDE), aka FileVault), two (e.g. Fusion), or
			   even three (certain Boot Camp configurations) PVs,
			   a specific PV must be chosen. You can have this
			   command choose one for you, or you can specify the
			   PV UUID directly. If you do not specify a PV, the
			   one which has previously been marked for this pur-
			   pose is used; if no mark, a policy algorithm is
			   applied.

			   If your new LV size represents a grow of the exist-
			   ing LV size, then the PV size will take up more
			   space on disk, thus creating a larger LVG for the
			   larger LV to live in.  If your new LV size repre-
			   sents a shrink, then the PV size will take up less
			   space on disk, thus creating a smaller LVG, which
			   is enough for the smaller LV to live in. The magni-
			   tude of the size change you specify (which is for
			   the LV) causes an exact size change in the PV if
			   you conform to partition rounding (alignment)
			   restrictions; the corresponding LV change may be
			   greater because it is under additional alignment
			   restrictions imposed by CoreStorage and HFS.

			   The ""spilling over"" of size change effects from one
			   PV onto another is not supported; only and exactly
			   one PV is affected by this operation. Grows or
			   shrinks whose effects don't ""fit"" the designated PV
			   will result in an error message and no effect.  For
			   example, you can't do a shrink on a multi-PV setup
			   such that the designated PV should shrink to zero
			   size and so effectively should disappear.  Nor can
			   you do a grow which would necessitate the growth of
			   some other PV or the addition of new PVs.

			   As in diskutil coreStorage resizePV, note that you
			   cannot grow unless there is free space in the par-
			   tition map beyond the designated PV, which is not
			   normally the case because you usually don't leave
			   gaps of free space on your disk.

			   You can specify a size of zero (0) to fill up all
			   remaining space to the partition following the des-
			   ignated PV's booter or to the end of the partition
			   map, if possible.

DEVICES
     A device parameter for any of the above commands (except where explicitly
     required otherwise) can usually be any of the following:

	   o   The disk identifier (see below).  Any entry of the form of
	       disk*, e.g.  disk1s9.

	   o   The device node entry containing the disk identifier.  Any
	       entry of the form of /dev/[r]disk*, e.g.  /dev/disk2.

	   o   The volume mount point.	Any entry of the form of /Volumes/*,
	       e.g.  /Volumes/Untitled.  In most cases, a ""custom"" mount point
	       e.g.  /your/custom/mountpoint/here is also accepted.

	   o   The URL form of any of the volume mount point forms described
	       above.  E.g.  file:///Volumes/Untitled or file:///.

	   o   A UUID.	Any entry of the form of e.g.
	       11111111-2222-3333-4444-555555555555.  The UUID can be a
	       ""media"" UUID which IOKit places in an IOMedia node as derived
	       from e.g. a GPT map's partition UUID, or it can be an AppleRAID
	       (or CoreStorage) set (LV) or member (PV) UUID.

	   o   A volume name, e.g.  Untitled.  This match is only attempted if
	       the given device is not of the form [/dev/][r]disk*, nor
	       [/Volumes/]*.  The match attempt is against the intrinsic vol-
	       ume label, not against the terminal component, if mounted, of
	       its mount point.

DISK IDENTIFIER
     The (BSD) disk identifier string variously identifies a physical or logi-
     cal device unit, a session (if any) upon that device, a partition (slice)
     upon that session (if any), or a virtual logical volume.  It may take the
     form of diskU, diskUsS, diskUsQ, or diskCsV, where U, C, S, Q and V are
     positive decimal integers (possibly multi-digit), and where:

	   o   U is the device unit.  It may refer to hardware (e.g. a hard
	       drive, optical drive, or memory card) or a virtual ""drive"" con-
	       structed by software (e.g. an AppleRAID Set, disk image,
	       CoreStorage LV, etc).

	   o   C is an APFS Container.	This is a a virtual disk constructed
	       by APFS to represent a collection of APFS Volumes.

	   o   Q is the session and is only included for optical media; it
	       refers to the number of times recording has taken place on the
	       currently-inserted medium (disc).

	   o   S is the ""slice""; it refers to a partition.  Upon this parti-
	       tion, the raw data that underlies a user-visible file system is
	       usually present, but it may also contain specialized data for
	       certain 3rd-party database programs, or data required for the
	       system software (e.g. EFI partitions, booter partitions, APM
	       partition map data, etc), or, notably, it might contain back-
	       ing-store physical volumes for AppleRAID, CoreStorage, APFS, or
	       3rd-party Storage Systems.

	   o   V is an APFS Volume; it refers to a virtual logical volume that
	       is shared out of an APFS Container.  For example, if an
	       Apple_APFS-typed partition is on disk5s2, then disk5s2 is
	       termed the APFS Physical Store which is imported into an APFS
	       Container. The APFS Container might then export e.g. disk8s1,
	       which is termed an APFS Volume, which is mountable as a file
	       system. Multiple APFS Volumes can be exported from a single
	       APFS Container.

     Some units (e.g. floppy disks, RAID sets) contain file system data upon
     their ""whole"" device instead of containing a partitioning scheme with
     partitions.

     Note that some of the forms appear the same and must be distinguished by
     context.  For example, diskUsQ, diskUsS, and diskCsV are all 2-part forms
     that can mean different things: For non-optical media, it identifies a
     partition (on a partition map) upon which (file system) data is stored;
     for optical media, it identifies a session upon which an entire partition
     map (with its partitions with file systems) is stored; for an APFS setup,
     it identifies an APFS Volume. As another example, in ""stacked"" cases
     (CoreStorage on AppleRAID or APFS on AppleRAID), the 1-part diskU form
     becomes a CoreStorage PV or APFS PhysicalStore, in contrast with the
     more-common 2-part form.

     It is important for software to avoid relying on numerical ordering of
     any of the parts.	Activities including but not limited to partition
     deletions and insertions, partition resizing, virtual volume deletions
     and additions, device ejects and attachments due to media insertion
     cycles, plug cycles, authentication lock cycles or reboots, can all cause
     (temporary) gaps and non-increments in the numerical ordering of any of
     the parts. You must rely on more persistent means of identification, such
     as the various UUIDs.

SIZES
     Wherever a size is emitted as an output, it is presented as a base-ten
     approximation to the precision of one fractional decimal digit and a
     base-ten SI multiplier, often accompanied by a precise count in bytes.
     Scripts should refrain from parsing this human-readable output and use
     the -plist option instead.

     Wherever a size is to be supplied by you as an input, you can provide
     values in a number of different ways, some absolute and some context-sen-
     sitive.  Values are interpreted as base ten and must be positive with no
     preceding ""+"".  An integer without a suffix is taken to mean an exact
     number of bytes (e.g. 5368709120).  Multiplier suffixes are optional,
     must follow your value immediately without whitespace, and allow your
     value to be a real number (e.g. 5.1234t).	Some of the specifiers below
     should not have a preceding value at all (e.g. the letter R for ""remain-
     der"").

     Power-of-ten suffixes:

	   o   B is bytes (not blocks) where the multiplier is 1.  This suffix
	       may be omitted.

	   o   K[B] is power of ten kilobytes where the multiplier is 1000 (1
	       x 10^3).

	   o   M[B] is power of ten megabytes where the multiplier is 1000000
	       (1 x 10^6).

	   o   G[B] is power of ten gigabytes where the multiplier is
	       1000000000 (1 x 10^9).

	   o   T[B] is power of ten terabytes where the multiplier is
	       1000000000000 (1 x 10^12).

	   o   P[B] is power of ten petabytes where the multiplier is
	       1000000000000000 (1 x 10^15).

	   o   E[B] is power of ten exabytes where the multiplier is
	       1000000000000000000 (1 x 10^18).

     Power-of-two suffixes:

	   o   Ki[B] is power of two kibibytes where the multiplier is 1024 (1
	       x 2^10).

	   o   Mi[B] is power of two mebibytes where the multiplier is 1048576
	       (1 x 2^20).

	   o   Gi[B] is power of two gibibytes where the multiplier is
	       1073741824 (1 x 2^30).

	   o   Ti[B] is power of two tebibytes where the multiplier is
	       1099511627776 (1 x 2^40).

	   o   Pi[B] is power of two pebibytes where the multiplier is
	       1125899906842624 (1 x 2^50).

	   o   Ei[B] is power of two exbibytes where the multiplier is
	       1152921504606846976 (1 x 2^60).

     The following are useful when working with devices and partition maps:

	   o   S | UAM (""sectors"") is 512-byte units (device-independent)
	       where the multiplier is always 512.

	   o   DBS (""device block size"") is the device-dependent native block
	       size of the encompassing whole disk, if applicable, where the
	       multiplier is often 512, but not always; indeed it might not be
	       a power of two.

     In certain contexts (e.g. when asking to ""use all space available"", or
     when building partition triplets) you can provide a relative value as
     follows:

	   o   0 (the number zero) is a request to allocate ""all possible"".
	       This may mean different things in different contexts.  For par-
	       tition maps, this requests allocation until the start of the
	       following partition or the end of the partition map's allocat-
	       able space.

	   o   % (with a preceding number) is a percentage of the whole-disk
	       size, the partition map size, or other allocatable size, as
	       appropriate by context.	Use of % is not supported in all situ-
	       ations.

	   o   R (with no preceding number) specifies the remainder of the
	       whole-disk size or other allocatable size after all other
	       triplets in the group are taken into account.  It need not be
	       in the last triplet.  It must only appear in at most one
	       triplet among all triplets.  Use of R is not supported in all
	       situations; in some such cases, a value of 0 is more appropri-
	       ate.

     You can provide an operating system-defined constant value as follows:

	   o   %recovery% (with no preceding number) is the customary size of
	       pre-macOS-13.0 Recovery Partitions.

     Note again that B refers to bytes and S and UAM refer to a constant mul-
     tiplier of 512; the latter are useful when working with tools such as gpt
     (8) or df (1).  Note also that this multiplier is not a ""block"" size as
     actually implemented by the underlying device driver and/or hardware, nor
     is it an ""allocation block"", which is a file system's minimum unit of
     backing store usage, often formatting-option-dependent.

     Examples: 10G (10 gigabytes), 4.23tb (4.23 terabytes), 5M (5 megabytes),
     4GiB (exactly 2^32 bytes), 126000 (exactly 126000 bytes), 25.4% (25.4
     percent of whole disk size).

FORMAT
     The format parameter for the erasing and partitioning verbs is the file
     system personality name.  You can determine this name by looking in a
     file system bundle's
     /System/Library/Filesystems/<fs>.fs/Contents/Info.plist and looking at
     the keys for the FSPersonalities dictionary, or by using the
     listFilesystems verb, which also lists shortcut aliases for common per-
     sonalities (these shortcuts are defined by diskutil for use with it
     only).

     Common examples include JHFS+, JHFSX, MS-DOS, etc, as nicknames for the
     canonical forms from the file system bundles such as ""Case-sensitive
     HFS+"".

EXAMPLES
     Erase a whole disk (device)
     diskutil eraseDisk JHFS+ Untitled disk3

     Erase a volume (or format a partition or virtual disk)
     diskutil eraseVolume jhfs+ UntitledHFS /Volumes/SomeDisk

     Erase and (re)-partition a disk (device) with three partitions
     diskutil partitionDisk disk3 HFSX Foo1 10G JHFS+ Foo2 10G MS-DOS FOO3 0

     Erase and format with a different volume file system
     diskutil eraseVolume ExFAT FOO disk3s2

     Remove a partition from a partition map altogether
     diskutil eraseVolume free free disk3s2

     Convert a HFS disk to APFS
     diskutil apfs convert disk3s2

     Create a new APFS Container with three new APFS Volumes
     diskutil apfs createContainer disk0s2
     diskutil apfs addVolume disk8 APFS MyVolume1
     diskutil apfs addVolume disk8 APFS MyVolume2 -passprompt
     diskutil apfs addVolume disk8 APFS MyVolume3 -quota 10g
     diskutil apfs list

     Encrypt an APFS Volume (enable FileVault)
     diskutil apfs encryptVolume disk8s1 -user disk

     Lock or unlock an APFS Volume
     diskutil apfs list disk8
     diskutil apfs lockVolume disk8s1
     diskutil apfs unlockVolume disk8s1 (tries all users)
     diskutil apfs unlockVolume disk8s2 -user USERUUID (tries specific user)

     Decrypt an APFS Volume (disable FileVault)
     diskutil apfs listUsers disk8s1
     diskutil apfs decryptVolume disk8s1 -user USERUUID

     Remove an APFS Volume from its APFS Container altogether
     diskutil apfs deleteVolume disk8s3

     Resize an HFS volume and create a volume after it
     diskutil resizeVolume /Volumes/SomeDisk 50g MS-DOS DOS 0

     Resize an HFS volume and leave all remaining space as unused
     diskutil resizeVolume /Volumes/SomeDisk 12g

     Shrink a Core Storage PV in order to make space for a Boot Camp volume
     diskutil coreStorage list
     diskutil coreStorage resizeStack LVUUID PVUUID 150g ms-dos BOOTCAMP 0

     Revert a disk from Core Storage back to plain HFS, possibly decrypting
     diskutil coreStorage revert disk5

     Merge two partitions into a new partition
     diskutil mergePartitions JHFS+ not disk1s3 disk1s5

     Split a partition into three new ones
     diskutil splitPartition /Volumes/SomeDisk JHFS+ vol1 12g MS-DOS VOL2 8g
     JHFS+ vol3 0

     Create an AppleRAID
     diskutil createRAID mirror MirroredVolume JHFS+ disk1 disk2

     Destroy an AppleRAID
     diskutil destroyRAID /Volumes/MirroredVolume

     Repair a damaged AppleRAID
     diskutil repairMirror /Volumes/MirroredVolume disk3

     Convert volume into an AppleRAID volume
     diskutil enableRAID mirror /Volumes/ExistingVolume

     Erase a partition, shrink, associate a pre-macOS-13.0 Recovery Partition
     diskutil splitPartition disk8s2 JHFS+ MacHD R %Apple_Boot% %noformat%
     %recovery%

     Partition a disk with the MBR partitioning scheme (e.g. for a camera)
     diskutil partitionDisk disk3 MBR MS-DOS CAM1 0

     Partition a disk with the (deprecated) APM partitioning scheme
     diskutil partitionDisk disk3 APM HFS+ vol1 15% Journaled\ HFS+ vol2 R
     Journaled\ HFS+ vol3 25% Free\ Space volX 10g

SEE ALSO
     hdiutil(1), mount(8), umount(8), diskmanagementd(8),
     diskmanagementstartup(8), diskarbitrationd(8), corestoraged(8),
     fdesetup(8), ioreg(8), newfs_hfs(8), fsck_hfs(8), authopen(1),
     hfs.util(8), msdos.util(8), ufs.util(8), drutil(1), vsdbutil(8)

ERRORS
     diskutil will exit with status 0 if successful or 1 if it cannot complete
     the requested operation; this includes cases in which usage text is
     printed.  Before diskutil returns with status 1, it prints a message
     which might include an explanation local to diskutil, an error string
     from the DiskManagement or MediaKit frameworks, an underlying POSIX
     error, or some combination.

HISTORY
     The eraseDisk and partitionDisk verbs had an option to add Mac OS 9 driv-
     ers (in partitions designated for that purpose); there was also a
     repairOS9Permissions verb.  These have been removed.

     Starting with Mac OS X 10.6, the input and output notation of disk and
     partition sizes use power-of-10 suffixes.	In the past this had been
     power-of-2, regardless of the suffix (e.g. G, Gi, GiB) used for display
     or accepted as input.  Starting with Mac OS X 10.11, the B suffix is
     optional even for ""bare"" numeric values.

     Starting with Mac OS X 10.11, the verify- and repairPermissions verbs
     have been removed.

     Starting with macOS 10.12, the plist output of partitions from diskutil
     list -plist is presented in on-disk (not BSD slice name, e.g. disk0s2)
     order. This mimics the order of outputs from programs such as gpt (1).
     The human-readable output always has been, and remains, in on-disk order.

     Starting with macOS 10.13.2, APFS cryptographic user authentication is
     required even when disabling FileVault.

     Starting with macOS 10.14, partitions on all media above 1GiB in size
     will default to 1MiB alignment, regardless of the partitioning scheme.
     This is significant for MBR partition maps and their use in appliances
     such as cameras. Free-space requests will not be aligned.

macOS				 14 June 2018				 macOS
","# diskutil

> Utility to manage local disks and volumes.

- List all currently available disks, partitions and mounted volumes:

`diskutil list`

- Repair the file system data structures of a volume:

`diskutil repairVolume {{/dev/diskX}}`

- Unmount a volume:

`diskutil unmountDisk {{/dev/diskX}}`

- Eject a CD/DVD (unmount first):

`diskutil eject {{/dev/disk1}}`
"
rubocop,,,,"# rubocop

> Lint Ruby files.

- Check all files in the current directory (including subdirectories):

`rubocop`

- Check one or more specific files or directories:

`rubocop {{path/to/file}} {{path/to/directory}}`

- Write output to file:

`rubocop --out {{path/to/file}}`

- View list of cops (linter rules):

`rubocop --show-cops`

- Exclude a cop:

`rubocop --except {{cop_1}} {{cop_2}}`

- Run only specified cops:

`rubocop --only {{cop_1}} {{cop_2}}`

- Auto-correct files (experimental):

`rubocop --auto-correct`
"
sv,,,,"# sv

> Control a running runsv service.

- Start a service:

`sudo sv up {{path/to/service}}`

- Stop a service:

`sudo sv down {{path/to/service}}`

- Get service status:

`sudo sv status {{path/to/service}}`
"
netstat,,,"
NETSTAT(1)		  BSD General Commands Manual		    NETSTAT(1)

NAME
     netstat -- show network status

SYNOPSIS
     netstat [-AaLlnW] [-f address_family | -p protocol]
     netstat [-gilns] [-v] [-f address_family] [-I interface]
     netstat -i | -I interface [-w wait] [-c queue] [-abdgqRtS]
     netstat -s [-s] [-f address_family | -p protocol] [-w wait]
     netstat -i | -I interface -s [-f address_family | -p protocol]
     netstat -m [-m]
     netstat -r [-Aaln] [-f address_family]
     netstat -rs [-s]

DESCRIPTION
     The netstat command symbolically displays the contents of various net-
     work-related data structures.  There are a number of output formats,
     depending on the options for the information presented.  The first form
     of the command displays a list of active sockets for each protocol.  The
     second form presents the contents of one of the other network data struc-
     tures according to the option selected. Using the third form, with a wait
     interval specified, netstat will continuously display the information
     regarding packet traffic on the configured network interfaces.  The
     fourth form displays statistics for the specified protocol or address
     family. If a wait interval is specified, the protocol information over
     the last interval seconds will be displayed.  The fifth form displays
     per-interface statistics for the specified protocol or address family.
     The sixth form displays mbuf(9) statistics.  The seventh form displays
     routing table for the specified address family.  The eighth form displays
     routing statistics.

     The options have the following meaning:

     -A    With the default display, show the address of any protocol control
	   blocks associated with sockets and the flow hash; used for debug-
	   ging.

     -a    With the default display, show the state of all sockets; normally
	   sockets used by server processes are not shown. With the routing
	   table display (option -r, as described below), show protocol-cloned
	   routes (routes generated by a RTF_PRCLONING parent route); normally
	   these routes are not shown.

     -b    With the interface display (option -i, as described below), show
	   the number of bytes in and out.

     -c queue
	   With the queue statistics (option -q, as described below), show
	   only those for the specified queue.

     -d    With either interface display (option -i or an interval, as
	   described below), show the number of dropped packets.

     -f address_family
	   Limit statistics or address control block reports to those of the
	   specified address family.  The following address families are rec-
	   ognized: inet, for AF_INET, inet6, for AF_INET6 and unix, for
	   AF_UNIX.

     -g    Show information related to multicast (group address) membership.
	   If the -s option is also present, show extended interface group
	   management statistics.  If the -v option is specified, show link-
	   layer memberships; they are suppressed by default.  Source lists
	   for each group will also be printed.  Specifiying -v twice will
	   print the control plane timers for each interface and the source
	   list counters for each group.  If the -i is specified, only that
	   interface will be shown.  If the -f is specified, only information
	   for the address family will be displayed.

     -I interface
	   Show information about the specified interface; used with a wait
	   interval as described below.  If the -s option is present, show
	   per-interface protocol statistics on the interface for the speci-
	   fied address_family or protocol, or for all protocol families.

     -i    Show the state of interfaces which have been auto-configured
	   (interfaces statically configured into a system, but not located at
	   boot time are not shown).  If the -a options is also present, mul-
	   ticast addresses currently in use are shown for each Ethernet
	   interface and for each IP interface address.  Multicast addresses
	   are shown on separate lines following the interface address with
	   which they are associated.  If the -s option is present, show per-
	   interface statistics on all interfaces for the specified
	   address_family or protocol, or for all protocol families.

     -L    Show the size of the various listen queues.	The first count shows
	   the number of unaccepted connections.  The second count shows the
	   amount of unaccepted incomplete connections.  The third count is
	   the maximum number of queued connections.

     -l    Print full IPv6 address.

     -m    Show statistics recorded by the memory management routines (the
	   network stack manages a private pool of memory buffers). More
	   detailed information about the buffers, which includes their cache
	   related statistics, can be obtained by using -mm or -m -m option.

     -n    Show network addresses as numbers (normally netstat interprets
	   addresses and attempts to display them symbolically).  This option
	   may be used with any of the display formats.

     -p protocol
	   Show statistics about protocol, which is either a well-known name
	   for a protocol or an alias for it.  Some protocol names and aliases
	   are listed in the file /etc/protocols.  The special protocol name
	   ``bdg'' is used to show bridging statistics.  A null response typi-
	   cally means that there are no interesting numbers to report.  The
	   program will complain if protocol is unknown or if there is no sta-
	   tistics routine for it.

     -q    Show network interface send queue statistics.  By default all
	   queues are displayed, unless specified with -c.  This option
	   requires specifying an interface with -I option.  More detailed
	   information about the queues, which includes their queueing algo-
	   rithm related statistics, can be obtained by using -qq or -q -q
	   option.

     -r    Show the routing tables.  Use with -a to show protocol-cloned
	   routes.  When -s is also present, show routing statistics instead.
	   When -l is also present, netstat assumes more columns are there and
	   the maximum transmission unit.  More detailed information about the
	   route metrics are displayed with -ll for TCP round trip times -lll
	   for all metrics.  Use the -z flags to display only entries with
	   non-zero RTT values.  (``mtu'') are also displayed.

     -R    Show reachability information.  Use with -i to show link-layer
	   reachability information for a given interface.

     -s    Show per-protocol statistics.  If this option is repeated, counters
	   with a value of zero are suppressed.  For security reasons, root
	   privileges are required to read TCP statistics and in the absence
	   of such privileges all TCP counters will be reported as zero.

     -S    Show interface link status and interface state information about
	   the specified interface.  This option requires specifying an inter-
	   face with -I option.

     -v    Increase verbosity level.

     -W    In certain displays, avoid truncating addresses even if this causes
	   some fields to overflow.

     -w wait
	   Show network interface or protocol statistics at intervals of wait
	   seconds.

     -x    Show extended link-layer reachability information in addition to
	   that shown by the -R flag.

OUTPUT
     The default display, for active sockets, shows the local and remote
     addresses, send and receive queue sizes (in bytes), protocol, and the
     internal state of the protocol.  Address formats are of the form
     ``host.port'' or ``network.port'' if a socket's address specifies a net-
     work but no specific host address.  If known, the host and network
     addresses are displayed symbolically according to the databases
     /etc/hosts and /etc/networks, respectively.  If a symbolic name for an
     address is unknown, or if the -n option is specified, the address is
     printed numerically, according to the address family.  For more informa-
     tion regarding the Internet ``dot format'', refer to inet(3)).  Unspeci-
     fied, or ``wildcard'', addresses and ports appear as ``*''.

     Internet domain socket states:

     CLOSED:  The socket is not in use.

     LISTEN:  The socket is listening for incoming connections.  Unconnected
     listening sockets like these are only displayed when using the -a option.

     SYN_SENT:	The socket is actively trying to establish a connection to a
     remote peer.

     SYN_RCVD:	The socket has passively received a connection request from a
     remote peer.

     ESTABLISHED:  The socket has an established connection between a local
     application and a remote peer.

     CLOSE_WAIT:  The socket connection has been closed by the remote peer,
     and the system is waiting for the local application to close its half of
     the connection.

     LAST_ACK:	The socket connection has been closed by the remote peer, the
     local application has closed its half of the connection, and the system
     is waiting for the remote peer to acknowledge the close.

     FIN_WAIT_1:  The socket connection has been closed by the local
     application, the remote peer has not yet acknowledged the close, and the
     system is waiting for it to close its half of the connection.

     FIN_WAIT_2:  The socket connection has been closed by the local
     application, the remote peer has acknowledged the close, and the system
     is waiting for it to close its half of the connection.

     CLOSING:  The socket connection has been closed by the local application
     and the remote peer simultaneously, and the remote peer has not yet
     acknowledged the close attempt of the local application.

     TIME_WAIT:  The socket connection has been closed by the local
     application, the remote peer has closed its half of the connection, and
     the system is waiting to be sure that the remote peer received the last
     acknowledgement.

     The interface display provides a table of cumulative statistics regarding
     packets transferred, errors, and collisions.  The network addresses of
     the interface and the maximum transmission unit (``mtu'') are also dis-
     played.

     The routing table display indicates the available routes and their sta-
     tus.  Each route consists of a destination host or network and a gateway
     to use in forwarding packets.  The flags field shows a collection of
     information about the route stored as binary choices.  The individual
     flags are discussed in more detail in the route(8) and route(4) manual
     pages.  The mapping between letters and flags is:

     1	     RTF_PROTO1       Protocol specific routing flag #1
     2	     RTF_PROTO2       Protocol specific routing flag #2
     3	     RTF_PROTO3       Protocol specific routing flag #3
     B	     RTF_BLACKHOLE    Just discard packets (during updates)
     b	     RTF_BROADCAST    The route represents a broadcast address
     C	     RTF_CLONING      Generate new routes on use
     c	     RTF_PRCLONING    Protocol-specified generate new routes on use
     D	     RTF_DYNAMIC      Created dynamically (by redirect)
     G	     RTF_GATEWAY      Destination requires forwarding by intermediary
     H	     RTF_HOST	      Host entry (net otherwise)
     I	     RTF_IFSCOPE      Route is associated with an interface scope
     i	     RTF_IFREF	      Route is holding a reference to the interface
     L	     RTF_LLINFO       Valid protocol to link address translation
     M	     RTF_MODIFIED     Modified dynamically (by redirect)
     m	     RTF_MULTICAST    The route represents a multicast address
     R	     RTF_REJECT       Host or net unreachable
     r	     RTF_ROUTER       Host is a default router
     S	     RTF_STATIC       Manually added
     U	     RTF_UP	      Route usable
     W	     RTF_WASCLONED    Route was generated as a result of cloning
     X	     RTF_XRESOLVE     External daemon translates proto to link address
     Y	     RTF_PROXY	      Proxying; cloned routes will not be scoped

     Direct routes are created for each interface attached to the local host;
     the gateway field for such entries shows the address of the outgoing
     interface.  The refcnt field gives the current number of active uses of
     the route.  Connection oriented protocols normally hold on to a single
     route for the duration of a connection while connectionless protocols
     obtain a route while sending to the same destination.  The use field pro-
     vides a count of the number of packets sent using that route.  The inter-
     face entry indicates the network interface utilized for the route.  A
     route which is marked with the RTF_IFSCOPE flag is instantiated for the
     corresponding interface.  A cloning route which is marked with the
     RTF_PROXY flag will not generate new routes that are associated with its
     interface scope.

     When netstat is invoked with the -w option and a wait interval argument,
     it displays a running count of statistics related to network interfaces
     or protocols.  An obsolete version of this option used a numeric parame-
     ter with no option, and is currently supported for backward compatibil-
     ity.  By default, this display summarizes information for all interfaces.
     Information for a specific interface may be displayed with the -I option.

SEE ALSO
     nfsstat(1), ps(1), inet(4), unix(4), hosts(5), networks(5), protocols(5),
     route(8), services(5), iostat(8),

HISTORY
     The netstat command appeared in 4.2BSD.

     IPv6 support was added by WIDE/KAME project.

BUGS
     The notion of errors is ill-defined.

Darwin				 June 15, 2001				Darwin
","# netstat

> Displays network-related information such as open connections, open socket ports, etc.

- List all ports:

`netstat -a`

- List all listening ports:

`netstat -l`

- List listening TCP ports:

`netstat -t`

- Display PID and program names for a specific protocol:

`netstat -p {{protocol}}`

- Print the routing table:

`netstat -nr`
"
oathtool,,,,"# oathtool

> OATH one-time password tool.

- Generate TOTP token (behaves like Google Authenticator):

`oathtool --totp --base32 {{secret}}`

- Generate a TOTP token for a specific time:

`oathtool --totp --now {{2004-02-29 16:21:42}} --base32 {{secret}}`

- Validate a TOTP token:

`oathtool --totp --base32 {{secret}} {{token}}`
"
trap,,,"
BUILTIN(1)		  BSD General Commands Manual		    BUILTIN(1)

NAME
     builtin, !, %, ., :, @, {, }, alias, alloc, bg, bind, bindkey, break,
     breaksw, builtins, case, cd, chdir, command, complete, continue, default,
     dirs, do, done, echo, echotc, elif, else, end, endif, endsw, esac, eval,
     exec, exit, export, false, fc, fg, filetest, fi, for, foreach, getopts,
     glob, goto, hash, hashstat, history, hup, if, jobid, jobs, kill, limit,
     local, log, login, logout, ls-F, nice, nohup, notify, onintr, popd,
     printenv, pushd, pwd, read, readonly, rehash, repeat, return, sched, set,
     setenv, settc, setty, setvar, shift, source, stop, suspend, switch,
     telltc, test, then, time, times, trap, true, type, ulimit, umask,
     unalias, uncomplete, unhash, unlimit, unset, unsetenv, until, wait,
     where, which, while -- shell built-in commands

SYNOPSIS
     builtin [-options] [args ...]

DESCRIPTION
     Shell builtin commands are commands that can be executed within the run-
     ning shell's process.  Note that, in the case of csh(1) builtin commands,
     the command is executed in a subshell if it occurs as any component of a
     pipeline except the last.

     If a command specified to the shell contains a slash ``/'', the shell
     will not execute a builtin command, even if the last component of the
     specified command matches the name of a builtin command.  Thus, while
     specifying ``echo'' causes a builtin command to be executed under shells
     that support the echo builtin command, specifying ``/bin/echo'' or
     ``./echo'' does not.

     While some builtin commands may exist in more than one shell, their oper-
     ation may be different under each shell which supports them.  Below is a
     table which lists shell builtin commands, the standard shells that sup-
     port them and whether they exist as standalone utilities.

     Only builtin commands for the csh(1) and sh(1) shells are listed here.
     Consult a shell's manual page for details on the operation of its builtin
     commands.	Beware that the sh(1) manual page, at least, calls some of
     these commands ``built-in commands'' and some of them ``reserved words''.
     Users of other shells may need to consult an info(1) page or other
     sources of documentation.

     Commands marked ``No**'' under External do exist externally, but are
     implemented as scripts using a builtin command of the same name.

	   Command	 External    csh(1)    sh(1)
	   !		 No	     No        Yes
	   %		 No	     Yes       No
	   .		 No	     No        Yes
	   :		 No	     Yes       Yes
	   @		 No	     Yes       Yes
	   {		 No	     No        Yes
	   }		 No	     No        Yes
	   alias	 No**	     Yes       Yes
	   alloc	 No	     Yes       No
	   bg		 No**	     Yes       Yes
	   bind 	 No	     No        Yes
	   bindkey	 No	     Yes       No
	   break	 No	     Yes       Yes
	   breaksw	 No	     Yes       No
	   builtin	 No	     No        Yes
	   builtins	 No	     Yes       No
	   case 	 No	     Yes       Yes
	   cd		 No**	     Yes       Yes
	   chdir	 No	     Yes       Yes
	   command	 No**	     No        Yes
	   complete	 No	     Yes       No
	   continue	 No	     Yes       Yes
	   default	 No	     Yes       No
	   dirs 	 No	     Yes       No
	   do		 No	     No        Yes
	   done 	 No	     No        Yes
	   echo 	 Yes	     Yes       Yes
	   echotc	 No	     Yes       No
	   elif 	 No	     No        Yes
	   else 	 No	     Yes       Yes
	   end		 No	     Yes       No
	   endif	 No	     Yes       No
	   endsw	 No	     Yes       No
	   esac 	 No	     No        Yes
	   eval 	 No	     Yes       Yes
	   exec 	 No	     Yes       Yes
	   exit 	 No	     Yes       Yes
	   export	 No	     No        Yes
	   false	 Yes	     No        Yes
	   fc		 No**	     No        Yes
	   fg		 No**	     Yes       Yes
	   filetest	 No	     Yes       No
	   fi		 No	     No        Yes
	   for		 No	     No        Yes
	   foreach	 No	     Yes       No
	   getopts	 No**	     No        Yes
	   glob 	 No	     Yes       No
	   goto 	 No	     Yes       No
	   hash 	 No	     No        Yes
	   hashstat	 No	     Yes       No
	   history	 No	     Yes       No
	   hup		 No	     Yes       No
	   if		 No	     Yes       Yes
	   jobid	 No	     No        Yes
	   jobs 	 No**	     Yes       Yes
	   kill 	 Yes	     Yes       No
	   limit	 No	     Yes       No
	   local	 No	     No        Yes
	   log		 No	     Yes       No
	   login	 Yes	     Yes       No
	   logout	 No	     Yes       No
	   ls-F 	 No	     Yes       No
	   nice 	 Yes	     Yes       No
	   nohup	 Yes	     Yes       No
	   notify	 No	     Yes       No
	   onintr	 No	     Yes       No
	   popd 	 No	     Yes       No
	   printenv	 Yes	     Yes       No
	   pushd	 No	     Yes       No
	   pwd		 Yes	     No        Yes
	   read 	 No**	     No        Yes
	   readonly	 No	     No        Yes
	   rehash	 No	     Yes       No
	   repeat	 No	     Yes       No
	   return	 No	     No        Yes
	   sched	 No	     Yes       No
	   set		 No	     Yes       Yes
	   setenv	 No	     Yes       No
	   settc	 No	     Yes       No
	   setty	 No	     Yes       No
	   setvar	 No	     No        Yes
	   shift	 No	     Yes       Yes
	   source	 No	     Yes       No
	   stop 	 No	     Yes       No
	   suspend	 No	     Yes       No
	   switch	 No	     Yes       No
	   telltc	 No	     Yes       No
	   test 	 Yes	     No        Yes
	   then 	 No	     No        Yes
	   time 	 Yes	     Yes       No
	   times	 No	     No        Yes
	   trap 	 No	     No        Yes
	   true 	 Yes	     No        Yes
	   type 	 No	     No        Yes
	   ulimit	 No	     No        Yes
	   umask	 No**	     Yes       Yes
	   unalias	 No**	     Yes       Yes
	   uncomplete	 No	     Yes       No
	   unhash	 No	     Yes       No
	   unlimit	 No	     Yes       No
	   unset	 No	     Yes       Yes
	   unsetenv	 No	     Yes       No
	   until	 No	     No        Yes
	   wait 	 No**	     Yes       Yes
	   where	 No	     Yes       No
	   which	 Yes	     Yes       No
	   while	 No	     Yes       Yes

SEE ALSO
     csh(1), echo(1), false(1), info(1), kill(1), login(1), nice(1), nohup(1),
     printenv(1), pwd(1), sh(1), test(1), time(1), true(1), which(1)

HISTORY
     The builtin manual page first appeared in FreeBSD 3.4.

AUTHORS
     This manual page was written by Sheldon Hearn <sheldonh@FreeBSD.org>.

BSD			       February 23, 2005			   BSD
","# trap

> Automatically execute commands after receiving signals by processes or the operating system.
> Can be used to perform cleanups for interruptions by the user or other actions.

- List available signals to set traps for:

`trap -l`

- List active traps for the current shell:

`trap -p`

- Set a trap to execute commands when one or more signals are detected:

`trap 'echo ""Caught signal {{SIGHUP}}""' {{SIGHUP}}`

- Remove active traps:

`trap - {{SIGHUP}} {{SIGINT}}`
"
afplay,,,"
AFPLAY(1)		  BSD General Commands Manual		     AFPLAY(1)

NAME
     afplay -- Audio File Play

SYNOPSIS
     afplay [-h] audiofile

DESCRIPTION
     Audio File Play plays an audio file to the default audio output

OPTIONS
     -h       print help text

Darwin			       February 13, 2007			Darwin
","# afplay

> Command-line audio player.

- Play a sound file (waits until playback ends):

`afplay {{path/to/file}}`

- Play a sound file at 2x speed (playback rate):

`afplay --rate 2 {{path/to/file}}`

- Play a sound file at half speed:

`afplay --rate 0.5 {{path/to/file}}`

- Play the first N seconds of a sound file:

`afplay --time {{seconds}} {{path/to/file}}`
"
file,,,"
FILE(1) 		  BSD General Commands Manual		       FILE(1)

NAME
     file -- determine file type

SYNOPSIS
     file [-bcdDhiIkLnNprsvz] [--extension] [--mime-encoding] [--mime-type]
	  [-f namefile] [-m magicfiles] [-P name=value] [-M magicfiles] file
     file -C [-m magicfiles]
     file [--help]

DESCRIPTION
     This manual page documents version 5.04 of the file command.

     file tests each argument in an attempt to classify it.  There are three
     sets of tests, performed in this order: filesystem tests, magic tests,
     and language tests.  The first test that succeeds causes the file type to
     be printed.

     The type printed will usually contain one of the words text (the file
     contains only printing characters and a few common control characters and
     is probably safe to read on an ASCII terminal), executable (the file con-
     tains the result of compiling a program in a form understandable to some
     UNIX kernel or another), or data meaning anything else (data is usually
     ``binary'' or non-printable).  Exceptions are well-known file formats
     (core files, tar archives) that are known to contain binary data.	When
     modifying magic files or the program itself, make sure to preserve these
     keywords.	Users depend on knowing that all the readable files in a
     directory have the word ``text'' printed.	Don't do as Berkeley did and
     change ``shell commands text'' to ``shell script''.

     The filesystem tests are based on examining the return from a stat(2)
     system call.  The program checks to see if the file is empty, or if it's
     some sort of special file.  Any known file types appropriate to the sys-
     tem you are running on (sockets, symbolic links, or named pipes (FIFOs)
     on those systems that implement them) are intuited if they are defined in
     the system header file <sys/stat.h>.

     The magic tests are used to check for files with data in particular fixed
     formats.  The canonical example of this is a binary executable (compiled
     program) a.out file, whose format is defined in <elf.h>, <a.out.h> and
     possibly <exec.h> in the standard include directory.  These files have a
     ``magic number'' stored in a particular place near the beginning of the
     file that tells the UNIX operating system that the file is a binary exe-
     cutable, and which of several types thereof.  The concept of a ``magic''
     has been applied by extension to data files.  Any file with some invari-
     ant identifier at a small fixed offset into the file can usually be
     described in this way.  The information identifying these files is read
     from the compiled magic file /usr/share/file/magic.mgc, or the files in
     the directory /usr/share/file/magic if the compiled file does not exist.

     If a file does not match any of the entries in the magic file, it is
     examined to see if it seems to be a text file.  ASCII, ISO-8859-x, non-
     ISO 8-bit extended-ASCII character sets (such as those used on Macintosh
     and IBM PC systems), UTF-8-encoded Unicode, UTF-16-encoded Unicode, and
     EBCDIC character sets can be distinguished by the different ranges and
     sequences of bytes that constitute printable text in each set.  If a file
     passes any of these tests, its character set is reported.	ASCII,
     ISO-8859-x, UTF-8, and extended-ASCII files are identified as ``text''
     because they will be mostly readable on nearly any terminal; UTF-16 and
     EBCDIC are only ``character data'' because, while they contain text, it
     is text that will require translation before it can be read.  In addi-
     tion, file will attempt to determine other characteristics of text-type
     files.  If the lines of a file are terminated by CR, CRLF, or NEL,
     instead of the Unix-standard LF, this will be reported.  Files that con-
     tain embedded escape sequences or overstriking will also be identified.

     Once file has determined the character set used in a text-type file, it
     will attempt to determine in what language the file is written.  The lan-
     guage tests look for particular strings (cf.  <names.h>) that can appear
     anywhere in the first few blocks of a file.  For example, the keyword .br
     indicates that the file is most likely a troff(1) input file, just as the
     keyword struct indicates a C program.  These tests are less reliable than
     the previous two groups, so they are performed last.  The language test
     routines also test for some miscellany (such as tar(1) archives).

     Any file that cannot be identified as having been written in any of the
     character sets listed above is simply said to be ``data''.

OPTIONS
     --apple
	     Causes the file command to output the file type and creator code
	     as used by older MacOS versions. The code consists of eight let-
	     ters, the first describing the file type, the latter the creator.

     -b, --brief
	     Do not prepend filenames to output lines (brief mode).

     -C, --compile
	     Write a magic.mgc output file that contains a pre-parsed version
	     of the magic file or directory.

     -c, --checking-printout
	     Cause a checking printout of the parsed form of the magic file.
	     This is usually used in conjunction with the -m flag to debug a
	     new magic file before installing it.

     -C, --compile
	     Write a magic.mgc output file that contains a pre-parsed version
	     of the magic file or directory.

     -d      Apply the default system tests; this is the default behavior
	     unless -M is specified.

     -D      Print debugging messages.

     -E      On filesystem errors (file not found etc), instead of handling
	     the error as regular output as POSIX mandates and keep going,
	     issue an error message and exit.

     -e, --exclude testname
	     Exclude the test named in testname from the list of tests made to
	     determine the file type.  Valid test names are:

	     apptype   EMX application type (only on EMX).

	     ascii     Various types of text files (this test will try to
		       guess the text encoding, irrespective of the setting of
		       the `encoding' option).

	     encoding  Different text encodings for soft magic tests.

	     tokens    Ignored for backwards compatibility.

	     cdf       Prints details of Compound Document Files.

	     compress  Checks for, and looks inside, compressed files.

	     elf       Prints ELF file details, provided soft magic tests are
		       enabled and the elf magic is found.

	     soft      Consults magic files.

	     tar       Examines tar files.

     --extension
	     Print a slash-separated list of valid extensions for the file
	     type found.

     -F, --separator separator
	     Use the specified string as the separator between the filename
	     and the file result returned.  Defaults to `:'.

     -f, --files-from namefile
	     Read the names of the files to be examined from namefile (one per
	     line) before the argument list.  Either namefile or at least one
	     filename argument must be present; to test the standard input,
	     use `-' as a filename argument.  Please note that namefile is
	     unwrapped and the enclosed filenames are processed when this
	     option is encountered and before any further options processing
	     is done.  This allows one to process multiple lists of files with
	     different command line arguments on the same file invocation.
	     Thus if you want to set the delimiter, you need to do it before
	     you specify the list of files, like: ``-F @ -f namefile'',
	     instead of: ``-f namefile -F @''.

     -h, --no-dereference
	     option causes symlinks not to be followed (on systems that sup-
	     port symbolic links).

     -i      If the file is a regular file, do not classify its contents.

     -I, --mime
	     Causes the file command to output mime type strings rather than
	     the more traditional human readable ones.	Thus it may say
	     `text/plain; charset=us-ascii' rather than ``ASCII text''.

     --mime-type, --mime-encoding
	     Like -I, but print only the specified element(s).

     -k, --keep-going
	     Don't stop at the first match, keep going.  Subsequent matches
	     will be have the string `\012- ' prepended.  (If you want a new-
	     line, see the -r option.)	The magic pattern with the highest
	     strength (see the -l option) comes first.

     -l, --list
	     Shows a list of patterns and their strength sorted descending by
	     magic(4) strength which is used for the matching (see also the -k
	     option).

     -L, --dereference
	     option causes symlinks to be followed, as the like-named option
	     in ls(1) (on systems that support symbolic links).  This is the
	     default behavior.

     -m, --magic-file list
	     Specify an alternate list of files and directories containing
	     magic.  This can be a single item, or a colon-separated list.  If
	     a compiled magic file is found alongside a file or directory, it
	     will be used instead.

     -M list
	     Like -m, except that the default rules are not applied unless -d
	     is specified.

     -n, --no-buffer
	     Force stdout to be flushed after checking each file.  This is
	     only useful if checking a list of files.  It is intended to be
	     used by programs that want filetype output from a pipe.

     -p, --preserve-date
	     On systems that support utime(3) or utimes(2), attempt to pre-
	     serve the access time of files analyzed, to pretend that file
	     never read them.

     -P, --parameter name=value
	     Set various parameter limits.

		   Name 	Default    Explanation
		   indir	15	   recursion limit for indirect magic
		   name 	30	   use count limit for name/use magic
		   elf_notes	256	   max ELF notes processed
		   elf_phnum	128	   max ELF program sections processed
		   elf_shnum	32768	   max ELF sections processed
		   regex	8192	   length limit for regex searches

     -r, --raw
	     No operation, included for historical compatibility.

     -s, --special-files
	     Normally, file only attempts to read and determine the type of
	     argument files which stat(2) reports are ordinary files.  This
	     prevents problems, because reading special files may have pecu-
	     liar consequences.  Specifying the -s option causes file to also
	     read argument files which are block or character special files.
	     This is useful for determining the filesystem types of the data
	     in raw disk partitions, which are block special files.  This
	     option also causes file to disregard the file size as reported by
	     stat(2) since on some systems it reports a zero size for raw disk
	     partitions.

     -v, --version
	     Print the version of the program and exit.

     -z, --uncompress
	     Try to look inside compressed files.

     -Z, --uncompress-noreport
	     Try to look inside compressed files, but report information about
	     the contents only not the compression.

     -0, --print0
	     Output a null character `\0' after the end of the filename.  Nice
	     to cut(1) the output.  This does not affect the separator, which
	     is still printed.

     --help  Print a help message and exit.

FILES
     /usr/share/file/magic.mgc	Default compiled list of magic.
     /usr/share/file/magic	Directory containing default magic files.

ENVIRONMENT
     The environment variable MAGIC can be used to set the default magic file
     name.  file adds ``.mgc'' to the value of this variable as appropriate.
     However, file has to exist in order for file.mime to be considered.

LEGACY DESCRIPTION
     In legacy mode, the -D, -I, and -M options do not exist.

     The -d, -i, and -r options behave differently.  The -d option provides
     debugging information (same as -D in conformance mode).  The -i option
     displays mime type information (same as -I in conformance mode).  The -r
     option will disable the translation of unprintable characters (by
     default, this translation is already disabled in conformance mode).

     Furthermore, the -h option becomes the default symlink behavior (don't
     follow symlinks) unless POSIXLY_CORRECT is set.

     For more information about legacy mode, see compat(5).

SEE ALSO
     hexdump(1), od(1), strings(1), magic(5), otool(1), compat(5)

STANDARDS CONFORMANCE
     This program conforms to Version 3 of the Single UNIX Specification
     (``SUSv3'').  Its behavior is mostly compatible with the System V program
     of the same name.	This version knows more magic, however, so it will
     produce different (albeit more accurate) output in many cases.

     The one significant difference between this version and System V is that
     this version treats any white space as a delimiter, so that spaces in
     pattern strings must be escaped.  For example,

	   >10	   string  language impress	   (imPRESS data)

     in an existing magic file would have to be changed to

	   >10	   string  language\ impress	   (imPRESS data)

     In addition, in this version, if a pattern string contains a backslash,
     it must be escaped.  For example

	   0	   string	   \begindata	   Andrew Toolkit document

     in an existing magic file would have to be changed to

	   0	   string	   \\begindata	   Andrew Toolkit document

     SunOS releases 3.2 and later from Sun Microsystems include a file command
     derived from the System V one, but with some extensions.  This version
     differs from Sun's only in minor ways.  It includes the extension of the
     `&' operator, used as, for example,

	   >16	   long&0x7fffffff >0		   not stripped

MAGIC DIRECTORY
     The magic file entries have been collected from various sources, mainly
     USENET, and contributed by various authors.  Christos Zoulas (address
     below) will collect additional or corrected magic file entries.  A con-
     solidation of magic file entries will be distributed periodically.

     The order of entries in the magic file is significant.  Depending on what
     system you are using, the order that they are put together may be incor-
     rect.  If your old file command uses a magic file, keep the old magic
     file around for comparison purposes (rename it to
     /usr/share/file/magic.orig).

EXAMPLES
	   $ file file.c file /dev/{wd0a,hda}
	   file.c:   C program text
	   file:     ELF 32-bit LSB executable, Intel 80386, version 1 (SYSV),
		     dynamically linked (uses shared libs), stripped
	   /dev/wd0a: block special (0/0)
	   /dev/hda: block special (3/0)

	   $ file -s /dev/wd0{b,d}
	   /dev/wd0b: data
	   /dev/wd0d: x86 boot sector

	   $ file -s /dev/hda{,1,2,3,4,5,6,7,8,9,10}
	   /dev/hda:   x86 boot sector
	   /dev/hda1:  Linux/i386 ext2 filesystem
	   /dev/hda2:  x86 boot sector
	   /dev/hda3:  x86 boot sector, extended partition table
	   /dev/hda4:  Linux/i386 ext2 filesystem
	   /dev/hda5:  Linux/i386 swap file
	   /dev/hda6:  Linux/i386 swap file
	   /dev/hda7:  Linux/i386 swap file
	   /dev/hda8:  Linux/i386 swap file
	   /dev/hda9:  empty
	   /dev/hda10: empty

	   $ file -i file.c file /dev/{wd0a,hda}
	   file.c:	text/x-c
	   file:	application/x-executable
	   /dev/hda:	application/x-not-regular-file
	   /dev/wd0a:	application/x-not-regular-file


HISTORY
     There has been a file command in every UNIX since at least Research
     Version 4 (man page dated November, 1973).  The System V version intro-
     duced one significant major change: the external list of magic types.
     This slowed the program down slightly but made it a lot more flexible.

     This program, based on the System V version, was written by Ian Darwin
     <ian@darwinsys.com> without looking at anybody else's source code.

     John Gilmore revised the code extensively, making it better than the
     first version.  Geoff Collyer found several inadequacies and provided
     some magic file entries.  Contributions of the `&' operator by Rob McMa-
     hon, <cudcv@warwick.ac.uk>, 1989.

     Guy Harris, <guy@netapp.com>, made many changes from 1993 to the present.

     Primary development and maintenance from 1990 to the present by Christos
     Zoulas <christos@astron.com>.

     Altered by Chris Lowth <chris@lowth.com>, 2000: handle the -I option to
     output mime type strings, using an alternative magic file and internal
     logic.

     Altered by Eric Fischer <enf@pobox.com>, July, 2000, to identify charac-
     ter codes and attempt to identify the languages of non-ASCII files.

     Altered by Reuben Thomas <rrt@sc3d.org>, 2007-2011, to improve MIME sup-
     port, merge MIME and non-MIME magic, support directories as well as files
     of magic, apply many bug fixes, update and fix a lot of magic, improve
     the build system, improve the documentation, and rewrite the Python bind-
     ings in pure Python.

     The list of contributors to the `magic' directory (magic files) is too
     long to include here.  You know who you are; thank you.  Many contribu-
     tors are listed in the source files.

LEGAL NOTICE
     Copyright (c) Ian F. Darwin, Toronto, Canada, 1986-1999.  Covered by the
     standard Berkeley Software Distribution copyright; see the file COPYING
     in the source distribution.

     The files tar.h and is_tar.c were written by John Gilmore from his pub-
     lic-domain tar(1) program, and are not covered by the above license.

RETURN CODE
     file returns 0 on success, and non-zero on error.

BUGS
     Please report bugs and send patches to the bug tracker at
     http://bugs.gw.com/ or the mailing list at <file@mx.gw.com> (visit
     http://mx.gw.com/mailman/listinfo/file first to subscribe).

TODO
     Fix output so that tests for MIME and APPLE flags are not needed all over
     the place, and actual output is only done in one place.  This needs a
     design.  Suggestion: push possible outputs on to a list, then pick the
     last-pushed (most specific, one hopes) value at the end, or use a default
     if the list is empty.  This should not slow down evaluation.

     The handling of MAGIC_CONTINUE and printing \012- between entries is
     clumsy and complicated; refactor and centralize.

     Some of the encoding logic is hard-coded in encoding.c and can be moved
     to the magic files if we had a !:charset annotation

     Continue to squash all magic bugs.  See Debian BTS for a good source.

     Store arbitrarily long strings, for example for %s patterns, so that they
     can be printed out.  Fixes Debian bug #271672.  This can be done by allo-
     cating strings in a string pool, storing the string pool at the end of
     the magic file and converting all the string pointers to relative offsets
     from the string pool.

     Add syntax for relative offsets after current level (Debian bug #466037).

     Make file -ki work, i.e. give multiple MIME types.

     Add a zip library so we can peek inside Office2007 documents to print
     more details about their contents.

     Add an option to print URLs for the sources of the file descriptions.

     Combine script searches and add a way to map executable names to MIME
     types (e.g. have a magic value for !:mime which causes the resulting
     string to be looked up in a table).  This would avoid adding the same
     magic repeatedly for each new hash-bang interpreter.

     When a file descriptor is available, we can skip and adjust the buffer
     instead of the hacky buffer management we do now.

     Fix ``name'' and ``use'' to check for consistency at compile time (dupli-
     cate ``name'', ``use'' pointing to undefined ``name'' ).  Make ``name'' /
     ``use'' more efficient by keeping a sorted list of names.	Special-case ^
     to flip endianness in the parser so that it does not have to be escaped,
     and document it.

     If the offsets specified internally in the file exceed the buffer size (
     HOWMANY variable in file.h), then we don't seek to that offset, but we
     give up.  It would be better if buffer managements was done when the file
     descriptor is available so move around the file.  One must be careful
     though because this has performance (and thus security considerations).

AVAILABILITY
     You can obtain the original author's latest version by anonymous FTP on
     ftp.astron.com in the directory /pub/file/file-X.YZ.tar.gz.

BSD			       October 19, 2016 			   BSD
","# file

> Determine file type.

- Give a description of the type of the specified file. Works fine for files with no file extension:

`file {{filename}}`

- Look inside a zipped file and determine the file type(s) inside:

`file -z {{foo.zip}}`

- Allow file to work with special or device files:

`file -s {{filename}}`

- Don't stop at first file type match; keep going until the end of the file:

`file -k {{filename}}`

- Determine the mime encoding type of a file:

`file -I {{filename}}`
"
sshuttle,https://github.com/sshuttle/sshuttle,"













GitHub - sshuttle/sshuttle: Transparent proxy server that works as a poor man's VPN.  Forwards over ssh.  Doesn't require admin.  Works with Linux and MacOS.  Supports DNS tunneling.








































Skip to content













                Sign up
              
















                    Why GitHub?
                    




Features →

Code review
Project management
Integrations
Actions
Packages
Security
Team management
Hosting
Mobile


Customer stories →
Security →





Team


Enterprise




                    Explore
                    





Explore GitHub →

Learn & contribute

Topics
Collections
Trending
Learning Lab
Open source guides

Connect with others

Events
Community forum
GitHub Education
GitHub Stars program





Marketplace




                    Pricing
                    




Plans →

Compare plans
Contact Sales


Nonprofit →
Education →






























        In this repository
      

        All GitHub
      
↵


      Jump to
      ↵






No suggested jump to results















        In this repository
      

        All GitHub
      
↵


      Jump to
      ↵















        In this repository
      

        All GitHub
      
↵


      Jump to
      ↵






 



          Sign in
        

              Sign up
            



















sshuttle

/

sshuttle







    Watch
 
      125
    




      Star


      5.8k
    




          Fork


        400
      





        Transparent proxy server that works as a poor man's VPN. Forwards over ssh. Doesn't require admin. Works with Linux and MacOS. Supports DNS tunneling.
      



            LGPL-2.1 License
        




5.8k
        stars
 

400
        forks
 




      Star





    Watch









Code

 



Issues
84
 



Pull requests
4
 



Actions

 



Projects
0
 



Wiki

 



Security

 



Insights

 
 




More

 




                    Code
 


                    Issues
 


                    Pull requests
 


                    Actions
 


                    Projects
 


                    Wiki
 


                    Security
 


                    Insights
 


 










          Dismiss
        
Join GitHub today
GitHub is home to over 50 million developers working together to host and review code, manage projects, and build software together.
Sign up










master














8
branches



46
tags




    Go to file






      Code
      
 








  Clone






            HTTPS
 
            GitHub CLI
 









      Use Git or checkout with SVN using the web URL.
    









      Work fast with our official CLI.
      Learn more.
    







                Open with GitHub Desktop
 



                Download ZIP
 



Launching GitHub Desktop
If nothing happens, download GitHub Desktop and try again.
Go back


Launching GitHub Desktop
If nothing happens, download GitHub Desktop and try again.
Go back


Launching Xcode
If nothing happens, download Xcode and try again.
Go back


Launching Visual Studio
If nothing happens, download the GitHub extension for Visual Studio and try again.
Go back









Latest commit






 




brianmay

Merge pull request #522 from sshuttle/dependabot/pip/pytest-6.0.2



…



299854d

Sep 14, 2020





Merge pull request #522 from sshuttle/dependabot/pip/pytest-6.0.2

Bump pytest from 6.0.1 to 6.0.2

299854d



Git stats





696
commits







Files
Permalink


  
    Failed to load latest commit information.

 


Type
Name
Latest commit message
Commit time






.github/workflows



Create github workflow



May 20, 2020







bin



Auto sudoers file (#269)



Dec 12, 2019







docs



Add missing package in OpenWRT documentation



Aug 10, 2020







sshuttle



remove unneeded blank line



Sep 7, 2020







tests



Fix parse_hostport to always return string for host



Aug 12, 2020







.gitignore



Add entries to .gitignore



Mar 16, 2018







.prospector.yml



Fixes some style issues and minor bugs



Nov 13, 2017







CHANGES.rst



Fixed typo.



Aug 27, 2020







LICENSE



Change license text to LGPL-2.1



Aug 26, 2020







MANIFEST.in



Fix error in requirements.rst



Jul 8, 2017







README.rst



README: add Ubuntu



Jul 24, 2020







bandit.yml



updated bandit config



Oct 17, 2018







requirements-tests.txt



Bump pytest from 6.0.1 to 6.0.2



Sep 14, 2020







requirements.txt



Fix #494 sshuttle caught in infinite select() loop.



Sep 7, 2020







run



Updated supported Python versions



May 28, 2020







setup.cfg



Fix/pep8 (#277)



Feb 10, 2019







setup.py



Ask setuptools to require Python 3.5 and above



Jun 18, 2020







tox.ini



Updated supported Python versions



May 28, 2020





        View code
      






        README.rst
      


sshuttle: where transparent proxy meets VPN meets ssh
As far as I know, sshuttle is the only program that solves the following
common case:

Your client machine (or router) is Linux, FreeBSD, or MacOS.
You have access to a remote network via ssh.
You don't necessarily have admin access on the remote network.
The remote network has no VPN, or only stupid/complex VPN
protocols (IPsec, PPTP, etc). Or maybe you are the
admin and you just got frustrated with the awful state of
VPN tools.
You don't want to create an ssh port forward for every
single host/port on the remote network.
You hate openssh's port forwarding because it's randomly
slow and/or stupid.
You can't use openssh's PermitTunnel feature because
it's disabled by default on openssh servers; plus it does
TCP-over-TCP, which has terrible performance.


Obtaining sshuttle

Ubuntu 16.04 or later:
apt-get install sshuttle


Debian stretch or later:
apt-get install sshuttle


Arch Linux:
pacman -S sshuttle


Fedora:
dnf install sshuttle


NixOS:
nix-env -iA nixos.sshuttle


From PyPI:
sudo pip install sshuttle


Clone:
git clone https://github.com/sshuttle/sshuttle.git
cd sshuttle
sudo ./setup.py install


FreeBSD:
# ports
cd /usr/ports/net/py-sshuttle && make install clean
# pkg
pkg install py36-sshuttle



It is also possible to install into a virtualenv as a non-root user.

From PyPI:
virtualenv -p python3 /tmp/sshuttle
. /tmp/sshuttle/bin/activate
pip install sshuttle


Clone:
virtualenv -p python3 /tmp/sshuttle
. /tmp/sshuttle/bin/activate
git clone https://github.com/sshuttle/sshuttle.git
cd sshuttle
./setup.py install


Homebrew:
brew install sshuttle


Nix:
nix-env -iA nixpkgs.sshuttle




Documentation
The documentation for the stable version is available at:
https://sshuttle.readthedocs.org/
The documentation for the latest development version is available at:
https://sshuttle.readthedocs.org/en/latest/

Running as a service
Sshuttle can also be run as a service and configured using a config management system:
https://medium.com/@mike.reider/using-sshuttle-as-a-service-bec2684a65fe








About

      Transparent proxy server that works as a poor man's VPN. Forwards over ssh. Doesn't require admin. Works with Linux and MacOS. Supports DNS tunneling.
    
Resources



      Readme
 
License



        LGPL-2.1 License
    







    Releases



46
tags







    Packages 0


        No packages published 







        Used by 67
 




























            + 59
          







    Contributors 99








































      + 88 contributors





Languages









Python
99.1%





Shell
0.9%















© 2020 GitHub, Inc.
Terms
Privacy
Security
Status
Help





Contact GitHub
Pricing
API
Training
Blog
About











    You can’t perform that action at this time.
  


















You signed in with another tab or window. Reload to refresh your session.
You signed out in another tab or window. Reload to refresh your session.







",,"# sshuttle

> Transparent proxy server that tunnels traffic over an SSH connection.
> Doesn't require admin, or any special setup on the remote SSH server.
> More information: <https://github.com/sshuttle/sshuttle>.

- Forward all IPv4 TCP traffic via a remote SSH server:

`sshuttle --remote={{username}}@{{sshserver}} {{0.0.0.0/0}}`

- Forward all IPv4 TCP and DNS traffic:

`sshuttle --dns --remote={{username}}@{{sshserver}} {{0.0.0.0/0}}`

- Use the tproxy method to forward all IPv4 and IPv6 traffic:

`sudo sshuttle --method=tproxy --remote={{username}}@{{sshserver}} {{0.0.0.0/0}} {{::/0}} --exclude={{your_local_ip_address}} --exclude={{ssh_server_ip_address}}`
"
uptime,,,"
UPTIME(1)		  BSD General Commands Manual		     UPTIME(1)

NAME
     uptime -- show how long system has been running

SYNOPSIS
     uptime

DESCRIPTION
     The uptime utility displays the current time, the length of time the sys-
     tem has been up, the number of users, and the load average of the system
     over the last 1, 5, and 15 minutes.

SEE ALSO
     w(1)

HISTORY
     The uptime command appeared in 3.0BSD.

BSD				April 18, 1994				   BSD
","# uptime

> Tell how long the system has been running and other information.

- Print current time, uptime, number of logged-in users and other information:

`uptime`
"
wacaw,http://webcam-tools.sourceforge.net,"

wacaw



wacaw - webcam tools for Mac OS X



What is wacaw?
Download
Features
Parameters
SourceForge.net Project site



What is wacaw?


		wacaw is a little command-line tool for Mac OS X that allows you 
		to capture both still pictures and video from an attached camera.
		It is a very simple and small program that follows the UNIXish
		philosophy of doing only one thing, but thoroughly. :-)
		

		That's what makes wacaw an ideal tool for system administrators
		and Uberusers, it's flexibility allows it to be integrated in
		shell scripts, Automator actions, AppleScript projects etc.
		

		The video recording feature allows the user to create videos of
		pre-defined length, a useful feature for e.g. a surveillance 
		application that captures a video if motion is detected.
		

		wacaw is a spare-time project, with currently only two developers
		working on it. However, that doesn't mean we can't get the 
		feature you need in! So, don't hesitate to report bugs
		and request new features, we'll get'em done eventually. :)
		
Download


		Download binaries & source code from
		

Features


captures still images and video (with and without audio)
can copy to clipboard, supporting both TIFF format as well as a
			Base64 encoded string (can be pasted directly to textfield, e.g. phpMyAdmin)
supported formats: BMP, JPEG, TIFF, PNG, GIF
command-line tool w/o GUI
can be integrated in shell scripts of all kinds, 
			Automator actions and the like
very small binary (approx. 28KB)

Parameters

See the basic usage help below for more details on wacaw's
		parameters:


Usage: ./wacaw [-h] [options] [filename]
  -h / --help        : print this help message
       --usage       : print this help message
  -v / --version     : prints out version information
       --verbose     : more messages about what is going on
       --brief       : fewer messages about what is going on (default)
       --video       : record a video
       --no-audio    : do not record audio
  -D / --duration : specify the duration of the video (default: 15 sec.)
       --to-clipboard: copy image just taken to clipboard
       --jpeg        : save image in JPEG format (default)
       --tiff        : save image in TIFF format
       --png         : save image in PNG format
       --gif         : save image in GIF format
       --bmp         : save image in BMP format
  -x / --width    : specify the width of the image / video 
  -y / --height   : specify the height of the image / video 
       --SVGA        : the image / video should have 'SVGA'  size (800x600)
       --VGA         : the image / video should have 'VGA'   size (640x480)
       --CIF         : the image / video should have 'CIF'   size (352x288)
       --SIF         : the image / video should have 'SIF'   size (320x240)
       --QCIF        : the image / video should have 'QCIF'  size (176x144)
       --QSIF        : the image / video should have 'QSIF'  size (160x120)
       --SQSIF       : the image / video should have 'SQSIF' size (160x96)
  -L / --list-devices  : list the devices available
  -d / --video-device   : specify which device should be used
       filename      : needed unless only listing available devices (-L)
or using help (-h)
			



",,"# wacaw

> A little command-line tool for macOS that allows you to capture both still pictures and video from an attached camera.
> More information: <http://webcam-tools.sourceforge.net>.

- Take a picture from webcam:

`wacaw {{filename}}`

- Record a video:

`wacaw --video {{filename}} -D {{duration_in_seconds}}`

- Take a picture with custom resolution:

`wacaw -x {{width}} -y {{height}} {{filename}}`

- Copy image just taken to clipboard:

`wacaw --to-clipboard`

- List the devices available:

`wacaw -L`
"
date,,,"
DATE(1) 		  BSD General Commands Manual		       DATE(1)

NAME
     date -- display or set date and time

SYNOPSIS
     date [-jRu] [-r seconds | filename] [-v [+|-]val[ymwdHMS]] ...
	  [+output_fmt]
     date [-jnu] [[[mm]dd]HH]MM[[cc]yy][.ss]
     date [-jnRu] -f input_fmt new_date [+output_fmt]
     date [-d dst] [-t minutes_west]

DESCRIPTION
     When invoked without arguments, the date utility displays the current
     date and time.  Otherwise, depending on the options specified, date will
     set the date and time or print it in a user-defined way.

     The date utility displays the date and time read from the kernel clock.
     When used to set the date and time, both the kernel clock and the hard-
     ware clock are updated.

     Only the superuser may set the date, and if the system securelevel (see
     securelevel(7)) is greater than 1, the time may not be changed by more
     than 1 second.

     The options are as follows:

     -d dst  Set the kernel's value for daylight saving time.  If dst is non-
	     zero, future calls to gettimeofday(2) will return a non-zero for
	     tz_dsttime.

     -f      Use input_fmt as the format string to parse the new_date provided
	     rather than using the default [[[mm]dd]HH]MM[[cc]yy][.ss] format.
	     Parsing is done using strptime(3).

     -j      Do not try to set the date.  This allows you to use the -f flag
	     in addition to the + option to convert one date format to
	     another.

     -n      By default, if the timed(8) daemon is running, date sets the time
	     on all of the machines in the local group.  The -n option sup-
	     presses this behavior and causes the time to be set only on the
	     current machine.

     -R      Use RFC 2822 date and time output format. This is equivalent to
	     use ``%a, %d %b %Y %T %z'' as output_fmt while LC_TIME is set to
	     the ``C'' locale .

     -r seconds
	     Print the date and time represented by seconds, where seconds is
	     the number of seconds since the Epoch (00:00:00 UTC, January 1,
	     1970; see time(3)), and can be specified in decimal, octal, or
	     hex.

     -r filename
	     Print the date and time of the last modification of filename.

     -t minutes_west
	     Set the system's value for minutes west of GMT.  minutes_west
	     specifies the number of minutes returned in tz_minuteswest by
	     future calls to gettimeofday(2).

     -u      Display or set the date in UTC (Coordinated Universal) time.

     -v      Adjust (i.e., take the current date and display the result of the
	     adjustment; not actually set the date) the second, minute, hour,
	     month day, week day, month or year according to val.  If val is
	     preceded with a plus or minus sign, the date is adjusted forwards
	     or backwards according to the remaining string, otherwise the
	     relevant part of the date is set.	The date can be adjusted as
	     many times as required using these flags.	Flags are processed in
	     the order given.

	     When setting values (rather than adjusting them), seconds are in
	     the range 0-59, minutes are in the range 0-59, hours are in the
	     range 0-23, month days are in the range 1-31, week days are in
	     the range 0-6 (Sun-Sat), months are in the range 1-12 (Jan-Dec)
	     and years are in the range 80-38 or 1980-2038.

	     If val is numeric, one of either y, m, w, d, H, M or S must be
	     used to specify which part of the date is to be adjusted.

	     The week day or month may be specified using a name rather than a
	     number.  If a name is used with the plus (or minus) sign, the
	     date will be put forwards (or backwards) to the next (previous)
	     date that matches the given week day or month.  This will not
	     adjust the date, if the given week day or month is the same as
	     the current one.

	     When a date is adjusted to a specific value or in units greater
	     than hours, daylight savings time considerations are ignored.
	     Adjustments in units of hours or less honor daylight saving time.
	     So, assuming the current date is March 26, 0:30 and that the DST
	     adjustment means that the clock goes forward at 01:00 to 02:00,
	     using -v +1H will adjust the date to March 26, 2:30.  Likewise,
	     if the date is October 29, 0:30 and the DST adjustment means that
	     the clock goes back at 02:00 to 01:00, using -v +3H will be nec-
	     essary to reach October 29, 2:30.

	     When the date is adjusted to a specific value that does not actu-
	     ally exist (for example March 26, 1:30 BST 2000 in the
	     Europe/London timezone), the date will be silently adjusted for-
	     wards in units of one hour until it reaches a valid time.	When
	     the date is adjusted to a specific value that occurs twice (for
	     example October 29, 1:30 2000), the resulting timezone will be
	     set so that the date matches the earlier of the two times.

	     It is not possible to adjust a date to an invalid absolute day,
	     so using the switches -v 31d -v 12m will simply fail five months
	     of the year.  It is therefore usual to set the month before set-
	     ting the day; using -v 12m -v 31d always works.

	     Adjusting the date by months is inherently ambiguous because a
	     month is a unit of variable length depending on the current date.
	     This kind of date adjustment is applied in the most intuitive
	     way.  First of all, date tries to preserve the day of the month.
	     If it is impossible because the target month is shorter than the
	     present one, the last day of the target month will be the result.
	     For example, using -v +1m on May 31 will adjust the date to June
	     30, while using the same option on January 30 will result in the
	     date adjusted to the last day of February.  This approach is also
	     believed to make the most sense for shell scripting.  Neverthe-
	     less, be aware that going forth and back by the same number of
	     months may take you to a different date.

	     Refer to the examples below for further details.

     An operand with a leading plus (`+') sign signals a user-defined format
     string which specifies the format in which to display the date and time.
     The format string may contain any of the conversion specifications
     described in the strftime(3) manual page, as well as any arbitrary text.
     A newline (`\n') character is always output after the characters speci-
     fied by the format string.  The format string for the default display is
     ``+%+''.

     If an operand does not have a leading plus sign, it is interpreted as a
     value for setting the system's notion of the current date and time.  The
     canonical representation for setting the date and time is:

	   cc	   Century (either 19 or 20) prepended to the abbreviated
		   year.
	   yy	   Year in abbreviated form (e.g., 89 for 1989, 06 for 2006).
	   mm	   Numeric month, a number from 1 to 12.
	   dd	   Day, a number from 1 to 31.
	   HH	   Hour, a number from 0 to 23.
	   MM	   Minutes, a number from 0 to 59.
	   ss	   Seconds, a number from 0 to 61 (59 plus a maximum of two
		   leap seconds).

     Everything but the minutes is optional.

     Time changes for Daylight Saving Time, standard time, leap seconds, and
     leap years are handled automatically.

ENVIRONMENT
     The following environment variables affect the execution of date:

     TZ      The timezone to use when displaying dates.  The normal format is
	     a pathname relative to /usr/share/zoneinfo.  For example, the
	     command ``TZ=America/Los_Angeles date'' displays the current time
	     in California.  See environ(7) for more information.

FILES
     /var/log/messages	record of the user setting the time

EXIT STATUS
     The date utility exits 0 on success, 1 if unable to set the date, and 2
     if able to set the local date, but unable to set it globally.

EXAMPLES
     The command:

	   date ""+DATE: %Y-%m-%d%nTIME: %H:%M:%S""

     will display:

	   DATE: 1987-11-21
	   TIME: 13:36:16

     In the Europe/London timezone, the command:

	   date -v1m -v+1y

     will display:

	   Sun Jan  4 04:15:24 GMT 1998

     where it is currently Mon Aug  4 04:15:24 BST 1997.

     The command:

	   date -v1d -v3m -v0y -v-1d

     will display the last day of February in the year 2000:

	   Tue Feb 29 03:18:00 GMT 2000

     So will the command:

	   date -v3m -v30d -v0y -v-1m

     because there is no such date as the 30th of February.

     The command:

	   date -v1d -v+1m -v-1d -v-fri

     will display the last Friday of the month:

	   Fri Aug 29 04:31:11 BST 1997

     where it is currently Mon Aug  4 04:31:11 BST 1997.

     The command:

	   date 0613162785

     sets the date to ``June 13, 1985, 4:27 PM''.

	   date ""+%m%d%H%M%Y.%S""

     may be used on one machine to print out the date suitable for setting on
     another.

     The command:

	   date 1432

     sets the time to 2:32 PM, without modifying the date.

     Finally the command:

	   date -j -f ""%a %b %d %T %Z %Y"" ""`date`"" ""+%s""

     can be used to parse the output from date and express it in Epoch time.

DIAGNOSTICS
     Occasionally, when timed(8) synchronizes the time on many hosts, the set-
     ting of a new time value may require more than a few seconds.  On these
     occasions, date prints: `Network time being set'.	The message
     `Communication error with timed' occurs when the communication between
     date and timed(8) fails.

LEGACY SYNOPSIS
     As above, except for the second line, which is:

     date [-jnu] [[[[[cc]yy]mm]dd]HH]MM[.ss]

LEGACY DIAGNOSTICS
     When invoked in legacy mode, the following exit values are returned:
     0	The date was written successfully
     1	Unable to set the date
     2	Able to set the local date, but unable to set it globally

     For more information about legacy mode, see compat(5).

SEE ALSO
     locale(1), gettimeofday(2), getutxent(3), strftime(3), strptime(3),
     timed(8)

     R. Gusella and S. Zatti, TSP: The Time Synchronization Protocol for UNIX
     4.3BSD.

STANDARDS
     The date utility is expected to be compatible with IEEE Std 1003.2
     (``POSIX.2'').  The -d, -f, -j, -n, -r, -t, and -v options are all exten-
     sions to the standard.

HISTORY
     A date command appeared in Version 1 AT&T UNIX.

BSD				  May 7, 2015				   BSD
","# date

> Set or display the system date.

- Display the current date using the default locale's format:

`date +""%c""`

- Display the current date in UTC and ISO 8601 format:

`date -u +""%Y-%m-%dT%H:%M:%S%Z""`

- Display the current date as a Unix timestamp (seconds since the Unix epoch):

`date +%s`

- Display a specific date (represented as a Unix timestamp) using the default format:

`date -r 1473305798`
"
archey,,,,"# archey

> Simple tool for stylishly displaying system information.

- Show system information:

`archey`

- Show system information without colored output:

`archey --nocolor`

- Show system information, using MacPorts instead of Homebrew:

`archey --macports`

- Show system information without IP address check:

`archey --offline`
"
ping,,,"
PING(8) 		  BSD System Manager's Manual		       PING(8)

NAME
     ping -- send ICMP ECHO_REQUEST packets to network hosts

SYNOPSIS
     ping [-AaCDdfnoQqRrv] [-b boundif] [-c count] [-G sweepmaxsize]
	  [-g sweepminsize] [-h sweepincrsize] [-i wait] [-k trafficclass]
	  [-K netservicetype] [-l preload] [-M mask | time] [-m ttl]
	  [-P policy] [-p pattern] [-S src_addr] [-s packetsize] [-t timeout]
	  [-W waittime] [-z tos] [--apple-connect] [--apple-time] host
     ping [-AaDdfLnoQqRrv] [-b boundif] [-c count] [-I iface] [-i wait]
	  [-k trafficclass] [-K netservicetype] [-l preload] [-M mask | time]
	  [-m ttl] [-P policy] [-p pattern] [-S src_addr] [-s packetsize]
	  [-T ttl] [-t timeout] [-W waittime] [-z tos] [--apple-connect]
	  [--apple-time] mcast-group

DESCRIPTION
     The ping utility uses the ICMP protocol's mandatory ECHO_REQUEST datagram
     to elicit an ICMP ECHO_RESPONSE from a host or gateway.  ECHO_REQUEST
     datagrams (``pings'') have an IP and ICMP header, followed by a ``struct
     timeval'' and then an arbitrary number of ``pad'' bytes used to fill out
     the packet.  The options are as follows:

     -A      Audible.  Output a bell (ASCII 0x07) character when no packet is
	     received before the next packet is transmitted.  To cater for
	     round-trip times that are longer than the interval between trans-
	     missions, further missing packets cause a bell only if the maxi-
	     mum number of unreceived packets has increased.

     -a      Audible.  Include a bell (ASCII 0x07) character in the output
	     when any packet is received.  This option is ignored if other
	     format options are present.

     -b boundif
	     Bind the socket to interface boundif for sending.	This option is
	     an Apple addition.

     -C      Prohibit the socket from using the cellular network interface.
	     This option is an Apple addition.

     -c count
	     Stop after sending (and receiving) count ECHO_RESPONSE packets.
	     If this option is not specified, ping will operate until inter-
	     rupted.  If this option is specified in conjunction with ping
	     sweeps, each sweep will consist of count packets.

     -D      Set the Don't Fragment bit.

     -d      Set the SO_DEBUG option on the socket being used.

     -f      Flood ping.  Outputs packets as fast as they come back or one
	     hundred times per second, whichever is more.  For every
	     ECHO_REQUEST sent a period ``.'' is printed, while for every
	     ECHO_REPLY received a backspace is printed.  This provides a
	     rapid display of how many packets are being dropped.  Only the
	     super-user may use this option.  This can be very hard on a net-
	     work and should be used with caution.

     -G sweepmaxsize
	     Specify the maximum size of ICMP payload when sending sweeping
	     pings.  This option is required for ping sweeps.

     -g sweepminsize
	     Specify the size of ICMP payload to start with when sending
	     sweeping pings.  The default value is 0.

     -h sweepincrsize
	     Specify the number of bytes to increment the size of ICMP payload
	     after each sweep when sending sweeping pings.  The default value
	     is 1.

     -I iface
	     Source multicast packets with the given interface address.  This
	     flag only applies if the ping destination is a multicast address.

     -i wait
	     Wait wait seconds between sending each packet.  The default is to
	     wait for one second between each packet.  The wait time may be
	     fractional, but only the super-user may specify values less than
	     0.1 second.  This option is incompatible with the -f option.

     -k trafficclass
	     Specifies the traffic class to use for sending ICMP packets.  The
	     supported traffic classes are BK_SYS, BK, BE, RD, OAM, AV, RV,
	     VI, VO and CTL.  By default ping uses the control traffic class
	     (CTL).  This option is an Apple addition.

     -K netservicetype
	     Specifies the network service type to use for sending ICMP pack-
	     ets.  The supported network service type are BK_SYS, BK, BE, RV,
	     AV, RD, OAM, VI, SIG and VO.  Note this overrides the default
	     traffic class (-k can still be specified after -K to use both).
	     This option is an Apple addition.

     -L      Suppress loopback of multicast packets.  This flag only applies
	     if the ping destination is a multicast address.

     -l preload
	     If preload is specified, ping sends that many packets as fast as
	     possible before falling into its normal mode of behavior.	Only
	     the super-user may use this option.

     -M mask | time
	     Use ICMP_MASKREQ or ICMP_TSTAMP instead of ICMP_ECHO.  For mask,
	     print the netmask of the remote machine.  Set the
	     net.inet.icmp.maskrepl MIB variable to enable ICMP_MASKREPLY.
	     For time, print the origination, reception and transmission time-
	     stamps.

     -m ttl  Set the IP Time To Live for outgoing packets.  If not specified,
	     the kernel uses the value of the net.inet.ip.ttl MIB variable.

     -n      Numeric output only.  No attempt will be made to lookup symbolic
	     names for host addresses.

     -o      Exit successfully after receiving one reply packet.

     -P policy
	     policy specifies IPsec policy for the ping session.  For details
	     please refer to ipsec(4) and ipsec_set_policy(3).

     -p pattern
	     You may specify up to 16 ``pad'' bytes to fill out the packet you
	     send.  This is useful for diagnosing data-dependent problems in a
	     network.  For example, ``-p ff'' will cause the sent packet to be
	     filled with all ones.

     -Q      Somewhat quiet output.  Don't display ICMP error messages that
	     are in response to our query messages.  Originally, the -v flag
	     was required to display such errors, but -v displays all ICMP
	     error messages.  On a busy machine, this output can be overbear-
	     ing.  Without the -Q flag, ping prints out any ICMP error mes-
	     sages caused by its own ECHO_REQUEST messages.

     -q      Quiet output.  Nothing is displayed except the summary lines at
	     startup time and when finished.

     -R      Record route.  Includes the RECORD_ROUTE option in the
	     ECHO_REQUEST packet and displays the route buffer on returned
	     packets.  Note that the IP header is only large enough for nine
	     such routes; the traceroute(8) command is usually better at
	     determining the route packets take to a particular destination.
	     If more routes come back than should, such as due to an illegal
	     spoofed packet, ping will print the route list and then truncate
	     it at the correct spot.  Many hosts ignore or discard the
	     RECORD_ROUTE option.

     -r      Bypass the normal routing tables and send directly to a host on
	     an attached network.  If the host is not on a directly-attached
	     network, an error is returned.  This option can be used to ping a
	     local host through an interface that has no route through it
	     (e.g., after the interface was dropped by routed(8)).

     -S src_addr
	     Use the following IP address as the source address in outgoing
	     packets.  On hosts with more than one IP address, this option can
	     be used to force the source address to be something other than
	     the IP address of the interface the probe packet is sent on.  If
	     the IP address is not one of this machine's interface addresses,
	     an error is returned and nothing is sent.

     -s packetsize
	     Specify the number of data bytes to be sent.  The default is 56,
	     which translates into 64 ICMP data bytes when combined with the 8
	     bytes of ICMP header data.  This option cannot be used with ping
	     sweeps.

     -T ttl  Set the IP Time To Live for multicasted packets.  This flag only
	     applies if the ping destination is a multicast address.

     -t timeout
	     Specify a timeout, in seconds, before ping exits regardless of
	     how many packets have been received.

     -v      Verbose output.  ICMP packets other than ECHO_RESPONSE that are
	     received are listed.

     -W waittime
	     Time in milliseconds to wait for a reply for each packet sent.
	     If a reply arrives later, the packet is not printed as replied,
	     but considered as replied when calculating statistics.

     -z tos  Use the specified type of service.

     --apple-connect
	     Connects the socket to the destination address.  This option is
	     an Apple addition.

     --apple-time
	     Prints the time a packet was received.  This option is an Apple
	     addition.

     When using ping for fault isolation, it should first be run on the local
     host, to verify that the local network interface is up and running.
     Then, hosts and gateways further and further away should be ``pinged''.
     Round-trip times and packet loss statistics are computed.	If duplicate
     packets are received, they are not included in the packet loss calcula-
     tion, although the round trip time of these packets is used in calculat-
     ing the round-trip time statistics.  When the specified number of packets
     have been sent (and received) or if the program is terminated with a
     SIGINT, a brief summary is displayed, showing the number of packets sent
     and received, and the minimum, mean, maximum, and standard deviation of
     the round-trip times.

     If ping receives a SIGINFO (see the status argument for stty(1)) signal,
     the current number of packets sent and received, and the minimum, mean,
     and maximum of the round-trip times will be written to the standard error
     output.

     This program is intended for use in network testing, measurement and man-
     agement.  Because of the load it can impose on the network, it is unwise
     to use ping during normal operations or from automated scripts.

ICMP PACKET DETAILS
     An IP header without options is 20 bytes.	An ICMP ECHO_REQUEST packet
     contains an additional 8 bytes worth of ICMP header followed by an arbi-
     trary amount of data.  When a packetsize is given, this indicated the
     size of this extra piece of data (the default is 56).  Thus the amount of
     data received inside of an IP packet of type ICMP ECHO_REPLY will always
     be 8 bytes more than the requested data space (the ICMP header).

     If the data space is at least eight bytes large, ping uses the first
     eight bytes of this space to include a timestamp which it uses in the
     computation of round trip times.  If less than eight bytes of pad are
     specified, no round trip times are given.

DUPLICATE AND DAMAGED PACKETS
     The ping utility will report duplicate and damaged packets.  Duplicate
     packets should never occur when pinging a unicast address, and seem to be
     caused by inappropriate link-level retransmissions.  Duplicates may occur
     in many situations and are rarely (if ever) a good sign, although the
     presence of low levels of duplicates may not always be cause for alarm.
     Duplicates are expected when pinging a broadcast or multicast address,
     since they are not really duplicates but replies from different hosts to
     the same request.

     Damaged packets are obviously serious cause for alarm and often indicate
     broken hardware somewhere in the ping packet's path (in the network or in
     the hosts).

TRYING DIFFERENT DATA PATTERNS
     The (inter)network layer should never treat packets differently depending
     on the data contained in the data portion.  Unfortunately, data-dependent
     problems have been known to sneak into networks and remain undetected for
     long periods of time.  In many cases the particular pattern that will
     have problems is something that does not have sufficient ``transitions'',
     such as all ones or all zeros, or a pattern right at the edge, such as
     almost all zeros.	It is not necessarily enough to specify a data pattern
     of all zeros (for example) on the command line because the pattern that
     is of interest is at the data link level, and the relationship between
     what you type and what the controllers transmit can be complicated.

     This means that if you have a data-dependent problem you will probably
     have to do a lot of testing to find it.  If you are lucky, you may manage
     to find a file that either cannot be sent across your network or that
     takes much longer to transfer than other similar length files.  You can
     then examine this file for repeated patterns that you can test using the
     -p option of ping.

TTL DETAILS
     The TTL value of an IP packet represents the maximum number of IP routers
     that the packet can go through before being thrown away.  In current
     practice you can expect each router in the Internet to decrement the TTL
     field by exactly one.

     The TCP/IP specification recommends setting the TTL field for IP packets
     to 64, but many systems use smaller values (4.3BSD uses 30, 4.2BSD used
     15).

     The maximum possible value of this field is 255, and most UNIX systems
     set the TTL field of ICMP ECHO_REQUEST packets to 255.  This is why you
     will find you can ``ping'' some hosts, but not reach them with telnet(1)
     or ftp(1).

     In normal operation ping prints the ttl value from the packet it
     receives.	When a remote system receives a ping packet, it can do one of
     three things with the TTL field in its response:

     o	 Not change it; this is what BSD systems did before the 4.3BSD-Tahoe
	 release.  In this case the TTL value in the received packet will be
	 255 minus the number of routers in the round-trip path.

     o	 Set it to 255; this is what current BSD systems do.  In this case the
	 TTL value in the received packet will be 255 minus the number of
	 routers in the path from the remote system to the pinging host.

     o	 Set it to some other value.  Some machines use the same value for
	 ICMP packets that they use for TCP packets, for example either 30 or
	 60.  Others may use completely wild values.

EXIT STATUS
     The ping utility exits with one of the following values:

     0	     At least one response was heard from the specified host.

     2	     The transmission was successful but no responses were received.

     any other value
	     An error occurred.  These values are defined in <sysexits.h>.

SEE ALSO
     netstat(1), ifconfig(8), routed(8), traceroute(8), ping6(8)

HISTORY
     The ping utility appeared in 4.3BSD.

AUTHORS
     The original ping utility was written by Mike Muuss while at the US Army
     Ballistics Research Laboratory.

BUGS
     Many Hosts and Gateways ignore the RECORD_ROUTE option.

     The maximum IP header length is too small for options like RECORD_ROUTE
     to be completely useful.  There's not much that can be done about this,
     however.

     Flood pinging is not recommended in general, and flood pinging the broad-
     cast address should only be done under very controlled conditions.

     The -v option is not worth much on busy hosts.

BSD				March 29, 2013				   BSD
","# ping

> Send ICMP ECHO_REQUEST packets to network hosts.

- Ping the specified host:

`ping {{host}}`

- Ping a host a specific number of times:

`ping -c {{count}} {{host}}`

- Ping `host`, specifying the interval in `seconds` between requests (default is 1 second):

`ping -i {{seconds}} {{host}}`

- Ping `host` without trying to lookup symbolic names for addresses:

`ping -n {{host}}`

- Ping `host` and ring the bell when a packet is received (if your terminal supports it):

`ping -a {{host}}`

- Ping `host` and prints the time a packet was received (this option is an Apple addition):

`ping --apple-time {{host}}`
"
launchctl,,,"
launchctl(1)		  BSD General Commands Manual		  launchctl(1)

NAME
     launchctl -- Interfaces with launchd

SYNOPSIS
     launchctl subcommand [arguments ...]

DESCRIPTION
     launchctl interfaces with launchd to manage and inspect daemons, agents
     and XPC services.

SUBCOMMANDS
     launchctl allows for detailed examination of launchd endpoints. A domain
     manages the execution policy for a collection of services.  A service may
     be thought of as a virtual process that is always available to be spawned
     in response to demand. Each service has a collection of endpoints, and
     sending a message to one of those endpoints will cause the service to
     launch on demand. Domains advertise these endpoints in a shared namespace
     and may be thought of as synonymous with Mach bootstrap subsets.

     Many subcommands in launchctl take a specifier which indicates the target
     domain or service for the subcommand. This specifier may take one of the
     following forms:

     system/[service-name]
	      Targets the system domain or a service within the system domain.
	      The system domain manages the root Mach bootstrap and is consid-
	      ered a privileged execution context. Anyone may read or query
	      the system domain, but root privileges are required to make mod-
	      ifications.

     user/<uid>/[service-name]
	      Targets the user domain for the given UID or a service within
	      that domain. A user domain may exist independently of a logged-
	      in user. User domains do not exist on iOS.

     login/<asid>/[service-name]
	      Targets a user-login domain or service within that domain. A
	      user-login domain is created when the user logs in at the GUI
	      and is identified by the audit session identifier associated
	      with that login. If a user domain has an associated login
	      domain, the print subcommand will display the ASID of that login
	      domain. User-login domains do not exist on iOS.

     gui/<uid>/[service-name]
	      Another form of the login specifier. Rather than specifying a
	      user-login domain by its ASID, this specifier targets the domain
	      based on which user it is associated with and is generally more
	      convenient.

	      Note: GUI domains and user domains share many resources. For the
	      purposes of the Mach bootstrap name lookups, they are ""flat"", so
	      they share the same set of registered names. But they still have
	      discrete sets of services. So when printing the user domain's
	      contents, you may see many Mach bootstrap name registrations
	      from services that exist in the GUI domain for that user, but
	      you will not see the services themselves in that list.

     session/<asid>/[service-name]
	      Targets the session domain for the given audit session ID or a
	      service within that domain. For more information about audit
	      sessions, see auditon(2) and libbsm(3)

     pid/<pid>/[service-name]
	      Targets the domain for the given PID or a service within that
	      domain. Each process on the system will have a PID domain asso-
	      ciated with it that consists of the XPC services visible to that
	      process which can be reached with xpc_connection_create(3).

     For instance, when referring to a service with the identifier
     com.apple.example loaded into the GUI domain of a user with UID 501,
     domain-target is gui/501/, service-name is com.apple.example, and
     service-target is gui/501/com.apple.example.

SUBCOMMANDS
     bootstrap | bootout domain-target [service-path service-path2 ...] |
	      service-target
	      Bootstraps or removes domains and services. When service argu-
	      ments are present, bootstraps and correspondingly removes their
	      definitions into the domain.  Services may be specified as a
	      series of paths or a service identifier.	Paths may point to XPC
	      service bundles, launchd.plist(5) s, or a directories containing
	      a collection of either. If there were one or more errors while
	      bootstrapping or removing a collection of services, the problem-
	      atic paths will be printed with the errors that occurred.

	      If no paths or service target are specified, these commands can
	      either bootstrap or remove a domain specified as a domain tar-
	      get. Some domains will implicitly bootstrap pre-defined paths as
	      part of their creation.

     enable | disable service-target
	      Enables or disables the service in the requested domain. Once a
	      service is disabled, it cannot be loaded in the specified domain
	      until it is once again enabled. This state persists across boots
	      of the device. This subcommand may only target services within
	      the system domain or user and user-login domains.

     uncache service-name
	      This subcommand instructs launchd to bypass its service cache
	      for the named service and instead read the service's configura-
	      tion file directly from disk.  launchd maintains an in-memory
	      cache of XPC service configuration files to minimize the disk
	      I/O. This subcommand will remove a cached entry so that develop-
	      ers may more rapidly iterate on a service's configuration. It
	      should not ever be used as part of production workflow.

     kickstart [-kp] service-target
	      Instructs launchd to run the specified service immediately,
	      regardless of its configured launch conditions.

	      -k       If the service is already running, kill the running
		       instance before restarting the service.

	      -p       Upon success, print the PID of the new process or the
		       already-running process to stdout.

     attach [-ksx] service-target
	      Attaches the system's debugger to the process currently backing
	      the specified service. By default, if the service is not run-
	      ning, this subcommand will block until the service starts.

	      -k       If the service is already running, kill the running
		       instance.

	      -s       Force the service to start.

	      -x       Attach to xpcproxy(3) before it execs and becomes the
		       service process. This flag is generally not useful for
		       anyone but the launchd maintainer.

     debug service-target [--program <program path>] [--guard-malloc]
	      [--malloc-stack-logging] [--debug-libraries]
	      [--introspection-libraries] [--NSZombie] [--32] [--stdin]
	      [--stdout] [--stderr] [--environment] [--] [argv0 argv1 argv2
	      ...]
	      Configures the next invocation of a service for debugging. This
	      subcommand allows you to temporarily replace the main executable
	      of the service with one at a different path, enable
	      libgmalloc(3), set environment variables, set the argument vec-
	      tor and more. This is a convenient alternative to editing the
	      launchd.plist(5) for the service and then reloading it, as the
	      additional debugging properties are cleared once the service has
	      run once with them.

	      --program <program-path>
		       Instructs launchd(8) to use program-path as the
		       service's executable.

	      --guard-malloc
		       Turns on libgmalloc(3) for the service.

	      --malloc-stack-logging
		       Turns on malloc(3) stack logging for the service.

	      --malloc-nano-allocator
		       Turns on the malloc(3) nano allocator for the service.

	      --debug-libraries
		       Sets the DYLD_IMAGE_SUFFIX for the service to ""_debug"",
		       which prefers the debug variants of libraries if they
		       exist. See dyld(1) for more information.

	      --introspection-libraries
		       Adds /usr/lib/system/introspection to the
		       DYLD_LIBRARY_PATH environment variable for the service.
		       This causes the system to prefer the introspection
		       variants of libraries if they exist.

	      --NSZombie
		       Enables NSZombie.

	      --32     Runs the service in the appropriate 32-bit architec-
		       ture. Only available on 64-bit platforms.

	      --stdin [stdin-path]
		       Sets the service's standard input to be stdin-path.  If
		       no file is given, uses the current terminal as the ser-
		       vice's standard input. If stdin-path does not exist, it
		       is created.

	      --stdout [stdout-path]
		       Sets the service's standard input to be stdout-path.
		       If no file is given, uses the current terminal as the
		       service's standard input. If stdout-path does not
		       exist, it is created.

	      --stderr [stderr-path]
		       Sets the service's standard input to be stderr-path.
		       If no file is given, uses the current terminal as the
		       service's standard input. If stderr-path does not
		       exist, it is created.

	      --environment VARIABLE0=value VARIABLE1=value ...
		       Sets the given environment variables on the service.

	      -- argv0 argv1 ...
		       Any arguments following the -- are given to the service
		       as its argument vector.

		       IMPORTANT: These arguments replace the service's
		       default argument vector; they are not merged in any
		       way. The first argument following -- is given as the
		       initial (zeroth) element of the service's argument vec-
		       tor. As with the ProgramArguments launchd.plist(5) key,
		       you should read carefully and understand the execve(2)
		       man page.

     kill signal-name | signal-number service-target
	      Sends the specified signal to the specified service if it is
	      running. The signal number or name (SIGTERM, SIGKILL, etc.) may
	      be specified.

     blame service-target
	      If the service is running, prints a human-readable string
	      describing why launchd launched the service. Note that services
	      may run for many reasons; this subcommand will only show the
	      most proximate reason. So if a service was run due to a timer
	      firing, this subcommand will print that reason, irrespective of
	      whether there were messages waiting on the service's various
	      endpoints. This subcommand is only intended for debugging and
	      profiling use and its output should not be relied upon in pro-
	      duction scenarios.

     print domain-target | service-target
	      Prints information about the specified service or domain. Domain
	      output includes various properties about the domain as well as a
	      list of services and endpoints in the domain with state pertain-
	      ing to each. Service output includes various properties of the
	      service, including information about its origin on-disk, its
	      current state, execution context, and last exit status.

	      IMPORTANT: This output is NOT API in any sense at all. Do NOT
	      rely on the structure or information emitted for ANY reason. It
	      may change from release to release without warning.

     print-cache
	      Prints the contents of the launchd service cache.

     print-disabled domain-target
	      Prints the list of disabled services in the specified domain.

     plist [segment,section] Mach-O
	      Prints the the property list embedded in the __TEXT,__info_plist
	      segment/section of the target Mach-O or the specified seg-
	      ment/section.

     procinfo pid
	      Prints information about the execution context of the specified
	      PID. This information includes Mach task-special ports and
	      exception ports (and when run against a DEVELOPMENT launchd,
	      what names the ports are advertised as in the Mach bootstrap
	      namespace, if they are known to launchd) and audit session con-
	      text. This subcommand is intended for diagnostic purposes only,
	      and its output should not be relied upon in production scenar-
	      ios. This command requires root privileges.

     hostinfo
	      Prints information about the system's host-special ports,
	      including the host-exception port. This subcommand requires root
	      privileges.

     resolveport owner-pid port-name
	      Given a PID and the name of a Mach port right in that process'
	      port namespace, resolves that port to an endpoint name known to
	      launchd.	This subcommand requires root privileges.

     examine [tool arg0 arg1 @PID ...]
	      Causes launchd to fork(2) itself for examination by a profiling
	      tool and prints the PID of this new instance to stdout. You are
	      responsible for killing this snapshot when it is no longer
	      needed.

	      Many profiling tools cannot safely examine launchd because they
	      depend on the functionality it provides. This subcommand creates
	      an effective snapshot of launchd that can be examined indepen-
	      dently. Note that on Darwin platforms, fork(2) is implemented
	      such that only the thread which called fork(2) is replicated
	      into the new child process, so this subcommand is not useful for
	      examining any thread other than the main event loop.

	      This subcommand takes an optional invocation of a tool to be
	      used on the launchd snapshot. Where you would normally give the
	      PID of the process to be examined in the tool's invocation,
	      instead specify the argument ""@PID"", and launchctl will substi-
	      tute that argument with the PID of the launchd snapshot in its
	      subsequent execution of the tool. If used in this form,
	      launchctl will automatically kill the snapshot instance when the
	      examination tool exits.

	      This subcommand may only be used against a DEVELOPMENT launchd.

     config system | user parameter value
	      Sets persistent configuration information for launchd(8)
	      domains. Only the system domain and user domains may be config-
	      ured. The location of the persistent storage is an implementa-
	      tion detail, and changes to that storage should only be made
	      through this subcommand. A reboot is required for changes made
	      through this subcommand to take effect.

	      Supported configuration parameters are:

	      umask    Sets the umask(2) for services within the target domain
		       to the value specified by value.  Note that this value
		       is parsed by strtoul(3) as an octal-encoded number, so
		       there is no need to prefix it with a leading '0'.

	      path     Sets the PATH environment variable for all services
		       within the target domain to the string value.  The
		       string value should conform to the format outlined for
		       the PATH environment variable in environ(7).  Note that
		       if a service specifies its own PATH, the service-spe-
		       cific environment variable will take precedence.

		       NOTE: This facility cannot be used to set general envi-
		       ronment variables for all services within the domain.
		       It is intentionally scoped to the PATH environment
		       variable and nothing else for security reasons.

     reboot [system|userspace|halt|logout|apps]
	      Instructs launchd to begin tearing down userspace. With no argu-
	      ment given or with the system argument given, launchd will make
	      the reboot(2) system call when userspace has been completely
	      torn down. With the halt argument given, launchd will make the
	      reboot(2) system call when userspace has been completely torn
	      down and pass the RB_HALT flag, halting the system and not ini-
	      tiating a reboot.

	      With the userspace argument given, launchd will re-exec itself
	      when userspace has been torn down and bring userspace back up.
	      This is useful for rebooting the system quickly under conditions
	      where kernel data structures or hardware do not need to be re-
	      initialized.

	      With the logout argument given, launchd will tear down the
	      caller's GUI login session in a manner similar to a logout ini-
	      tiated from the Apple menu. The key difference is that a logout
	      initiated through this subcommand will be much faster since it
	      will not give apps a chance to display modal dialogs to block
	      logout indefinitely; therefore there is data corruption risk to
	      using this option. Only use it when you know you have no unsaved
	      data in your running apps.

	      With the apps argument given, launchd will terminate all apps
	      running in the caller's GUI login session that did not come from
	      a launchd.plist(5) on-disk. Apps like Finder, Dock and Syste-
	      mUIServer will be unaffected. Apps are terminated in the same
	      manner as the logout argument, and all the same caveats apply.

	      -s       When rebooting the machine (either a full reboot or
		       userspace reboot), brings the subsequent boot session
		       up in single-user mode.

     error [posix|mach|bootstrap] code
	      Prints a human-readable string of the given error code.  By
	      default, launchctl will attempt to guess which error domain the
	      code given belongs to. The caller may optionally specify which
	      domain (either posix, mach, or bootstrap) to interpret the given
	      code as an error from that subsystem.

     variant  Prints the launchd variant currently active on the system. Pos-
	      sible variants include RELEASE, DEVELOPMENT and DEBUG.

     version  Prints the launchd version string.

LEGACY SUBCOMMANDS
     Subcommands from the previous implementation of launchd are generally
     available, though some may be unimplemented. Unimplemented subcommands
     are documented as such.

     load | unload [-wF] [-S sessiontype] [-D searchpath] paths ...
	      Load the specified configuration files or directories of config-
	      uration files.  Jobs that are not on-demand will be started as
	      soon as possible. All specified jobs will be loaded before any
	      of them are allowed to start. Note that per-user configuration
	      files (LaunchAgents) must be owned by root (if they are located
	      in /Library/LaunchAgents) or the user loading them (if they are
	      located in $HOME/Library/LaunchAgents).  All system-wide daemons
	      (LaunchDaemons) must be owned by root. Configuration files must
	      disallow group and world writes. These restrictions are in place
	      for security reasons, as allowing writability to a launchd con-
	      figuration file allows one to specify which executable will be
	      launched.

	      Note that allowing non-root write access to the
	      /System/Library/LaunchDaemons directory WILL render your system
	      unbootable.

	      -w       Overrides the Disabled key and sets it to false or true
		       for the load and unload subcommands respectively. In
		       previous versions, this option would modify the config-
		       uration file. Now the state of the Disabled key is
		       stored elsewhere on- disk in a location that may not be
		       directly manipulated by any process other than launchd.

	      -F       Force the loading or unloading of the plist. Ignore the
		       Disabled key.

	      -S sessiontype
		       Some jobs only make sense in certain contexts. This
		       flag instructs launchctl to look for jobs in a differ-
		       ent location when using the -D flag, and allows
		       launchctl to restrict which jobs are loaded into which
		       session types. Sessions are only relevant for per-user
		       launchd contexts. Relevant sessions are Aqua (the
		       default), Background and LoginWindow.  Background
		       agents may be loaded independently of a GUI login. Aqua
		       agents are loaded only when a user has logged in at the
		       GUI. LoginWindow agents are loaded when the LoginWindow
		       UI is displaying and currently run as root.

	      -D searchpath
		       Load or unload all plist(5) files in the search path
		       given. This option may be thought of as expanding into
		       many individual paths depending on the search path
		       given. Valid search paths include ""system,"" ""local,""
		       and ""all."" When providing a session type, an additional
		       search path is available for use called ""user."" For
		       example, without a session type given, ""-D system""
		       would load from or unload all property list files from
		       /System/Library/LaunchDaemons.  With a session type
		       passed, it would load from
		       /System/Library/LaunchAgents.  Note that launchctl no
		       longer respects the network search path.

		       In a previous version of launchd, these search paths
		       were called ""domains"", hence -D. The word ""domain"" is
		       now used for a totally different concept.

	      NOTE: Due to bugs in the previous implementation and long-stand-
	      ing client expectations around those bugs, the load and unload
	      subcommands will only return a non-zero exit code due to
	      improper usage.  Otherwise, zero is always returned.

     submit -l label [-p executable] [-o stdout-path] [-e stderr-path] --
	      command [arg0] [arg1] [...]
	      A simple way of submitting a program to run without a configura-
	      tion file. This mechanism also tells launchd to keep the program
	      alive in the event of failure.

	      -l label
		       What unique label to assign this job to launchd.

	      -p program
		       What program to really execute, regardless of what fol-
		       lows the -- in the submit sub-command.

	      -o stdout-path
		       Where to send the stdout of the program.

	      -e stderr-path
		       Where to send the stderr of the program.

     remove label
	      Remove the job from launchd by label. This subcommand will
	      return immediately and not block until the job has been stopped.

     start label
	      Start the specified job by label. The expected use of this sub-
	      command is for debugging and testing so that one can manually
	      kick-start an on-demand server.

     stop label
	      Stop the specified job by label. If a job is on-demand, launchd
	      may immediately restart the job if launchd finds any criteria
	      that is satisfied.

     list [-x] [label]
	      With no arguments, list all of the jobs loaded into launchd in
	      three columns. The first column displays the PID of the job if
	      it is running.  The second column displays the last exit status
	      of the job. If the number in this column is negative, it repre-
	      sents the negative of the signal which stopped the job. Thus,
	      ""-15"" would indicate that the job was terminated with SIGTERM.
	      The third column is the job's label. If [label] is specified,
	      prints information about the requested job.

	      -x       This flag is no longer supported.

     setenv key value
	      Specify an environment variable to be set on all future pro-
	      cesses launched by launchd in the caller's context.

     unsetenv key
	      Specify that an environment variable no longer be set on any
	      future processes launched by launchd in the caller's context.

     getenv key
	      Print the value of an environment variable that launchd would
	      set for all processes launched into the caller's context.

     export   Export all of the environment variables of launchd for use in a
	      shell eval statement.

     getrusage self | children
	      Get the resource utilization statistics for launchd or the chil-
	      dren of launchd.	This subcommand is not implemented.

     log [level loglevel] [only | mask loglevels...]
	      Get and set the syslog(3) log level mask. The available log lev-
	      els are: debug, info, notice, warning, error, critical, alert
	      and emergency. This subcommand is not implemented.

     limit [cpu | filesize | data | stack | core | rss | memlock | maxproc |
	      maxfiles] [both [soft | hard]]
	      With no arguments, this command prints all the resource limits
	      of launchd as found via getrlimit(2).  When a given resource is
	      specified, it prints the limits for that resource. With a third
	      argument, it sets both the hard and soft limits to that value.
	      With four arguments, the third and forth argument represent the
	      soft and hard limits respectively.  See setrlimit(2).

     shutdown
	      Tell launchd to prepare for shutdown by removing all jobs. This
	      subcommand is not implemented.

     umask [newmask]
	      Get or optionally set the umask(2) of launchd.  This subcommand
	      is not implemented.

     bslist [PID | ..] [-j]
	      This subcommand is not implemented and has been superseded by
	      the print subcommand, which provides much richer information.

     bsexec PID command [args]
	      This executes the given command in as similar an execution con-
	      text as possible to the target PID. Adopted attributes include
	      the Mach bootstrap namespace, exception server and security
	      audit session. It does not modify the process' credentials (UID,
	      GID, etc.) or adopt any environment variables from the target
	      process. It affects only the Mach bootstrap context and
	      directly-related attributes.

     asuser UID command [args]
	      This executes the given command in as similar an execution con-
	      text as possible to that of the target user's bootstrap. Adopted
	      attributes include the Mach bootstrap namespace, exception
	      server and security audit session. It does not modify the
	      process' credentials (UID, GID, etc.) or adopt any user-specific
	      environment variables. It affects only the Mach bootstrap con-
	      text and directly- related attributes.

     bstree   This subcommand is not implemented and has been superseded by
	      the print subcommand, which provides much richer information.

     managerpid
	      This prints the PID of the launchd which manages the current
	      bootstrap. In prior implementations, there could be multiple
	      launchd processes each managing their own Mach bootstrap sub-
	      sets. In the current implementation, all bootstraps are managed
	      by one process, so this subcommand will always print ""1"".

     manageruid
	      This prints the UID associated with the caller's launchd con-
	      text.

     managername
	      This prints the name of the launchd job manager which manages
	      the current launchd context. See LimitLoadToSessionType in
	      launchd.plist(5) for more details.

     help     Print out a quick usage statement.

CAVEATS
     The output produced by the ""legacy"" subcommands (chiefly list) should
     match their output on previous OS X releases. However, the output of
     newer subcommands does not conform to any particular format and is not
     guaranteed to remain stable across releases. These commands are intended
     for use by human developers and system administrators, not for automation
     by programs or scripts. Their output does not constitute an API and no
     promises of forward compatibility are offered to programs that attempt to
     parse it.

DEPRECATED AND REMOVED FUNCTIONALITY
     launchctl no longer has an interactive mode, nor does it accept commands
     from stdin. The /etc/launchd.conf file is no longer consulted for subcom-
     mands to run during early boot time; this functionality was removed for
     security considerations. While it was documented that $HOME/.launchd.conf
     would be consulted prior to setting up a user's session, this functional-
     ity was never implemented.

     launchd no longer uses Unix domain sockets for communication, so the
     LAUNCHD_SOCKET environment variable is no longer relevant and is not set.

     launchd no longer loads configuration files from the network

FILES
     ~/Library/LaunchAgents	    Per-user agents provided by the user.
     /Library/LaunchAgents	    Per-user agents provided by the adminis-
				    trator.
     /Library/LaunchDaemons	    System wide daemons provided by the admin-
				    istrator.
     /System/Library/LaunchAgents   OS X Per-user agents.
     /System/Library/LaunchDaemons  OS X System wide daemons.

EXIT STATUS
     launchctl will exit with status 0 if the subcommand succeeded. Otherwise,
     it will exit with an error code that can be given to the error subcommand
     to be decoded into human-readable form.

SEE ALSO
     launchd.plist(5), launchd(8), audit(8), setaudit_addr(2)

Darwin				1 October, 2014 			Darwin
","# launchctl

> A command-line interface to Apple's `launchd` manager for launch daemons (system-wide services) and launch agents (per-user programs).
> `launchd` loads XML-based `*.plist` files placed in the appropriate locations, and runs the corresponding commands according to their defined schedule.

- Activate a user-specific agent to be loaded into `launchd` whenever the user logs in:

`launchctl load ~/Library/LaunchAgents/{{my_script}}.plist`

- Activate an agent which requires root privileges to run and/or should be loaded whenever any user logs in (note the absence of `~` in the path):

`sudo launchctl load /Library/LaunchAgents/{{root_script}}.plist`

- Activate a system-wide daemon to be loaded whenever the system boots up (even if no user logs in):

`sudo launchctl load /Library/LaunchDaemons/{{system_daemon}}.plist`

- Show all loaded agents/daemons, with the PID if the process they specify is currently running, and the exit code returned the last time they ran:

`launchctl list`

- Unload a currently loaded agent, e.g. to make changes (note: the plist file is automatically loaded into `launchd` after a reboot and/or logging in):

`launchctl unload ~/Library/LaunchAgents/{{my_script}}.plist`

- Manually run a known (loaded) agent/daemon, even if it is not the right time (note: this command uses the agent's label, rather than the filename):

`launchctl start {{my_script}}`

- Manually kill the process associated with a known agent/daemon, if it is running:

`launchctl stop {{my_script}}`
"
sips,,,"
sips(1) 		  BSD General Commands Manual		       sips(1)

NAME
     sips -- scriptable image processing system.

SYNOPSIS
     sips [image-query-functions] imagefile ...
     sips [profile-query-functions] profile ...
     sips [image-modification-functions] imagefile ...
	  [--out result-file-or-dir]
     sips [profile-modification-functions] profile ...
	  [--out result-file-or-dir]

DESCRIPTION
     This tool is used to query or modify raster image files and ColorSync ICC
     profiles.	Its functionality can also be used through the ""Image Events""
     AppleScript suite.

FUNCTIONS
     Profile query functions:

     -g key
     --getProperty key
	   Output the property value for key to stdout.

     -X tag tagFile
     --extractTag tag tagFile
	   Write a profile tag element to tagFile.

     -v
     --verify
	   Verify any profile problems and log output to stdout.

     Image query functions:

     -g key
     --getProperty key
	   Output the property value for key to stdout.

     -x profile
     --extractProfile profile
	   Get the embedded profile from image and write it to profile.

     Profile modification functions:

     -s key value
     --setProperty key value
	   Set a property value for key to value.

     -d key
     --deleteProperty key
	   Remove a property value for key.

     --deleteTag tag
	   Remove the tag element from a profile.

     --copyTag srcTag dstTag
	   Copy the srcTag element of a profile to dstTag.

     --loadTag tag tagFile
	   Set the tag element of a profile to the contents of tagFile.

     --repair
	   Repair any profile problems and log output to stdout.

     Image modification functions:

     -s key value
     --setProperty key value
	   Set a property value for key to value.

     -d key
     --deleteProperty key
	   Remove a property value for key.

     -e profile
     --embedProfile profile
	   Embed profile in image.

     -E profile
     --embedProfileIfNone profile
	   Embed profile in image only if image doen't have a profile.

     -m profile
     --matchTo profile
	   Color match image to profile.

     -M profile intent
     --matchToWithIntent profile intent
	   Color match image to profile with rendering intent perceptual |
	   relative | saturation | absolute.

     --deleteColorManagementProperties
	   Delete color management properties in TIFF, PNG, and EXIF dictio-
	   naries.

     -r degreesCW
     --rotate degreesCW

     -f horizontal|vertical
     --flip horizontal|vertical

     -c pixelsH pixelsW
     --cropToHeightWidth pixelsH pixelsW
	   Crop image to fit specified size.

     -p pixelsH pixelsW
     --padToHeightWidth pixelsH pixelsW
	   Pad image with pixels to fit specified size.

     --padColor hexcolor
	   Use this color when padding. White=FFFFFF, Red=FF0000,
	   Default=Black=000000

     -z pixelsH pixelsW
     --resampleHeightWidth pixelsH pixelsW
	   Resample image at specified size. Image apsect ratio may be
	   altered.

     --resampleWidth pixelsW
	   Resample image to specified width.

     --resampleHeight pixelsH
	   Resample image to specified height.

     -Z pixelsWH
     --resampleHeightWidthMax pixelsWH
	   Resample image so height and width aren't greater than specified
	   size.

     -o
     --optimizeColorForSharing
	   Optimize color for sharing.

OPTIONS
     The commands --getProperty, --setProperty, and --deleteProperty can use
     one of the following keys as a parameter.

     Special property keys:
     all	      binary data
     allxml	      binary data

     Image property keys:
     dpiHeight	      float
     dpiWidth	      float
     pixelHeight      integer (read-only)
     pixelWidth       integer (read-only)
     typeIdentifier   string (read-only)
     format	      string jpeg | tiff | png | gif | jp2 | pict | bmp | qtif
		      | psd | sgi | tga
     formatOptions    string default | [low|normal|high|best|<percent>] |
		      [lzw|packbits]
     space	      string (read-only)
     samplesPerPixel  integer (read-only)
     bitsPerSample    integer (read-only)
     creation	      string (read-only)
     make	      string
     model	      string
     software	      string (read-only)
     description      string
     copyright	      string
     artist	      string
     profile	      binary data
     hasAlpha	      boolean (read-only)

     Profile property keys:
     description	 utf8 string
     size		 integer (read-only)
     cmm		 string
     version		 string
     class		 string (read-only)
     space		 string (read-only)
     pcs		 string (read-only)
     creation		 string
     platform		 string
     quality		 string normal | draft | best
     deviceManufacturer  string
     deviceModel	 integer
     deviceAttributes0	 integer
     deviceAttributes1	 integer
     renderingIntent	 string perceptual | relative | saturation | absolute
     creator		 string
     copyright		 string
     md5		 string (read-only)

Darwin			      September 25, 2020			Darwin
","# sips

> Apple Scriptable Image Processing System.
> Raster/Query images and ColorSync ICC Profiles.

- Specify an output directory so that originals do not get modified:

`sips --out {{path/to/out_dir}}`

- Resample image at specified size, Image aspect ratio may be altered:

`sips -z {{1920}} {{300}} {{image.ext}}`

- Resample image so height and width aren't greater than specified size (notice the capital Z):

`sips -Z {{1920}} {{300}} {{image.ext}}`

- Resample all images in a directory to fit a width of 960px (honoring aspect ratio):

`sips --resampleWidth {{960}} {{path/to/images}}`

- Convert an image from CMYK to RGB:

`sips --matchTo '/System/Library/ColorSync/Profiles/Generic RGB Profile.icc' {{path/to/image.ext}} {{path/to/out_dir}}`

- Remove ColorSync ICC profile from an image:

`sips -d profile --deleteColorManagementProperties {{path/to/image.ext}}`
"
md5,,,"
MD5(1)			  BSD General Commands Manual			MD5(1)

NAME
     md5 -- calculate a message-digest fingerprint (checksum) for a file

SYNOPSIS
     md5 [-pqrtx] [-s string] [file ...]

DESCRIPTION
     The md5 utility takes as input a message of arbitrary length and produces
     as output a ``fingerprint'' or ``message digest'' of the input.  It is
     conjectured that it is computationally infeasible to produce two messages
     having the same message digest, or to produce any message having a given
     prespecified target message digest.  The MD5 algorithm is intended for
     digital signature applications, where a large file must be ``compressed''
     in a secure manner before being encrypted with a private (secret) key
     under a public-key cryptosystem such as RSA.

     MD5's designer Ron Rivest has stated ""md5 and sha1 are both clearly bro-
     ken (in terms of collision-resistance)"".  So MD5 should be avoided when
     creating new protocols, or implementing protocols with better options.
     SHA256 and SHA512 are better options as they have been more resilient to
     attacks (as of 2009).

     The following options may be used in any combination and must precede any
     files named on the command line.  The hexadecimal checksum of each file
     listed on the command line is printed after the options are processed.

     -s string
	     Print a checksum of the given string.

     -p      Echo stdin to stdout and append the checksum to stdout.

     -q      Quiet mode - only the checksum is printed out.  Overrides the -r
	     option.

     -r      Reverses the format of the output.  This helps with visual diffs.
	     Does nothing when combined with the -ptx options.

     -t      Run a built-in time trial.

     -x      Run a built-in test script.

EXIT STATUS
     The md5 utility exits 0 on success, and 1 if at least one of the input
     files could not be read.

SEE ALSO
     cksum(1), md5(3), ripemd(3), sha(3), CC_SHA256_Init(3)

     Vlastimil Klima, Finding MD5 Collisions - a Toy For a Notebook,
     Cryptology ePrint Archive: Report 2005/075.

ACKNOWLEDGMENTS
     This program is placed in the public domain for free general use by RSA
     Data Security.

BSD				 June 6, 2004				   BSD
","# md5

> Calculate MD5 cryptographic checksums.

- Calculate the MD5 checksum for a file:

`md5 {{filename}}`

- Calculate MD5 checksums for multiple files:

`md5 {{filename1}} {{filename2}}`

- Output only the md5 checksum (no filename):

`md5 -q {{filename}}`

- Print a checksum of the given string:

`md5 -s {{string}}`
"
hostname,,,"
HOSTNAME(1)		  BSD General Commands Manual		   HOSTNAME(1)

NAME
     hostname -- set or print name of current host system

SYNOPSIS
     hostname [-fs] [name-of-host]

DESCRIPTION
     The hostname utility prints the name of the current host.	The super-user
     can set the hostname by supplying an argument.  To keep the hostname
     between reboots, run `scutil --set HostName name-of-host'.

     Options:

     -f    Include domain information in the printed name.  This is the
	   default behavior.

     -s    Trim off any domain information from the printed name.

SEE ALSO
     gethostname(3), scutil(8)

HISTORY
     The hostname command appeared in 4.2BSD.

BSD			       December 7, 2006 			   BSD
","# hostname

> Show or set the system's host name.

- Show current host name:

`hostname`

- Set current host name:

`hostname {{new_hostname}}`
"
opensnoop,,,"opensnoop(1m)			 USER COMMANDS			 opensnoop(1m)



NAME
       opensnoop - snoop file opens as they occur. Uses DTrace.

SYNOPSIS
       opensnoop [-a|-A|-ceFghstvxZ] [-f pathname] [-n name] [-p PID]

DESCRIPTION
       opensnoop  tracks  file opens. As a process issues a file open, details
       such as UID, PID and pathname are printed out.

       The returned file descriptor is printed, a value  of  -1  indicates  an
       error.  This  can be useful for troubleshooting to determine if applia-
       cions are attempting to open files that do not exist.

       Since this uses DTrace, only users with root privileges	can  run  this
       command.

OPTIONS
       -a     print all data

       -A     dump all data, space delimited

       -c     print current working directory of process

       -e     print errno value

       -F     print the flags passed to open

       -g     print full command arguments

       -s     print start time, us

       -t     print user stack trace

       -v     print start time, string

       -x     only print failed opens

       -Z     print zonename

       -f pathname
	      file pathname to snoop

       -n name
	      process name to snoop

       -p PID process ID to snoop


EXAMPLES
       Default output, print file opens by process as they occur,
	      # opensnoop


       Print human readable timestamps,
	      # opensnoop -v


       See error codes,
	      # opensnoop -e


       Snoop this file only,
	      # opensnoop -f /etc/passwd


FIELDS
       ZONE   Zone name

       UID    User ID

       PID    Process ID

       PPID   Parent Process ID

       FD     File Descriptor (-1 is error)

       FLAGS  Flags passed to open

       ERR    errno value (see /usr/include/sys/errno.h)

       CWD    current working directory of process

       PATH   pathname for file open

       COMM   command name for the process

       ARGS   argument listing for the process

       TIME   timestamp for the open event, us

       STRTIME
	      timestamp for the open event, string

DOCUMENTATION
       See  the  DTraceToolkit for further documentation under the Docs direc-
       tory. The DTraceToolkit docs may include full worked examples with ver-
       bose descriptions explaining the output.

EXIT
       opensnoop will run forever until Ctrl-C is hit.

BUGS
       occasionally the pathname for the file open cannot be read and the fol-
       lowing error will be seen,

       dtrace: error on enabled probe ID 6 (...): invalid address

       this is normal behaviour.

AUTHOR
       Brendan Gregg [Sydney, Australia]

SEE ALSO
       dtrace(1M), truss(1)




version 1.60			 Jan 12, 2006			 opensnoop(1m)
","# opensnoop

> Tool that tracks file opens on your system.

- Print all file opens as they occur:

`sudo opensnoop`

- Track all file opens by a process by name:

`sudo opensnoop -n {{process_name}}`

- Track all file opens by a process by PID:

`sudo opensnoop -p {{PID}}`

- Track which processes open a specified file:

`sudo opensnoop -f {{path/to/file}}`
"
brew,https://brew.sh,"


The Missing Package Manager for macOS (or Linux) — Homebrew
































































Homebrew
The Missing Package Manager for macOS (or Linux)




العربية
Azərbaycanca
Беларуская
Български
Català
Čeština
Dansk
Deutsch
Ελληνικά
English
Español
فارسی
Suomi
Français
Galego
עברית
Italiano
日本語
한국어
Norsk bokmål
Nederlands
Norsk nynorsk
Polski
Português Brasileiro
Română
Русский
Српски
Svenska
ไทย
Türkçe
Українська
Tiếng Việt
简体中文
繁體中文






Install Homebrew

/bin/bash -c ""$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)""

Paste that in a macOS Terminal or Linux shell prompt.


The script explains what it will do and then pauses before it does it. Read about other installation options.





What Does Homebrew Do?


Homebrew installs the stuff you need that Apple (or your Linux system) didn’t.


$ brew install wget






Homebrew installs packages to their own directory and then symlinks their files into /usr/local.


$ cd /usr/local
$ find Cellar
Cellar/wget/1.16.1
Cellar/wget/1.16.1/bin/wget
Cellar/wget/1.16.1/share/man/man1/wget.1

$ ls -l bin
bin/wget -> ../Cellar/wget/1.16.1/bin/wget






Homebrew won’t install files outside its prefix and you can place a Homebrew installation wherever you like.






Trivially create your own Homebrew packages.


$ brew create https://foo.com/bar-1.0.tgz
Created /usr/local/Homebrew/Library/Taps/homebrew/homebrew-core/Formula/bar.rb






It's all Git and Ruby underneath, so hack away with the knowledge that you can easily revert your modifications and merge upstream updates.


$ brew edit wget # opens in $EDITOR!






Homebrew formulae are simple Ruby scripts:


class Wget < Formula
  homepage ""https://www.gnu.org/software/wget/""
  url ""https://ftp.gnu.org/gnu/wget/wget-1.15.tar.gz""
  sha256 ""52126be8cf1bddd7536886e74c053ad7d0ed2aa89b4b630f76785bac21695fcd""

  def install
    system ""./configure"", ""--prefix=#{prefix}""
    system ""make"", ""install""
  end
end






Homebrew complements macOS (or your Linux system). Install your RubyGems with gem and their dependencies with brew.






""To install, drag this icon..."" no more. brew cask installs macOS apps, fonts and plugins and other non-open source software.


$ brew cask install firefox






Making a cask is as simple as creating a formula.


$ brew cask create foo
Editing /usr/local/Homebrew/Library/Taps/homebrew/homebrew-cask/Casks/foo.rb





Further Documentation

docs.brew.sh





Donate to Homebrew

Homebrew/brew#donations





Community Discussion

Homebrew/discussions





Homebrew Blog

brew.sh/blog





Homebrew Packages

formulae.brew.sh





Analytics Data

formulae.brew.sh/analytics





Homebrew was created by Max Howell. Website by Rémi Prévost, Mike McQuaid and Danielle Lalonde.










","BREW(1) 			     brew			       BREW(1)



NAME
       brew - The Missing Package Manager for macOS

SYNOPSIS
       brew --version
       brew command [--verbose|-v] [options] [formula] ...

DESCRIPTION
       Homebrew is the easiest and most flexible way to install the UNIX tools
       Apple didn't include with macOS.

ESSENTIAL COMMANDS
       For the full command list, see the COMMANDS section.

       With --verbose or --debug, many commands print extra debugging informa-
       tion. Note that these options should only appear after a command.

   install formula:
       Install formula.

       formula is usually the name of the formula to install, but it has other
       syntaxes which are listed in the SPECIFYING FORMULAE section.

   uninstall formula:
       Uninstall formula.

   list:
       List all installed formulae.

   search (text|/text/):
       Perform a substring search of cask tokens and formula names  for  text.
       If  text  is flanked by slashes, it is interpreted as a regular expres-
       sion. The search for text is extended online to homebrew/core and home-
       brew/cask.  If no search term is provided, all locally available formu-
       lae are listed.

COMMANDS
   analytics [subcommand]
       Control Homebrew's anonymous aggregate user behaviour  analytics.  Read
       more at https://docs.brew.sh/Analytics.

       brew analytics [state]
	   Display the current state of Homebrew's analytics.

       brew analytics [on|off]
	   Turn Homebrew's analytics on or off respectively.

       brew analytics regenerate-uuid
	   Regenerate the UUID used for Homebrew's analytics.

   cask command [options] [cask]
       Homebrew  Cask  provides a friendly CLI workflow for the administration
       of macOS applications distributed as binaries.

       Commands:

       o   --cache
	   Display the file used to cache a cask

       o   audit
	   Check cask for Homebrew coding style violations

       o   cat
	   Dump raw source of a cask to the standard output

       o   create
	   Creates the given cask and opens it in an editor

       o   doctor
	   Checks for configuration issues

       o   edit
	   Open the given cask for editing

       o   fetch
	   Downloads remote application files to local cache

       o   help
	   Print help for cask commands

       o   home
	   Opens the homepage of the given cask

       o   info
	   Displays information about the given cask

       o   install
	   Installs the given cask

       o   list
	   Lists installed casks or the casks provided in the arguments

       o   outdated
	   List the outdated installed casks

       o   reinstall
	   Reinstalls the given cask

       o   style
	   Checks style of the given cask using RuboCop

       o   uninstall
	   Uninstalls the given cask

       o   upgrade
	   Upgrades all outdated casks or the specified casks

       o   zap
	   Zaps all files associated with the given cask



       See also: man brew

       --appdir
	      Target location for Applications. Default: /Applications

       --colorpickerdir
	      Target location for Color Pickers. Default: ~/Library/ColorPick-
	      ers

       --prefpanedir
	      Target location for Preference Panes. Default: ~/Library/Prefer-
	      encePanes

       --qlplugindir
	      Target location for QuickLook Plugins. Default: ~/Library/Quick-
	      Look

       --mdimporterdir
	      Target  location for Spotlight Plugins. Default: ~/Library/Spot-
	      light

       --dictionarydir
	      Target location for Dictionaries. Default:  ~/Library/Dictionar-
	      ies

       --fontdir
	      Target location for Fonts. Default: ~/Library/Fonts

       --servicedir
	      Target location for Services. Default: ~/Library/Services

       --input_methoddir
	      Target  location	for  Input  Methods.  Default: ~/Library/Input
	      Methods

       --internet_plugindir
	      Target location for Internet Plugins. Default:  ~/Library/Inter-
	      net Plug-Ins

       --audio_unit_plugindir
	      Target	location    for    Audio    Unit   Plugins.   Default:
	      ~/Library/Audio/Plug-Ins/Components

       --vst_plugindir
	      Target	 location     for      VST	Plugins.      Default:
	      ~/Library/Audio/Plug-Ins/VST

       --vst3_plugindir
	      Target	  location	for	VST3	 Plugins.     Default:
	      ~/Library/Audio/Plug-Ins/VST3

       --screen_saverdir
	      Target location for  Screen  Savers.  Default:  ~/Library/Screen
	      Savers

       --language
	      Set language of the Cask to install. The first matching language
	      is used, otherwise the default language on the Cask. The default
	      value is the language of your system

   cleanup [options] [formula|cask]
       Remove  stale  lock  files  and outdated downloads for all formulae and
       casks, and remove old versions of installed formulae. If arguments  are
       specified,  only  do this for the given formulae and casks. Removes all
       downloads more than 120 days old.  This	can  be  adjusted  with  HOME-
       BREW_CLEANUP_MAX_AGE_DAYS.

       --prune
	      Remove all cache files older than specified days.

       -n, --dry-run
	      Show what would be removed, but do not actually remove anything.

       -s     Scrub the cache, including downloads for even  the  latest  ver-
	      sions.  Note  downloads for any installed formulae or casks will
	      still not be deleted. If you want to delete those  too:  rm  -rf
	      ""$(brew --cache)""

       --prune-prefix
	      Only  prune  the	symlinks  and  directories from the prefix and
	      remove no other files.

   commands [options]
       Show lists of built-in and external commands.

       -q, --quiet
	      List only the names of commands without category headers.

       --include-aliases
	      Include aliases of internal commands.

   config
       Show Homebrew and system configuration info useful  for	debugging.  If
       you  file  a  bug report, you will be required to provide this informa-
       tion.

   deps [options] [formula]
       Show dependencies for formula. Additional options specific  to  formula
       may  be appended to the command. When given multiple formula arguments,
       show the intersection of dependencies for each formula.

       -n     Sort dependencies in topological order.

       --1    Only show dependencies one level down, instead of recursing.

       --union
	      Show the union of dependencies for multiple formula, instead  of
	      the intersection.

       --full-name
	      List dependencies by their full name.

       --include-build
	      Include :build dependencies for formula.

       --include-optional
	      Include :optional dependencies for formula.

       --include-test
	      Include :test dependencies for formula (non-recursive).

       --skip-recommended
	      Skip :recommended dependencies for formula.

       --include-requirements
	      Include requirements in addition to dependencies for formula.

       --tree Show  dependencies  as a tree. When given multiple formula argu-
	      ments, show individual trees for each formula.

       --annotate
	      Mark any build, test, optional, or recommended  dependencies  as
	      such in the output.

       --installed
	      List  dependencies for formulae that are currently installed. If
	      formula is specified, list only its dependencies that  are  cur-
	      rently installed.

       --all  List dependencies for all available formulae.

       --for-each
	      Switch  into  the  mode  used by the --all option, but only list
	      dependencies for each provided formula, one  formula  per  line.
	      This is used for debugging the --installed/--all display mode.

   desc [options] (text|/text/|formula)
       Display	formula's  name and one-line description. Formula descriptions
       are cached; the cache is created  on  the  first  search,  making  that
       search slower than subsequent ones.

       -s, --search
	      Search  both names and descriptions for text. If text is flanked
	      by slashes, it is interpreted as a regular expression.

       -n, --name
	      Search just names for text. If text is flanked by slashes, it is
	      interpreted as a regular expression.

       -d, --description
	      Search  just  descriptions  for  text.  If  text	is  flanked by
	      slashes, it is interpreted as a regular expression.

   doctor [options]
       Check your system for potential problems. Will  exit  with  a  non-zero
       status  if  any	potential  problems  are found. Please note that these
       warnings are just used to help the Homebrew maintainers with  debugging
       if  you	file  an  issue. If everything you use Homebrew for is working
       fine: please don't worry or file an issue; just ignore this.

       --list-checks
	      List all audit methods, which can be run	individually  if  pro-
	      vided as arguments.

       -D, --audit-debug
	      Enable debugging and profiling of audit methods.

   fetch [options] formula
       Download  a  bottle  (if available) or source packages for formula. For
       tarballs, also print SHA-256 checksums.

       --HEAD Fetch HEAD version instead of stable version.

       --devel
	      Fetch development version instead of stable version.

       -f, --force
	      Remove a previously cached version and re-fetch.

       -v, --verbose
	      Do a verbose VCS checkout, if the URL represents a VCS. This  is
	      useful for seeing if an existing VCS cache has been updated.

       --retry
	      Retry  if  downloading fails or re-download if the checksum of a
	      previously cached version no longer matches.

       --deps Also download dependencies for any listed formula.

       -s, --build-from-source
	      Download source packages rather than a bottle.

       --build-bottle
	      Download source packages (for eventual bottling) rather  than  a
	      bottle.

       --force-bottle
	      Download a bottle if it exists for the current or newest version
	      of macOS, even if it would not be used during installation.

   gist-logs [options] formula
       Upload logs for a failed build of formula to a new  Gist.  Presents  an
       error message if no logs are found.

       --with-hostname
	      Include the hostname in the Gist.

       -n, --new-issue
	      Automatically  create  a	new  issue  in	the appropriate GitHub
	      repository after creating the Gist.

       -p, --private
	      The Gist will be marked private and will not appear in  listings
	      but will be accessible with its link.

   home [formula]
       Open  formula's	homepage in a browser, or open Homebrew's own homepage
       if no formula is provided.

   info [options] [formula]
       Display brief statistics for your Homebrew installation.

       If formula is provided, show summary of information about formula.

       --analytics
	      List global Homebrew analytics data or, if specified,  installa-
	      tion  and  build	error data for formula (provided neither HOME-
	      BREW_NO_ANALYTICS nor HOMEBREW_NO_GITHUB_API are set).

       --days How many days of analytics data to retrieve. The value for  days
	      must be 30, 90 or 365. The default is 30.

       --category
	      Which type of analytics data to retrieve. The value for category
	      must be install, install-on-request or build-error; cask-install
	      or os-version may be specified if formula is not. The default is
	      install.

       --github
	      Open the GitHub source page for formula in a  browser.  To  view
	      formula history locally: brew log -p formula

       --json Print  a	JSON  representation of formula. Currently the default
	      and only accepted value for version is  v1.  See	the  docs  for
	      examples	of  using the JSON output: https://docs.brew.sh/Query-
	      ing-Brew

       --installed
	      Print JSON of formulae that are currently installed.

       --all  Print JSON of all available formulae.

       -v, --verbose
	      Show more verbose analytics data for formula.

   install [options] formula
       Install formula. Additional options specific to formula may be appended
       to the command.

       Unless  HOMEBREW_NO_INSTALL_CLEANUP  is	set, brew cleanup will then be
       run for the installed formulae or, every 30 days, for all formulae.

       -d, --debug
	      If brewing fails, open an  interactive  debugging  session  with
	      access to IRB or a shell inside the temporary build directory.

       --env  If  std is passed, use the standard build environment instead of
	      superenv. If super is passed, use superenv even if  the  formula
	      specifies the standard build environment.

       --ignore-dependencies
	      An  unsupported Homebrew development flag to skip installing any
	      dependencies of any kind. If the dependencies  are  not  already
	      present,	the formula will have issues. If you're not developing
	      Homebrew, consider adjusting your PATH rather  than  using  this
	      flag.

       --only-dependencies
	      Install  the  dependencies  with	specified  options  but do not
	      install the formula itself.

       --cc   Attempt to compile using the specified compiler, which should be
	      the  name of the compiler's executable, e.g. gcc-7 for GCC 7. In
	      order to use  LLVM's  clang,  specify  llvm_clang.  To  use  the
	      Apple-provided  clang,  specify  clang.  This  option  will only
	      accept compilers that are provided by Homebrew or  bundled  with
	      macOS.  Please  do not file issues if you encounter errors while
	      using this option.

       -s, --build-from-source
	      Compile formula from source even if a bottle is provided. Depen-
	      dencies  will still be installed from bottles if they are avail-
	      able.

       --force-bottle
	      Install from a bottle if it exists for  the  current  or	newest
	      version  of  macOS,  even  if  it would not normally be used for
	      installation.

       --include-test
	      Install testing dependencies required to run brew test  formula.

       --HEAD If  formula  defines  it, install the HEAD version, aka. master,
	      trunk, unstable.

       --fetch-HEAD
	      Fetch the upstream repository to detect if the HEAD installation
	      of  the  formula	is  outdated. Otherwise, the repository's HEAD
	      will only be checked for updates when a new stable  or  develop-
	      ment version has been released.

       --keep-tmp
	      Retain the temporary files created during installation.

       --build-bottle
	      Prepare  the  formula for eventual bottling during installation,
	      skipping any post-install steps.

       --bottle-arch
	      Optimise bottles for the specified architecture rather than  the
	      oldest  architecture  supported by the version of macOS the bot-
	      tles are built on.

       -f, --force
	      Install without checking for previously  installed  keg-only  or
	      non-migrated versions.

       -v, --verbose
	      Print the verification and postinstall steps.

       --display-times
	      Print install times for each formula at the end of the run.

       -i, --interactive
	      Download	and  patch formula, then open a shell. This allows the
	      user to run ./configure --help and otherwise  determine  how  to
	      turn the software package into a Homebrew package.

       -g, --git
	      Create  a  Git  repository,  useful  for creating patches to the
	      software.

   leaves
       List installed formulae that are not dependencies of another  installed
       formula.

   link, ln [options] formula
       Symlink	all  of formula's installed files into Homebrew's prefix. This
       is done automatically when you install formulae but can be  useful  for
       DIY installations.

       --overwrite
	      Delete files that already exist in the prefix while linking.

       -n, --dry-run
	      List files which would be linked or deleted by brew link --over-
	      write without actually linking or deleting any files.

       -f, --force
	      Allow keg-only formulae to be linked.

   list, ls [options] [formula|cask]
       List all installed formulae or casks

       If formula is provided, summarise the paths within its current keg.

       --full-name
	      Print formulae with fully-qualified names. If --full-name is not
	      passed,  other  options  (i.e.  -1, -l, -r and -t) are passed to
	      ls(1) which produces the actual output.

       --unbrewed
	      List files in Homebrew's prefix not installed by Homebrew.

       --versions
	      Show the version number for  installed  formulae,  or  only  the
	      specified formulae if formula are provided.

       --multiple
	      Only show formulae with multiple versions installed.

       --pinned
	      Show  the  versions  of  pinned  formulae, or only the specified
	      (pinned) formulae if formula are provided. See also pin,	unpin.

       --formula
	      List only formulae.

       --cask List only casks.

       -1     Force  output to be one entry per line. This is the default when
	      output is not to a terminal.

       -l     List in long format. If the output is to a terminal, a total sum
	      for all the file sizes is printed before the long listing.

       -r     Reverse  the order of the sort to list the oldest entries first.

       -t     Sort by time modified, listing most recently modified first.

   log [options] [formula]
       Show the git log for formula, or show the log for the Homebrew  reposi-
       tory if no formula is provided.

       -p, --patch
	      Also print patch from commit.

       --stat Also print diffstat from commit.

       --oneline
	      Print only one line per commit.

       -1     Print only one commit.

       -n, --max-count
	      Print only a specified number of commits.

   migrate [options] formula
       Migrate	renamed  packages to new names, where formula are old names of
       packages.

       -f, --force
	      Treat installed formula and provided formula as if they are from
	      the same taps and migrate them anyway.

   missing [options] [formula]
       Check  the  given  formula kegs for missing dependencies. If no formula
       are provided, check all kegs. Will exit with a non-zero status  if  any
       kegs are found to be missing dependencies.

       --hide Act  as  if  none  of the specified hidden are installed. hidden
	      should be a comma-separated list of formulae.

   options [options] [formula]
       Show install options specific to formula.

       --compact
	      Show all options on a single line separated by spaces.

       --installed
	      Show options for formulae that are currently installed.

       --all  Show options for all available formulae.

       --command
	      Show options for the specified command.

   outdated [options] [formula|cask]
       List installed casks and formulae that have an updated  version	avail-
       able.  By  default,  version  information  is  displayed in interactive
       shells, and suppressed otherwise.

       -q, --quiet
	      List only the names of  outdated	kegs  (takes  precedence  over
	      --verbose).

       -v, --verbose
	      Include detailed version information.

       --formula
	      Only output outdated formulae.

       --cask Only output outdated casks.

       --json Print  output in JSON format. There are two versions: v1 and v2.
	      v1 is deprecated and is currently the default if no  version  is
	      specified. v2 prints outdated formulae and casks.

       --fetch-HEAD
	      Fetch the upstream repository to detect if the HEAD installation
	      of the formula is outdated.  Otherwise,  the  repository's  HEAD
	      will  only  be checked for updates when a new stable or develop-
	      ment version has been released.

       --greedy
	      Print outdated casks with auto_updates or version :latest.

   pin formula
       Pin the specified formula, preventing them  from  being	upgraded  when
       issuing the brew upgrade formula command. See also unpin.

   postinstall formula
       Rerun the post-install steps for formula.

   readall [options] [tap]
       Import  all items from the specified tap, or from all installed taps if
       none is provided. This can be useful for debugging  issues  across  all
       items  when  making significant changes to formula.rb, testing the per-
       formance of loading all items or checking if any current formulae/casks
       have Ruby issues.

       --aliases
	      Verify any alias symlinks in each tap.

       --syntax
	      Syntax-check  all  of  Homebrew's  Ruby  files  (if  no <tap> is
	      passed).

   reinstall [options] formula
       Uninstall and then install formula using the same options it was origi-
       nally installed with, plus any appended brew formula options.

       Unless  HOMEBREW_NO_INSTALL_CLEANUP  is	set, brew cleanup will then be
       run for the reinstalled formulae or, every 30 days, for all formulae.

       -d, --debug
	      If brewing fails, open an  interactive  debugging  session  with
	      access to IRB or a shell inside the temporary build directory.

       -s, --build-from-source
	      Compile formula from source even if a bottle is available.

       -i, --interactive
	      Download	and  patch formula, then open a shell. This allows the
	      user to run ./configure --help and otherwise  determine  how  to
	      turn the software package into a Homebrew package.

       --force-bottle
	      Install  from  a	bottle	if it exists for the current or newest
	      version of macOS, even if it would  not  normally  be  used  for
	      installation.

       --keep-tmp
	      Retain the temporary files created during installation.

       -f, --force
	      Install  without	checking  for previously installed keg-only or
	      non-migrated versions.

       -v, --verbose
	      Print the verification and postinstall steps.

       --display-times
	      Print install times for each formula at the end of the run.

   search [options] [text|/text/]
       Perform a substring search of cask tokens and formula names  for  text.
       If  text  is flanked by slashes, it is interpreted as a regular expres-
       sion. The search for text is extended online to homebrew/core and home-
       brew/cask.

       If  no text is provided, list all locally available formulae (including
       tapped ones). No online search is performed.

       --formula
	      Without text, list all locally  available  formulae  (no	online
	      search  is  performed). With text, search online and locally for
	      formulae.

       --cask Without text, list all locally available casks (including tapped
	      ones,  no  online search is performed). With text, search online
	      and locally for casks.

       --desc Search for formulae with a description matching text  and  casks
	      with a name matching text.

       --macports
	      Search for text in the given package manager's list.

       --fink Search for text in the given package manager's list.

       --opensuse
	      Search for text in the given package manager's list.

       --fedora
	      Search for text in the given package manager's list.

       --debian
	      Search for text in the given package manager's list.

       --ubuntu
	      Search for text in the given package manager's list.

   shellenv
       Print  export  statements.  When  run  in a shell, this installation of
       Homebrew will be added to your PATH, MANPATH, and INFOPATH.

       The variables HOMEBREW_PREFIX, HOMEBREW_CELLAR and  HOMEBREW_REPOSITORY
       are  also  exported  to	avoid  querying  them multiple times. Consider
       adding evaluation of this  command's  output  to  your  dotfiles  (e.g.
       ~/.profile,  ~/.bash_profile,  or  ~/.zprofile) with: eval $(brew shel-
       lenv)

   switch formula version
       Symlink all of the specified version  of  formula's  installation  into
       Homebrew's prefix.

   tap [options] [user/repo] [URL]
       Tap a formula repository.

       If no arguments are provided, list all installed taps.

       With URL unspecified, tap a formula repository from GitHub using HTTPS.
       Since so many taps are hosted on GitHub, this command is a shortcut for
       brew tap user/repo https://github.com/user/homebrew-repo.

       With  URL  specified, tap a formula repository from anywhere, using any
       transport protocol that git(1) handles. The one-argument  form  of  tap
       simplifies  but also limits. This two-argument command makes no assump-
       tions, so taps can be cloned from places other than  GitHub  and  using
       protocols other than HTTPS, e.g. SSH, git, HTTP, FTP(S), rsync.

       --full Convert  a shallow clone to a full clone without untapping. Taps
	      are only cloned as shallow clones on continuous integration,  or
	      if --shallow was originally passed.

       --shallow
	      Fetch  tap  as  a shallow clone rather than a full clone. Useful
	      for continuous integration.

       --force-auto-update
	      Auto-update tap even if it is not hosted on GitHub. By  default,
	      only  taps  hosted  on  GitHub are auto-updated (for performance
	      reasons).

       --repair
	      Migrate tapped formulae from  symlink-based  to  directory-based
	      structure.

       --list-pinned
	      List all pinned taps.

   tap-info [options] [tap]
       Show detailed information about one or more taps.

       If  no  tap  names  are	provided,  display  brief  statistics  for all
       installed taps.

       --installed
	      Show information on each installed tap.

       --json Print a JSON representation of tap. Currently  the  default  and
	      only accepted value for version is v1. See the docs for examples
	      of using the JSON output: https://docs.brew.sh/Querying-Brew

   uninstall, rm, remove [options] formula
       Uninstall formula.

       -f, --force
	      Delete all installed versions of formula.

       --ignore-dependencies
	      Don't fail uninstall, even if formula is	a  dependency  of  any
	      installed formulae.

   unlink [options] formula
       Remove  symlinks for formula from Homebrew's prefix. This can be useful
       for temporarily disabling a formula: brew unlink formula && commands &&
       brew link formula

       -n, --dry-run
	      List files which would be unlinked without actually unlinking or
	      deleting any files.

   unpin formula
       Unpin formula, allowing them to be upgraded by  brew  upgrade  formula.
       See also pin.

   untap tap
       Remove a tapped formula repository.

   update [options]
       Fetch the newest version of Homebrew and all formulae from GitHub using
       git(1) and perform any necessary migrations.

       --merge
	      Use git merge to apply updates (rather than git rebase).

       --preinstall
	      Run on auto-updates  (e.g.  before  brew	install).  Skips  some
	      slower steps.

       -f, --force
	      Always do a slower, full update check (even if unnecessary).

   update-reset [repository]
       Fetch  and  reset  Homebrew  and all tap repositories (or any specified
       repository) using git(1) to their latest origin/master.

       Note: this will destroy all your uncommitted or committed changes.

   upgrade [options] [formula|cask]
       Upgrade outdated casks and outdated, unpinned formulae using  the  same
       options	they  were  originally	installed with, plus any appended brew
       formula options. If cask or formula are	specified,  upgrade  only  the
       given cask or formula kegs (unless they are pinned; see pin, unpin).

       Unless  HOMEBREW_NO_INSTALL_CLEANUP  is	set, brew cleanup will then be
       run for the upgraded formulae or, every 30 days, for all formulae.

       -d, --debug
	      If brewing fails, open an  interactive  debugging  session  with
	      access to IRB or a shell inside the temporary build directory.

       --formula
	      Only upgrade outdated formulae.

       --cask Only upgrade outdated casks.

       -s, --build-from-source
	      Compile formula from source even if a bottle is available.

       -i, --interactive
	      Download	and  patch formula, then open a shell. This allows the
	      user to run ./configure --help and otherwise  determine  how  to
	      turn the software package into a Homebrew package.

       --force-bottle
	      Install  from  a	bottle	if it exists for the current or newest
	      version of macOS, even if it would  not  normally  be  used  for
	      installation.

       --fetch-HEAD
	      Fetch the upstream repository to detect if the HEAD installation
	      of the formula is outdated.  Otherwise,  the  repository's  HEAD
	      will  only  be checked for updates when a new stable or develop-
	      ment version has been released.

       --ignore-pinned
	      Set a successful exit status even if  pinned  formulae  are  not
	      upgraded.

       --keep-tmp
	      Retain the temporary files created during installation.

       -f, --force
	      Install  without	checking  for previously installed keg-only or
	      non-migrated versions.

       -v, --verbose
	      Print the verification and postinstall steps.

       --display-times
	      Print install times for each formula at the end of the run.

       -n, --dry-run
	      Show what would be upgraded, but do not  actually  upgrade  any-
	      thing.

       --greedy
	      Upgrade casks with auto_updates or version :latest

   uses [options] formula
       Show  formulae  that  specify formula as a dependency (i.e. show depen-
       dents of formula). When given  multiple	formula  arguments,  show  the
       intersection  of  formulae that use formula. By default, uses shows all
       formulae that specify formula as a required or  recommended  dependency
       for their stable builds.

       --recursive
	      Resolve more than one level of dependencies.

       --installed
	      Only list formulae that are currently installed.

       --include-build
	      Include  all formulae that specify formula as :build type depen-
	      dency.

       --include-test
	      Include all formulae that specify formula as :test  type	depen-
	      dency.

       --include-optional
	      Include  all  formulae  that  specify  formula as :optional type
	      dependency.

       --skip-recommended
	      Skip all formulae that  specify  formula	as  :recommended  type
	      dependency.

   --cache [options] [formula|cask]
       Display Homebrew's download cache. See also HOMEBREW_CACHE.

       If  formula  is	provided,  display the file or directory used to cache
       formula.

       -s, --build-from-source
	      Show the cache file used when building from source.

       --force-bottle
	      Show the cache file used when pouring a bottle.

       --formula
	      Only show cache files for formulae.

       --cask Only show cache files for casks.

   --caskroom [cask]
       Display Homebrew's Caskroom path.

       If cask is provided, display the location in the  Caskroom  where  cask
       would be installed, without any sort of versioned directory as the last
       path.

   --cellar [formula]
       Display Homebrew's Cellar path. Default: $(brew --prefix)/Cellar, or if
       that directory doesn't exist, $(brew --repository)/Cellar.

       If  formula  is provided, display the location in the Cellar where for-
       mula would be installed, without any sort of versioned directory as the
       last path.

   --env [options] [formula]
       Summarise Homebrew's build environment as a plain list.

       If  the	command's output is sent through a pipe and no shell is speci-
       fied, the list is formatted for export to  bash(1)  unless  --plain  is
       passed.

       --shell
	      Generate	a  list  of  environment  variables  for the specified
	      shell, or --shell=auto to detect the current shell.

       --plain
	      Generate plain output even when piped.

   --prefix [formula]
       Display Homebrew's install  path.  Default:  /usr/local	on  macOS  and
       /home/linuxbrew/.linuxbrew on Linux.

       If  formula  is provided, display the location in the Cellar where for-
       mula is or would be installed.

   --repository, --repo [user/repo]
       Display where Homebrew's .git directory is located.

       If user/repo are provided, display where tap user/repo's  directory  is
       located.

   --version
       Print the version numbers of Homebrew, Homebrew/homebrew-core and Home-
       brew/homebrew-cask (if tapped) to standard output.

DEVELOPER COMMANDS
   audit [options] [formula]
       Check formula for Homebrew coding style violations. This should be  run
       before  submitting a new formula. If no formula are provided, check all
       locally available formulae and skip style  checks.  Will  exit  with  a
       non-zero status if any errors are found.

       --strict
	      Run additional, stricter style checks.

       --git  Run additional, slower style checks that navigate the Git repos-
	      itory.

       --online
	      Run additional, slower style checks that require a network  con-
	      nection.

       --new-formula
	      Run  various  additional style checks to determine if a new for-
	      mula is eligible for Homebrew. This should be used when creating
	      new formula and implies --strict and --online.

       --tap  Check the formulae within the given tap, specified as user/repo.

       --fix  Fix style violations automatically using RuboCop's  auto-correct
	      feature.

       --display-cop-names
	      Include the RuboCop cop name for each violation in the output.

       --display-filename
	      Prefix  every line of output with the file or formula name being
	      audited, to make output easy to grep.

       --skip-style
	      Skip running non-RuboCop style checks. Useful  if  you  plan  on
	      running brew style separately. Default unless a formula is spec-
	      ified by name

       -D, --audit-debug
	      Enable debugging and profiling of audit methods.

       --only Specify a comma-separated method list to only  run  the  methods
	      named audit_method.

       --except
	      Specify  a comma-separated method list to skip running the meth-
	      ods named audit_method.

       --only-cops
	      Specify a comma-separated cops list to check for	violations  of
	      only the listed RuboCop cops.

       --except-cops
	      Specify  a comma-separated cops list to skip checking for viola-
	      tions of the listed RuboCop cops.

   bottle [options] formula
       Generate a bottle (binary package) from a formula  that	was  installed
       with  --build-bottle.  If  the  formula specifies a rebuild version, it
       will be incremented in  the  generated  DSL.  Passing  --keep-old  will
       attempt	to  keep  it  at  its  original value, while --no-rebuild will
       remove it.

       --skip-relocation
	      Do not check if the bottle can be marked as relocatable.

       --force-core-tap
	      Build a bottle even if formula is not in	homebrew/core  or  any
	      installed taps.

       --no-rebuild
	      If  the  formula specifies a rebuild version, remove it from the
	      generated DSL.

       --keep-old
	      If the formula specifies a rebuild version, attempt to  preserve
	      its value in the generated DSL.

       --json Write  bottle  information  to a JSON file, which can be used as
	      the value for --merge.

       --merge
	      Generate an updated bottle block for a  formula  and  optionally
	      merge  it  into  the  formula  file.  Instead of a formula name,
	      requires the path to a JSON  file  generated  with  brew	bottle
	      --json formula.

       --write
	      Write  changes  to the formula file. A new commit will be gener-
	      ated unless --no-commit is passed.

       --no-commit
	      When passed with --write, a new commit will not generated  after
	      writing changes to the formula file.

       --root-url
	      Use the specified URL as the root of the bottle's URL instead of
	      Homebrew's default.

   bump [options] [formula]
       Display out-of-date brew formulae and  the  latest  version  available.
       Also displays whether a pull request has been opened with the URL.

       --limit
	      Limit number of package results returned.

   bump-cask-pr [options] [cask]
       Create a pull request to update cask with a new version.

       A best effort to determine the SHA-256 will be made if the value is not
       supplied by the user.

       -n, --dry-run
	      Print what would be done rather than doing it.

       --write
	      Make the expected file  modifications  without  taking  any  Git
	      actions.

       --commit
	      When  passed  with  --write, generate a new commit after writing
	      changes to the cask file.

       --no-audit
	      Don't run brew cask audit before opening the PR.

       --no-style
	      Don't run brew cask style --fix before opening the PR.

       --no-browse
	      Print the pull request URL instead of opening in a browser.

       --no-fork
	      Don't try to fork the repository.

       --version
	      Specify the new version for the cask.

       --message
	      Append message to the default pull request message.

       --url  Specify the URL for the new download.

       --sha256
	      Specify the SHA-256 checksum of the new download.

       -f, --force
	      Ignore duplicate open PRs.

   bump-formula-pr [options] [formula]
       Create a pull request to update formula with a new URL or a new tag.

       If a URL is specified, the SHA-256 checksum of the new download	should
       also  be  specified. A best effort to determine the SHA-256 and formula
       name will be made if either or both values  are	not  supplied  by  the
       user.

       If  a  tag  is specified, the Git commit revision corresponding to that
       tag should also be specified. A best effort to determine  the  revision
       will be made if the value is not supplied by the user.

       If  a  version  is  specified,  a  best effort to determine the URL and
       SHA-256 or the tag and revision will be made if	both  values  are  not
       supplied by the user.

       Note:  this  command  cannot  be  used  to  transition a formula from a
       URL-and-SHA-256 style specification into a tag-and-revision style spec-
       ification,  nor	vice  versa. It must use whichever style specification
       the formula already uses.

       -n, --dry-run
	      Print what would be done rather than doing it.

       --write
	      Make the expected file  modifications  without  taking  any  Git
	      actions.

       --commit
	      When  passed  with  --write, generate a new commit after writing
	      changes to the formula file.

       --no-audit
	      Don't run brew audit before opening the PR.

       --strict
	      Run brew audit --strict before opening the PR.

       --no-browse
	      Print the pull request URL instead of opening in a browser.

       --no-fork
	      Don't try to fork the repository.

       --mirror
	      Use the specified URL as a mirror URL. If URL is	a  comma-sepa-
	      rated list of URLs, multiple mirrors will be added.

       --version
	      Use  the specified version to override the value parsed from the
	      URL or tag. Note that --version=0  can  be  used	to  delete  an
	      existing version override from a formula if it has become redun-
	      dant.

       --message
	      Append message to the default pull request message.

       --url  Specify the URL for the new download. If a URL is specified, the
	      SHA-256 checksum of the new download should also be specified.

       --sha256
	      Specify the SHA-256 checksum of the new download.

       --tag  Specify the new git commit tag for the formula.

       --revision
	      Specify  the new git commit revision corresponding to the speci-
	      fied tag.

       -f, --force
	      Ignore duplicate open PRs. Remove all mirrors if	--mirror=  was
	      not specified.

   bump-revision [options] formula [formula ...]
       Create a commit to increment the revision of formula. If no revision is
       present, ""revision 1"" will be added.

       -n, --dry-run
	      Print what would be done rather than doing it.

       --message
	      Append message to the default commit message.

   cat formula
       Display the source of formula.

   command cmd
       Display the path to the file being used when invoking brew cmd.

   create [options] URL
       Generate a formula for the downloadable file at URL and open it in  the
       editor.	Homebrew will attempt to automatically derive the formula name
       and version, but if it fails, you'll have to make  your	own  template.
       The wget formula serves as a simple example. For the complete API, see:
       https://rubydoc.brew.sh/Formula

       --autotools
	      Create a basic template for an Autotools-style build.

       --cmake
	      Create a basic template for a CMake-style build.

       --crystal
	      Create a basic template for a Crystal build.

       --go   Create a basic template for a Go build.

       --meson
	      Create a basic template for a Meson-style build.

       --node Create a basic template for a Node build.

       --perl Create a basic template for a Perl build.

       --python
	      Create a basic template for a Python build.

       --ruby Create a basic template for a Ruby build.

       --rust Create a basic template for a Rust build.

       --no-fetch
	      Homebrew will not download URL to the cache and  will  thus  not
	      add  its	SHA-256  to the formula for you, nor will it check the
	      GitHub API for GitHub projects (to fill out its description  and
	      homepage).

       --HEAD Indicate that URL points to the package's repository rather than
	      a file.

       --set-name
	      Explicitly set the name of the new formula.

       --set-version
	      Explicitly set the version of the new formula.

       --set-license
	      Explicitly set the license of the new formula.

       --tap  Generate the new formula within  the  given  tap,  specified  as
	      user/repo.

       -f, --force
	      Ignore errors for disallowed formula names and named that shadow
	      aliases.

   diy [options]
       Automatically determine the installation prefix for non-Homebrew  soft-
       ware.  Using  the  output  from	this command, you can install your own
       software into the Cellar and then link it into Homebrew's  prefix  with
       brew link.

       --name Explicitly set the name of the package being installed.

       --version
	      Explicitly set the version of the package being installed.

   edit [formula]
       Open  formula  in  the editor set by EDITOR or HOMEBREW_EDITOR, or open
       the Homebrew repository for editing if no formula is provided.

   extract [options] formula tap
       Look through repository history to find the most recent version of for-
       mula and create a copy in tap/Formula/formula@version.rb. If the tap is
       not installed yet, attempt to install/clone the tap before  continuing.
       To  extract  a  formula	from  a  tap that is not homebrew/core use its
       fully-qualified form of user/repo/formula.

       --version
	      Extract the specified version of formula	instead  of  the  most
	      recent.

       -f, --force
	      Overwrite the destination formula if it already exists.

   formula formula
       Display the path where formula is located.

   install-bundler-gems
       Install Homebrew's Bundler gems.

   irb [options]
       Enter the interactive Homebrew Ruby shell.

       --examples
	      Show several examples.

       --pry  Use Pry instead of IRB. Implied if HOMEBREW_PRY is set.

   linkage [options] [formula]
       Check  the library links from the given formula kegs. If no formula are
       provided, check all kegs. Raises an error if run on uninstalled	formu-
       lae.

       --test Show  only  missing libraries and exit with a non-zero status if
	      any missing libraries are found.

       --reverse
	      For every library that a keg references, print  its  dylib  path
	      followed by the binaries that link to it.

       --cached
	      Print the cached linkage values stored in HOMEBREW_CACHE, set by
	      a previous brew linkage run.

   livecheck [formulae]
       Check for newer versions of formulae from upstream.

       If no formula argument is passed, the list  of  formulae  to  check  is
       taken from HOMEBREW_LIVECHECK_WATCHLIST or ~/.brew_livecheck_watchlist.

       --full-name
	      Print formulae with fully-qualified names.

       --tap  Check the formulae within the given tap, specified as user/repo.

       --installed
	      Check formulae that are currently installed.

       --json Output informations in JSON format.

       --all  Check all available formulae.

       --newer-only
	      Show the latest version only if it's newer than the formula.

   man [options]
       Generate Homebrew's manpages.

       --fail-if-changed
	      Return a failing status code if changes are detected in the man-
	      page outputs. This can be used to notify CI  when  the  manpages
	      are  out	of  date.  Additionally, the date used in new manpages
	      will match those in the existing manpages (to  allow  comparison
	      without factoring in the date).

       --link This is now done automatically by brew update.

   pr-automerge [options]
       Find  pull requests that can be automatically merged using brew pr-pub-
       lish.

       --tap  Target tap repository (default: homebrew/core).

       --with-label
	      Pull requests must have this label.

       --without-labels
	      Pull requests must not have these labels (default: do not merge,
	      new formula).

       --without-approval
	      Pull requests do not require approval to be merged.

       --publish
	      Run brew pr-publish on matching pull requests.

       --ignore-failures
	      Include pull requests that have failing status checks.

   pr-publish [options] pull_request [pull_request ...]
       Publish	bottles for a pull request with GitHub Actions. Requires write
       access to the repository.

       --tap  Target tap repository (default: homebrew/core).

       --workflow
	      Target workflow filename (default:  publish-commit-bottles.yml).

   pr-pull [options] pull_request [pull_request ...]
       Download  and  publish bottles, and apply the bottle commit from a pull
       request with artifacts generated  by  GitHub  Actions.  Requires  write
       access to the repository.

       --no-publish
	      Download	the  bottles,  apply  the bottle commit and upload the
	      bottles to Bintray, but don't publish them.

       --no-upload
	      Download the bottles and apply  the  bottle  commit,  but  don't
	      upload to Bintray.

       -n, --dry-run
	      Print what would be done rather than doing it.

       --clean
	      Do not amend the commits from pull requests.

       --keep-old
	      If  the formula specifies a rebuild version, attempt to preserve
	      its value in the generated DSL.

       --branch-okay
	      Do not warn if pulling to a branch besides  master  (useful  for
	      testing).

       --resolve
	      When a patch fails to apply, leave in progress and allow user to
	      resolve, instead of aborting.

       --warn-on-upload-failure
	      Warn instead of raising an error if  the	bottle	upload	fails.
	      Useful for repairing bottle uploads that previously failed.

       --workflow
	      Retrieve	 artifacts   from  the	specified  workflow  (default:
	      tests.yml).

       --artifact
	      Download artifacts with the specified name (default: bottles).

       --bintray-org
	      Upload to the specified  Bintray	organisation  (default:  home-
	      brew).

       --tap  Target tap repository (default: homebrew/core).

       --root-url
	      Use the specified URL as the root of the bottle's URL instead of
	      Homebrew's default.

       --bintray-mirror
	      Use the specified Bintray  repository  to  automatically	mirror
	      stable URLs defined in the formulae (default: mirror).

   pr-upload [options]
       Apply the bottle commit and publish bottles to Bintray.

       --no-publish
	      Apply  the  bottle commit and upload the bottles, but don't pub-
	      lish them.

       --keep-old
	      If the formula specifies a rebuild version, attempt to  preserve
	      its value in the generated DSL.

       -n, --dry-run
	      Print what would be done rather than doing it.

       --warn-on-upload-failure
	      Warn  instead  of  raising  an error if the bottle upload fails.
	      Useful for repairing bottle uploads that previously failed.

       --bintray-org
	      Upload to the specified  Bintray	organisation  (default:  home-
	      brew).

       --root-url
	      Use the specified URL as the root of the bottle's URL instead of
	      Homebrew's default.

   prof [command]
       Run Homebrew with a Ruby profiler, e.g. brew prof readall.

       --stackprof
	      Use stackprof instead of ruby-prof (the default).

   release-notes [options] [previous_tag] [end_ref]
       Print the merged pull requests on Homebrew/brew between two  Git  refs.
       If  no  previous_tag  is  provided it defaults to the latest tag. If no
       end_ref is provided it defaults to origin/master.

       --markdown
	      Print as a Markdown list.

   ruby (-e text|file)
       Run a Ruby instance with Homebrew's libraries loaded, e.g. brew ruby -e
       ""puts :gcc.f.deps"" or brew ruby script.rb.

       -r     Load a library using require.

       -e     Execute the given text string as a script.

   sh [options] [file]
       Homebrew  build environment that uses years-battle-hardened build logic
       to help your ./configure && make && make  install  and  even  your  gem
       install	succeed. Especially handy if you run Homebrew in an Xcode-only
       configuration since it adds tools like make to your  PATH  which  build
       systems would not find otherwise.

       --env  Use  the standard PATH instead of superenv's when std is passed.

       -c, --cmd
	      Execute commands in a non-interactive shell.

   sponsors
       Print a Markdown summary of Homebrew's GitHub  Sponsors,  suitable  for
       pasting into a README.

   style [options] [file|tap|formula]
       Check formulae or files for conformance to Homebrew style guidelines.

       Lists  of  file,  tap and formula may not be combined. If none are pro-
       vided, style will run style  checks  on	the  whole  Homebrew  library,
       including core code and all formulae.

       --fix  Fix  style violations automatically using RuboCop's auto-correct
	      feature.

       --display-cop-names
	      Include the RuboCop cop name for each violation in the output.

       --only-cops
	      Specify a comma-separated cops list to check for	violations  of
	      only the listed RuboCop cops.

       --except-cops
	      Specify  a comma-separated cops list to skip checking for viola-
	      tions of the listed RuboCop cops.

   tap-new user/repo
       Generate the template files for a new tap.

   test [options] formula
       Run the test method provided by an installed formula. There is no stan-
       dard  output or return code, but generally it should notify the user if
       something is wrong with the installed formula.

       Example: brew install jruby && brew test jruby

       --devel
	      Test the development version of a formula.

       --HEAD Test the head version of a formula.

       --keep-tmp
	      Retain the temporary files created for the test.

       --retry
	      Retry if a testing fails.

   tests [options]
       Run Homebrew's unit and integration tests.

       --coverage
	      Generate code coverage reports.

       --generic
	      Run only OS-agnostic tests.

       --no-compat
	      Do not load the compatibility layer when running tests.

       --online
	      Include tests that use the GitHub API and tests that use any  of
	      the taps for official external commands.

       --byebug
	      Enable debugging using byebug.

       --only Run  only test_script_spec.rb. Appending :line_number will start
	      at a specific line.

       --seed Randomise tests with the specified value	instead  of  a	random
	      seed.

   typecheck
       Check for typechecking errors using Sorbet.

       -q, --quiet
	      Silence all non-critical errors.

       --update-definitions
	      Update Tapioca gem definitions of recently bumped gems

       --fail-if-not-changed
	      Return  a failing status code if all gems are up to date and gem
	      definitions do not need a tapioca update

       --dir  Typecheck all files in a specific directory.

       --file Typecheck a single file.

       --ignore
	      Ignores input files that contain the given string in their paths
	      (relative to the input path passed to Sorbet).

   unpack [options] formula
       Unpack  the source files for formula into subdirectories of the current
       working directory.

       --destdir
	      Create subdirectories in the directory named by path instead.

       --patch
	      Patches for formula will be applied to the unpacked source.

       -g, --git
	      Initialise a Git repository in the unpacked source. This is use-
	      ful for creating patches for the software.

       -f, --force
	      Overwrite the destination directory if it already exists.

   update-license-data [options]
       Update SPDX license data in the Homebrew repository.

       --fail-if-not-changed
	      Return  a  failing status code if current license data's version
	      is the same as the upstream. This can be used to notify CI  when
	      the SPDX license data is out of date.

   update-python-resources [options] formula
       Update versions for PyPI resource blocks in formula.

       -p, --print-only
	      Print the updated resource blocks instead of changing formula.

       -s, --silent
	      Suppress any output.

       --ignore-non-pypi-packages
	      Don't fail if formula is not a PyPI package.

       --version
	      Use the specified version when finding resources for formula. If
	      no version is specified, the current version for formula will be
	      used.

   update-test [options]
       Run  a  test  of brew update with a new repository clone. If no options
       are passed, use origin/master as the start commit.

       --to-tag
	      Set HOMEBREW_UPDATE_TO_TAG to test updating between tags.

       --keep-tmp
	      Retain the temporary directory  containing  the  new  repository
	      clone.

       --commit
	      Use the specified commit as the start commit.

       --before
	      Use the commit at the specified date as the start commit.

   vendor-gems
       Install and commit Homebrew's vendored gems.

GLOBAL OPTIONS
       These options are applicable across multiple subcommands.

       -d, --debug
	      Display any debugging information.

       -q, --quiet
	      Suppress any warnings.

       -v, --verbose
	      Make some output more verbose.

       -h, --help
	      Show this message.

OFFICIAL EXTERNAL COMMANDS
   bundle [subcommand]
       Bundler for non-Ruby dependencies from Homebrew, Homebrew Cask, Mac App
       Store and Whalebrew.

       brew bundle [install]
	   Install and upgrade (by default) all dependencies  from  the  Brew-
       file.

       You can skip the installation of dependencies by adding space-separated
       values to one or more of the  following	environment  variables:  HOME-
       BREW_BUNDLE_BREW_SKIP,	  HOMEBREW_BUNDLE_CASK_SKIP,	 HOMEBREW_BUN-
       DLE_MAS_SKIP, HOMEBREW_BUNDLE_WHALEBREW_SKIP, HOMEBREW_BUNDLE_TAP_SKIP

       brew bundle will output a Brewfile.lock.json in the same  directory  as
       the  Brewfile if all dependencies are installed successfully. This con-
       tains dependency and system status information which can be  useful  in
       debugging  brew	bundle	failures  and  replicating  a ""last known good
       build"" state. You can opt-out of this behaviour by  setting  the  HOME-
       BREW_BUNDLE_NO_LOCK  environment  variable  or  passing	the  --no-lock
       option. You may wish to check this file into the same  version  control
       system  as your Brewfile (or ensure your version control system ignores
       it if you'd prefer to  rely  on	debugging  information	from  a  local
       machine).

       brew bundle dump
	   Write all installed casks/formulae/images/taps into a Brewfile.

       brew bundle cleanup
	   Uninstall all dependencies not listed from the Brewfile.

       This  workflow  is  useful  for	maintainers  or  testers who regularly
       install lots of formulae.

       brew bundle check
	   Check if all dependencies are installed from the Brewfile .

       This provides a successful exit code if everything is up-to-date,  mak-
       ing it useful for scripting.

       brew bundle list
	   List all dependencies present in a Brewfile.

       By default, only Homebrew dependencies are listed.

       brew bundle exec command
	   Run	an  external command in an isolated build environment based on
       the Brewfile dependencies.

       This sanitized  build  environment  ignores  unrequested  dependencies,
       which  makes sure that things you didn't specify in your Brewfile won't
       get picked up by commands like bundle install,  npm  install,  etc.  It
       will also add compiler flags which will help find keg-only dependencies
       like openssl, icu4c, etc.

       --file Read the Brewfile from this location. Use --file=-  to  pipe  to
	      stdin/stdout.

       --global
	      Read the Brewfile from ~/.Brewfile.

       -v, --verbose
	      install prints output from commands as they are run. check lists
	      all missing dependencies.

       --no-upgrade
	      install won't run brew upgrade on  outdated  dependencies.  Note
	      they may still be upgraded by brew install if needed.

       -f, --force
	      dump  overwrites an existing Brewfile. cleanup actually performs
	      its cleanup operations.

       --no-lock
	      install won't output a Brewfile.lock.json.

       --all  list all dependencies.

       --formula
	      list Homebrew dependencies.

       --cask list Homebrew Cask dependencies.

       --tap  list tap dependencies.

       --mas  list Mac App Store dependencies.

       --whalebrew
	      list Whalebrew dependencies.

       --describe
	      dump adds a description comment  above  each  line,  unless  the
	      dependency does not have a description.

       --no-restart
	      dump does not add restart_service to formula lines.

       --zap  cleanup casks using the zap command instead of uninstall.

   services [subcommand]
       Manage background services with macOS' launchctl(1) daemon manager.

       If sudo is passed, operate on /Library/LaunchDaemons (started at boot).
       Otherwise, operate on ~/Library/LaunchAgents (started at login).

       [sudo] brew services [list]
	   List all managed services for the current user (or root).

       [sudo] brew services run (formula|--all)
	   Run the service formula without registering to launch at login  (or
       boot).

       [sudo] brew services start (formula|--all)
	   Start  the service formula immediately and register it to launch at
       login (or boot).

       [sudo] brew services stop (formula|--all)
	   Stop the service formula immediately and unregister it from launch-
       ing at login (or boot).

       [sudo] brew services restart (formula|--all)
	   Stop  (if  necessary) and start the service formula immediately and
       register it to launch at login (or boot).

       [sudo] brew services cleanup
	   Remove all unused services.

       --all  Run subcommand on all services.

   test-bot [options] [formula]:
       Tests the full lifecycle of a Homebrew change to  a  tap  (Git  reposi-
       tory).  For  example,  for a GitHub Actions pull request that changes a
       formula brew test-bot will ensure the system is cleaned	and  setup  to
       test  the formula, install the formula, run various tests and checks on
       it, bottle (package) the binaries and test formulae that depend	on  it
       to ensure they aren't broken by these changes.

       Only supports GitHub Actions as a CI provider. This is because Homebrew
       uses GitHub Actions and it's freely available for  public  and  private
       use with macOS and Linux workers.

       --dry-run
	      print what would be done rather than doing it.

       --cleanup
	      clean all state from the Homebrew directory. Use with care!

       --skip-setup
	      don't check if the local system is set up correctly.

       --keep-old
	      run  brew  bottle  --keep-old  to build new bottles for a single
	      platform.

       --skip-relocation
	      run brew bottle --skip-relocation  to  build  new  bottles  that
	      don't require relocation.

       --local
	      ask  Homebrew  to write verbose logs under ./logs/ and set $HOME
	      to ./home/

       --tap  use the git repository of the given tap. Defaults  to  the  core
	      tap for syntax checking.

       --fail-fast
	      immediately exit on a failing step.

       -v, --verbose
	      print  test  step  output  in  real time. Has the side effect of
	      passing output as raw bytes instead of re-encoding in UTF-8.

       --test-default-formula
	      use a default testing formula when not building  a  tap  and  no
	      other formulae are specified.

       --bintray-org
	      upload to the given Bintray organisation.

       --root-url
	      use the specified URL as the root of the bottle's URL instead of
	      Homebrew's default.

       --git-name
	      set the Git author/committer names to the given name.

       --git-email
	      set the Git author/committer email to the given email.

       --ci-upload
	      use the Homebrew CI bottle upload options.

       --publish
	      publish the uploaded bottles.

       --skip-recursive-dependents
	      only test the direct dependents.

       --only-cleanup-before
	      Only run the pre-cleanup step. Needs --cleanup.

       --only-setup
	      Only run the local system setup check step.

       --only-tap-syntax
	      Only run the tap syntax check step.

       --only-formulae
	      Only run the formulae steps.

       --only-cleanup-after
	      Only run the post-cleanup step. Needs --cleanup.

CUSTOM EXTERNAL COMMANDS
       Homebrew, like git(1), supports external commands. These are executable
       scripts	that  reside  somewhere  in  the  PATH,  named brew-cmdname or
       brew-cmdname.rb, which can be invoked like brew	cmdname.  This	allows
       you to create your own commands without modifying Homebrew's internals.

       Instructions for creating your own commands can be found in  the  docs:
       https://docs.brew.sh/External-Commands

SPECIFYING FORMULAE
       Many  Homebrew  commands  accept  one  or more formula arguments. These
       arguments can take several different forms:

       The name of a formula
	      e.g. git, node, wget.

       The fully-qualified name of a tapped formula
	      Sometimes a formula from a tapped repository may	conflict  with
	      one  in  homebrew/core.  You  can still access these formulae by
	      using a special syntax, e.g. homebrew/dupes/vim or homebrew/ver-
	      sions/node4.

       An arbitrary file
	      Homebrew can install formulae from a local path. It can point to
	      either a formula file or a bottle.

SPECIFYING CASKS
       Many Homebrew Cask commands accept one or more  cask  arguments.  These
       can  be	specified  the	same way as the formula arguments described in
       SPECIFYING FORMULAE above.

ENVIRONMENT
       Note that environment variables must have a value set to  be  detected.
       For  example,  run  export  HOMEBREW_NO_INSECURE_REDIRECT=1 rather than
       just export HOMEBREW_NO_INSECURE_REDIRECT.

       HOMEBREW_ARCH
	      Linux only: Pass the set value to a type name  representing  the
	      compiler's -march option.

	      Default: native.

       HOMEBREW_ARTIFACT_DOMAIN
	      Prefix all download URLs, including those for bottles, with this
	      variable.  For  example,	HOMEBREW_ARTIFACT_DOMAIN=http://local-
	      host:8080  will  cause  a  formula  with	the  URL https://exam-
	      ple.com/foo.tar.gz  to  instead  download   from	 http://local-
	      host:8080/example.com/foo.tar.gz.

       HOMEBREW_AUTO_UPDATE_SECS
	      Automatically  check for updates once per this seconds interval.

	      Default: 300.

       HOMEBREW_BAT
	      If set, use bat for the brew cat command.

       HOMEBREW_BAT_CONFIG_PATH
	      Use   the   bat	configuration	file.	For   example,	 HOME-
	      BREW_BAT=$HOME/.bat/config.

	      Default: $HOME/.bat/config

       HOMEBREW_BINTRAY_KEY
	      Use  this  API key when accessing the Bintray API (where bottles
	      are stored).

       HOMEBREW_BINTRAY_USER
	      Use this username when accessing the Bintray API (where  bottles
	      are stored).

       HOMEBREW_BOTTLE_DOMAIN
	      Use  the	specified  URL as the download mirror for bottles. For
	      example, HOMEBREW_BOTTLE_DOMAIN=http://localhost:8080 will cause
	      all  bottles to download from the prefix http://localhost:8080/.

	      Default:	  macOS:     https://homebrew.bintray.com/,	Linux:
	      https://linuxbrew.bintray.com/.

       HOMEBREW_BREW_GIT_REMOTE
	      Use the specified URL as the Homebrew/brew git(1) remote.

	      Default: https://github.com/Homebrew/brew.

       HOMEBREW_BROWSER
	      Use this as the browser when opening project homepages.

	      Default: $BROWSER or the OS's default browser.

       HOMEBREW_CACHE
	      Use the specified directory as the download cache.

	      Default:	   macOS:     $HOME/Library/Caches/Homebrew,	Linux:
	      $XDG_CACHE_HOME/Homebrew or $HOME/.cache/Homebrew.

       HOMEBREW_CASK_OPTS
	      Options which should be used for all cask commands.  All	--*dir
	      options,	  --language,	--require-sha,	 --no-quarantine   and
	      --no-binaries are supported. For example, you  might  add  some-
	      thing like the following to your ~/.profile, ~/.bash_profile, or
	      ~/.zshenv:

       export	    HOMEBREW_CASK_OPTS='--appdir=~/Applications        --font-
       dir=/Library/Fonts'

       HOMEBREW_CLEANUP_MAX_AGE_DAYS
	      Cleanup all cached files older than this many days.

	      Default: 120.

       HOMEBREW_COLOR
	      If set, force colour output on non-TTY outputs.

       HOMEBREW_CORE_GIT_REMOTE
	      Use  the	specified  URL	as  the  Homebrew/homebrew-core git(1)
	      remote.

	      Default:	  macOS:    https://github.com/Homebrew/homebrew-core,
	      Linux: https://github.com/Homebrew/linuxbrew-core.

       HOMEBREW_CURLRC
	      If  set, do not pass --disable when invoking curl(1), which dis-
	      ables the use of curlrc.

       HOMEBREW_CURL_RETRIES
	      Pass the given retry count to --retry when invoking curl(1).

	      Default: 3.

       HOMEBREW_CURL_VERBOSE
	      If set, pass --verbose when invoking curl(1).

       HOMEBREW_DEVELOPER
	      If set, tweak behaviour to be more relevant for Homebrew	devel-
	      opers  (active or budding) by e.g. turning warnings into errors.

       HOMEBREW_DISABLE_LOAD_FORMULA
	      If set, refuse to load formulae. This is	useful	when  formulae
	      are not trusted (such as in pull requests).

       HOMEBREW_DISPLAY
	      Use this X11 display when opening a page in a browser, for exam-
	      ple with brew home. Primarily useful on Linux.

	      Default: $DISPLAY.

       HOMEBREW_DISPLAY_INSTALL_TIMES
	      If set, print install times for each formula at the end  of  the
	      run.

       HOMEBREW_EDITOR
	      Use this editor when editing a single formula, or several formu-
	      lae in the same directory.

	      Note: brew edit will open all of Homebrew as discontinuous files
	      and directories. Visual Studio Code can handle this correctly in
	      project mode, but many editors will do strange  things  in  this
	      case.

	      Default: $EDITOR or $VISUAL.

       HOMEBREW_FAIL_LOG_LINES
	      Output this many lines of output on formula system failures.

	      Default: 15.

       HOMEBREW_FORBIDDEN_LICENSES
	      A  space-separated  list	of  licenses.  Homebrew will refuse to
	      install a formula if that formula or any of its dependencies has
	      a license on this list.

       HOMEBREW_FORCE_BREWED_CURL
	      If  set, always use a Homebrew-installed curl(1) rather than the
	      system version. Automatically set if the system version of  curl
	      is too old.

       HOMEBREW_FORCE_BREWED_GIT
	      If  set,	always use a Homebrew-installed git(1) rather than the
	      system version. Automatically set if the system version  of  git
	      is too old.

       HOMEBREW_FORCE_HOMEBREW_ON_LINUX
	      If  set, running Homebrew on Linux will use URLs for macOS. This
	      is useful when merging pull requests for macOS while on Linux.

       HOMEBREW_FORCE_VENDOR_RUBY
	      If set, always use Homebrew's vendored, relocatable Ruby version
	      even if the system version of Ruby is new enough.

       HOMEBREW_GITHUB_API_PASSWORD
	      Use  this  password  for authentication with the GitHub API, for
	      features such as brew search. We strongly recommend using  HOME-
	      BREW_GITHUB_API_TOKEN instead.

       HOMEBREW_GITHUB_API_TOKEN
	      Use  this personal access token for the GitHub API, for features
	      such   as   brew	  search.    You    can    create    one    at
	      https://github.com/settings/tokens.  If  set,  GitHub will allow
	      you a greater number of API requests. For more information, see:
	      https://docs.github.com/en/rest/over-
	      view/resources-in-the-rest-api#rate-limiting.

	      Note: Homebrew  doesn't  require	permissions  for  any  of  the
	      scopes,  but some developer commands may require additional per-
	      missions.

       HOMEBREW_GITHUB_API_USERNAME
	      Use this username for authentication with the  GitHub  API,  for
	      features	such as brew search. We strongly recommend using HOME-
	      BREW_GITHUB_API_TOKEN instead.

       HOMEBREW_GIT_EMAIL
	      Set the Git author and committer name to this value.

       HOMEBREW_GIT_NAME
	      Set the Git author and committer email to this value.

       HOMEBREW_INSTALL_BADGE
	      Print this text before the installation summary of each success-
	      ful build.

	      Default: The ""Beer Mug"" emoji.

       HOMEBREW_LIVECHECK_WATCHLIST
	      Use  this file to get the list of default Formulae to check when
	      no Formula argument is passed to brew livecheck

	      Default: $HOME/.brew_livecheck_watchlist.

       HOMEBREW_LOGS
	      Use the specified directory to store log files.

	      Default:	   macOS:     $HOME/Library/Logs/Homebrew,	Linux:
	      $XDG_CACHE_HOME/Homebrew/Logs or $HOME/.cache/Homebrew/Logs.

       HOMEBREW_MAKE_JOBS
	      Use this value as the number of parallel jobs to run when build-
	      ing with make(1).

	      Default: The number of available CPU cores.

       HOMEBREW_NO_ANALYTICS
	      If set, do not send analytics. See: https://docs.brew.sh/Analyt-
	      ics.

       HOMEBREW_NO_AUTO_UPDATE
	      If set, do not automatically update before running brew install,
	      brew upgrade or brew tap.

       HOMEBREW_NO_BOTTLE_SOURCE_FALLBACK
	      If set, fail on the failure of installation from a bottle rather
	      than falling back to building from source.

       HOMEBREW_NO_COLOR
	      If set, do not print text with colour added.

	      Default: $NO_COLOR.

       HOMEBREW_NO_COMPAT
	      If set, disable all use of legacy compatibility code.

       HOMEBREW_NO_EMOJI
	      If  set,	do  not  print	HOMEBREW_INSTALL_BADGE on a successful
	      build.

	      Note: Only tries to print emoji on OS X Lion or newer.

       HOMEBREW_NO_GITHUB_API
	      If set, do not use the GitHub API, e.g. for searches or fetching
	      relevant issues on a failed install.

       HOMEBREW_NO_INSECURE_REDIRECT
	      If set, forbid redirects from secure HTTPS to insecure HTTP.

	      Note:  While  ensuring  your downloads are fully secure, this is
	      likely to cause from-source SourceForge, some GNU & GNOME  based
	      formulae to fail to download.

       HOMEBREW_NO_INSTALL_CLEANUP
	      If set, brew install, brew upgrade and brew reinstall will never
	      automatically cleanup installed/upgraded/reinstalled formulae or
	      all formulae every 30 days.

       HOMEBREW_PRY
	      If set, use Pry for the brew irb command.

       HOMEBREW_SKIP_OR_LATER_BOTTLES
	      If  set  with  HOMEBREW_DEVELOPER, do not use bottles from older
	      versions of macOS. This is useful in development	on  new  macOS
	      versions.

       HOMEBREW_SVN
	      Use this as the svn(1) binary.

	      Default: A Homebrew-built Subversion (if installed), or the sys-
	      tem-provided binary.

       HOMEBREW_TEMP
	      Use this path as the temporary directory for building  packages.
	      Changing	this  may be needed if your system temporary directory
	      and Homebrew prefix are on different volumes, as macOS has trou-
	      ble  moving symlinks across volumes when the target does not yet
	      exist. This issue typically occurs when using FileVault or  cus-
	      tom SSD configurations.

	      Default: macOS: /private/tmp, Linux: /tmp.

       HOMEBREW_UPDATE_REPORT_ONLY_INSTALLED
	      If  set, brew update only outputs updates to installed software.

       HOMEBREW_UPDATE_TO_TAG
	      If set, always use the latest stable tag (even if developer com-
	      mands have been run).

       HOMEBREW_VERBOSE
	      If set, always assume --verbose when running commands.

       HOMEBREW_DEBUG
	      If set, always assume --debug when running commands.

       HOMEBREW_VERBOSE_USING_DOTS
	      If  set,	verbose  output  will  print  a  . no more than once a
	      minute. This can be useful to avoid long-running	Homebrew  com-
	      mands being killed due to no output.

       all_proxy
	      Use  this SOCKS5 proxy for curl(1), git(1) and svn(1) when down-
	      loading through Homebrew.

       ftp_proxy
	      Use this FTP proxy for curl(1), git(1) and svn(1) when download-
	      ing through Homebrew.

       http_proxy
	      Use  this  HTTP  proxy for curl(1), git(1) and svn(1) when down-
	      loading through Homebrew.

       https_proxy
	      Use this HTTPS proxy for curl(1), git(1) and svn(1)  when  down-
	      loading through Homebrew.

       no_proxy
	      A  comma-separated  list	of hostnames and domain names excluded
	      from proxying by curl(1), git(1)	and  svn(1)  when  downloading
	      through Homebrew.

       SUDO_ASKPASS
	      When  this variable is set, the -A option is passed when calling
	      sudo(8)

USING HOMEBREW BEHIND A PROXY
       Set the http_proxy, https_proxy, all_proxy, ftp_proxy  and/or  no_proxy
       environment variables documented above.

       For example, to use an unauthenticated HTTP or SOCKS5 proxy:



	   export http_proxy=http://$HOST:$PORT

	   export all_proxy=socks5://$HOST:$PORT



       And for an authenticated HTTP proxy:



	   export http_proxy=http://$USER:$PASSWORD@$HOST:$PORT



SEE ALSO
       Homebrew Documentation: https://docs.brew.sh

       Homebrew API: https://rubydoc.brew.sh

       git(1), git-log(1)

AUTHORS
       Homebrew's Project Leader is Mike McQuaid.

       Homebrew's Project Leadership Committee is Misty De Meo, Shaun Jackman,
       Jonathan Chang, Sean Molenaar and Markus Reiter.

       Homebrew's Technical Steering Committee is Michka Popoff,  FX  Coudert,
       Markus Reiter, Misty De Meo and Mike McQuaid.

       Homebrew/brew's	Linux  maintainers  are  Michka Popoff, Shaun Jackman,
       Dawid Dziurla, Issy Long and Maxim Belkin.

       Homebrew's other  current  maintainers  are  Claudia  Pellegrino,  Zach
       Auten,  Rui  Chen, Vitor Galvao, Caleb Xu, Gautham Goli, Steven Peters,
       Bo  Anderson,  William  Woodruff,  Igor	Kapkov,  Sam  Ford,  Alexander
       Bayandin,  Izaak  Beekman, Eric Knibbe, Viktor Szakats, Thierry Moisan,
       Steven Peters, Tom Schoonjans, Issy Long, CoreCode, Randall, Rylan Pol-
       ster, SeekingMeaning, William Ma and Dustin Rodrigues.

       Former maintainers with significant contributions include Jan Viljanen,
       JCount, commitay, Dominyk Tiller,  Tim  Smith,  Baptiste  Fontaine,  Xu
       Cheng,  Martin Afanasjew, Brett Koonce, Charlie Sharpsteen, Jack Nagel,
       Adam Vandenberg,  Andrew  Janke,  Alex  Dunn,  neutric,	Tomasz	Pajor,
       Uladzislau  Shablinski,	Alyssa	Ross,  ilovezfs, Chongyu Zhu and Home-
       brew's creator: Max Howell.

BUGS
       See our issues on GitHub:

       Homebrew/brew
	      https://github.com/Homebrew/brew/issues

       Homebrew/homebrew-core
	      https://github.com/Homebrew/homebrew-core/issues

       Homebrew/homebrew-cask
	      https://github.com/Homebrew/homebrew-cask/issues




Homebrew			September 2020			       BREW(1)
","# brew

> Package manager for macOS.
> More information: <https://brew.sh>.

- Search for available formulas and casks:

`brew search {{text}}`

- Install the latest stable version of a formula (use `--devel` for development versions):

`brew install {{formula}}`

- List all installed formulae:

`brew list`

- List installed formulae that are not dependencies of another installed formula:

`brew leaves`

- Upgrade an installed formula (if no formula name is given, all installed formulae are upgraded):

`brew upgrade {{formula}}`

- Fetch the newest version of Homebrew and of all formulae from GitHub:

`brew update`

- Remove old versions of installed formulae (if no formula name is given, all installed formulae are processed):

`brew cleanup {{formula}}`

- Display information about a formula (version, installation path, dependencies, etc.):

`brew info {{formula}}`

- Check the local Homebrew installation for potential problems:

`brew doctor`
"
compgen,,,,"# compgen

> A built-in command for auto-completion in bash, which is called on pressing TAB key twice.

- List all commands that you could run:

`compgen -c`

- List all aliases:

`compgen -a`

- List all functions that you could run:

`compgen -A function`

- Show shell reserved key words:

`compgen -k`

- See all available commands/aliases starting with 'ls':

`compgen -ac {{ls}}`
"
eval,,,"
BUILTIN(1)		  BSD General Commands Manual		    BUILTIN(1)

NAME
     builtin, !, %, ., :, @, {, }, alias, alloc, bg, bind, bindkey, break,
     breaksw, builtins, case, cd, chdir, command, complete, continue, default,
     dirs, do, done, echo, echotc, elif, else, end, endif, endsw, esac, eval,
     exec, exit, export, false, fc, fg, filetest, fi, for, foreach, getopts,
     glob, goto, hash, hashstat, history, hup, if, jobid, jobs, kill, limit,
     local, log, login, logout, ls-F, nice, nohup, notify, onintr, popd,
     printenv, pushd, pwd, read, readonly, rehash, repeat, return, sched, set,
     setenv, settc, setty, setvar, shift, source, stop, suspend, switch,
     telltc, test, then, time, times, trap, true, type, ulimit, umask,
     unalias, uncomplete, unhash, unlimit, unset, unsetenv, until, wait,
     where, which, while -- shell built-in commands

SYNOPSIS
     builtin [-options] [args ...]

DESCRIPTION
     Shell builtin commands are commands that can be executed within the run-
     ning shell's process.  Note that, in the case of csh(1) builtin commands,
     the command is executed in a subshell if it occurs as any component of a
     pipeline except the last.

     If a command specified to the shell contains a slash ``/'', the shell
     will not execute a builtin command, even if the last component of the
     specified command matches the name of a builtin command.  Thus, while
     specifying ``echo'' causes a builtin command to be executed under shells
     that support the echo builtin command, specifying ``/bin/echo'' or
     ``./echo'' does not.

     While some builtin commands may exist in more than one shell, their oper-
     ation may be different under each shell which supports them.  Below is a
     table which lists shell builtin commands, the standard shells that sup-
     port them and whether they exist as standalone utilities.

     Only builtin commands for the csh(1) and sh(1) shells are listed here.
     Consult a shell's manual page for details on the operation of its builtin
     commands.	Beware that the sh(1) manual page, at least, calls some of
     these commands ``built-in commands'' and some of them ``reserved words''.
     Users of other shells may need to consult an info(1) page or other
     sources of documentation.

     Commands marked ``No**'' under External do exist externally, but are
     implemented as scripts using a builtin command of the same name.

	   Command	 External    csh(1)    sh(1)
	   !		 No	     No        Yes
	   %		 No	     Yes       No
	   .		 No	     No        Yes
	   :		 No	     Yes       Yes
	   @		 No	     Yes       Yes
	   {		 No	     No        Yes
	   }		 No	     No        Yes
	   alias	 No**	     Yes       Yes
	   alloc	 No	     Yes       No
	   bg		 No**	     Yes       Yes
	   bind 	 No	     No        Yes
	   bindkey	 No	     Yes       No
	   break	 No	     Yes       Yes
	   breaksw	 No	     Yes       No
	   builtin	 No	     No        Yes
	   builtins	 No	     Yes       No
	   case 	 No	     Yes       Yes
	   cd		 No**	     Yes       Yes
	   chdir	 No	     Yes       Yes
	   command	 No**	     No        Yes
	   complete	 No	     Yes       No
	   continue	 No	     Yes       Yes
	   default	 No	     Yes       No
	   dirs 	 No	     Yes       No
	   do		 No	     No        Yes
	   done 	 No	     No        Yes
	   echo 	 Yes	     Yes       Yes
	   echotc	 No	     Yes       No
	   elif 	 No	     No        Yes
	   else 	 No	     Yes       Yes
	   end		 No	     Yes       No
	   endif	 No	     Yes       No
	   endsw	 No	     Yes       No
	   esac 	 No	     No        Yes
	   eval 	 No	     Yes       Yes
	   exec 	 No	     Yes       Yes
	   exit 	 No	     Yes       Yes
	   export	 No	     No        Yes
	   false	 Yes	     No        Yes
	   fc		 No**	     No        Yes
	   fg		 No**	     Yes       Yes
	   filetest	 No	     Yes       No
	   fi		 No	     No        Yes
	   for		 No	     No        Yes
	   foreach	 No	     Yes       No
	   getopts	 No**	     No        Yes
	   glob 	 No	     Yes       No
	   goto 	 No	     Yes       No
	   hash 	 No	     No        Yes
	   hashstat	 No	     Yes       No
	   history	 No	     Yes       No
	   hup		 No	     Yes       No
	   if		 No	     Yes       Yes
	   jobid	 No	     No        Yes
	   jobs 	 No**	     Yes       Yes
	   kill 	 Yes	     Yes       No
	   limit	 No	     Yes       No
	   local	 No	     No        Yes
	   log		 No	     Yes       No
	   login	 Yes	     Yes       No
	   logout	 No	     Yes       No
	   ls-F 	 No	     Yes       No
	   nice 	 Yes	     Yes       No
	   nohup	 Yes	     Yes       No
	   notify	 No	     Yes       No
	   onintr	 No	     Yes       No
	   popd 	 No	     Yes       No
	   printenv	 Yes	     Yes       No
	   pushd	 No	     Yes       No
	   pwd		 Yes	     No        Yes
	   read 	 No**	     No        Yes
	   readonly	 No	     No        Yes
	   rehash	 No	     Yes       No
	   repeat	 No	     Yes       No
	   return	 No	     No        Yes
	   sched	 No	     Yes       No
	   set		 No	     Yes       Yes
	   setenv	 No	     Yes       No
	   settc	 No	     Yes       No
	   setty	 No	     Yes       No
	   setvar	 No	     No        Yes
	   shift	 No	     Yes       Yes
	   source	 No	     Yes       No
	   stop 	 No	     Yes       No
	   suspend	 No	     Yes       No
	   switch	 No	     Yes       No
	   telltc	 No	     Yes       No
	   test 	 Yes	     No        Yes
	   then 	 No	     No        Yes
	   time 	 Yes	     Yes       No
	   times	 No	     No        Yes
	   trap 	 No	     No        Yes
	   true 	 Yes	     No        Yes
	   type 	 No	     No        Yes
	   ulimit	 No	     No        Yes
	   umask	 No**	     Yes       Yes
	   unalias	 No**	     Yes       Yes
	   uncomplete	 No	     Yes       No
	   unhash	 No	     Yes       No
	   unlimit	 No	     Yes       No
	   unset	 No	     Yes       Yes
	   unsetenv	 No	     Yes       No
	   until	 No	     No        Yes
	   wait 	 No**	     Yes       Yes
	   where	 No	     Yes       No
	   which	 Yes	     Yes       No
	   while	 No	     Yes       Yes

SEE ALSO
     csh(1), echo(1), false(1), info(1), kill(1), login(1), nice(1), nohup(1),
     printenv(1), pwd(1), sh(1), test(1), time(1), true(1), which(1)

HISTORY
     The builtin manual page first appeared in FreeBSD 3.4.

AUTHORS
     This manual page was written by Sheldon Hearn <sheldonh@FreeBSD.org>.

BSD			       February 23, 2005			   BSD
","# eval

> Execute arguments as a single command in the current shell and return its result.

- Call `echo` with the ""foo"" argument:

`eval ""{{echo foo}}""`

- Set a variable in the current shell:

`eval ""{{foo=bar}}""`
"
m,,,,"# m

> Swiss Army Knife for macOS.

- Get the battery status:

`m battery status`

- Turn off bluetooth:

`m bluetooth off`

- List available filesystems for formatting:

`m disk filesystems`

- Enable Dock's auto hide feature:

`m dock autohide YES`

- Disable the firewall:

`m firewall disable`
"
systemsetup,,,"
SYSTEMSETUP(8)		  BSD System Manager's Manual		SYSTEMSETUP(8)

NAME
     systemsetup -- configuration tool for certain machine settings in System
     Preferences.

SYNOPSIS
     systemsetup [-getdate] [-setdate mm:dd:yy] [-gettime] [-settime hh:mm:ss]
		 [-gettimezone] [-listtimezones] [-settimezone timezone]
		 [-getusingnetworktime] [-setusingnetworktime on | off]
		 [-getnetworktimeserver] [-setnetworktimeserver timeserver]
		 [-getsleep] [-setsleep minutes] [-getcomputersleep]
		 [-setcomputersleep minutes] [-getdisplaysleep]
		 [-setdisplaysleep minutes] [-getharddisksleep]
		 [-setharddisksleep minutes] [-getwakeonmodem]
		 [-setwakeonmodem on | off] [-getwakeonnetworkaccess]
		 [-setwakeonnetworkaccess on | off] [-getrestartpowerfailure]
		 [-setrestartpowerfailure on | off] [-getrestartfreeze]
		 [-setrestartfreeze on | off]
		 [-getallowpowerbuttontosleepcomputer]
		 [-setallowpowerbuttontosleepcomputer on | off]
		 [-getremotelogin] [-setremotelogin on | off]
		 [-getremoteappleevents] [-setremoteappleevents on | off]
		 [-getcomputername] [-setcomputername computername]
		 [-getstartupdisk] [-liststartupdisks] [-setstartupdisk path]
		 [-getwaitforstartupafterpowerfailure]
		 [-setwaitforstartupafterpowerfailure value]
		 [-getdisablekeyboardwhenenclosurelockisengaged]
		 [-setdisablekeyboardwhenenclosurelockisengaged yes | no]
		 [-getkernelbootarchitecturesetting]
		 [-setkernelbootarchitecture i386 | x86_64 | default]
		 [-version] [-help] [-printCommands]

DESCRIPTION
     The systemsetup command is used to configure certain per-machine settings
     typically configured in the System Preferences application.  The
     systemsetup command requires at least ""admin"" privileges to run.

     A list of flags and their descriptions:

     -getdate
	     Displays the current date.

     -setdate mm:dd:yy
	     Use this command to set the current month, day, and year.

     -gettime
	     Displays the current time in 24-hour format.

     -settime hh:mm:ss
	     Sets the current time. The provided time argument should be in
	     24-hour format.

     -gettimezone
	     Displays current time zone.

     -listtimezones
	     Lists all time zones supported by this machine.

     -settimezone timezone
	     Use this command to set the local time zone. Use ""-listtimezones""
	     to list valid timezone arguments.

     -getusingnetworktime
	     Displays whether network time is on or off.

     -setusingnetworktime on | off
	     Sets whether using network time is on or off.

     -getnetworktimeserver
	     Displays the currently set network time server.

     -setnetworktimeserver timeserver
	     Use this command to designate a network time server. Enter the IP
	     address or DNS name for the network time server.

     -getsleep
	     Displays amount of idle time until machine sleeps.

     -setsleep minutes
	     Sets amount of idle time until computer sleeps. Specify ""Never""
	     or ""Off"" for computers that should never sleep. Important: if you
	     set the system to sleep, you will not be able to administer the
	     server remotely while it is sleeping.

     -getcomputersleep
	     Display amount of idle time until computer sleeps.

     -setcomputersleep minutes
	     Set amount of idle time until computer sleeps. Specify ""Never"" or
	     ""Off"" for never.

     -getdisplaysleep
	     Display amount of idle time until display sleeps.

     -setdisplaysleep minutes
	     Set amount of idle time until display sleeps. Specify ""Never"" or
	     ""Off"" for never.

     -getharddisksleep
	     Display amount of idle time until hard disk sleeps. Specify
	     ""Never"" or ""Off"" for never.

     -setharddisksleep minutes
	     Set amount of idle time until hard disk sleeps. Specify ""Never""
	     or ""Off"" for never.

     -getwakeonmodem
	     Displays whether wake on modem is on or off.

     -setwakeonmodem on | off
	     Use this command to specify whether or not the server will wake
	     from sleep when modem activity is detected.

     -getwakeonnetworkaccess
	     Displays whether wake on network access is on or off.

     -setwakeonnetworkaccess on | off
	     Use this command to specify whether the server wakes from sleep
	     when a network admin packet is sent to it.

     -getrestartpowerfailure
	     Displays whether restart on power failure is on or off.

     -setrestartpowerfailure on | off
	     Use this command to specify whether the server automatically
	     restarts after a power failure.

     -getrestartfreeze
	     Displays whether restart on freeze is on or off.

     -setrestartfreeze on | off
	     Use this command to specify whether the server restarts automati-
	     cally after the system freezes.

     -getallowpowerbuttontosleepcomputer
	     Enable or disable whether the power button can sleep the com-
	     puter.

     -setallowpowerbuttontosleepcomputer on | off
	     Enable or disable whether the power button can sleep the com-
	     puter.

     -getremotelogin
	     Displays whether remote login (SSH) is on or off.

     -setremotelogin [-f] on | off
	     Sets remote login (SSH) to either on or off. Important  If you
	     turn off remote login, you won't be able to administer the server
	     using remote command line tools and SSH. To turn remote login
	     back on, you'll need to connect a monitor and keyboard to the
	     server to administer it locally. Use ""setremotelogin -f off"" to
	     suppress prompting when turning remote login off.

     -getremoteappleevents
	     Displays whether remote apple events are on or off.

     -setremoteappleevents on | off
	     Use this command to set whether the server responds to events
	     sent by other computers (such as AppleScripts).

     -getcomputername
	     Displays computer name.

     -setcomputername computername
	     Sets computer name to <computername>. This name is used by AFP.

     -getlocalsubnetname
	     Display local subnet name.

     -setlocalsubnetname name
	     Set local subnet name to <name>.

     -getstartupdisk
	     Displays current startup disk.

     -liststartupdisks
	     Lists all valid startup disks on this computer.

     -setstartupdisk path
	     Sets current startup disk to the indicated path. Valid arguments
	     can be listed using ""-liststartupdisks.""

     -getwaitforstartupafterpowerfailure
	     Get the number of seconds after which the computer will start up
	     after a power failure.

     -setwaitforstartupafterpowerfailure seconds
	     Set the number of seconds after which the computer will start up
	     after a power failure. The <seconds> value must be a multiple of
	     30 seconds.

     -getdisablekeyboardwhenenclosurelockisengaged
	     Get whether or not the keyboard should be disabled when the X
	     Serve enclosure lock is engaged.

     -setdisablekeyboardwhenenclosurelockisengaged yes | no
	     Set whether or not the keyboard should be disabled when the X
	     Serve enclosure lock is engaged.

     -getkernelbootarchitecturesetting
	     Gets the Kernel Architecture setting from the
	     com.apple.Boot.plist.

     -setkernelbootarchitecture i386 | x86_64 | default
	     Set the kernel to boot in 32 or 64 bit mode on next boot. default
	     removes the setting.

     -version
	     Displays version of systemsetup tool.

     -help   Displays a list of all the commands available in the System Setup
	     Tool, with explanatory information.

     -printCommands
	     Displays a list of commands with no detail.

EXAMPLES
     systemsetup -setdate 04:15:02

     systemsetup -settime 16:20:00

     systemsetup -settimezone US/Pacific

     systemsetup -setnetworktimeserver time.apple.com

FILES
     /usr/sbin/systemsetup

SEE ALSO
     networksetup(8)

Mac OS X			April 15, 2002			      Mac OS X
","# systemsetup

> Configure System Preferences machine settings.

- Enable remote login (SSH):

`systemsetup -setremotelogin on`

- Specify TimeZone, NTP Server and enable network time:

`systemsetup -settimezone {{US/Pacific}} -setnetworktimeserver {{us.pool.ntp.org}} -setusingnetworktime on`

- Make the machine never sleep and automatically restart on power failure or kernel panic:

`systemsetup -setsleep off -setrestartpowerfailure on -setrestartfreeze on`

- List valid startup disks:

`systemsetup -liststartupdisks`

- Specify a new startup disk:

`systemsetup -setstartupdisk {{path}}`
"
fsck,,,"
FSCK(8) 		  BSD System Manager's Manual		       FSCK(8)

NAME
     fsck -- filesystem consistency check and interactive repair

SYNOPSIS
     fsck -p [-f]
     fsck [-l maxparallel] [-q] [-y] [-n] [-d]

DESCRIPTION
     The first form of fsck preens a standard set of filesystems or the speci-
     fied filesystems.	It is normally used in the script /etc/rc during auto-
     matic reboot.  Here fsck reads the filesystem descriptor table (using
     getfsent(3)) to determine which filesystems to check.  Only partitions
     that have ``rw,'' ``rq'' or ``ro'' as options, and that have non-zero
     pass number are checked.  Filesystems with pass number 1 (normally just
     the root filesystem) are checked one at a time.  When pass 1 completes,
     all remaining filesystems are checked, running one process per disk
     drive.  The disk drive containing each filesystem is inferred from the
     shortest prefix of the device name that ends in one or more digits; the
     remaining characters are assumed to be the partition designator.  In
     preening mode, filesystems that are marked clean are skipped.  Filesys-
     tems are marked clean when they are unmounted, when they have been
     mounted read-only, or when fsck runs on them successfully.

     It should be noted that fsck is now essentially a wrapper that invokes
     other fsck_XXX utilities as needed.  Currently, fsck can invoke fsck_hfs,
     fsck_apfs, fsck_msdos, fsck_exfat, and fsck_udf.  If this underlying
     process that fsck invokes encounters serious inconsistencies or the
     filesystem type is not one of the above, it exits with an abnormal return
     status and an automatic reboot will then fail.  For each corrected incon-
     sistency one or more lines will be printed identifying the filesystem on
     which the correction will take place, and the nature of the correction.

     If sent a QUIT signal, fsck will finish the filesystem checks, then exit
     with an abnormal return status that causes an automatic reboot to fail.
     This is useful when you want to finish the filesystem checks during an
     automatic reboot, but do not want the machine to come up multiuser after
     the checks complete.

     Without the -p option, fsck audits and interactively repairs inconsistent
     conditions for filesystems.  It should be noted that some of the correc-
     tive actions which are not correctable under the -p option will result in
     some loss of data.  The amount and severity of data lost may be deter-
     mined from the diagnostic output.	If the operator does not have write
     permission on the filesystem fsck will default to a -n action.

     The following flags are interpreted by fsck and passed along to the
     underlying tool that it spawns.

     -f 	 Force fsck to check `clean' filesystems when preening.

     -l 	 Limit the number of parallel checks to the number specified
		 in the following argument.  By default, the limit is the num-
		 ber of disks, running one process per disk.  If a smaller
		 limit is given, the disks are checked round-robin, one
		 filesystem at a time.

     -R 	 Specify a particular passno number for which fsck is to
		 check.  You may only specify 1 or 2.  Only those filesystems
		 matching that particular passno entry (if using fstab) will
		 be checked.  For more information on the passno field, see
		 fstab(5).

     -p 	 ""Preen"" mode, described above.

     -q 	 Do a quick check to determine if the filesystem was unmounted
		 cleanly.

     -y 	 Assume a yes response to all questions asked by fsck; this
		 should be used with great caution as this is a free license
		 to continue after essentially unlimited trouble has been
		 encountered.

     -n 	 Assume a no response to all questions asked by fsck except
		 for `CONTINUE?', which is assumed to be affirmative; do not
		 open the filesystem for writing.

     If no filesystems are given to fsck then a default list of filesystems is
     read using getfsent(3).

     Because of inconsistencies between the block device and the buffer cache,
     the raw device should always be used.

SEE ALSO
     fs(5), fsck_hfs(8), fsck_apfs(8), fsck_msdos(8), getfsent(3), fstab(5,)
     reboot(8)

4th Berkeley Distribution	 May 18, 2010	     4th Berkeley Distribution
","# fsck

> Check the integrity of a filesystem or repair it. The filesystem should be unmounted at the time the command is run.
> It is a wrapper that calls `fsck_hfs`, `fsck_apfs`, `fsck_msdos`, `fsck_exfat`, and `fsck_udf` as needed.

- Check filesystem /dev/sda, reporting any damaged blocks:

`fsck {{/dev/sda}}`

- Check filesystem /dev/sda only if it is clean, reporting any damaged blocks and interactively letting the user choose to repair each one:

`fsck -f {{/dev/sda}}`

- Check filesystem /dev/sda only if it is clean, reporting any damaged blocks and automatically repairing them:

`fsck -fy {{/dev/sda}}`

- Check filesystem /dev/sda, reporting whether it has been cleanly unmounted:

`fsck -q {{/dev/sda}}`
"
sysctl,,,"
SYSCTL(8)		  BSD System Manager's Manual		     SYSCTL(8)

NAME
     sysctl -- get or set kernel state

SYNOPSIS
     sysctl [-bdehiNnoqx] name[=value] ...
     sysctl [-bdehNnoqx] -a

DESCRIPTION
     The sysctl utility retrieves kernel state and allows processes with
     appropriate privilege to set kernel state.  The state to be retrieved or
     set is described using a ``Management Information Base'' (``MIB'') style
     name, described as a dotted set of components.

     The following options are available:

     -A      Equivalent to -o -a (for compatibility).

     -a      List all the currently available non-opaque values.  This option
	     is ignored if one or more variable names are specified on the
	     command line.

     -b      Force the value of the variable(s) to be output in raw, binary
	     format.  No names are printed and no terminating newlines are
	     output.  This is mostly useful with a single variable.

     -d      Print the description of the variable instead of its value.

     -e      Separate the name and the value of the variable(s) with `='.
	     This is useful for producing output which can be fed back to the
	     sysctl utility.  This option is ignored if either -N or -n is
	     specified, or a variable is being set.

     -h      Format output for human, rather than machine, readability.

     -i      Ignore unknown OIDs.  The purpose is to make use of sysctl for
	     collecting data from a variety of machines (not all of which are
	     necessarily running exactly the same software) easier.

     -N      Show only variable names, not their values.  This is particularly
	     useful with shells that offer programmable completion.  To enable
	     completion of variable names in zsh(1) (ports/shells/zsh), use
	     the following code:

		   listsysctls () { set -A reply $(sysctl -AN ${1%.*}) }
		   compctl -K listsysctls sysctl

	     To enable completion of variable names in tcsh(1), use:

		   complete sysctl 'n/*/`sysctl -Na`/'

     -n      Show only variable values, not their names.  This option is use-
	     ful for setting shell variables.  For instance, to save the page-
	     size in variable psize, use:

		   set psize=`sysctl -n hw.pagesize`

     -o      Show opaque variables (which are normally suppressed).  The for-
	     mat and length are printed, as well as a hex dump of the first
	     sixteen bytes of the value.

     -q      Suppress some warnings generated by sysctl to standard error.

     -X      Equivalent to -x -a (for compatibility).

     -x      As -o, but prints a hex dump of the entire value instead of just
	     the first few bytes.

     The information available from sysctl consists of integers, strings, and
     opaque types.  The sysctl utility only knows about a couple of opaque
     types, and will resort to hexdumps for the rest.  The opaque information
     is much more useful if retrieved by special purpose programs such as
     ps(1), systat(1), and netstat(1).

     The string and integer information is summarized below.  For a detailed
     description of these variable see sysctl(3).

     The changeable column indicates whether a process with appropriate privi-
     lege can change the value.  String and integer values can be set using
     sysctl.

     Name					 Type	       Changeable
     hw.activecpu				 integer       no
     hw.busfrequency				 integer       no
     hw.busfrequency_max			 integer       no
     hw.busfrequency_min			 integer       no
     hw.byteorder				 integer       no
     hw.cacheconfig				 struct        no
     hw.cachelinesize				 integer       no
     hw.cachesize				 struct        no
     hw.cpu64bit_capable			 integer       no
     hw.cpufamily				 integer       no
     hw.cpufrequency				 integer       no
     hw.cpufrequency_max			 integer       no
     hw.cpufrequency_min			 integer       no
     hw.cpusubtype				 integer       no
     hw.cputhreadtype				 integer       no
     hw.cputype 				 integer       no
     hw.l1dcachesize				 integer       no
     hw.l1icachesize				 integer       no
     hw.l2cachesize				 integer       no
     hw.l3cachesize				 integer       no
     hw.logicalcpu				 integer       no
     hw.logicalcpu_max				 integer       no
     hw.memsize 				 integer       no
     hw.ncpu					 integer       no
     hw.packages				 integer       no
     hw.pagesize				 integer       no
     hw.physicalcpu				 integer       no
     hw.physicalcpu_max 			 integer       no
     hw.tbfrequency				 integer       no
     kern.argmax				 integer       no
     kern.bootargs				 string        no
     kern.boottime				 struct        no
     kern.clockrate				 struct        no
     kern.coredump				 integer       yes
     kern.corefile				 string        yes
     kern.flush_cache_on_write			 integer       yes
     kern.hostid				 integer       yes
     kern.hostname				 string        yes
     kern.job_control				 integer       no
     kern.maxfiles				 integer       yes
     kern.maxfilesperproc			 integer       yes
     kern.maxnbuf				 integer       yes
     kern.maxproc				 integer       yes
     kern.maxprocperuid 			 integer       yes
     kern.maxvnodes				 integer       yes
     kern.msgbuf				 integer       yes
     kern.nbuf					 integer       no
     kern.netboot				 integer       no
     kern.ngroups				 integer       no
     kern.nisdomainname 			 string        yes
     kern.num_files				 integer       no
     kern.num_tasks				 integer       no
     kern.num_taskthreads			 integer       no
     kern.num_threads				 integer       no
     kern.num_vnodes				 integer       no
     kern.nx					 integer       yes
     kern.osrelease				 string        no
     kern.osrevision				 integer       no
     kern.ostype				 string        no
     kern.osversion				 string        yes
     kern.posix1version 			 integer       no
     kern.procname				 string        yes
     kern.safeboot				 integer       no
     kern.saved_ids				 integer       no
     kern.secure_kernel 			 integer       no
     kern.securelevel				 integer       yes
     kern.singleuser				 integer       no
     kern.sleeptime				 struct        no
     kern.slide 				 integer       no
     kern.stack_depth_max			 integer       no
     kern.stack_size				 integer       no
     kern.sugid_coredump			 integer       yes
     kern.sugid_scripts 			 integer       yes
     kern.symfile				 string        no
     kern.usrstack				 integer       no
     kern.usrstack64				 integer       no
     kern.uuid					 string        no
     kern.version				 string        no
     kern.waketime				 struct        no
     machdep.cpu.address_bits.physical		 integer       no
     machdep.cpu.address_bits.virtual		 integer       no
     machdep.cpu.brand				 integer       no
     machdep.cpu.brand_string			 string        no
     machdep.cpu.cache.L2_associativity 	 integer       no
     machdep.cpu.cache.linesize 		 integer       no
     machdep.cpu.cache.size			 integer       no
     machdep.cpu.core_count			 integer       no
     machdep.cpu.cores_per_package		 integer       no
     machdep.cpu.extfamily			 integer       no
     machdep.cpu.extfeature_bits		 integer       no
     machdep.cpu.extfeatures			 string        no
     machdep.cpu.extmodel			 integer       no
     machdep.cpu.family 			 integer       no
     machdep.cpu.feature_bits			 integer       no
     machdep.cpu.features			 string        no
     machdep.cpu.leaf7_feature_bits		 integer       no
     machdep.cpu.leaf7_features 		 string        no
     machdep.cpu.logical_per_package		 integer       no
     machdep.cpu.max_basic			 integer       no
     machdep.cpu.max_ext			 integer       no
     machdep.cpu.microcode_version		 integer       no
     machdep.cpu.model				 integer       no
     machdep.cpu.processor_flag 		 integer       no
     machdep.cpu.signature			 integer       no
     machdep.cpu.stepping			 integer       no
     machdep.cpu.thread_count			 integer       no
     machdep.cpu.tlb.data.large 		 integer       no
     machdep.cpu.tlb.data.large_level1		 integer       no
     machdep.cpu.tlb.data.small 		 integer       no
     machdep.cpu.tlb.data.small_level1		 integer       no
     machdep.cpu.tlb.inst.large 		 integer       no
     machdep.cpu.tlb.inst.small 		 integer       no
     machdep.cpu.tlb.shared			 integer       no
     machdep.cpu.ucupdate			 integer       yes
     machdep.cpu.vendor 			 string        no
     machdep.cpu.xsave.extended_state		 integer       no
     machdep.tsc.deep_idle_rebase		 integer       yes
     machdep.tsc.frequency			 integer       no
     machdep.tsc.nanotime.generation		 integer       no
     machdep.tsc.nanotime.shift 		 integer       no
     net.inet.ip.forwarding			 integer       yes
     net.inet.ip.portrange.first		 integer       yes
     net.inet.ip.portrange.hifirst		 integer       yes
     net.inet.ip.portrange.hilast		 integer       yes
     net.inet.ip.portrange.last 		 integer       yes
     net.inet.ip.portrange.lowfirst		 integer       yes
     net.inet.ip.portrange.lowlast		 integer       yes
     net.inet.ip.redirect			 integer       yes
     net.inet.ip.ttl				 integer       yes
     net.inet.udp.checksum			 integer       yes
     net.inet.udp.maxdgram			 integer       yes
     vm.loadavg 				 struct        no
     vm.swapusage				 struct        no
     user.bc_base_max				 integer       no
     user.bc_dim_max				 integer       no
     user.bc_scale_max				 integer       no
     user.bc_string_max 			 integer       no
     user.coll_weights_max			 integer       no
     user.cs_path				 string        no
     user.expr_nest_max 			 integer       no
     user.line_max				 integer       no
     user.posix2_c_bind 			 integer       no
     user.posix2_c_dev				 integer       no
     user.posix2_char_term			 integer       no
     user.posix2_fort_dev			 integer       no
     user.posix2_fort_run			 integer       no
     user.posix2_localedef			 integer       no
     user.posix2_sw_dev 			 integer       no
     user.posix2_upe				 integer       no
     user.posix2_version			 integer       no
     user.re_dup_max				 integer       no
     user.stream_max				 integer       no
     user.tzname_max				 integer       no

FILES
     <sys/sysctl.h>	   definitions for top level identifiers, second level
			   kernel and hardware identifiers, and user level
			   identifiers
     <sys/socket.h>	   definitions for second level network identifiers
     <sys/gmon.h>	   definitions for third level profiling identifiers
     <vm/vm_param.h>	   definitions for second level virtual memory identi-
			   fiers
     <netinet/in.h>	   definitions for third level Internet identifiers
			   and fourth level IP identifiers
     <netinet/icmp_var.h>  definitions for fourth level ICMP identifiers
     <netinet/udp_var.h>   definitions for fourth level UDP identifiers

EXAMPLES
     For example, to retrieve the maximum number of processes allowed in the
     system, one would use the following request:

	   sysctl kern.maxproc

     To set the maximum number of processes allowed per uid to 1000, one would
     use the following request:

	   sysctl kern.maxprocperuid=1000

     Information about the system clock rate may be obtained with:

	   sysctl kern.clockrate

     Information about the load average history may be obtained with:

	   sysctl vm.loadavg

     More variables than these exist, and the best and likely only place to
     search for their deeper meaning is undoubtedly the source where they are
     defined.

COMPATIBILITY
     The -w option has been deprecated and is silently ignored.

SEE ALSO
     sysctl(3), sysctl.conf(5)

HISTORY
     A sysctl utility first appeared in 4.4BSD.

     In FreeBSD 2.2, sysctl was significantly remodeled.

BSD			       January 17, 2011 			   BSD
","# sysctl

> Access kernel state information.

- Show all available variables and their values:

`sysctl -a`

- Show Apple model identifier:

`sysctl -n hw.model`

- Show CPU model:

`sysctl -n machdep.cpu.brand_string`

- Show available CPU features (MMX, SSE, SSE2, SSE3, AES, etc):

`sysctl -n machdep.cpu.features`

- Set a changeable kernel state variable:

`sysctl -w {{section.tunable}}={{value}}`
"
carthage,,,,"# carthage

> A dependency management tool for Cocoa applications.

- Download the latest version of all dependencies mentioned in Cartfile, and build them:

`carthage update`

- Update dependencies, but only build for iOS:

`carthage update --platform ios`

- Update dependencies, but don't build any of them:

`carthage update --no-build`

- Download and rebuild the current version of dependencies (without updating them):

`carthage bootstrap`

- Rebuild a specific dependency:

`carthage build {{dependency}}`
"
feh,,,,"# feh

> Lightweight image viewing utility.

- View images locally or using a URL:

`feh {{path/to/images}}`

- View images recursively:

`feh --recursive {{path/to/images}}`

- View images without window borders:

`feh --borderless {{path/to/images}}`

- Exit after the last image:

`feh --cycle-once {{path/to/images}}`

- Set the slideshow cycle delay:

`feh --slideshow-delay {{seconds}} {{path/to/images}}`

- Set your wallpaper (centered, filled, maximized, scaled or tiled):

`feh --bg-{{center|fill|max|scale|tile}} {{path/to/image}}`
"
scutil,,,"
SCUTIL(8)		  BSD System Manager's Manual		     SCUTIL(8)

NAME
     scutil -- Manage system configuration parameters

SYNOPSIS
     scutil
     scutil --prefs [preference-file]
     scutil -r [-W] { nodename | address | local-address remote-address }
     scutil -w dynamic-store-key [-t timeout]
     scutil --get pref
     scutil --set pref [newval]
     scutil --dns
     scutil --proxy
     scutil --nc nc-arguments

DESCRIPTION
     Invoked with no options, scutil provides a command line interface to the
     ""dynamic store"" data maintained by configd(8).  Interaction with this
     data (using the SystemConfiguration.framework SCDynamicStore APIs) is
     handled with a set of commands read from standard input.  A list of the
     available commands is available by entering the help directive.

     The --prefs option provides a command line interface to the [raw] stored
     preference data.  Interaction with this data (using the SystemConfigura-
     tion.framework SCPreferences APIs) is handled with a set of commands read
     from standard input.  A list of the available commands is availble by
     entering the help directive.

     The -r option provides a means of checking the network reachability of a
     host, an IP address, or a pair of local and remote IP addresses.  Network
     ""reachability"" is a term that indicates whether network communication is
     possible between the current host and the specified host.

     The -w option provides a means of checking for (and optionally waiting
     for the creation of or posting of a notification to) a dynamic store key.

     The --get and --set options provide a means of reporting and updating a
     select group of persistent system preferences.

     The --dns option reports the current DNS configuration.  The first listed
     resolver(5) configuration is considered to be the ""default"" configura-
     tion.  Additional ""supplemental"" configurations follow.  Those containing
     a ""domain"" name will be used for queries matching the specified domain.
     Those without will be used as a ""default"" configuration in addition to
     the first listed.

     The --proxy option reports the current system proxy configuration.

     The --nc option provides a set of commands for monitoring and interacting
     with VPN connections.  Use --nc help for a full list of commands.

OPTIONS
     -r [-W] { nodename | address | local-address remote-address }
	 Check the network reachability of the specified host name, IP
	 address, or a pair of local and remote IP addresses.  One or more of
	 the following strings will be reported to standard output.

	 Not Reachable	       The specified nodename/address cannot be
			       reached using the current network configura-
			       tion.

	 Reachable	       The specified nodename/address can be reached
			       using the current network configuration.

	 Transient Connection  The specified nodename/address can be reached
			       via a transient (e.g. PPP) connection.

	 Connection Required   The specified nodename/address can be reached
			       using the current network configuration but a
			       connection must first be established.  As an
			       example, this status would be returned for a
			       dialup connection that was not currently active
			       but could handle network traffic for the target
			       system.

	 Connection Automatic  The specified nodename/address can be reached
			       using the current network configuration but a
			       connection must first be established.  Any
			       traffic directed to the specified name/address
			       will initiate the connection.

	 Local Address	       The specified nodename/address is one associ-
			       ated with a network interface on the system.

	 Directly Reachable Addresss
			       Network traffic to the specified node-
			       name/address will not go through a gateway but
			       is routed directly to one of the interfaces on
			       the system.

	 The reachability can also be monitored by specifying the -W (watch)
	 option.  This will result in the current status being reported as
	 well as the status when/if the network configuration changes.

	 A zero exit status will be returned when the reachability status is
	 reported correctly.  A non-zero exit status will be returned if
	 errors are detected with an error reported to standard error.

     -w dynamic-store-key [-t timeout]
	 Check if the specified key exists in the ""dynamic store"" data main-
	 tained by configd(8).	If present, scutil will return with a zero
	 exit status.  If not present, scutil will wait for the specified time
	 for data to be associated with or a notification to be posted using
	 the key.  A non-zero exit status will be returned if the key was not
	 created/posted within the specified time.

	 scutil will wait indefinitely if a timeout of 0 seconds is specified.
	 The default timeout is 15 seconds.

     --get pref
	 Retrieves the specified preference.  The current value will be
	 reported on standard output.

	 Supported preferences include:

	       ComputerName   The user-friendly name for the system.

	       LocalHostName  The local (Bonjour) host name.

	       HostName       The name associated with hostname(1) and
			      gethostname(3).

     --set pref [newval]
	 Updates the specified preference with the new value.  If the new
	 value is not specified on the command line then it will be read from
	 standard input.

	 Supported preferences include: ComputerName LocalHostName HostName

	 The --set option requires super-user access.

     --dns
	 Reports the current DNS configuration.

     --proxy
	 Reports the current proxy configuration.

     --nc nc-arguments
	 Provides a set of commands for monitoring and interacting with VPN
	 connections. Use --nc help for a full list of commands.

SEE ALSO
     configd(8)

HISTORY
     The scutil command appeared in Mac OS X Public Beta.

Mac OS X		       January 23, 2008 		      Mac OS X
","# scutil

> Manage system configuration parameters.
> Necessitates to be root when setting configuration.

- Display DNS Configuration:

`scutil --dns`

- Display proxy configuration:

`scutil --proxy`

- Get computer name:

`scutil --get ComputerName`

- Set computer name:

`sudo scutil --set ComputerName {{computer_name}}`

- Get hostname:

`scutil --get HostName`

- Set hostname:

`scutil --set HostName {{hostname}}`
"
spotify,https://github.com/hnarayanan/shpotify,"













GitHub - hnarayanan/shpotify: A command-line interface to Spotify








































Skip to content













                Sign up
              
















                    Why GitHub?
                    




Features →

Code review
Project management
Integrations
Actions
Packages
Security
Team management
Hosting
Mobile


Customer stories →
Security →





Team


Enterprise




                    Explore
                    





Explore GitHub →

Learn & contribute

Topics
Collections
Trending
Learning Lab
Open source guides

Connect with others

Events
Community forum
GitHub Education
GitHub Stars program





Marketplace




                    Pricing
                    




Plans →

Compare plans
Contact Sales


Nonprofit →
Education →






























        In this repository
      

        All GitHub
      
↵


      Jump to
      ↵






No suggested jump to results















        In this repository
      

        All GitHub
      
↵


      Jump to
      ↵















        In this repository
      

        All GitHub
      
↵


      Jump to
      ↵






 



          Sign in
        

              Sign up
            



















hnarayanan

/

shpotify







    Watch
 
      21
    




      Star


      1.6k
    




          Fork


        143
      





        A command-line interface to Spotify
      



harishnarayanan.org/projects/





1.6k
        stars
 

143
        forks
 




      Star





    Watch









Code

 



Issues
21
 



Pull requests
17
 



Actions

 



Security

 



Insights

 
 




More

 




                    Code
 


                    Issues
 


                    Pull requests
 


                    Actions
 


                    Security
 


                    Insights
 


 










          Dismiss
        
Join GitHub today
GitHub is home to over 50 million developers working together to host and review code, manage projects, and build software together.
Sign up










master














2
branches



8
tags




    Go to file






      Code
      
 








  Clone






            HTTPS
 
            GitHub CLI
 









      Use Git or checkout with SVN using the web URL.
    









      Work fast with our official CLI.
      Learn more.
    







                Open with GitHub Desktop
 



                Download ZIP
 



Launching GitHub Desktop
If nothing happens, download GitHub Desktop and try again.
Go back


Launching GitHub Desktop
If nothing happens, download GitHub Desktop and try again.
Go back


Launching Xcode
If nothing happens, download Xcode and try again.
Go back


Launching Visual Studio
If nothing happens, download the GitHub extension for Visual Studio and try again.
Go back









Latest commit






 




hnarayanan

Merge pull request #130 from willhaslett/constantize-vol-increment



…



fdfc962

May 3, 2020





Merge pull request #130 from willhaslett/constantize-vol-increment

Added constant that defines percent change for vol

fdfc962



Git stats





185
commits







Files
Permalink


  
    Failed to load latest commit information.

 


Type
Name
Latest commit message
Commit time






README.md



Update copyright year



Mar 4, 2020







spotify



Added constant that defines percent change for vol



May 2, 2020





        View code
      






        README.md
      


shpotify
shpotify is a simple Bash/Apple script to control
Spotify from the command line on a Mac.
If you find this interesting, you should follow me on
Twitter to learn about the other
things I do.
Installation
Download and install the Spotify
desktop application if you haven’t already.
With Homebrew
The easiest way to install shpotify is by using the Homebrew package
manager:
brew install shpotify

Manual installation
If you don’t use Homebrew, you can install the script manually by
following a few simple steps:


Fetch a copy of this repository, either with git or download the
zip archive.


Navigate to the folder where you fetched the repository (unzip if
needed) and make sure the file called spotify is executable:
cd shpotify
chmod +x spotify



Copy the file spotify to a convenient location in your PATH, or
set your PATH to include the folder where the file is located.


Connecting to Spotify’s API
shpotify needs to connect to Spotify’s API in order to find music by
name. It is very likely you want this feature!
To get this to work, you first need to sign up (or into) Spotify’s
developer site and create an Application. Once you’ve
done so, you can find its Client ID and Client Secret values and
enter them into your shpotify config file at ${HOME}/.shpotify.cfg.
Be sure to quote your values and don’t add any extra spaces. When
done, it should look like the following (but with your own values):
CLIENT_ID=""abc01de2fghijk345lmnop""
CLIENT_SECRET=""qr6stu789vwxyz""

Usage
With shpotify you can control Spotify with the following commands:
spotify play                       Resumes playback where Spotify last left off.
spotify play <song name>           Finds a song by name and plays it.
spotify play album <album name>    Finds an album by name and plays it.
spotify play artist <artist name>  Finds an artist by name and plays it.
spotify play list <playlist name>  Finds a playlist by name and plays it.
spotify play uri <uri>             Play songs from specific uri.

spotify next                       Skips to the next song in a playlist.
spotify prev                       Returns to the previous song in a playlist.
spotify replay                     Replays the current track from the beginning.
spotify pos <time>                 Jump to a specific time (in seconds) in the current song.
spotify pause                      Pauses (or resumes) Spotify playback.
spotify stop                       Stops playback.
spotify quit                       Stops playback and quits Spotify.

spotify vol up                     Increases the volume by 10%.
spotify vol down                   Decreases the volume by 10%.
spotify vol <amount>               Sets the volume to an amount between 0 and 100.
spotify vol [show]                 Shows the current volume.

spotify status                     Shows the play status, including the current song details.
spotify status artist              Shows the currently playing artist.
spotify status album               Shows the currently playing album.
spotify status track               Shows the currently playing track.

spotify share                      Displays the current song's Spotify URL and URI.
spotify share url                  Displays the current song's Spotify URL and copies it to the clipboard.
spotify share uri                  Displays the current song's Spotify URI and copies it to the clipboard.

spotify toggle shuffle             Toggles shuffle playback mode.
spotify toggle repeat              Toggles repeat playback mode.

Authors and contributing
shpotify is primarily written and maintained by Harish
Narayanan.
Since it’s an open source project, it contains numerous contributions
from many helpful people, including:

Jorge Colindres
Thomas Pritchard
iLan Epstein
Gabriele Bonetti
Sean Heller
Eric Martin
Peter Fonseca

If you’re interested in contributing too, please consider addressing
some of the issues people have previously
reported and
submitting a pull
request. Thank
you!
Copyright and license
Copyright (c) 2012–2020 Harish Narayanan.
Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the ""Software""), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:
The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.
THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.








About

      A command-line interface to Spotify
    



harishnarayanan.org/projects/


Topics



  applescript


  bash


  spotify


  shell


  utility


  music


  command-line


  macos



Resources



      Readme
 






    Releases
      8





2.1: Merge pull request #116 from dmofot/playlist_fix

          Latest
 
Apr 29, 2019

 

        + 7 releases







    Packages 0


        No packages published 













    Contributors 24





 



 



 



 



 



 



 



 



 



 



 



      + 13 contributors





Languages








Shell
100.0%















© 2020 GitHub, Inc.
Terms
Privacy
Security
Status
Help





Contact GitHub
Pricing
API
Training
Blog
About











    You can’t perform that action at this time.
  


















You signed in with another tab or window. Reload to refresh your session.
You signed out in another tab or window. Reload to refresh your session.







",,"# spotify

> A command-line interface to Spotify.
> More information: <https://github.com/hnarayanan/shpotify>.

- Find a song by name and play it:

`spotify play {{song_name}}`

- Find a playlist by name and play it:

`spotify play list {{playlist_name}}`

- Pause (or resume) playback:

`spotify pause`

- Skip to the next song in a playlist:

`spotify next`

- Change volume:

`spotify vol {{up|down|value}}`

- Show the playback status and song details:

`spotify status`
"
hexdump,,,"
HEXDUMP(1)		  BSD General Commands Manual		    HEXDUMP(1)

NAME
     hexdump -- ASCII, decimal, hexadecimal, octal dump

SYNOPSIS
     hexdump [-bcCdovx] [-e format_string] [-f format_file] [-n length]
	     [-s skip] file ...

DESCRIPTION
     The hexdump utility is a filter which displays the specified files, or
     the standard input, if no files are specified, in a user specified for-
     mat.

     The options are as follows:

     -b      One-byte octal display.  Display the input offset in hexadecimal,
	     followed by sixteen space-separated, three column, zero-filled,
	     bytes of input data, in octal, per line.

     -C      Canonical hex+ASCII display.  Display the input offset in hexa-
	     decimal, followed by sixteen space-separated, two column, hexa-
	     decimal bytes, followed by the same sixteen bytes in %_p format
	     enclosed in ``|'' characters.

     -c      One-byte character display.  Display the input offset in hexadec-
	     imal, followed by sixteen space-separated, three column, space-
	     filled, characters of input data per line.

     -d      Two-byte decimal display.	Display the input offset in hexadeci-
	     mal, followed by eight space-separated, five column, zero-filled,
	     two-byte units of input data, in unsigned decimal, per line.

     -e format_string
	     Specify a format string to be used for displaying data.

     -f format_file
	     Specify a file that contains one or more newline separated format
	     strings.  Empty lines and lines whose first non-blank character
	     is a hash mark (#) are ignored.

     -n length
	     Interpret only length bytes of input.

     -o      Two-byte octal display.  Display the input offset in hexadecimal,
	     followed by eight space-separated, six column, zero-filled, two
	     byte quantities of input data, in octal, per line.

     -s offset
	     Skip offset bytes from the beginning of the input.  By default,
	     offset is interpreted as a decimal number.  With a leading 0x or
	     0X, offset is interpreted as a hexadecimal number, otherwise,
	     with a leading 0, offset is interpreted as an octal number.
	     Appending the character b, k, m, or g to offset causes it to be
	     interpreted as a multiple of 512, 1024, 1048576, or 1073741824,
	     respectively.

     -v      Cause hexdump to display all input data.  Without the -v option,
	     any number of groups of output lines, which would be identical to
	     the immediately preceding group of output lines (except for the
	     input offsets), are replaced with a line comprised of a single
	     asterisk.

     -x      Two-byte hexadecimal display.  Display the input offset in hexa-
	     decimal, followed by eight, space separated, four column, zero-
	     filled, two-byte quantities of input data, in hexadecimal, per
	     line.

     For each input file, hexdump sequentially copies the input to standard
     output, transforming the data according to the format strings specified
     by the -e and -f options, in the order that they were specified.

   Formats
     A format string contains any number of format units, separated by white-
     space.  A format unit contains up to three items: an iteration count, a
     byte count, and a format.

     The iteration count is an optional positive integer, which defaults to
     one.  Each format is applied iteration count times.

     The byte count is an optional positive integer.  If specified it defines
     the number of bytes to be interpreted by each iteration of the format.

     If an iteration count and/or a byte count is specified, a single slash
     must be placed after the iteration count and/or before the byte count to
     disambiguate them.  Any whitespace before or after the slash is ignored.

     The format is required and must be surrounded by double quote ("" "")
     marks.  It is interpreted as a fprintf-style format string (see
     fprintf(3)), with the following exceptions:

	   o   An asterisk (*) may not be used as a field width or precision.

	   o   A byte count or field precision is required for each ``s'' con-
	       version character (unlike the fprintf(3) default which prints
	       the entire string if the precision is unspecified).

	   o   The conversion characters ``h'', ``l'', ``n'', ``p'' and ``q''
	       are not supported.

	   o   The single character escape sequences described in the C stan-
	       dard are supported:

		     NUL		  \0
		     <alert character>	  \a
		     <backspace>	  \b
		     <form-feed>	  \f
		     <newline>		  \n
		     <carriage return>	  \r
		     <tab>		  \t
		     <vertical tab>	  \v

     The hexdump utility also supports the following additional conversion
     strings:

     _a[dox]	 Display the input offset, cumulative across input files, of
		 the next byte to be displayed.  The appended characters d, o,
		 and x specify the display base as decimal, octal or hexadeci-
		 mal respectively.

     _A[dox]	 Identical to the _a conversion string except that it is only
		 performed once, when all of the input data has been pro-
		 cessed.

     _c 	 Output characters in the default character set.  Nonprinting
		 characters are displayed in three character, zero-padded
		 octal, except for those representable by standard escape
		 notation (see above), which are displayed as two character
		 strings.

     _p 	 Output characters in the ASCII character set.	Non-ASCII
		 characters are displayed as a single ``.''.

     _u 	 Output US ASCII characters, with the exception that control
		 characters are displayed using the following, lower-case,
		 names.  Characters greater than 0xff, hexadecimal, are dis-
		 played as hexadecimal strings.

		 000 NUL  001 SOH  002 STX  003 ETX  004 EOT  005 ENQ
		 006 ACK  007 BEL  008 BS   009 HT   00A LF   00B VT
		 00C FF   00D CR   00E SO   00F SI   010 DLE  011 DC1
		 012 DC2  013 DC3  014 DC4  015 NAK  016 SYN  017 ETB
		 018 CAN  019 EM   01A SUB  01B ESC  01C FS   01D GS
		 01E RS   01F US   0FF DEL

     The default and supported byte counts for the conversion characters are
     as follows:

	   %_c, %_p, %_u, %c	   One byte counts only.

	   %d, %i, %o, %u, %X, %x  Four byte default, one, two and four byte
				   counts supported.

	   %E, %e, %f, %G, %g	   Eight byte default, four and twelve byte
				   counts supported.

     The amount of data interpreted by each format string is the sum of the
     data required by each format unit, which is the iteration count times the
     byte count, or the iteration count times the number of bytes required by
     the format if the byte count is not specified.

     The input is manipulated in ``blocks'', where a block is defined as the
     largest amount of data specified by any format string.  Format strings
     interpreting less than an input block's worth of data, whose last format
     unit both interprets some number of bytes and does not have a specified
     iteration count, have the iteration count incremented until the entire
     input block has been processed or there is not enough data remaining in
     the block to satisfy the format string.

     If, either as a result of user specification or hexdump modifying the
     iteration count as described above, an iteration count is greater than
     one, no trailing whitespace characters are output during the last itera-
     tion.

     It is an error to specify a byte count as well as multiple conversion
     characters or strings unless all but one of the conversion characters or
     strings is _a or _A.

     If, as a result of the specification of the -n option or end-of-file
     being reached, input data only partially satisfies a format string, the
     input block is zero-padded sufficiently to display all available data
     (i.e., any format units overlapping the end of data will display some
     number of the zero bytes).

     Further output by such format strings is replaced by an equivalent number
     of spaces.  An equivalent number of spaces is defined as the number of
     spaces output by an s conversion character with the same field width and
     precision as the original conversion character or conversion string but
     with any ``+'', `` '', ``#'' conversion flag characters removed, and ref-
     erencing a NULL string.

     If no format strings are specified, the default display is a one-byte
     hexadecimal display.

DIAGNOSTICS
     The hexdump utility exits 0 on success, and >0 if an error occurs.

EXAMPLES
     Note that the following format strings, used with -e, must be enclosed in
     single quotes.

     Display the input in perusal format:

	   ""%06.6_ao ""	12/1 ""%3_u ""
	   ""\t\t"" ""%_p ""
	   ""\n""

     Implement the -x option:

	   ""%07.7_Ax\n""
	   ""%07.7_ax  "" 8/2 ""%04x "" ""\n""

SEE ALSO
     gdb(1), od(1)

BSD				 July 10, 2004				   BSD
","# hexdump

> An ASCII, decimal, hexadecimal, octal dump.

- Print the hexadecimal representation of a file:

`hexdump {{file}}`

- Display the input offset in hexadecimal and its ASCII representation in two columns:

`hexdump -C {{file}}`

- Display the hexadecimal representation of a file, but interpret only n bytes of the input:

`hexdump -C -n{{number_of_bytes}} {{file}}`
"
brew-cask,https://github.com/Homebrew/homebrew-cask,"













GitHub - Homebrew/homebrew-cask: 🍻 A CLI workflow for the administration of macOS applications distributed as binaries








































Skip to content













                Sign up
              
















                    Why GitHub?
                    




Features →

Code review
Project management
Integrations
Actions
Packages
Security
Team management
Hosting
Mobile


Customer stories →
Security →





Team


Enterprise




                    Explore
                    





Explore GitHub →

Learn & contribute

Topics
Collections
Trending
Learning Lab
Open source guides

Connect with others

Events
Community forum
GitHub Education
GitHub Stars program





Marketplace




                    Pricing
                    




Plans →

Compare plans
Contact Sales


Nonprofit →
Education →






























        In this repository
      

        All GitHub
      
↵


      Jump to
      ↵






No suggested jump to results















        In this repository
      

        All GitHub
      
↵


      Jump to
      ↵















        In this repository
      

        All GitHub
      
↵


      Jump to
      ↵






 



          Sign in
        

              Sign up
            



















Homebrew

/

homebrew-cask








          Sponsor
        






              Sponsor Homebrew/homebrew-cask
            












    Watch
 
      302
    




      Star


      17.5k
    




          Fork


        8.6k
      





🍻 A CLI workflow for the administration of macOS applications distributed as binaries
      



brew.sh





            BSD-2-Clause License
        




17.5k
        stars
 

8.6k
        forks
 




      Star





    Watch









Code

 



Issues
33
 



Pull requests
11
 



Actions

 



Security

 



Insights

 
 




More

 




                    Code
 


                    Issues
 


                    Pull requests
 


                    Actions
 


                    Security
 


                    Insights
 


 










          Dismiss
        
Join GitHub today
GitHub is home to over 50 million developers working together to host and review code, manage projects, and build software together.
Sign up










master














2
branches



114
tags




    Go to file






      Code
      
 








  Clone






            HTTPS
 
            GitHub CLI
 









      Use Git or checkout with SVN using the web URL.
    









      Work fast with our official CLI.
      Learn more.
    







                Open with GitHub Desktop
 



                Download ZIP
 



Launching GitHub Desktop
If nothing happens, download GitHub Desktop and try again.
Go back


Launching GitHub Desktop
If nothing happens, download GitHub Desktop and try again.
Go back


Launching Xcode
If nothing happens, download Xcode and try again.
Go back


Launching Visual Studio
If nothing happens, download the GitHub extension for Visual Studio and try again.
Go back









Latest commit



 
 
Git stats





116,668
commits







Files
Permalink


  
    Failed to load latest commit information.

 


Type
Name
Latest commit message
Commit time






.github



Add missing quotes. (#89856)



Sep 24, 2020







Casks



Update calibre from 4.23.0 to 5.0.0 (#89865)



Sep 25, 2020







cmd



Run `brew style` instead of `brew cask style`. (#89816)



Sep 24, 2020







developer



Run `brew style` instead of `brew cask style`. (#89816)



Sep 24, 2020







doc



adding_a_cask.md: remove alehouse reference (#89644)



Sep 22, 2020







.editorconfig



add .editorconfig file



Sep 8, 2015







.gitattributes



Create .gitattributes



Sep 21, 2015







.gitignore



Ignore vendored bundler dependencies



Aug 3, 2016







CONTRIBUTING.md



brew bump-cask-pr above cask-repair (#89077)



Sep 11, 2020







LICENSE



LICENSE: 2013 (#42767)



Jan 15, 2018







README.md



README.md: change wording on cask requests (#78719)



Mar 15, 2020







USAGE.md



USAGE.md: remove note on being safe to let an app update itself (#72166)



Nov 7, 2019







tap_migrations.json



Move `java` to homebrew/core. (#72284)



Sep 15, 2020





        View code
      






        README.md
      








Homebrew Cask
“To install, drag this icon…” no more!
Homebrew Cask extends Homebrew and brings its elegance, simplicity, and speed to the installation and management of GUI macOS applications such as Atom and Google Chrome.
We do this by providing a friendly CLI workflow for the administration of macOS applications distributed as binaries.

Let’s try it!
To start using Homebrew Cask, you just need Homebrew installed.

Slower, now:
$ brew cask install atom
==> Satisfying dependencies
==> Downloading https://github.com/atom/atom/releases/download/v1.35.1/atom-mac.zip
==> Downloading from https://github-production-release-asset-2e65be.s3.amazonaws.co
######################################################################## 100.0%
==> Verifying SHA-256 checksum for Cask 'atom'.
==> Installing Cask atom
==> Moving App 'Atom.app' to '/Applications/Atom.app'.
==> Linking Binary 'apm' to '/usr/local/bin/apm'.
==> Linking Binary 'atom.sh' to '/usr/local/bin/atom'.
🍺  atom was successfully installed!

And there we have it. Atom installed with one quick command: no clicking, no dragging, no dropping.
Learn More

Find basic documentation on using Homebrew Cask in USAGE.md
Want to contribute a Cask? Awesome! See CONTRIBUTING.md
Want to hack on our code? Also awesome! See hacking.md
More project-related details and discussion are available in the documentation

Reporting bugs
If you ignore this guide, your issue may be closed without review.
Before reporting a bug, run brew update-reset && brew update and try your command again. This is a fix-all that will reset the state of all your taps, ensuring the problem isn’t an outdated setup on your side.
If your issue persists, search for it before opening a new one. If you find an open issue and have any new information, add it in a comment. If you find a closed issue, try the solutions there.
If the issue is still not solved, see the guides for common problems:

Examples of common errors and their solutions
curl error
Permission denied error
Checksum does not match error
source is not there error
wrong number of arguments error
The app can’t be opened because it is from an unidentified developer
My problem isn’t listed

Requests

Issues requesting new casks will be closed. If you want a cask added to the main repositories, submit a pull request.
For a feature request, use this template.

Questions? Wanna chat?
We’re really rather friendly! Here are the best places to talk about the project:

Open an issue.
Join us on discourse.brew.sh (forum)

License
Code is under the BSD 2 Clause (NetBSD) license








About

🍻 A CLI workflow for the administration of macOS applications distributed as binaries
    



brew.sh


Topics



  homebrew


  cask



Resources



      Readme
 
License



        BSD-2-Clause License
    







    Releases
      114





v0.60.1

          Latest
 
Jan 11, 2016

 

        + 113 releases





Sponsor this project




 


 





patreon.com/homebrew







https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&hosted_button_id=V6ZE57MJRYC8L







https://github.com/homebrew/brew/#donations




  Learn more about GitHub Sponsors







    Packages 0


        No packages published 













    Contributors 5,000+





 



 



 



 



 



 



 



 



 



 



 



      + 6,410 contributors





Languages










Ruby
98.4%





Shell
1.4%





Other
0.2%















© 2020 GitHub, Inc.
Terms
Privacy
Security
Status
Help





Contact GitHub
Pricing
API
Training
Blog
About











    You can’t perform that action at this time.
  


















You signed in with another tab or window. Reload to refresh your session.
You signed out in another tab or window. Reload to refresh your session.







",,"# brew cask

> Package manager for macOS applications distributed as binaries.
> More information: <https://github.com/Homebrew/homebrew-cask>.

- Search for formulas and casks:

`brew search {{text}}`

- Install a cask:

`brew cask install {{cask_name}}`

- List all installed casks:

`brew cask list`

- List installed casks that have newer versions available:

`brew cask outdated`

- Upgrade an installed cask (if no cask name is given, all installed casks are upgraded):

`brew cask upgrade {{cask_name}}`

- Uninstall a cask:

`brew cask uninstall {{cask_name}}`

- Uninstall a cask and remove related settings and files:

`brew cask zap {{cask_name}}`

- Display information about a given cask:

`brew cask info {{cask_name}}`
"
whence,,,,"# whence

> A zsh builtin to indicate how a given command would be interpreted.

- Interpret {{command}}, with expansion if defined as an `alias` (similar to the `command -v` builtin):

`whence {{command}}`

- Display type of {{command}}, with location if defined as a function, or binary (equivalent to the `type` and `command -V` builtins):

`whence -v {{command}}`

- Same as above, except display content of shell functions instead of location (equivalent to `which` builtin):

`whence -c {{command}}`

- Same as above, but show all occurrences on command path (equivalent to the `where` builtin):

`whence -ca {{command}}`

- Search only the `PATH` for {{command}}, ignoring builtins, aliases or shell functions (equivalent to the `where` command):

`whence -p {{command}}`
"
imgcat,,,,"# imgcat

> A utility to display images directly on the command line.
> Requires a compatible terminal such as iTerm2.

- Display an image on the command line:

`imgcat {{filename}}`
"
lldb,,,"
LLDB(1) 		  BSD General Commands Manual		       LLDB(1)

NAME
     lldb -- The debugger

SYNOPSIS
     lldb [-hvdexw] [-a arch] [-c core-file] [-l script-language]
	  [-s lldb-commands] [-n process-name] [-p pid] [[--] <PROGRAM-ARG1>
	  <PROGRAM-ARG2> ...]

DESCRIPTION
     lldb is the command line interface for the LLDB debugger library.	lldb
     can debug C, C++, Objective-C, Objective-C++ and Swift programs.

     The following options are available:

     -h, --help
	     Prints out the usage information for the lldb debugger.  The
	     --help text may be more up-to-date and authoritative than the
	     command line options described in this man page.

     -v, --version
	     Prints out the version number of the lldb debugger.

     -a, --arch arch
	     Specifies which architecture lldb will use when launching the
	     specified program (assuming the provided executable is built for
	     multiple architectures.)

     -f, --file filename
	     Specifies the executable file that lldb will be launching /
	     attaching to.

     -n, --attach-name process-name
	     Specifies the name of a currently-running process to attach to.
	     (or the name of a process to wait for if -w is used.)

     -w, --wait-for
	     When used in concert with -n process-name, indicates that lldb
	     should wait for a new process of that name to be started -- and
	     attach to it as early in the process-launch as possible.

     -p, --attach-pid pid
	     Specifies a currently running process that lldb should attach to.

     -c, --core core-file
	     Specifies the core file to examine.

     -l, --script-language language
	     Tells the debugger to use the specified scripting language for
	     user-defined scripts, rather than the default.  Valid scripting
	     languages that can be specified include Python, Perl, Ruby and
	     Tcl.  Currently only the Python extensions have been implemented.

     -d, --debug
	     Tells the debugger to print out extra information for debugging
	     itself.

     -s, --source filename
	     Tells lldb to read in and execute the file ""filename"", which
	     should contain lldb commands.

     -e, --editor
	     Instructs lldb to open source files using the host's ""external
	     editor"" mechanism.

     -x, --no-lldbinit
	     Do not automatically parse any '.lldbinit' files.

	     (If you do not provide -f then the first argument will be the
	     file to be debugged so 'lldb -- <filename> [<ARG1> [<ARG2>]]'
	     also works.  Remember to end the options with ""--"" if any of your
	     arguments have a ""-"" in them.)

USING LLDB
     In lldb there is a help command which can be used to find descriptions
     and examples of all lldb commands.  To get help on ""breakpoint set"" you
     would type ""help breakpoint set"".

     There is also an apropos command which will search the help text of all
     commands for a given term -- this is useful for locating a command by
     topic.  For instance, ""apropos breakpoint"" will list any command that has
     the word ""breakpoint"" in its help text.

FILES
     lldb will read settings/aliases/commands from three files at startup, if
     they exist.

     First, it will read a ~/.lldbinit-debugger command file.  If you are
     using the lldb command line interface, this is ~/.lldbinit-lldb.  If you
     are using lldb inside a GUI debugger like Xcode this will be
     ~/.lldbinit-Xcode.  This is a useful place to put settings that you want
     to apply only when a given lldb command interpreter is used.

     Second, ~/.lldbinit is read.

     Third, an .lldbinit file in the current working directory (where lldb is
     started) will be read.

SEE ALSO
     The LLDB project page http://lldb.llvm.org/ has many different resources
     for lldb users -- the gdb/lldb command equivalence page
     http://lldb.llvm.org/lldb-gdb.html can be especially helpful for users
     coming from gdb.

BUGS
     To report bugs, please visit http://llvm.org/bugs/

AUTHOR
     Maintained by the LLDB Team, http://lldb.llvm.org/

BSD			       December 16, 2015			   BSD
","# lldb

> The LLVM Low-Level Debugger.

- Debug an executable:

`lldb {{executable}}`

- Attach `lldb` to a running process with a given PID:

`lldb -p {{pid}}`

- Wait for a new process to launch with a given name, and attach to it:

`lldb -w -n {{process_name}}`
"
hdiutil,,,"
HDIUTIL(1)		  BSD General Commands Manual		    HDIUTIL(1)

NAME
     hdiutil -- manipulate disk images (attach, verify, create, etc)

SYNOPSIS
     hdiutil verb [options]

DESCRIPTION
     hdiutil uses the DiskImages framework to manipulate disk images.  Common
     verbs include attach, detach, verify, create, convert, and compact.

     The rest of the verbs are currently: help, info, burn, checksum, chpass,
     erasekeys, unflatten, flatten, imageinfo, isencrypted, mountvol, unmount,
     plugins, udifrez, udifderez, internet-enable, resize, segment,
     makehybrid, and pmap.

BACKGROUND
     Disk images are data containers that emulate disks.  Like disks, they can
     be partitioned and formatted.  Many common uses of disk images blur the
     distinction between the disk image container and its content, but this
     distinction is critical to understanding how disk images work.  The terms
     ""attach"" and ""detach"" are used to distinguish the way disk images are
     connected to and disconnected from a system.  ""Mount"" and ""unmount"" are
     the parallel filesystems options.

     For example, when you double-click a disk image in the macOS Finder, two
     separate things happen.  First, the image is ""attached"" to the system
     just like an external drive.  Then, the kernel and Disk Arbitration probe
     the new device for recognized file structures.  If any are discovered
     that should be mounted, the associated volumes will mount and appear on
     the desktop.

     When using disk images, always consider whether an operation applies to
     the blocks of the disk image container or to the (often file-oriented)
     content of the image.  For example, hdiutil verify verifies that the
     blocks stored in a read-only disk image have not changed since it was
     created.  It does not check whether the filesystem stored within the
     image is self-consistent (as diskutil verifyVolume would). On the other
     hand, hdiutil create -srcfolder creates a disk image container, puts a
     filesystem in it, and then copies the specified files to the new filesys-
     tem.

COMMON OPTIONS
     The following option descriptions apply to all verbs:

     -verbose be verbose: produce extra progress output and error diagnostics.
	      This option can help the user decipher why a particular opera-
	      tion failed.  At a minimum, the probing of any specified images
	      will be detailed.

     -quiet   close stdout and stderr, leaving only hdiutil's exit status to
	      indicate success or failure.  No /dev entries or mount points
	      will be printed.	-debug and -verbose disable -quiet.

     -debug   be very verbose.	This option is good if a large amount of
	      progress information is needed.  As of Mac OS X 10.6, -debug
	      enables -verbose.

     Many hdiutil verbs understand the following options:

     -plist	     provide result output in plist format.  Other programs
		     invoking hdiutil are expected to use -plist rather than
		     try to parse the human-readable output.  The usual output
		     is consistent but generally unstructured.

     -puppetstrings  provide progress output that is easy for another program
		     to parse.	PERCENTAGE outputs can include the value -1
		     which means hdiutil is performing an operation that will
		     take an indeterminate amount of time to complete.	Any
		     program trying to interpret hdiutil's progress should use
		     -puppetstrings.

     -srcimagekey key=value
		     specify a key/value pair for the disk image recognition
		     system.  (-imagekey is normally a synonym)

     -tgtimagekey key=value
		     specify a key/value pair for any image created.
		     (-imagekey is only a synonym if there is no input image).

     -encryption [AES-128|AES-256]
		     specify a particular type of encryption or, if not speci-
		     fied, the default encryption algorithm.  As of OS X 10.7,
		     the default algorithm is the AES cipher running in CBC
		     mode on 512-byte blocks with a 128-bit key.

     -stdinpass      read a null-terminated passphrase from standard input.
		     If the standard input is a tty, the passphrase will be
		     read with readpassphrase(3).  Otherwise, the password is
		     read from stdin.  -stdinpass replaces -passphrase which
		     has been deprecated.  -passphrase is insecure because its
		     argument appears in the output of ps(1) where it is visi-
		     ble to other users and processes on the system.  See
		     EXAMPLES.

     -agentpass      force the default behavior of prompting for a passphrase.
		     Useful with -pubkey to create an image protected by both
		     a passphrase and a public key.

     -recover keychain_file
		     specify a keychain containing the secret corresponding to
		     the certificate specified with -certificate when the
		     image was created.

     -certificate cert_file
		     specify a secondary access certificate for an encrypted
		     image.  cert_file must be DER-encoded certificate data,
		     which can be created by Keychain Access or openssl(1).

     -pubkey PK1,PK2,...,PKn
		     specify a list of public keys, identified by their hexa-
		     decimal hashes, to be used to protect the encrypted image
		     being created.

     -cacert cert    specify a certificate authority certificate.  cert can be
		     either a PEM file or a directory of certificates pro-
		     cessed by c_rehash(1).  See also --capath and --cacert in
		     curl(1).

     -insecurehttp   ignore SSL host validation failures.  Useful for self-
		     signed servers for which the appropriate certificates are
		     unavailable or if access to a server is desired when the
		     server name doesn't match what is in the certificate.

     -shadow [shadowfile]
		     Use a shadow file in conjunction with the data in the
		     primary image file.  This option prevents modification of
		     the original image and allows read-only images to be
		     attached read/write.  When blocks are being read from the
		     image, blocks present in the shadow file override blocks
		     in the base image.  All data written to an attached
		     device will be redirected to the shadow file.  If not
		     specified, shadowfile defaults to image.shadow. If the
		     shadow file does not exist, it is created.  hdiutil verbs
		     taking images as input accept -shadow, -cacert, and
		     -insecurehttp.

     Verbs that create images automatically append the correct extension to
     any filenames if the extension is not already present.  The creation
     engine also examines the filename extension of the provided filename and
     changes its behavior accordingly.	For example, a sparse bundle image can
     be created without specifying -type SPARSEBUNDLE simply by appending the
     .sparsebundle extension to the provided filename.

VERBS
     Each verb is listed with its description and individual arguments.  Argu-
     ments to the verbs can be passed in any order.  A sector is 512 bytes.

     help	display minimal usage information for each verb.  hdiutil verb
		-help will provide basic usage information for that verb.

     attach image [options]
		attach a disk image as a device.  attach will return informa-
		tion about an already-attached image as if it had attached it.
		If any associated volumes are unmounted (and mounting is not
		suppressed), they will be remounted.  mount is a poorly-named
		synonym for attach.  See BACKGROUND.

		By default, the system applies additional mount options to
		filesystems backed by untrusted devices like disk images:
		options like nosuid and quarantine.  PERMISSIONS VS. OWNERS
		explains the behavior of such filesystems and EXAMPLES shows
		how to override some of the default behavior.

		The output of attach has been stable since Mac OS X 10.0
		(though it was called hdid(8) then) and is intended to be pro-
		gram-readable.	It consists of the /dev node, a tab, a content
		hint (if applicable), another tab, and a mount point (if any
		filesystems were mounted).  Because content hints are derived
		from the partition data, GUID Partition Table types may leak
		through.  Common GUIDs such as ""48465300-0000-11AA-
		AA11-0030654"" are mapped to their human-readable counterparts
		(here ""Apple_HFS"").

		Common options: -encryption, -stdinpass, -recover, -imagekey,
		-shadow, -puppetstrings, and -plist.

		Options:
		-readonly	   force the resulting device to be read-only
		-readwrite	   attempt to override the DiskImages frame-
				   work's decision to attach a particular
				   image read-only.  For example, -readwrite
				   can be used to modify the HFS+ filesystem
				   on a HFS+/ISO hybrid CD image.
		-nokernel	   attach with a helper process.  This is
				   (again) the default as of Mac OS X 10.5.
		-kernel 	   attempt to attach this image without a
				   helper process; fail if unsupported.  Only
				   UDRW, UDRO, UDZO, ULFO, and UDSP images are
				   supported in-kernel.  Encryption and HTTP
				   are supported by the kernel driver.
		-notremovable	   prevent this image from being detached.
				   Only root can use this option.  A reboot is
				   necessary to cleanly detach an image
				   attached with -notremovable.

		-mount required|optional|suppressed
				   indicate whether filesystems in the image
				   should be mounted or not.  The default is
				   required (attach will fail if no filesys-
				   tems mount).
		-nomount	   identical to -mount suppressed.
		-mountroot path    mount volumes on subdirectories of path
				   instead of under /Volumes.  path must
				   exist.  Full mount point paths must be less
				   than MNAMELEN characters (increased from 90
				   to 1024 in Mac OS X 10.6).
		-mountrandom path  like -mountroot, but mount point directory
				   names are randomized with mkdtemp(3).
		-mountpoint path   assuming only one volume, mount it at path
				   instead of in /Volumes. See fstab(5) for
				   ways a system administrator can make par-
				   ticular volumes automatically mount in par-
				   ticular filesystem locations by editing the
				   file /etc/fstab.
		-nobrowse	   render any volumes invisible in applica-
				   tions such as the macOS Finder.
		-owners on|off	   specify that owners on any filesystems be
				   honored or not.
		-drivekey key=value
				   specify a key/value pair to be set on the
				   device in the IOKit registry.
		-section subspec
				   Attach a subsection of a disk image.
				   subspec is any of <offset>, <first-last>,
				   or <start,count> in 0-based sectors.
				   Ranges are inclusive.

		The following options have corresponding elements in the
		com.apple.frameworks.diskimages preferences domain and thus
		can be rendered in both the positive and the negative to over-
		ride any existing preferences.

		-[no]verify	  do [not] verify the image.  By default,
				  hdiutil attach attempts to intelligently
				  verify images that contain checksums before
				  attaching them.  If hdiutil can write to an
				  image it has verified, attach will store an
				  attribute with the image so that it will not
				  be verified again unless its timestamp
				  changes.  To maintain backwards compatibil-
				  ity, hdid(8) does not attempt to verify
				  images before attaching them.
				  Preferences keys: skip-verify, skip-verify-
				  remote, skip-verify-locked, skip-previously-
				  verified
		-[no]ignorebadchecksums
				  specify whether bad checksums should be
				  ignored.  The default is to abort when a bad
				  checksum is detected.
				  Preferences key: ignore-bad-checksums
		-[no]idme	  do [not] perform IDME actions on IDME
				  images.  IDME actions are not performed by
				  default.
				  Preferences key: skip-idme
		-[no]idmereveal   do [not] reveal (in the Finder) the results
				  of IDME processing.
				  Preferences key: skip-idme-reveal
		-[no]idmetrash	  do [not] put IDME images in the trash after
				  processing.
				  Preferences key: skip-idme-trash
		-[no]autoopen	  do [not] auto-open volumes (in the Finder)
				  after attaching an image.  By default, dou-
				  ble-clicking a read-only disk image causes
				  the resulting volume to be opened in the
				  Finder.  hdiutil defaults to -noautoopen.
		-[no]autoopenro   do [not] auto-open read-only volumes.
				  Preferences key: auto-open-ro-root
		-[no]autoopenrw   do [not] auto-open read/write volumes.
				  Preferences key: auto-open-rw-root
		-[no]autofsck	  do [not] force automatic file system check-
				  ing before mounting a disk image.  By
				  default, only quarantined images (e.g. down-
				  loaded from the Internet) that have not pre-
				  viously passed fsck are checked.
				  Preferences key: auto-fsck

     detach dev_name [-force]
		detach a disk image and terminate any associated process.
		dev_name is a partial /dev node path (e.g. ""disk1"").  As of
		Mac OS X 10.4, dev_name can also be a mountpoint.  If Disk
		Arbitration is running, detach will use it to unmount any
		filesystems and detach the image.  If not, detach will attempt
		to unmount any filesystems and detach the image directly
		(using the `eject' ioctl).  If Disk Arbitration is not run-
		ning, it may be necessary to unmount the filesystems with
		umount(8) before detaching the image.  eject is a synonym for
		detach.  In common operation, detach is very similar to
		diskutil(8)'s eject.

		Options:
		-force	 ignore open files on mounted volumes, etc.

     verify image [options]
		compute the checksum of a ""read-only"" or ""compressed"" image
		and verify it against the value stored in the image.
		Read/write images don't contain checksums and thus can't be
		verified.  verify accepts the common options -encryption,
		-stdinpass, -srcimagekey, -puppetstrings, and -plist.

     create size_spec image
		create a new image of the given size or from the provided
		data.  If image already exists, -ov must be specified or
		create will fail.  To make a cross-platform CD or DVD, use
		makehybrid instead.  See also EXAMPLES below.

		The size specified is the size of the image to be created.
		Filesystem and partition layout overhead (80 sectors for the
		default GPTSPUD layout on Intel machines) may not be available
		for the filesystem and user data in the image.
		Size specifiers:
		-size ??b|??k|??m|??g|??t|??p|??e
			   Specify the size of the image in the style of
			   mkfile(8) with the addition of tera-, peta-, and
			   exa-bytes sizes (note that 'b' specifies a number
			   of sectors, not bytes).  The larger sizes are use-
			   ful for large sparse images.
		-sectors sector_count
			   Specify the size of the image file in 512-byte sec-
			   tors.
		-megabytes size
			   Specify the size of the image file in megabytes
			   (1024*1024 bytes).

		-srcfolder source
			   copies file-by-file the contents of source into
			   image, creating a fresh (theoretically defrag-
			   mented) filesystem on the destination.  The result-
			   ing image is thus recommended for use with asr(8)
			   since it will have a minimal amount of unused
			   space.  Its size will be that of the source data
			   plus some padding for filesystem overhead.  The
			   filesystem type of the image volume will match that
			   of the source as closely as possible unless over-
			   ridden with -fs.  Other size specifiers, such as
			   -size, will override the default size calculation
			   based on the source content, allowing for more or
			   less free space in the resulting filesystem.
			   -srcfolder can be specified more than once, in
			   which case the image volume will be populated at
			   the top level with a copy of each specified
			   filesystem object.  -srcdir is a synonym.
		-srcdevice device
			   specifies that the blocks of device should be used
			   to create a new image.  The image size will match
			   the size of device.	resize can be used to adjust
			   the size of resizable filesystems and writable
			   images.  Both -srcdevice and -srcfolder can run
			   into errors if there are bad blocks on a disk.  One
			   way around this problem is to write over the files
			   in question in the hopes that the drive will remap
			   the bad blocks.  Data will be lost, but the image
			   creation operation will subsequently succeed.
			   Filesystem options (like -fs, -volname, -stretch,
			   or -size) are invalid and ignored when using
			   -srcdevice.

		Common options: -encryption, -stdinpass, -certificate,
		-pubkey, -imagekey, -tgtimagekey, -puppetstrings, and -plist.

		-imagekey di-sparse-puma-compatible=TRUE and -imagekey
		di-shadow-puma-compatible=TRUE will create, respectively,
		sparse and shadow images that can be attached on Mac OS X
		10.1.  -imagekey encrypted-encoding-version can select between
		version 1 and version 2 of the encrypted encoding.  The frame-
		work preferences have a corresponding key to change the
		default for all images.  Version 2 is not compatible with Mac
		OS X 10.2 but is more robust for SPARSE (UDSP) images.	Ver-
		sion 1 is the default for non-sparse images.  As of Mac OS X
		10.4.7, sparse encrypted images always use version 2 and as of
		Mac OS X 10.5, all encrypted images default to version 2.

		General options:
		-align alignment
			  specifies a size to which the final data partition
			  will be aligned.  The default is 4K.

		-type UDIF|SPARSE|SPARSEBUNDLE
			  -type is particular to create and is used to specify
			  the format of empty read/write images.  It is inde-
			  pendent of -format which is used to specify the
			  final read-only image format when populating an
			  image with pre-existing content.

			  UDIF is the default type.  If specified, a UDRW of
			  the specified size will be created.  SPARSE creates
			  a UDSP: a read/write single-file image which expands
			  as is is filled with data.  SPARSEBUNDLE creates a
			  UDSB: a read/write image backed by a directory bun-
			  dle.

			  By default, UDSP images grow one megabyte at a time.
			  Introduced in 10.5, UDSB images use 8 MB band files
			  which grow as they are written to.  -imagekey
			  sparse-band-size=size can be used to specify the
			  number of 512-byte sectors that will be added each
			  time the image grows.  Valid values for SPARSEBUNDLE
			  range from 2048 to 16777216 sectors (1 MB to 8 GB).

			  The maximum size of a SPARSE image is 128 petabytes;
			  the maximum for SPARSEBUNDLE is just under 8
			  exabytes (2^63 - 512 bytes).	The amount of data
			  that can be stored in either type of sparse image is
			  additionally bounded by the filesystem in the image
			  and by any partition map.  compact can reclaim
			  unused bands in sparse images backing APFS or HFS+
			  filesystems.	resize will only change the virtual
			  size of a sparse image.  See also USING PERSISTENT
			  SPARSE IMAGES below.

		-fs filesystem
			  where filesystem is one of several options such as
			  HFS+, HFS+J (JHFS+), HFSX, JHFS+X, APFS, FAT32,
			  ExFAT, or UDF.  A full list of supported filesystems
			  can be found in create -help.  -fs causes a filesys-
			  tem of the specified type to be written to the
			  image.  -fs may change the partition scheme and type
			  appropriately.  -fs will not make any size adjust-
			  ments: if the image is the wrong size for the speci-
			  fied filesystem, create will fail.  -fs is invalid
			  and ignored when using -srcdevice.
		-volname volname
			  The newly-created filesystem will be named volname.
			  The default depends the filesystem being used; The
			  default volume name in both HFS+ and APFS is
			  `untitled'.  -volname is invalid and ignored when
			  using -srcdevice.
		-uid uid  the root of the newly-created volume will be owned
			  by the given numeric user id.  99 maps to the magic
			  `unknown' user (see PERMISSIONS VS. OWNERS).
		-gid gid  the root of the newly-created volume will be owned
			  by the given numeric group id.  99 maps to
			  `unknown'.
		-mode mode the root of the newly-created volume will have mode
			  (in octal) mode.  The default mode is determined by
			  the filesystem's newfs unless -srcfolder is speci-
			  fied, in which case the default mode is derived from
			  the specified filesystem object.
		-[no]autostretch
			  do [not] suppress automatically making backwards-
			  compatible stretchable volumes when the volume size
			  crosses the auto-stretch-size threshold (default:
			  256 MB).  See also asr(8).
		-stretch max_stretch
			  -stretch initializes HFS+ filesystem data such that
			  it can later be stretched on older systems (which
			  could only stretch within predefined limits) using
			  hdiutil resize or by asr(8).	max_stretch is speci-
			  fied like -size.  -stretch is invalid and ignored
			  when using -srcdevice.
		-fsargs newfs_args
			  additional arguments to pass to whichever newfs pro-
			  gram is implied by -fs.  As an example with HFS+,
			  newfs_hfs(8) has a number of options that can con-
			  trol the amount of space used by the filesystem's
			  data structures.
		-layout layout
			  Specify the partition layout of the image.  layout
			  can be anything supported by MediaKit.framework.
			  NONE creates an image with no partition map.	When
			  such an image is attached, a single /dev entry will
			  be created (e.g. /dev/disk1).

			  `SPUD' causes a DDM and an Apple Partition Scheme
			  partition map with a single entry to be written.
			  `GPTSPUD' creates a similar image but with a GUID
			  Partition Scheme map instead.  When attached, multi-
			  ple /dev entries will be created, with either slice
			  1 (GPT) or slice 2 (APM) as the data partition.
			  (e.g. /dev/disk1, /dev/disk1s1, /dev/disk1s2).

			  Unless overridden by -fs, the default layout is
			  `GPTSPUD' (PPC systems used `SPUD' prior to Mac OS X
			  10.6).  Other layouts include `MBRSPUD' and `ISOCD'.
			  create -help lists all supported layouts.
		-library bundle
			  specify an alternate layout library.	The default is
			  MediaKit's MKDrivers.bundle.
		-partitionType partition_type
			  Change the type of partition in a single-partition
			  disk image.  The default is Apple_HFS unless -fs
			  implies otherwise.

		-ov	  overwrite an existing file.  The default is not to
			  overwrite existing files.
		-attach   attach the image after creating it.  If no filesys-
			  tem is specified via -fs, the attach will fail per
			  the default attach -mount required behavior.

		Image from source options (for -srcfolder and -srcdevice):
		-format format Specify the final image format.	The default
			       when a source is specified is UDZO.  format can
			       be any of the format parameters used by
			       convert.

		Options specific to -srcdevice:
		-segmentSize size_spec
			       Specify that the image should be written in
			       segments no bigger than size_spec (which fol-
			       lows -size conventions).

		Options specific to -srcfolder:
		-[no]crossdev	do [not] cross device boundaries on the source
				filesystem.
		-[no]scrub	do [not] skip temporary files when imaging a
				volume.  Scrubbing is the default when the
				source is the root of a mounted volume.
				Scrubbed items include trashes, temporary
				directories, swap files, etc.
		-[no]anyowners	do not fail if the user invoking hdiutil can't
				ensure correct file ownership for the files in
				the image.
		-skipunreadable skip files that can't be read by the copying
				user and don't authenticate.
		-[no]atomic	do [not] copy files to a temporary location
				and then rename them to their destination.
				Atomic copies are the default.	Non-atomic
				copying may be slightly faster.
		-copyuid user	perform the copy as the given user.  Requires
				root privilege.  If user can't read or create
				files with the needed owners, -anyowners or
				-skipunreadable must be used to prevent the
				operation from failing.

		By default, create -srcfolder attempts to maintain the permis-
		sions present in the source directory.	It prompts for authen-
		tication if it detects an unreadable file, a file owned by
		someone other than the user creating the image, or a SGID file
		in a group that the copying user is not in.

     convert image -format format -o outfile
		convert image to type format and write the result to outfile.

		As with create, the correct filename extension will be added
		only if it isn't part of the provided name.  Format is one of:

		      UDRW - UDIF read/write image
		      UDRO - UDIF read-only image
		      UDCO - UDIF ADC-compressed image
		      UDZO - UDIF zlib-compressed image
		      ULFO - UDIF lzfse-compressed image (OS X 10.11+ only)
		      UDBZ - UDIF bzip2-compressed image (Mac OS X 10.4+ only)
		      UDTO - DVD/CD-R master for export
		      UDSP - SPARSE (grows with content)
		      UDSB - SPARSEBUNDLE (grows with content; bundle-backed)
		      UFBI - UDIF entire image with MD5 checksum
		      UDRo - UDIF read-only (obsolete format)
		      UDCo - UDIF compressed (obsolete format)
		      RdWr - NDIF read/write image (deprecated)
		      Rdxx - NDIF read-only image (Disk Copy 6.3.3 format;
		      deprecated)
		      ROCo - NDIF compressed image (deprecated)
		      Rken - NDIF compressed (obsolete format)
		      DC42 - Disk Copy 4.2 image (obsolete format)

		In addition to the compression offered by some formats, the
		UDIF and NDIF read-only formats skip unused space in HFS,
		APFS, ExFAT, and MS-DOS (FAT, FAT32) filesystems.  For UDZO,
		-imagekey zlib-level=value allows the zlib compression level
		to be specified a la gzip(1).  The default compression level
		is 1 (fastest).

		Common options: -encryption, -stdinpass, -certificate,
		-srcimagekey, -tgtimagekey, -shadow and related,
		-puppetstrings, and -plist.

		Other options:
		-align alignment
			     The default is 4 (2K).
		-pmap	     add partition map.
			     When converting an NDIF to any variety of UDIF,
			     or when converting an unpartitioned UDIF, the
			     default is true.
		-segmentSize [size_spec]
			     Specify segmentation into size_spec-sized seg-
			     ments as outfile is being written.  The default
			     size_spec when -segmentSize is specified alone is
			     2*1024*1024 (1 GB worth of sectors) for UDTO
			     images and 4*1024*1024 (2 GB segments) for all
			     other image types.  size_spec can also be speci-
			     fied ??b|??k|??m|??g|??t|??p|??e like create's
			     -size flag.
		-tasks task_count
			     When converting an image into a compressed for-
			     mat, specify the number of threads to use for the
			     compression operation.  The default is the number
			     of processors active in the current system.

     burn image
		Burn image to optical media in an attached burning device.  In
		all cases, a prompt for media will be printed once an appro-
		priate drive has been found.  Common options: -shadow and
		related, -srcimagekey, -encryption, -puppetstrings, and
		-stdinpass.

		Other options:
		-device 	   specify a device to use for burning.  See
				   -list.
		-testburn	   don't turn on laser (laser defaults to on).
		-anydevice	   explicitly allow burning to devices not
				   qualified by Apple (kept for backwards com-
				   patibility as burn will burn to any device
				   by default as of Mac OS X 10.4).

		-[no]eject	   do [not] eject disc after burning. The
				   default is to eject the disc.
		-[no]verifyburn    do [not] verify disc contents after burn.
				   The default is to verify.

		-[no]addpmap	   do [not] add partition map if necessary.
				   Some filesystem types will not be recog-
				   nized when stored on optical media unless
				   they are enclosed in a partition map.  This
				   option will add a partition map to any bare
				   filesystem which needs a partition map in
				   order to be recognized when burned to opti-
				   cal media.  The default is to add the par-
				   tition map if needed.

		-[no]skipfinalfree do [not] skip final free partition.	If
				   there is a partition map on the image spec-
				   ifying an Apple_Free partition as the last
				   partition, that Apple_Free partition will
				   not be burned.  The burned partition map
				   will still reference the empty space.  The
				   default is to skip burning a final free
				   partition.

		-[no]optimizeimage do [not] optimize filesystem for burning.
				   Optimization can reduce the size of an HFS+
				   volume to the size of the data contained on
				   the volume.	This option will change what
				   is burned such that the disc will have a
				   different checksum than the image it came
				   from.  The default is to burn all blocks of
				   the disk image (minus any trailing
				   Apple_Free).

		-[no]forceclose    do [not] force the disc to be closed after
				   burning.  Further burns to the disc will be
				   impossible.	The default is not to close
				   the disc.

		-nounderrun	   Disable the default buffer underrun protec-
				   tion.

		-[no]synthesize    [Don't] Synthesize a hybrid filesystem for
				   the disc.  The default is to create a new
				   (HFS+/ISO) filesystem when burning the
				   source image's blocks would not result in a
				   valid disc.

		-speed x_factor    1, 2, 4, 6, ...  `max'
				   The desired ""x-factor"".  e.g. 8 means the
				   drive will be instructed burn at ""8x
				   speed"".  `max' will cause the burn to pro-
				   ceed at the maximum speed of the drive.
				   `max' is the default speed.	Slower speeds
				   can produce more reliable burns.  The speed
				   factor is relative to the media being
				   burned (e.g.  -speed 2 has a different data
				   rate when used for a DVD burn vs. a CD
				   burn).  Note that some drives have a mini-
				   mum burn speed in which case any slower
				   speed specified will result in a burn at
				   the drive's minimum speed.

		-sizequery	   calculate the size of disc required without
				   burning anything.  The size is returned in
				   sectors.

		-erase		   prompt for optical media (DVD-RW/CD-RW) and
				   then, if the hardware supports it, quickly
				   erase the media.  If an image is specified,
				   it will be burned to the media after the
				   media has been erased.
		-fullerase	   erase all sectors of the disc.  This usu-
				   ally takes quite a bit longer than -erase.
		-list		   list all burning devices, with OpenFirmware
				   paths suitable for -device.

     makehybrid -o image source
		Generate a potentially-hybrid filesystem in a read-only disk
		image using the DiscRecording framework's content creation
		system.  This disk image will represent a data disc.
		drutil(1) can be used to make audio discs.

		source can either be a directory or a disk image.  The gener-
		ated image can later be burned using burn, or converted to
		another read-only format with convert.	By default, the
		filesystem will be readable on most modern computing plat-
		forms.	The generated filesystem is not intended for conver-
		sion to read/write, but can safely have its files copied to a
		read/write filesystem using ditto(8).

		hdiutil supports generating El Torito-style bootable ISO9660
		filesystems, which are commonly used for booting x86-based
		hardware. The specification includes several emulation modes.
		By default, an El Torito boot image emulates either a 1.2MB,
		1.44MB, or 2.88MB floppy drive, depending on the size of the
		image.	Also available are ""No Emulation"" and ""Hard Disk
		Emulation"" modes, which allow the boot image to either be
		loaded directly into memory, or be virtualized as a parti-
		tioned hard disk, respectively. The El Torito options should
		not be used for data CDs.

		Filesystem options:
		-hfs	Generate an HFS+ filesystem.  This filesystem can be
			present on an image simultaneously with an ISO9660 or
			Joliet or UDF filesystem.  On operating systems that
			understand HFS+ as well as ISO9660 and UDF, like Mac
			OS 9 or OS X, HFS+ is usually the preferred filesystem
			for hybrid images.
		-iso	Generate an ISO9660 Level 2 filesystem with Rock Ridge
			extensions.  This filesystem can be present on an
			image simultaneously with an HFS+ or Joliet or UDF
			filesystem.  ISO9660 is the standard cross-platform
			interchange format for CDs and some DVDs, and is
			understood by virtually all operating systems.	If an
			ISO9660 or Joliet filesystem is present on a disk
			image or CD, but not HFS+, OS X will use the ISO9660
			(or Joliet) filesystem.
		-joliet Generate Joliet extensions to ISO9660.	This view of
			the filesystem can be present on an image simultane-
			ously with HFS+, and requires the presence of an
			ISO9660 filesystem.  Joliet supports Unicode file-
			names, but is only supported on some operating sys-
			tems.  If both an ISO9660 and Joliet filesystem are
			present on a disk image or CD, but not HFS+, OS X will
			prefer the Joliet filesystem.
		-udf	Generate a UDF filesystem. This filesystem can be
			present on an image simultaneously with HFS+, ISO9660,
			and Joliet. UDF is the standard interchange format for
			DVDs, although operating system support varies based
			on OS version and UDF version.

		By default, if no filesystem is specified, the image will be
		created with all four filesystems as a hybrid image.  When
		multiple filesystems are selected, the data area of the image
		is shared between all filesystems, and only directory informa-
		tion and volume meta-data are unique to each filesystem.  This
		means that creating a cross-platform ISO9660/HFS+ hybrid has a
		minimal overhead when compared to a single filesystem image.

		Other options (most take a single argument):
		-hfs-blessed-directory Path to directory which should be
				       ""blessed"" for OS X booting on the gen-
				       erated filesystem.  This assumes the
				       directory has been otherwise prepared,
				       for example with bless -bootinfo to
				       create a valid BootX file.  (HFS+
				       only).
		-hfs-openfolder        Path to a directory that will be opened
				       by the Finder automatically.  See also
				       the -openfolder option in bless(8)
				       (HFS+ only).
		-hfs-startupfile-size  Allocate an empty HFS+ Startup File of
				       the specified size, in bytes (HFS+
				       only).

		-abstract-file	       Path to a file in the source directory
				       (and thus the root of the generated
				       filesystem) for use as the
				       ISO9660/Joliet Abstract file
				       (ISO9660/Joliet).
		-bibliography-file     Path to a file in the source directory
				       (and thus the root of the generated
				       filesystem) for use as the
				       ISO9660/Joliet Bibliography file
				       (ISO9660/Joliet).
		-copyright-file        Path to a file in the source directory
				       (and thus the root of the generated
				       filesystem) for use as the
				       ISO9660/Joliet Copyright file
				       (ISO9660/Joliet).
		-application	       Application string (ISO9660/Joliet).
		-preparer	       Preparer string (ISO9660/Joliet).
		-publisher	       Publisher string (ISO9660/Joliet).
		-system-id	       System Identification string
				       (ISO9660/Joliet).
		-keep-mac-specific     Expose Macintosh-specific files (such
				       as .DS_Store) in non-HFS+ filesystems
				       (ISO9660/Joliet).
		-eltorito-boot	       Path to an El Torito boot image within
				       the source directory. By default,
				       floppy drive emulation is used, so the
				       image must be one of 1200KB, 1440KB, or
				       2880KB. If the image has a different
				       size, either -no-emul-boot or
				       -hard-disk-boot must be used to enable
				       ""No Emulation"" or ""Hard Disk Emulation""
				       mode, respectively (ISO9660/Joliet).
		-hard-disk-boot        Use El Torito Hard Disk Emulation mode.
				       The image must represent a virtual
				       device with an MBR partition map and a
				       single partition
		-no-emul-boot	       Use El Torito No Emulation mode. The
				       system firmware will load the number of
				       sectors specified by -boot-load-size
				       and execute it, without emulating any
				       devices (ISO9660/Joliet).
		-no-boot	       Mark the El Torito image as non-
				       bootable. The system firmware may still
				       create a virtual device backed by this
				       data. This option is not recommended
				       (ISO9660/Joliet).
		-boot-load-seg	       For a No Emulation boot image, load the
				       data at the specified segment address.
				       This options is not recommended, so
				       that the system firmware can use its
				       default address (ISO9660/Joliet)
		-boot-load-size        For a No Emulation boot image, load the
				       specified number of 512-byte emulated
				       sectors into memory and execute it. By
				       default, 4 sectors (2KB) will be loaded
				       (ISO9660/Joliet).
		-eltorito-platform     Use the specified numeric platform ID
				       in the El Torito Boot Catalog Valida-
				       tion Entry or Section Header. Defaults
				       to 0 to identify x86 hardware
				       (ISO/Joliet).
		-eltorito-specification For complex layouts involving multiple
				       boot images, a plist-formatted string
				       can be provided, using either OpenStep-
				       style syntax or XML syntax, represent-
				       ing an array of dictionaries. Any of
				       the El Torito options can be set in the
				       sub-dictionaries and will apply to that
				       boot image only. If
				       -eltorito-specification is provided in
				       addition to the normal El Torito com-
				       mand-line options, the specification
				       will be used to populate secondary non-
				       default boot entries.
		-udf-version	       Version of UDF filesystem to generate.
				       This can be either ""1.02"" or ""1.50"".
				       If not specified, it defaults to ""1.50""
				       (UDF).

		-default-volume-name   Default volume name for all filesys-
				       tems, unless overridden.  If not speci-
				       fied, defaults to the last path compo-
				       nent of source.
		-hfs-volume-name       Volume name for just the HFS+ filesys-
				       tem if it should be different (HFS+
				       only).
		-iso-volume-name       Volume name for just the ISO9660
				       filesystem if it should be different
				       (ISO9660 only).
		-joliet-volume-name    Volume name for just the Joliet
				       filesystem if it should be different
				       (Joliet only).
		-udf-volume-name       Volume name for just the UDF filesystem
				       if it should be different (UDF only).

		-hide-all	       A glob expression of files and directo-
				       ries that should not be exposed in the
				       generated filesystems.  The string may
				       need to be quoted to avoid shell expan-
				       sion, and will be passed to glob(3) for
				       evaluation.  Although this option can-
				       not be used multiple times, an arbi-
				       trarily complex glob expression can be
				       used.
		-hide-hfs	       A glob expression of files and directo-
				       ries that should not be exposed via the
				       HFS+ filesystem, although the data may
				       still be present for use by other
				       filesystems (HFS+ only).
		-hide-iso	       A glob expression of files and directo-
				       ries that should not be exposed via the
				       ISO filesystem, although the data may
				       still be present for use by other
				       filesystems (ISO9660 only).  Per above,
				       the Joliet hierarchy will supersede the
				       ISO hierarchy when the hybrid is
				       mounted as an ISO 9660 filesystem on OS
				       X.  Therefore, if Joliet is being gen-
				       erated (the default) -hide-joliet will
				       also be needed to hide the file from
				       mount_cd9660(8).
		-hide-joliet	       A glob expression of files and directo-
				       ries that should not be exposed via the
				       Joliet filesystem, although the data
				       may still be present for use by other
				       filesystems (Joliet only).  Because OS
				       X's ISO 9660 filesystem uses the Joliet
				       catalog if it is available,
				       -hide-joliet effectively supersedes
				       -hide-iso when the resulting filesystem
				       is mounted as ISO on OS X.
		-hide-udf	       A glob expression of files and directo-
				       ries that should not be exposed via the
				       UDF filesystem, although the data may
				       still be present for use by other
				       filesystems (UDF only).
		-only-udf	       A glob expression of objects that
				       should only be exposed in UDF.
		-only-iso	       A glob expression of objects that
				       should only be exposed in ISO.
		-only-joliet	       A glob expression of objects that
				       should only be exposed in Joliet.

		-print-size	       Preflight the data and calculate an
				       upper bound on the size of the image.
				       The actual size of the generated image
				       is guaranteed to be less than or equal
				       to this estimate.
		-plistin	       Instead of using command-line parame-
				       ters, use a standard plist from stan-
				       dard input to specific the parameters
				       of the hybrid image generation.	Each
				       command-line option should be a key in
				       the dictionary, without the leading
				       ""-"", and the value should be a string
				       for path and string arguments, a number
				       for number arguments, and a boolean for
				       toggle options.	The source argument
				       should use a key of ""source"" and the
				       image should use a key of ""output"".

		If a disk image was specified for source, the image will be
		attached and paths will be evaluated relative to the mount-
		point of the image.  No absolute paths can be used in this
		case.  If source is a directory, all argument paths should
		point to files or directories either via an absolute path, or
		via a relative path to the current working directory.

		The volume name options, just like files in the filesystems,
		may need to be mapped onto the legal character set for a given
		filesystem or otherwise changed to obey naming restrictions.
		Use drutil(1) as drutil filename myname to see how a given
		string would be remapped.

		The -abstract-file, -bibliography-file, -and -copyright-file
		must exist directly in the source directory, not a sub-direc-
		tory, and must have an 8.3 name for compatibility with ISO9660
		Level 1.

     compact image [options]
		scans the bands of a sparse (SPARSE or SPARSEBUNDLE) disk
		image containing an APFS or HFS+ filesystem, removing those
		parts of the image which are no longer being used by the
		filesystem.  Depending on the location of files in the hosted
		filesystem, compact may or may not shrink the image.  For
		SPARSEBUNDLE images, completely unused band files are simply
		removed.

		Options:
		-batteryallowed allow compacting on battery power.  SPARSE
				images could be damaged if power is lost dur-
				ing a compact operation.  The default is not
				allowed.

		-sleepallowed	allow machine to idle sleep while compacting,
				which cancels the compact operation.  The
				default is not allowed, which prevents idle
				sleep until compact completes.	User-initiated
				sleep, such as a lid close, will always cancel
				compact.

		Common options: -encryption, -stdinpass, -srcimagekey, -shadow
		and related, -puppetstrings, and -plist.

     info	display information about DiskImages.framework, the disk image
		driver, and any images that are currently attached.  hdiutil
		info accepts -plist.

     checksum image -type type
		Calculate the specified checksum on the image data, regardless
		of image type.

		Common options: -shadow and related, -encryption, -stdinpass,
		-srcimagekey, -puppetstrings, and -plist.

		type is one of:
		      UDIF-CRC32 - CRC-32 image checksum
		      UDIF-MD5 - MD5 image checksum
		      DC42 - Disk Copy 4.2
		      CRC28 - CRC-32 (NDIF)
		      CRC32 - CRC-32
		      MD5 - MD5
		      SHA - SHA
		      SHA1 - SHA-1
		      SHA256 - SHA-256
		      SHA384 - SHA-384
		      SHA512 - SHA-512

     chpass image
		change the passphrase for an encrypted image.  The default is
		to change the password interactively.

		Common options: -recover and -srcimagekey.  The options
		-oldstdinpass and -newstdinpass allow, in the order specified,
		the null-terminated old and new passwords to be read from the
		standard input in the same manner as with -stdinpass.

     erasekeys image
		delete keys used to access an encrypted image, quickly render-
		ing the image inaccessible.  This does not prevent other
		copies of the keys from later being broken and used to decrypt
		the data, such as from a copy or backup of the image.  In
		addition, modern storage systems such as solid state disks do
		not securely overwrite data.  As a result, erasekeys cannot
		protect against all attacks, but it may prevent trivial
		access.

		Common options: -plist and -quiet.

     unflatten image
		unflatten a UDIF disk image, creating an OS 9-style dual-fork
		image file (no XML metadata).  If the resource fork represen-
		tation of the metadata becomes greater than 16 MB, the opera-
		tion will fail with error -39 (""End of fork"").

		Common options: -encryption, -stdinpass, and -srcimagekey.

     flatten image
		Flatten a read-only (or compressed) UDIF disk image into a
		single-fork file.  By default, metadata will be stored both as
		XML (for the kernel's use) and in an embedded resource fork
		(for Mac OS X 10.1 and earlier).

		Common options: -srcimagekey, -encryption, and -stdinpass.
		Since images are created ""flat"" by default, flatten is only
		required if the UDIF has previously been unflattened.

		Other options:
		-noxml	    don't embed XML data for in-kernel attachment.
			    The image will never attach in-kernel.
		-norsrcfork don't embed resource fork data.  The image will
			    not attach on OS X versions prior to Mac OS X
			    10.2.

     fsid image
		Print information about filesystems on a given disk image.
		Per DEVICE SPECIAL FILES, image can be a /dev entry corre-
		sponding to a disk.  More detailed information is presented
		for HFS+ filesystems.

		Common options: -encryption, -stdinpass, -srcimagekey, and
		-shadow and related.

     mountvol dev_name
		mount the filesystem in dev_name using Disk Arbitration (simi-
		lar to diskutil(8)'s mount). XML output is available from
		-plist.  Note that mountvol (rather than mount, though it
		often works in Mac OS X 10.5 and later) is the correct way to
		remount a volume after it has been unmounted by unmount.

		Prior to Mac OS X 10.5, mount/attach would treat a /dev entry
		as a disk image to be attached (creating another /dev entry).
		That behavior was undesirable.

     unmount volume [-force]
		unmount a mounted volume without detaching any associated
		image.	Volume is a /dev entry or mountpoint.  NOTE: unmount
		does NOT detach any disk image associated with the volume.
		Images are attached and detached; volumes are mounted and
		unmounted.  hdiutil mountvol (or diskutil mount) will remount
		a volume that has been unmounted by hdiutil unmount.

		Options:
		-force	 unmount filesystem regardless of open files on that
			 filesystem.  Similar to umount -f.

     imageinfo image [options]
		Print out information about a disk image.

		Options are any of:
		-format   only print out the image format
		-checksum only print out the image checksum

		Common options: -encryption, -stdinpass, -srcimagekey, -shadow
		and related, and -plist.

     isencrypted image
		print a line indicating whether image is encrypted.  If it is,
		additional details are printed.

		Common options: -plist.

     plugins	print information about DiskImages framework plugins.  The
		user, system, local, and network domains are searched for
		plugins (i.e.  ~/Library/Plug-ins/DiskImages,
		/System/Library/Plug-ins/DiskImages,
		/Library/Plug-ins/DiskImages,
		/Network/Library/Plug-ins/DiskImages).

		Common options: -plist.

     internet-enable [-yes] | -no | -query image
		internet-enable is deprecated.	As of OS X 10.7, nothing in OS
		X processes images configured for IDME.

     resize size_spec image
		Resize a disk image or the containers within it.  For an image
		containing a trailing Apple_HFS partition, the default is to
		resize the image container, the partition, and the filesystem
		within it by aligning the end of the hosted structures with
		the end of the image.  hdiutil resize cannot resize filesys-
		tems other than HFS+ and its variants.

		resize can shrink an image so that its HFS+ partition can be
		converted to CD-R/DVD-R format and still be burned.  hdiutil
		resize will not reclaim gaps because it does not move data.
		diskutil(8)'s resize can move filesystem data which can help
		hdiutil resize create a minimally-sized image.	-fsargs can
		also be used to minimize filesystem gaps inside an image.

		resize is limited by the disk image container format (e.g.
		UDSP vs. UDSB), any partition scheme, the hosted filesystem,
		and the filesystem hosting the image.  In the case of HFS+
		inside of GPT inside of a UDRW on HFS+ with adequate free
		space, the limit is approximately 2^63 bytes.  Older images
		created with an APM partition scheme are limited by it to 2TB.
		Before Mac OS X 10.4, resize was limited by how the filesystem
		was created (see hdiutil create -stretch).

		hdiutil burn does not burn Apple_Free partitions at the end of
		the devices, so an image with a resized filesystem can be
		burned to create a CD-R/DVD-R master that contains only the
		actual data in the hosted filesystem (assuming minimal data
		fragmentation).

		Common options: -encryption, -stdinpass, -srcimagekey, -shadow
		and related, and -plist.

		Size specifiers:
		-size ??b|??k|??m|??g|??t|??p|??e
		-sectors sector_count | min
				 Specify the number of 512-byte sectors to
				 which the partition should be resized.  If
				 this falls outside the mininum valid value or
				 space remaining on the underlying file sys-
				 tem, an error will be returned and the parti-
				 tion will not be resized.  min automatically
				 determines the smallest possible size.

		Other options:
		-imageonly	 only resize the image file, not the parti-
				 tion(s) and filesystems inside of it.
		-partitiononly	 only resize a partition / filesystem in the
				 image, not the image.	-partitiononly will
				 fail if the new size won't fit inside the
				 image.  On APM, shrinking a partition results
				 in an explicit Apple_Free entry taking up the
				 remaining space in the image.
		-partitionNumber partitionNumber
				 specifies which partition to resize (UDIF
				 only -- see HISTORY below).  partitionNumber
				 is 0-based, but, per hdiutil pmap, partition
				 0 is the partition map itself.

		-growonly	 only allow the image to grow
		-shrinkonly	 only allow the image to shrink
		-nofinalgap	 allow resize to entirely eliminate the trail-
				 ing free partition in an APM map.  Restoring
				 such images to very old hardware may inter-
				 fere with booting.

		-limits 	 Displays the minimum, current, and maximum
				 sizes (in 512-byte sectors) for the image.
				 In addition to any hosted filesystem con-
				 straints, UDRW images are constrained by
				 available disk space in the filesystem host-
				 ing the image.  -limits does not modify the
				 image.

     segment
		segment -o firstSegname -segmentCount #segs image [opts]
		segment -o firstSegname -segmentSize size image [opts]
		segment an NDIF or UDIF disk image.  Segmented images work
		around limitations in file size which are sometimes imposed by
		filesystems, network protocols, or media.  Note: whether or
		not the segments are encrypted is determined by the options
		passed to segment and not by the state of the source image.

		Common options: -encryption, -stdinpass, -srcimagekey,
		-tgtimagekey, -puppetstrings, and -plist.

		Options:
		-segmentCount segment_count
			      Specify the number of segments.  Only one of
			      -segmentCount or -segmentSize will be honored.
		-segmentSize segment_size
			      Specify the segment size in sectors or in the
			      style of mkfile(8) (here unqualified numbers are
			      still sectors).  If the original image size is
			      not an exact multiple of the segment size, the
			      last segment will be shorter than the others.
			      Only one of -segmentCount or -segmentSize will
			      be honored.  Segmenting read/write (UDRW) images
			      is not supported (as of Mac OS X 10.3).

		-firstSegmentSize segment_size
			      Specify the first segment size in sectors in the
			      same form as for -segmentSize.  Used for multi-
			      CD restores.
		-restricted   Make restricted segments for use in multi-CD
			      restores.
		-ov	      overwrite any existing files.

     pmap [options] image
		display the partition map of an image or device.  By default,
		this report includes starting offsets and significant amounts
		of free space.	image is either a disk image or /dev/disk
		entry (see DEVICE SPECIAL FILES).

		Common options: -encryption, -stdinpass, -srcimagekey, and
		-shadow and related.

		-simple       generate MediaKit's minimal report: basic parti-
			      tion types, names, and sizes in human-readable
			      units.
		-standard     generate MediaKit's standard report, which adds
			      partition offsets and uses 512-byte sectors.
			      This is the default.
		-complete     generate MediaKit's comprehensive report, with
			      end offsets, significant free space, etc.
		-diagnostic   generate MediaKit's diagnostic report, which
			      shows all partition schemes encountered.	Useful
			      for Boot Camp troubleshooting.

		-endoffsets   indicate last block of each partition.
		-nofreespace  suppress all free space reporting.  Not valid
			      with -shims.
		-shims	      report free space < 32 sectors.
		-uuids	      show per-instance UUIDs for each partition.  APM
			      does not store instance UUIDs so these will be
			      randomly generated for APM maps.

     udifrez [options] image
		embed resources (e.g. a software license agreement) in a disk
		image.

		You must specify one of the following options:
		-xml file
		     Copy resources from the XML in file.
		-rsrcfork file
		     Copy resources from file's resource fork.
		-replaceall
		     Delete all pre-existing resources in image.

     udifderez [options] image
		extract resources from image.

		Options:
		-xml	emit XML output (default)
		-rez	emit Rez format output

		Common options: -encryption, -stdinpass, and -srcimagekey.

EXAMPLES
     Verifying:
	   hdiutil verify myimage.img
		 verifies an image against its internal checksum.

     Segmenting:
	   hdiutil segment -segmentSize 10m -o /tmp/aseg 30m.dmg
		 creates aseg.dmg, aseg.002.dmgpart, and aseg.003.dmgpart

     Converting:
	   hdiutil convert master.dmg -format UDTO -o master
		 converts master.dmg to a CD-R export image named master.cdr
	   hdiutil convert /dev/disk1 -format UDRW -o devimage
		 converts the disk /dev/disk1 to a read/write device image
		 file.	authopen(1) will be used if read access to /dev/rdisk1
		 is not available.  Note use of the block-special device.
	   hdiutil convert image.dmg -o image.sparsebundle
		 converts image.dmg to format UDSB by automatically detecting
		 the file extension .sparsebundle.
	   hdiutil convert files.sparsebundle -format UDZO \
	       -imagekey zlib-level=5 -o files
		 converts files.sparsebundle to files.dmg: a read-only, com-
		 pressed disk image using zlib level 5 instead of the default.
	   hdiutil convert stuff.dmg -format UDZO -encryption -o stuff-enc
		 create a copy of stuff.dmg named stuff-enc.dmg which is
		 encrypted with AES-128.

     Burning:
	   hdiutil burn myImage.dmg
		 burns the image to optical media and verifies the burn.
	   hdiutil burn myRawImage.cdr -noverifyburn -noeject
		 burns the image without verifying the burn or ejecting the
		 disc.	Volumes will be mounted after burning.

     Creating a 50 MB read/write encrypted image:
	   hdiutil create -encryption -size 50m e.dmg -fs HFS+J

     Creating a 50 MB read/write encrypted image protected with public key
     only:
	   hdiutil create -encryption -size 50m e.dmg -fs HFS+J \
	       -pubkey F534A3B0C2AEE3B988308CC89AA04ABE7FDB5F30

     Creating a 50 MB read/write encrypted image protected with public key and
     password:
	   hdiutil create -encryption -size 50m e.dmg -fs HFS+J -agentpass \
	       -pubkey F534A3B0C2AEE3B988308CC89AA04ABE7FDB5F30

     Note that these two -pubkey usage examples assume a certificate corre-
     sponding to this public key is currently in the user's keychain or smart
     card.  For additional information on smart card authorization setup see
     sc_auth(8).

     Creating an encrypted single-partition image without user interaction:
	   printf pp|hdiutil create -encryption -stdinpass -size 9m sp.dmg

     Creating a ""1 GB"" SPARSE image (a 1 GB filesystem in a growable file):
	   hdiutil create -type SPARSE -size 1g -fs HFS+J growableTo1g

     Creating a ""1 GB"" SPARSEBUNDLE (a 1 GB filesystem in a growable bundle):
	   hdiutil create -type SPARSEBUNDLE -size 1g -fs HFS+J growableTo1g

     Creating a new mounted volume backed by an image:
	   hdiutil create -volname Dick -size 1.3m -fs HFS+ -attach Moby.dmg

     Attaching an image on a web server to the system, with any writes going
     to a local file:
	   hdiutil attach https://my.webserver.com/master.dmg \
	       -shadow /tmp/mastershadowfile

     Using a shadow file to attach a read-only image read/write to modify it,
     then convert it back to a read-only image. This method eliminates the
     time/space required to convert a image to read/write before modifying it.

	   hdiutil attach -owners on Moby.dmg -shadow
	   /dev/disk2	Apple_partition_scheme
	   /dev/disk2s1 Apple_partition_map
	   /dev/disk2s2 Apple_HFS		/Volumes/Dick

	   ditto /Applications/Preview.app /Volumes/Dick
	   hdiutil detach /dev/disk2
	   hdiutil convert -format UDZO Moby.dmg -shadow

     Creating a RAM-backed device and filesystem:

	   NUMSECTORS=128000	   # a sector is 512 bytes
	   mydev=`hdiutil attach -nomount ram://$NUMSECTORS`
	   newfs_hfs $mydev
	   mkdir /tmp/mymount
	   mount -t hfs $mydev /tmp/mymount

     Using makehybrid to create cross-platform data with files overlapping
     between filesystem views, containing these files:
	   albumlist.txt song2.wma     song4.m4a     song6.mp3	   song8.mp3
	   song1.wma	 song3.m4a     song5.mp3     song7.mp3

	   hdiutil makehybrid -o MusicBackup.iso Music -hfs -iso -joliet \
	       -hide-hfs 'Music/*.wma' -hide-joliet 'Music/{*.m4a,*.mp3}' \
	       -hide-iso 'Music/*.{wma,m4a}'

     will create an image with three filesystems pointing to the same blocks.
     The HFS+ filesystem, typically only visible on Macintosh systems, will
     not include the .wma files, but will show the .m4a and .mp3 files. The
     Joliet filesystem will not show the .m4a and .mp3 files, but will show
     the .wma files. The ISO9660 filesystem, typically the default filesystem
     for optical media on many platforms, will only show the .mp3 files. All
     three filesystems will include the ""albumlist.txt"" files.

     Image from directory:
	   hdiutil create -srcfolder mydir mydir.dmg
		 This method uses the least disk space during image creation,
		 but the resulting image may be slightly less space efficient.

     Image from directory using an intermediate sparse bundle:
	   hdiutil create -srcfolder mydir -format UDSB mydir.sparsebundle
	   hdiutil convert mydir.sparsebundle -format UDZO -o mydir.dmg
		 This method produces space-optimal images, but requires much
		 more disk space during image creation. The intermediate
		 sparse bundle image can be removed after the process is com-
		 plete.

     Manually changing ownership settings of a read-only disk image:
	   hdiutil attach myimage.dmg
	   ...
	   /dev/disk1s2 	   Apple_HFS	     /Volumes/myVolume
	   diskutil unmount disk1s2
	   mkdir /Volumes/myVolume
	   sudo mount -r -t hfs -o owners /dev/disk1s2 /Volumes/myVolume
	   # -o owners is the default for manual mounts

     Forcing a known image to attach:
	   hdiutil attach -imagekey diskimage-class=CRawDiskImage myBlob.bar

ENVIRONMENT
     The following environment variables affect hdiutil and DiskImages:

     com_apple_hdid_verbose
		enable -verbose behavior for attach.

     com_apple_hdid_debug
		enable -debug behavior for attach.

     com_apple_hdid_nokernel
		similar to -nokernel but works even with, for example, create
		-attach.

     com_apple_hdid_kernel
		Make attach behave as if -kernel was passed.  In Mac OS X
		10.4.x, in-kernel was the default behavior for UDRW and SPARSE
		images.  In Mac OS X 10.5 and later, these and other kernel-
		compatible images again default to attaching with a user
		process.  If an image is not ""kernel-compatible"" and in-kernel
		mounting is specified, the attach will fail.  WARNING: ram://
		images use wired memory when attached in-kernel.

     com_apple_diskimages_insecureHTTP
		disable SSL peer verification the same way -insecurehttp does.
		Useful for clients of DiskImages such as asr(8) which don't
		support a similar command line option.

ERRORS
     DiskImages uses many frameworks and can encounter many error codes.  In
     general, it tries to turn these error numbers into localized strings for
     the user.	For background, intro(2) is a good explanation of our primary
     error domain: the BSD errno values.  For debugging, -verbose should gen-
     erally provide enough information to figure out what has gone wrong.  The
     following is a list of interesting errors that hdiutil may encounter:

     No mountable filesystems
			The ""No mountable filesystems"" error from hdiutil
			attach means that no filesystems could be recognized
			or mounted after the disk image was attached.  The
			default behavior in this case is to detach the disk
			image.	See attach for options modifying this behav-
			ior.  This error can occur if the disk image or con-
			tained filesystem is corrupt.  It can also occur if an
			image was created from a block device containing a
			mounted, journaled filesystem (in which case the image
			contains a dirty journal that can't be replayed with-
			out making the image read/write, such as with attach
			-shadow).

     [ENXIO]		Device not configured.	This error is returned explic-
			itly by DiskImages when its kernel driver or framework
			helper cannot be contacted.  It also often shows up
			when a device has been removed while I/O is still
			active.  One common case of the helper not being found
			is when Foundation's Distributed Objects RPC mechanism
			cannot be configured.  D.O. doesn't work under dead
			Mach bootstrap contexts such as can exist in a reat-
			tached screen(1) session.  Root users can take advan-
			tage of StartupItemContext(8) (in /usr/libexec) to
			access the startup item Mach bootstrap context.

     [EINVAL]		Invalid argument.  This error is used in many contexts
			and is often a clue that hdiutil's arguments are sub-
			tly non-sensical (e.g. an invalid layout name passed
			to create -layout).

     [EFBIG]		File too large.  DiskImages reports this error when
			attempting to access a disk image over HTTP that is
			too large for the server to support access via Range
			requests.  Segmented images can sometimes be used to
			work around this limitation of older HTTP servers.
			This error can also occur if an overflow occurs with
			an old-style UDIF resource fork.

     [EAUTH]		Authentication error.  Used by DiskImages when
			libcurl(3) is unable to verify its SSL peer or when
			Security.framework indicates that the user failed to
			enter the correct password.  See -insecurehttp and
			-cacert for more information about verification of SSL
			peers.

     [EBUSY]		Resource busy.	Used if necessary exclusive access
			cannot be obtained.  This error often appears when a
			volume can't be unmounted.  lsof(8) may help determine
			which open files could be causing the error.

     [EAGAIN]		Resource temporarily unavailable.  As of Mac OS X
			10.5, DiskImages uses read/write locks on its image
			files to prevent images from being attached on more
			than one machine at a time (e.g. over the network).
			EAGAIN is returned if the appropriate read or write
			lock can't be obtained.

     EACCES vs. EPERM	EACCES and EPERM are subtly different.	The latter
			""operation not permitted"" tends to refer to an opera-
			tion that cannot be performed, often due to an incor-
			rect effective user ID.  On the other hand, ""permis-
			sion denied"" tends to mean that a particular file
			access mode prevented the operation.

USING PERSISTENT SPARSE IMAGES
     As of Mac OS X 10.5, a more reliable, efficient, and scalable sparse for-
     mat, UDSB (SPARSEBUNDLE), is recommended for persistent sparse images as
     long as a backing bundle (directory) is acceptable.  Mac OS X 10.5 also
     introduced F_FULLFSYNC over AFP (on client and server), allowing proper
     journal flushes for HFS+J-bearing images.	Critical data should never be
     stored in sparse disk images on file servers that don't support F_FULLF-
     SYNC.

     SPARSE (UDSP) images and shadow files were designed for intermediate use
     when creating other images (e.g. UDZO) when final image sizes are
     unknown.  Generally speaking, SPARSE images are not recommended for per-
     sistent storage, though they are relatively safe on Mac OS X 10.3.2 and
     later. On versions earlier than 10.3.2, SPARSE should be avoided in favor
     of UDRW images and resize.  On Mac OS X 10.5 and later, the more robust
     and faster SPARSEBUNDLE type is preferred.

     Note that both sparse formats, UDSP and UDSB, are growable only up to a
     limit: the size parameter specified when they were created. They will
     take up less space on the hosting filesystem if they contain less data
     than their created size, and grow up to that size as data is added.

     If more space is needed than is referenced by the hosted filesystem,
     hdiutil resize or diskutil(8) resize can help to grow or shrink the
     filesystem in an image.  compact reclaims unused space in sparse images.
     Though they request that hosted HFS+ filesystems use a special ""front
     first"" allocation policy, beware that sparse images can enhance the
     effects of any fragmentation in the hosted filesystem.

     To prevent errors when a filesystem inside of a sparse image has more
     free space than the volume holding the sparse image, HFS+ volumes inside
     sparse images will report an amount of free space slightly less than the
     amount of free space on the volume on which image resides.  The image
     filesystem currently only behaves this way as a result of a direct attach
     action and will not behave this way if, for example, the filesystem is
     unmounted and remounted.  Moving the image file to a different volume
     with sufficient free space will allow the image's filesystem to grow to
     its full size.

DEVICE SPECIAL FILES
     Since any /dev entry can be treated as a raw disk image, it is worth not-
     ing which devices can be accessed when and how.  /dev/rdisk nodes are
     character-special devices, but are ""raw"" in the BSD sense and force
     block-aligned I/O.  They are closer to the physical disk than the buffer
     cache.  /dev/disk nodes, on the other hand, are buffered block-special
     devices and are used primarily by the kernel's filesystem code.

     It is not possible to read from a /dev/disk node while a filesystem is
     mounted from it, but anyone with read access to the appropriate
     /dev/rdisk node can use hdiutil verbs such as fsid or pmap with it.
     Beware that information read from a raw device while a filesystem is
     mounted may not be consistent because the consistent data is stored in
     memory or in the filesystem's journal.

     The DiskImages framework will attempt to use authopen(1) to open any
     device which it can't open (due to EACCES) for reading with open(2).
     Depending on session characteristics, this behavior can cause apparent
     hangs while trying to access /dev entries while logged in remotely (an
     authorization panel is waiting on console).

     Generally, the /dev/disk node is preferred for imaging devices (e.g.
     convert or create -srcdevice operations), while /dev/rdisk is usable for
     the quick pmap or fsid.  In particular, converting the blocks of a
     mounted journaled filesystem to a read-only image will prevent the volume
     in the image from mounting (the journal will be permanently dirty).

PERMISSIONS VS. OWNERS
     Some filesystems support permissions including users and groups.  While
     important for security on a managed filesystem, users and groups (""own-
     ers"") pose challenges for unmanaged, shared filesystems such as those
     typically present in disk images.	macOS's solution to this problem is to
     make owners optional, both while creating files and enforcing permis-
     sions.

     By default, unknown HFS+ filesystems on ""external"" devices (including
     disk images) mount with their owners ignored (mount -o noowners).	Nor-
     mally when owners are ignored, the system uses a special _unknown user
     and group to dynamically substitute the current user's identity for any
     owners recorded in the filesystem.  These _unknown owners are even writ-
     ten to the volume when creating new files.  The new files will continue
     to have ""floating"" ownership when mounted with owners honored.  The net
     result is that shared volumes behave as expected regardless of how they
     are accessed.

     The behavior is different when disk images are attached.  With disk
     images, the owner of all files in a filesystem mount for which owners are
     ignored is the user attaching the disk image.  The attaching owner is
     also used when creating new files.

     On modern macOS systems, root (UID 0) can ""see through"" the ""owners
     ignored"" user mappings.  Thus
	   sudo ls -l /Volumes/imageVol
     will show whatever is really stored in the filesystem (possibly _unknown)
     regardless of whether owners are currently being honored on that volume.
     In contrast, non-root users will see themselves any time _unknown is in
     effect, whether the default for the mount when owners are ignored or
     because _unknown is stored on disk.  For disk images, non-root users will
     see owners matching the user that attached the disk image.

     Unlike owners, permissions are never optional.  A non-writable file will
     not be writable just because owners are ignored.  However, a file that is
     writable by its owner will be writable by everyone if _unknown is the
     effective owner of the file for that file.  Because anyone accessing an
     owners-ignored file is treated as the owner, everyone is effectively the
     owner.  Because the default behavior for disk image filesystems is for
     all files to be owned by the user attaching the disk image, other users
     will be treated per the 'group' (if applicable) and 'other' permission
     modes.

     diskutil(8)'s enableOwnership or the Finder's Get Info window can be used
     to configure a system to respect the on-disk owners for a filesystem in
     the future.

COMPATIBILITY
     The DiskImages framework supports a variety of flat-file and dual-fork
     image formats, including read/write, read-only, and read-only compressed
     (which are decompressed in small chunks as I/O requests are made).  It
     automatically decodes AppleSingle and MacBinary file formats and is capa-
     ble of mounting most images directly from http:// URLs.  Because DiskIm-
     ages can make many requests over a single connection, responsiveness can
     be improved by modifying HTTP server settings such as apache's Max-
     KeepAliveRequests and KeepAliveTimeout.

     Mac OS X 10.0 supported the disk images of Disk Copy 6 on Mac OS 9.  OS X
     10.1 added sparse, encrypted, and zlib-compressed images.	These images
     will not be recognized on Mac OS X 10.0 (or will attach read/write, pos-
     sibly allowing for their destruction).  As the sparse, shadow, and
     encrypted formats have evolved, switches have been added to facilitate
     the creation of images that are compatible with older OS versions (at the
     expense of the performance and reliability improvements offered by the
     format enhancements).  In particular, sparse images should not be
     expected to attach on versions of OS X older than that which created
     them.

     With Mac OS X 10.2, the most common image formats went ""in-kernel"" (i.e.
     the DiskImages kernel extension served them without a helper process),
     image meta-data began being stored both as XML and in the embedded
     resource fork, and the default Disk Copy.app ""compressed"" format became
     UDZO (breaking compatibility with 10.0).  Mac OS X 10.4 introduced bzip2
     compression in the UDBZ format which provides smaller images (especially
     when combined with makehybrid) at the expense of backwards compatibility,
     some performance, and kernel compatibility.

     In Mac OS X 10.4.7, the resource forks previously embedded in UDIF images
     were abandoned entirely to avoid metadata length limitations imposed by
     resource fork structures.	As a result, UDIF images created on 10.4.7 and
     later will not, by default, be recognized by either Mac OS X 10.1 or Mac
     OS X 10.0.  flatten can be used to customize the type of metadata stored
     in the image.

     Mac OS X 10.5 introduced sparse bundle images which compact quickly but
     are not recognized by previous OS versions.  Mac OS X 10.6 removed sup-
     port for attaching SPARSEBUNDLE images from network file servers that
     don't support F_FULLFSYNC, although this requirement was relaxed in macOS
     10.12.  OS X 10.7 removed double-click support for images using legacy
     metadata; these can be rehabilitated using flatten and unflatten, or sim-
     ply convert.

     OS X 10.11 introduced lzfse compression in the ULFO format, providing
     faster, more efficient compression and smaller images compared to UDZO.
     These images are also supported in-kernel, but will not work on any ear-
     lier versions of the OS.

     macOS 10.12 included a pre-release version of the Apple File System
     called APFS which was meant for evaluation and development purposes only.
     Files stored in APFS-based images may not be accessible in future
     releases of macOS, and won't work in past ones.  All data to be stored in
     APFS volumes should be backed up prior to using APFS and regularly backed
     up while using APFS.

HISTORY
     Disk images were first invented to electronically store and transmit rep-
     resentations of floppy disks for manufacturing replication.  These images
     of floppies are typically referred to as 'Disk Copy 4.2' images, in ref-
     erence to the application that created and restored them to floppy disks.
     Disk Copy 4.2 images were block-for-block representations of a floppy
     disk, with no notion of compression.  DART is a variant of the Disk Copy
     4.2 format that supported compression.

     NDIF (New Disk Image Format) images were developed to replace the Disk
     Copy 4.2 and DART image formats and to support images larger than a
     floppy disk.  With NDIF and Disk Copy version 6, images could be
     ""attached"" as mass storage devices under Mac OS 9.  Apple Data Compres-
     sion (ADC) -- which carefully optimizes for fast decompression -- was
     used to compress images that were typically created once and restored
     many times during manufacturing.

     UDIF (Universal Disk Image Format) device images picked up where NDIF
     left off, allowing images to represent entire block devices and all the
     data therein: DDM, partition map, disk-based drivers, etc.  For example,
     it can represent bootable CDs which can then be replicated from an image.
     To ensure single-fork files (NDIF was dual-fork), it began embedding its
     resource fork in the data fork.  UDIF is the native image format for OS
     X.

     Raw disk images from other operating systems (e.g. .iso files) will be
     recognized as disk images and can be attached and mounted if macOS recog-
     nizes the filesystems.  They can also be burned with hdiutil burn.

WHAT'S NEW
     macOS 10.12 introduced the pre-release APFS for evaluation (see COMPATI-
     BILITY above).  10.12 also added an option to disable atomic copying dur-
     ing image from folder operations, -noatomic, which may result in slightly
     faster image creation.  pmap added a new switch, -diagnostic, which cap-
     tures troubleshooting information for Boot Camp configurations.

     OS X 10.11 added ULFO format images compressed with lzfse.  These images
     are more efficient and smaller than comparable UDZO images compressed
     with zlib, and retain kernel compatibility, but are not usable on earlier
     OSes.

     OS X 10.10 quadrupled the default UDIF chunk size without affecting back-
     ward compatibility.  UDIF images created or converted on 10.10 will bene-
     fit from smaller metadata and more efficient compression for UDZO and
     especially UDBZ formats.

     OS X 10.7 added the ability to quickly render encrypted images inaccessi-
     ble using the new erasekeys verb, which saves time versus securely over-
     writing the entire image.

     In Mac OS X 10.6, pmap was rewritten to use MediaKit's latest reporting
     routines so that it can properly support GPT partition maps.  Also -debug
     now implies -verbose for all verbs.

     Mac OS X 10.5 changed the behavior of attach when run on an existing
     image or /dev node: if the image was attached but no volume was mounted,
     the volume would be mounted.  Prior systems would return the /dev without
     mounting the volume.  This change effectively removes the ability to cre-
     ate a second /dev node from an existing one.

SEE ALSO
     diskutil(8), asr(8), ioreg(8), hfs.util(8), apfs.util(8), msdos.util(8),
     exfat.util(8), authopen(1), ditto(8), drutil(1), diskarbitrationd(8).

macOS				  01 Sep 2016				 macOS
","# hdiutil

> Utility to create and manage disk images.

- Mount an image:

`hdiutil attach {{path/to/image_file}}`

- Unmount an image:

`hdiutil detach /Volumes/{{volume_name}}`

- List mounted images:

`hdiutil info`

- Create an ISO image from the contents of a directory:

`hdiutil makehybrid -o {{path/to/output_file}} {{path/to/directory}}`
"
ssh-add,,,"
SSH-ADD(1)		  BSD General Commands Manual		    SSH-ADD(1)

NAME
     ssh-add -- adds private key identities to the authentication agent

SYNOPSIS
     ssh-add [-cDdkLlqXx] [-E fingerprint_hash] [-t life] [file ...]
     ssh-add -s pkcs11
     ssh-add -e pkcs11

DESCRIPTION
     ssh-add adds private key identities to the authentication agent,
     ssh-agent(1).  When run without arguments, it adds the files
     ~/.ssh/id_rsa, ~/.ssh/id_dsa, ~/.ssh/id_ecdsa, and ~/.ssh/id_ed25519.
     After loading a private key, ssh-add will try to load corresponding cer-
     tificate information from the filename obtained by appending -cert.pub to
     the name of the private key file.	Alternative file names can be given on
     the command line.

     If any file requires a passphrase, ssh-add asks for the passphrase from
     the user.	The passphrase is read from the user's tty.  ssh-add retries
     the last passphrase if multiple identity files are given.

     The authentication agent must be running and the SSH_AUTH_SOCK environ-
     ment variable must contain the name of its socket for ssh-add to work.

     The options are as follows:

     -c      Indicates that added identities should be subject to confirmation
	     before being used for authentication.  Confirmation is performed
	     by ssh-askpass(1).  Successful confirmation is signaled by a zero
	     exit status from ssh-askpass(1), rather than text entered into
	     the requester.

     -D      Deletes all identities from the agent.

     -d      Instead of adding identities, removes identities from the agent.
	     If ssh-add has been run without arguments, the keys for the
	     default identities and their corresponding certificates will be
	     removed.  Otherwise, the argument list will be interpreted as a
	     list of paths to public key files to specify keys and certifi-
	     cates to be removed from the agent.  If no public key is found at
	     a given path, ssh-add will append .pub and retry.

     -E fingerprint_hash
	     Specifies the hash algorithm used when displaying key finger-
	     prints.  Valid options are: ``md5'' and ``sha256''.  The default
	     is ``sha256''.

     -e pkcs11
	     Remove keys provided by the PKCS#11 shared library pkcs11.

     -k      When loading keys into or deleting keys from the agent, process
	     plain private keys only and skip certificates.

     -L      Lists public key parameters of all identities currently repre-
	     sented by the agent.

     -l      Lists fingerprints of all identities currently represented by the
	     agent.

     -q      Be quiet after a successful operation.

     -s pkcs11
	     Add keys provided by the PKCS#11 shared library pkcs11.

     -t life
	     Set a maximum lifetime when adding identities to an agent.  The
	     lifetime may be specified in seconds or in a time format speci-
	     fied in sshd_config(5).

     -X      Unlock the agent.

     -x      Lock the agent with a password.

     -K      When adding identities, each passphrase will also be stored in
	     the user's keychain.  When removing identities with -d, each
	     passphrase will be removed from it.

     -A      Add identities to the agent using any passphrase stored in the
	     user's keychain.

ENVIRONMENT
     DISPLAY and SSH_ASKPASS
	     If ssh-add needs a passphrase, it will read the passphrase from
	     the current terminal if it was run from a terminal.  If ssh-add
	     does not have a terminal associated with it but DISPLAY and
	     SSH_ASKPASS are set, it will execute the program specified by
	     SSH_ASKPASS (by default ``ssh-askpass'') and open an X11 window
	     to read the passphrase.  This is particularly useful when calling
	     ssh-add from a .xsession or related script.  (Note that on some
	     machines it may be necessary to redirect the input from /dev/null
	     to make this work.)

     SSH_AUTH_SOCK
	     Identifies the path of a UNIX-domain socket used to communicate
	     with the agent.

FILES
     ~/.ssh/id_dsa
	     Contains the DSA authentication identity of the user.

     ~/.ssh/id_ecdsa
	     Contains the ECDSA authentication identity of the user.

     ~/.ssh/id_ed25519
	     Contains the Ed25519 authentication identity of the user.

     ~/.ssh/id_rsa
	     Contains the RSA authentication identity of the user.

     Identity files should not be readable by anyone but the user.  Note that
     ssh-add ignores identity files if they are accessible by others.

EXIT STATUS
     Exit status is 0 on success, 1 if the specified command fails, and 2 if
     ssh-add is unable to contact the authentication agent.

SEE ALSO
     ssh(1), ssh-agent(1), ssh-askpass(1), ssh-keygen(1), sshd(8)

AUTHORS
     OpenSSH is a derivative of the original and free ssh 1.2.12 release by
     Tatu Ylonen.  Aaron Campbell, Bob Beck, Markus Friedl, Niels Provos, Theo
     de Raadt and Dug Song removed many bugs, re-added newer features and cre-
     ated OpenSSH.  Markus Friedl contributed the support for SSH protocol
     versions 1.5 and 2.0.

BSD			      September 25, 2020			   BSD
","# ssh-add

> Manage loaded ssh keys in the ssh-agent.
> Ensure that ssh-agent is up and running for the keys to be loaded in it.

- Add the default ssh keys in ""~/.ssh"" to the ssh-agent:

`ssh-add`

- Add a specific key to the ssh-agent:

`ssh-add {{path/to/private_key}}`

- List fingerprints of currently loaded keys:

`ssh-add -l`

- Delete a key from the ssh-agent:

`ssh-add -d {{path/to/private_key}}`

- Delete all currently loaded keys from the ssh-agent:

`ssh-add -D`

- Add a key to the ssh-agent and the keychain:

`ssh-add -K {{path/to/private_key}}`
"
apachectl,,,"APACHECTL(8)			   apachectl			  APACHECTL(8)



NAME
       apachectl - Apache HTTP Server Control Interface


SYNOPSIS
       When  acting in pass-through mode, apachectl can take all the arguments
       available for the httpd binary.


       apachectl [ httpd-argument ]


       When acting in SysV init mode, apachectl takes  simple,	one-word  com-
       mands, defined below.


       apachectl command



SUMMARY
       apachectl  is  a  front	end  to the Apache HyperText Transfer Protocol
       (HTTP) server. It is designed to help  the  administrator  control  the
       functioning of the Apache httpd daemon.


       The  apachectl  script can operate in two modes. First, it can act as a
       simple front-end to the httpd command that simply  sets	any  necessary
       environment  variables and then invokes httpd, passing through any com-
       mand line arguments. Second, apachectl can act as a SysV  init  script,
       taking  simple  one-word  arguments  like start, restart, and stop, and
       translating them into appropriate signals to httpd.


       If your Apache installation uses non-standard paths, you will  need  to
       edit  the  apachectl  script  to set the appropriate paths to the httpd
       binary. You can also specify any necessary  httpd  command  line  argu-
       ments. See the comments in the script for details.


       The  apachectl  script  returns a 0 exit value on success, and >0 if an
       error occurs. For more details, view the comments in the script.



OPTIONS
       Only the SysV init-style options are defined here. Other arguments  are
       defined on the httpd manual page.



       start  Loads the org.apache.httpd launchd job.

       stop, graceful-stop
	      Unloads the org.apache.httpd launchd job.

       restart, graceful
	      Unloads, then loads the org.apache.httpd launchd job.

       fullstatus
	      Displays a full status report from mod_status. For this to work,
	      you need to have mod_status enabled on your server and  a  text-
	      based  browser  such  as	lynx available on your system. The URL
	      used to access the status report can be set by editing the  STA-
	      TUSURL variable in the script.

       status Displays	a  brief  status  report.  Similar  to	the fullstatus
	      option, except that the list of requests currently being	served
	      is omitted.

       configtest
	      Run  a  configuration file syntax test. It parses the configura-
	      tion files and either reports Syntax Ok or detailed  information
	      about  the  particular  syntax  error.  This  is	equivalent  to
	      apachectl -t.


       The following option was available in earlier  versions	but  has  been
       removed.



       startssl
	      To start httpd with SSL support, you should edit your configura-
	      tion file to include the relevant directives and	then  use  the
	      normal apachectl start.




Apache HTTP Server		  2018-07-06			  APACHECTL(8)
","# apachectl

> Apache HTTP Server control interface for macOS.

- Start the org.apache.httpd launchd job:

`apachectl start`

- Stop the launchd job:

`apachectl stop`

- Stop, then start launchd job:

`apachectl restart`
"
runsvdir,,,,"# runsvdir

> Run an entire directory of services.

- Start and manage all services in a directory as the current user:

`runsvdir {{path/to/services}}`

- Start and manage all services in a directory as root:

`sudo runsvdir {{path/to/services}}`

- Start services in separate sessions:

`runsvdir -P {{path/to/services}}`
"
brightness,,,,"# brightness

> Get and set the brightness level of all internal and certain external displays.

- Show current brightness:

`brightness -l`

- Set the brightness to 100%::

`brightness {{1}}`

- Set the brightness to 50%::

`brightness {{0.5}}`
"
dd,,,"
DD(1)			  BSD General Commands Manual			 DD(1)

NAME
     dd -- convert and copy a file

SYNOPSIS
     dd [operands ...]

DESCRIPTION
     The dd utility copies the standard input to the standard output.  Input
     data is read and written in 512-byte blocks.  If input reads are short,
     input from multiple reads are aggregated to form the output block.  When
     finished, dd displays the number of complete and partial input and output
     blocks and truncated input records to the standard error output.

     The following operands are available:

     bs=n     Set both input and output block size to n bytes, superseding the
	      ibs and obs operands.  If no conversion values other than
	      noerror, notrunc or sync are specified, then each input block is
	      copied to the output as a single block without any aggregation
	      of short blocks.

     cbs=n    Set the conversion record size to n bytes.  The conversion
	      record size is required by the record oriented conversion val-
	      ues.

     count=n  Copy only n input blocks.

     files=n  Copy n input files before terminating.  This operand is only
	      applicable when the input device is a tape.

     ibs=n    Set the input block size to n bytes instead of the default 512.

     if=file  Read input from file instead of the standard input.

     iseek=n  Seek on the input file n blocks.	This is synonymous with
	      skip=n.

     obs=n    Set the output block size to n bytes instead of the default 512.

     of=file  Write output to file instead of the standard output.  Any regu-
	      lar output file is truncated unless the notrunc conversion value
	      is specified.  If an initial portion of the output file is
	      seeked past (see the oseek operand), the output file is trun-
	      cated at that point.

     oseek=n  Seek on the output file n blocks.  This is synonymous with
	      seek=n.

     seek=n   Seek n blocks from the beginning of the output before copying.
	      On non-tape devices, an lseek(2) operation is used.  Otherwise,
	      existing blocks are read and the data discarded.	If the user
	      does not have read permission for the tape, it is positioned
	      using the tape ioctl(2) function calls.  If the seek operation
	      is past the end of file, space from the current end of file to
	      the specified offset is filled with blocks of NUL bytes.

     skip=n   Skip n blocks from the beginning of the input before copying.
	      On input which supports seeks, an lseek(2) operation is used.
	      Otherwise, input data is read and discarded.  For pipes, the
	      correct number of bytes is read.	For all other devices, the
	      correct number of blocks is read without distinguishing between
	      a partial or complete block being read.

     conv=value[,value ...]
	      Where value is one of the symbols from the following list.

	      ascii, oldascii
		       The same as the unblock value except that characters
		       are translated from EBCDIC to ASCII before the records
		       are converted.  (These values imply unblock if the op-
		       erand cbs is also specified.)  There are two conversion
		       maps for ASCII.	The value ascii specifies the recom-
		       mended one which is compatible with AT&T System V UNIX.
		       The value oldascii specifies the one used in historic
		       AT&T UNIX and pre-4.3BSD-Reno systems.

	      block    Treats the input as a sequence of newline or end-of-
		       file terminated variable length records independent of
		       input and output block boundaries.  Any trailing new-
		       line character is discarded.  Each input record is con-
		       verted to a fixed length output record where the length
		       is specified by the cbs operand.  Input records shorter
		       than the conversion record size are padded with spaces.
		       Input records longer than the conversion record size
		       are truncated.  The number of truncated input records,
		       if any, are reported to the standard error output at
		       the completion of the copy.

	      ebcdic, ibm, oldebcdic, oldibm
		       The same as the block value except that characters are
		       translated from ASCII to EBCDIC after the records are
		       converted.  (These values imply block if the operand
		       cbs is also specified.)	There are four conversion maps
		       for EBCDIC.  The value ebcdic specifies the recommended
		       one which is compatible with AT&T System V UNIX.  The
		       value ibm is a slightly different mapping, which is
		       compatible with the AT&T System V UNIX ibm value.  The
		       values oldebcdic and oldibm are maps used in historic
		       AT&T UNIX and pre-4.3BSD-Reno systems.

	      lcase    Transform uppercase characters into lowercase charac-
		       ters.

	      noerror  Do not stop processing on an input error.  When an
		       input error occurs, a diagnostic message followed by
		       the current input and output block counts will be writ-
		       ten to the standard error output in the same format as
		       the standard completion message.  If the sync conver-
		       sion is also specified, any missing input data will be
		       replaced with NUL bytes (or with spaces if a block ori-
		       ented conversion value was specified) and processed as
		       a normal input buffer.  If the sync conversion is not
		       specified, the input block is omitted from the output.
		       On input files which are not tapes or pipes, the file
		       offset will be positioned past the block in which the
		       error occurred using lseek(2).

	      notrunc  Do not truncate the output file.  This will preserve
		       any blocks in the output file not explicitly written by
		       dd.  The notrunc value is not supported for tapes.

	      osync    Pad the final output block to the full output block
		       size.  If the input file is not a multiple of the out-
		       put block size after conversion, this conversion forces
		       the final output block to be the same size as preceding
		       blocks for use on devices that require regularly sized
		       blocks to be written.  This option is incompatible with
		       use of the bs=n block size specification.

	      sparse   If one or more output blocks would consist solely of
		       NUL bytes, try to seek the output file by the required
		       space instead of filling them with NULs, resulting in a
		       sparse file.

	      swab     Swap every pair of input bytes.	If an input buffer has
		       an odd number of bytes, the last byte will be ignored
		       during swapping.

	      sync     Pad every input block to the input buffer size.	Spaces
		       are used for pad bytes if a block oriented conversion
		       value is specified, otherwise NUL bytes are used.

	      ucase    Transform lowercase characters into uppercase charac-
		       ters.

	      unblock  Treats the input as a sequence of fixed length records
		       independent of input and output block boundaries.  The
		       length of the input records is specified by the cbs op-
		       erand.  Any trailing space characters are discarded and
		       a newline character is appended.

     Where sizes are specified, a decimal, octal, or hexadecimal number of
     bytes is expected.  If the number ends with a ``b'', ``k'', ``m'', ``g'',
     or ``w'', the number is multiplied by 512, 1024 (1K), 1048576 (1M),
     1073741824 (1G) or the number of bytes in an integer, respectively.  Two
     or more numbers may be separated by an ``x'' to indicate a product.

     When finished, dd displays the number of complete and partial input and
     output blocks, truncated input records and odd-length byte-swapping
     blocks to the standard error output.  A partial input block is one where
     less than the input block size was read.  A partial output block is one
     where less than the output block size was written.  Partial output blocks
     to tape devices are considered fatal errors.  Otherwise, the rest of the
     block will be written.  Partial output blocks to character devices will
     produce a warning message.  A truncated input block is one where a vari-
     able length record oriented conversion value was specified and the input
     line was too long to fit in the conversion record or was not newline ter-
     minated.

     Normally, data resulting from input or conversion or both are aggregated
     into output blocks of the specified size.	After the end of input is
     reached, any remaining output is written as a block.  This means that the
     final output block may be shorter than the output block size.

     If dd receives a SIGINFO (see the status argument for stty(1)) signal,
     the current input and output block counts will be written to the standard
     error output in the same format as the standard completion message.  If
     dd receives a SIGINT signal, the current input and output block counts
     will be written to the standard error output in the same format as the
     standard completion message and dd will exit.

DIAGNOSTICS
     The dd utility exits 0 on success, and >0 if an error occurs.

SEE ALSO
     cp(1), tr(1)

STANDARDS
     The dd utility is expected to be a superset of the IEEE Std 1003.2
     (``POSIX.2'') standard.  The files operand and the ascii, ebcdic, ibm,
     oldascii, oldebcdic and oldibm values are extensions to the POSIX stan-
     dard.

BSD			       January 13, 1994 			   BSD
","# dd

> Convert and copy a file.

- Make a bootable usb drive from an isohybrid file (such like archlinux-xxx.iso):

`dd if={{file.iso}} of=/dev/{{usb_drive}}`

- Clone a drive to another drive with 4MB block and ignore error:

`dd if=/dev/{{source_drive}} of=/dev/{{dest_drive}} bs=4m conv=noerror`

- Generate a file of 100 random bytes by using kernel random driver:

`dd if=/dev/urandom of={{random_file}} bs=100 count=1`

- Benchmark the write performance of a disk:

`dd if=/dev/zero of={{file_1GB}} bs=1024 count=1000000`
"
n,,,,"# n

> Tool to manage multiple node versions.

- Install a given version of node. If the version is already installed, it will be activated:

`n {{version}}`

- Display installed versions and interactively activate one of them:

`n`

- Remove a version:

`n rm {{version}}`

- Execute a file with a given version:

`n use {{version}} {{file.js}}`

- Output binary path for a version:

`n bin {{version}}`
"
dmesg,,,"
DMESG(8)		  BSD System Manager's Manual		      DMESG(8)

NAME
     dmesg -- display the system message buffer

SYNOPSIS
     dmesg [-M core] [-N system]

DESCRIPTION
     Dmesg displays the contents of the system message buffer.	This command
     needs to be run as root.

SEE ALSO
     syslogd(8)

HISTORY
     The dmesg command appeared in 4.0BSD.

4th Berkeley Distribution	 June 5, 1993	     4th Berkeley Distribution
","# dmesg

> Write the kernel messages to standard output.

- Show kernel messages:

`dmesg`

- Show how much physical memory is available on this system:

`dmesg | grep -i memory`

- Show kernel messages 1 page at a time:

`dmesg | less`
"
units,,,"
UNITS(1)		  BSD General Commands Manual		      UNITS(1)

NAME
     units -- conversion program

SYNOPSIS
     units [-f filename] [-qv] [from-unit to-unit]

OPTIONS
     The following options are available:

     -f filename
	     Specify the name of the units data file to load.

     -q      Suppress prompting of the user for units and the display of sta-
	     tistics about the number of units loaded.

     -v      Print the version number.

     from-unit to-unit
	     Allow a single unit conversion to be done directly from the com-
	     mand line.  The program will not print prompts.  It will print
	     out the result of the single specified conversion.

DESCRIPTION
     The units program converts quantities expressed in various scales to
     their equivalents in other scales.  The units program can only handle
     multiplicative scale changes.  It cannot convert Celsius to Fahrenheit,
     for example.  It works interactively by prompting the user for input:

	 You have: meters
	 You want: feet
		 * 3.2808399
		 / 0.3048

	 You have: cm^3
	 You want: gallons
		 * 0.00026417205
		 / 3785.4118

	 You have: meters/s
	 You want: furlongs/fortnight
		 * 6012.8848
		 / 0.00016630952

	 You have: 1|2 inch
	 You want: cm
		 * 1.27
		 / 0.78740157

     Powers of units can be specified using the '^' character as shown in the
     example, or by simple concatenation: 'cm3' is equivalent to 'cm^3'.  Mul-
     tiplication of units can be specified by using spaces, a dash or an
     asterisk.	Division of units is indicated by the slash ('/').  Note that
     multiplication has a higher precedence than division, so 'm/s/s' is the
     same as 'm/s^2' or 'm/s s'.  Division of numbers must be indicated using
     the vertical bar ('|').  To convert half a meter, you would write '1|2
     meter'.  If you write '1/2 meter' then the units program would interpret
     that as equivalent to '0.5/meter'.  If you enter incompatible unit types,
     the units program will print a message indicating that the units are not
     conformable and it will display the reduced form for each unit:

	 You have: ergs/hour
	 You want: fathoms kg^2 / day
	 conformability error
		 2.7777778e-11 kg m^2 / sec^3
		 2.1166667e-05 kg^2 m / sec

     The conversion information is read from a units data file.  The default
     file includes definitions for most familiar units, abbreviations and met-
     ric prefixes.  Some constants of nature included are:

	   pi	      ratio of circumference to diameter
	   c	      speed of light
	   e	      charge on an electron
	   g	      acceleration of gravity
	   force      same as g
	   mole       Avogadro's number
	   water      pressure per unit height of water
	   mercury    pressure per unit height of mercury
	   au	      astronomical unit

     The unit 'pound' is a unit of mass.  Compound names are run together so
     'pound force' is a unit of force.	The unit 'ounce' is also a unit of
     mass.  The fluid ounce is 'floz'.	British units that differ from their
     US counterparts are prefixed with 'br', and currency is prefixed with its
     country name: 'belgiumfranc', 'britainpound'.  When searching for a unit,
     if the specified string does not appear exactly as a unit name, then
     units will try to remove a trailing 's' or a trailing 'es' and check
     again for a match.

     To find out what units are available read the standard units file.  If
     you want to add your own units you can supply your own file.  A unit is
     specified on a single line by giving its name and an equivalence.	Be
     careful to define new units in terms of old ones so that a reduction
     leads to the primitive units which are marked with '!' characters.  The
     units program will not detect infinite loops that could be caused by
     careless unit definitions.  Comments in the unit definition file begin
     with a '/' character at the beginning of a line.

     Prefixes are defined in the same was as standard units, but with a trail-
     ing dash at the end of the prefix name.  If a unit is not found even
     after removing trailing 's' or 'es', then it will be checked against the
     list of prefixes.	Prefixes will be removed until a legal base unit is
     identified.

     Here is an example of a short units file that defines some basic units.

	   m	     !a!
	   sec	     !b!
	   micro-    1e-6
	   minute    60 sec
	   hour      60 min
	   inch      0.0254 m
	   ft	     12 inches
	   mile      5280 ft

FILES
     /usr/share/misc/units.lib	the standard units library

AUTHORS
     Adrian Mariano <adrian@cam.cornell.edu>

BUGS
     The effect of including a '/' in a prefix is surprising.

     Exponents entered by the user can be only one digit.  You can work around
     this by multiplying several terms.

     The user must use | to indicate division of numbers and / to indicate
     division of symbols.  This distinction should not be necessary.

     The program contains various arbitrary limits on the length of the units
     converted and on the length of the data file.

     The program should use a hash table to store units so that it does not
     take so long to load the units list and check for duplication.

BSD				 July 14, 1993				   BSD
","# units

> Provide the conversion between two units of measure.

- Run in interactive mode:

`units`

- Show the conversion between two simple units:

`units {{quarts}} {{tablespoons}}`

- Convert between units with quantities:

`units {{""15 pounds""}} {{kilograms}}`

- Show the conversion between two compound units:

`units {{""meters / second""}} {{""inches / hour""}}`

- Show the conversion between units with different dimensions:

`units {{""acres""}} {{""ft^2""}}`

- Show the conversion of byte multipliers:

`units {{""15 megabytes""}} {{bytes}}`
"
qlmanage,,,"
qlmanage(1)		  BSD General Commands Manual		   qlmanage(1)

NAME
     qlmanage -- Quick Look Server debug and management tool

SYNOPSIS
     qlmanage -r

     qlmanage -m [name ...]

     qlmanage -t [-d debugLevel] [-x] [-i] [-s size] [-f factor]
	      [-c contentTypeUTI [-g generator]] [file ...]

     qlmanage -p [-d debugLevel] [-x] [-c contentTypeUTI [-g generator]]
	      [file ...]

     qlmanage -h

DESCRIPTION
     qlmanage allows you to test your Quick Look generators and manage Quick
     Look Server.

     The following usages are available:

     1.       qlmanage -r resets Quick Look Server and all Quick Look client's
	      generator cache.

     2.       qlmanage -m gets all sort of information on Quick Look server
	      including the list of detected generators.

     3.       qlmanage -t displays the Quick Look generated thumbnails (if
	      available) for the specified files.

     4.       qlmanage -p displays the Quick Look generated previews for the
	      specified files.

     5.       qlmanage -h displays extensive help.

Mac OS X			March 29, 2007			      Mac OS X
","# qlmanage

> QuickLook server tool.

- Display QuickLook for one or multiple files:

`qlmanage -p {{filename}} {{filename2}}`

- Compute 300px wide PNG thumbnails of all JPEGs in the current directory and put them in a directory:

`qlmanage {{*.jpg}} -t -s {{300}} {{path/to/directory}}`

- Reset Quicklook:

`qlmanage -r`
"
base64,,,"
base64(1)		  BSD General Commands Manual		     base64(1)

NAME
     base64 -- Encode and decode using Base64 representation

SYNOPSIS
     base64 [-h | -D] [-b count] [-i input_file] [-o output_file]

DESCRIPTION
     base64 encodes and decodes Base64 data, as specified in RFC 4648. With no
     options, base64 reads raw data from stdin and writes encoded data as a
     continuous block to stdout.

OPTIONS
     The following options are available:
     -b count
     --break=count	  Insert line breaks every count characters. Default
			  is 0, which generates an unbroken stream.

     -D
     --decode		  Decode incoming Base64 stream into binary data.

     -h
     --help		  Print usage summary and exit.

     -i input_file
     --input=input_file   Read input from input_file.  Default is stdin; pass-
			  ing - also represents stdin.

     -o output_file
     --output=output_file
			  Write output to output_file.	Default is stdout;
			  passing - also represents stdout.

SEE ALSO
     openssl(1), wikipedia page <http://en.wikipedia.org/wiki/Base64>, RFC
     4648 <http://tools.ietf.org/html/rfc4648>

Mac OS X 10.7		       February 8, 2011 		 Mac OS X 10.7
","# base64

> Encode and decode using Base64 representation.

- Encode a file:

`base64 -i {{plain_file}}`

- Decode a file:

`base64 -D -i {{base64_file}}`

- Encode from `stdin`:

`echo -n {{plain_text}} | base64`

- Decode from `stdin`:

`echo -n {{base64_text}} | base64 -D`
"
yabai,https://github.com/koekeishiya/yabai,"













GitHub - koekeishiya/yabai: A tiling window manager for macOS based on binary space partitioning








































Skip to content













                Sign up
              
















                    Why GitHub?
                    




Features →

Code review
Project management
Integrations
Actions
Packages
Security
Team management
Hosting
Mobile


Customer stories →
Security →





Team


Enterprise




                    Explore
                    





Explore GitHub →

Learn & contribute

Topics
Collections
Trending
Learning Lab
Open source guides

Connect with others

Events
Community forum
GitHub Education
GitHub Stars program





Marketplace




                    Pricing
                    




Plans →

Compare plans
Contact Sales


Nonprofit →
Education →






























        In this repository
      

        All GitHub
      
↵


      Jump to
      ↵






No suggested jump to results















        In this repository
      

        All GitHub
      
↵


      Jump to
      ↵















        In this repository
      

        All GitHub
      
↵


      Jump to
      ↵






 



          Sign in
        

              Sign up
            



















koekeishiya

/

yabai








          Sponsor
        






              Sponsor koekeishiya/yabai
            












    Watch
 
      59
    




      Star


      4.7k
    




          Fork


        209
      





        A tiling window manager for macOS based on binary space partitioning
      



            MIT License
        




4.7k
        stars
 

209
        forks
 




      Star





    Watch









Code

 



Issues
54
 



Pull requests
6
 



Actions

 



Projects
0
 



Wiki

 



Security

 



Insights

 
 




More

 




                    Code
 


                    Issues
 


                    Pull requests
 


                    Actions
 


                    Projects
 


                    Wiki
 


                    Security
 


                    Insights
 


 










          Dismiss
        
Join GitHub today
GitHub is home to over 50 million developers working together to host and review code, manage projects, and build software together.
Sign up










master














4
branches



34
tags




    Go to file






      Code
      
 








  Clone






            HTTPS
 
            GitHub CLI
 









      Use Git or checkout with SVN using the web URL.
    









      Work fast with our official CLI.
      Learn more.
    







                Open with GitHub Desktop
 



                Download ZIP
 



Launching GitHub Desktop
If nothing happens, download GitHub Desktop and try again.
Go back


Launching GitHub Desktop
If nothing happens, download GitHub Desktop and try again.
Go back


Launching Xcode
If nothing happens, download Xcode and try again.
Go back


Launching Visual Studio
If nothing happens, download the GitHub extension for Visual Studio and try again.
Go back









Latest commit



 
 
Git stats





900
commits







Files
Permalink


  
    Failed to load latest commit information.

 


Type
Name
Latest commit message
Commit time






.github



Enable github sponsors due to requests



Mar 15, 2020







assets



update screenshot



Jun 10, 2020







doc



#644 extend *SPACE_SEL* and *DISPLAY_SEL* to include selector *mouse*



Aug 26, 2020







examples



#203 option to specify whether a mouse drop should perform a swap or …



Jun 29, 2020







scripts



Allow matching certificate by name



Nov 9, 2019







src



#589 revert Big Sur osax test-changes on master branch



Sep 23, 2020







.gitignore



Generate sa_loader/payload arrays during build



Jun 17, 2020







.travis.yml



..



Jun 6, 2020







CHANGELOG.md



#589 support macOS Big Sur Build 20A5364e



Sep 5, 2020







LICENSE.txt



MIT License



May 12, 2019







README.md



..



Feb 3, 2020







makefile



Generate sa_loader/payload arrays during build



Jun 17, 2020





        View code
      






        README.md
      













Tiling window management for the Mac.















About

yabai is a window management utility that is designed to work as an extension to the built-in window manager of macOS.
yabai allows you to control your windows, spaces and displays freely using an intuitive command line interface and optionally set user-defined keyboard shortcuts using ↗ skhd and other third-party software.
The primary function of yabai is tiling window management; automatically modifying your window layout using a binary space partitioning algorithm to allow you to focus on the content of your windows without distractions.
Additional features of yabai include focus-follows-mouse, disabling animations for switching spaces, creating spaces past the limit of 16 spaces, and much more.
Installation and Configuration

The ↗ yabai wiki has both brief and detailed installation instructions for multiple installation methods, and also explains how to uninstall yabai completely.
Sample configuration files can be found in the ↗ examples directory. Refer to the ↗ documentation or the wiki for further information.
Keyboard shortcuts can be defined with ↗ skhd or any other suitable software you may prefer.

Requirements and Caveats
Please read the below requirements carefully.
Make sure you fulfil all of them before filing an issue.



Requirement
Note




Operating System
macOS High Sierra 10.13.6, Mojave 10.14.4+ and Catalina 10.15.0+ is supported.


Accessibility API
yabai must be given permission to utilize the Accessibility API and will request access upon launch. The application must be restarted after access has been granted.


Mission Control
In the Mission Control preferences pane in System Preferences, the setting ""Displays have separate Spaces"" must be enabled.



Please also take note of the following caveats.



Caveat
Note




System Integrity Protection
System Integrity Protection needs to be (partially) disabled for yabai to inject a scripting addition into Dock.app for controlling windows with functions that require elevated privileges. This enables control of the window server, which is the sole owner of all window connections, and enables additional features of yabai. If you are running on macOS High Sierra 10.13.6, you can reenable SIP after the scripting addition has been installed.


Code Signing
When building from source (or installing from HEAD), it is recommended to codesign the binary so it retains its accessibility and automation privileges when updated or rebuilt.


Mission Control
In the Mission Control preferences pane in System Preferences, the setting ""Automatically rearrange Spaces based on most recent use"" should be disabled for commands that rely on the ordering of spaces to work reliably.



License and Attribution
yabai is licensed under the ↗ MIT License, a short and simple permissive license with conditions only requiring preservation of copyright and license notices.
Licensed works, modifications, and larger works may be distributed under different terms and without source code.
Thanks to @fools-mate for creating a logo and banner for this project and making them available for free.
Thanks to @dominiklohmann for contributing great documentation, support, and more, for free.
Disclaimer
Use at your own discretion.
I take no responsibility if anything should happen to your machine while trying to install, test or otherwise use this software in any form.
You acknowledge that you understand the potential risk that may come from disabling ↗ System Integrity Protection on your system, and I make no recommendation as to whether you should or should not disable System Integrity Protection.








About

      A tiling window manager for macOS based on binary space partitioning
    
Resources



      Readme
 
License



        MIT License
    







    Releases
      34





v3.3.0

          Latest
 
Sep 3, 2020

 

        + 33 releases





Sponsor this project



 





patreon.com/aasvi




  Learn more about GitHub Sponsors







    Packages 0


        No packages published 













    Contributors 3





 

koekeishiya
Åsmund Vikane
 




 

dominiklohmann
Dominik Lohmann
 




 

tsujp
Jordan Coppard
 






Languages










C
81.3%





Objective-C
17.7%





Other
1.0%















© 2020 GitHub, Inc.
Terms
Privacy
Security
Status
Help





Contact GitHub
Pricing
API
Training
Blog
About











    You can’t perform that action at this time.
  


















You signed in with another tab or window. Reload to refresh your session.
You signed out in another tab or window. Reload to refresh your session.







",,"# yabai

> A tiling window manager for macOS based on binary space partitioning.
> More information: <https://github.com/koekeishiya/yabai>.

- Set the layout to bsp:

`yabai -m config layout {{bsp}}`

- Set the window gap to 10pt:

`yabai -m config window_gap {{10}}`

- Enable opacity:

`yabai -m config window_opacity on`

- Disable window shadow:

`yabai -m config window_shadow off`

- Enable status bar:

`yabai -m config status_bar on`
"
caffeinate,,,"
CAFFEINATE(8)		  BSD System Manager's Manual		 CAFFEINATE(8)

NAME
     caffeinate -- prevent the system from sleeping on behalf of a utility

SYNOPSIS
     caffeinate [-disu] [-t timeout] [-w pid] [utility arguments...]

DESCRIPTION
     caffeinate creates assertions to alter system sleep behavior.  If no
     assertion flags are specified, caffeinate creates an assertion to prevent
     idle sleep.  If a utility is specified, caffeinate creates the assertions
     on the utility's behalf, and those assertions will persist for the dura-
     tion of the utility's execution. Otherwise, caffeinate creates the asser-
     tions directly, and those assertions will persist until caffeinate exits.

     Available options:

     -d      Create an assertion to prevent the display from sleeping.

     -i      Create an assertion to prevent the system from idle sleeping.

     -m      Create an assertion to prevent the disk from idle sleeping.

     -s      Create an assertion to prevent the system from sleeping. This
	     assertion is valid only when system is running on AC power.

     -u      Create an assertion to declare that user is active. If the dis-
	     play is off, this option turns the display on and prevents the
	     display from going into idle sleep. If a timeout is not specified
	     with '-t' option, then this assertion is taken with a default of
	     5 second timeout.

     -t      Specifies the timeout value in seconds for which this assertion
	     has to be valid. The assertion is dropped after the specified
	     timeout. Timeout value is not used when an utility is invoked
	     with this command.

     -w      Waits for the process with the specified pid to exit. Once the
	     the process exits, the assertion is also released.  This option
	     is ignored when used with utility option.

EXAMPLE
     caffeinate -i make
	caffeinate forks a process, execs ""make"" in it, and holds an assertion
     that prevents idle sleep as long as that process is running.

SEE ALSO
     pmset(1)

LOCATION
     /usr/bin/caffeinate

Darwin			       November 9, 2012 			Darwin
","# caffeinate

> Prevent mac from sleeping.

- Prevent from sleeping for 1 hour (3600 seconds):

`caffeinate -u -t {{3600}}`

- Prevent from sleeping until a command completes:

`caffeinate -s {{command}}`

- Prevent from sleeping until you type Ctrl-C:

`caffeinate -i`
"
pbcopy,,,"PBCOPY(1)							     PBCOPY(1)



NAME
       pbcopy,	pbpaste  -  provide copying and pasting to the pasteboard (the
       Clipboard) from command line

SYNOPSIS
       pbcopy [-help] [-pboard {general | ruler | find | font}]

       pbpaste [-help] [-pboard {general | ruler | find | font}] [-Prefer {txt
       | rtf | ps}]

DESCRIPTION
       pbcopy  takes  the standard input and places it in the specified paste-
       board. If no pasteboard is specified, the general  pasteboard  will  be
       used  by  default.  The input is placed in the pasteboard as plain text
       data unless it begins  with  the  Encapsulated  PostScript  (EPS)  file
       header  or  the Rich Text Format (RTF) file header, in which case it is
       placed in the pasteboard as one of those data types.

       pbpaste removes the data from the pasteboard and writes it to the stan-
       dard output.  It normally looks first for plain text data in the paste-
       board and writes that to the standard output; if no plain text data  is
       in  the	pasteboard  it looks for Encapsulated PostScript; if no EPS is
       present it looks for Rich Text.	If none of those types is  present  in
       the pasteboard, pbpaste produces no output.

       * Encoding:

       pbcopy  and  pbpaste  use locale environment variables to determine the
       encoding to be used for input and output.  For  example,  absent  other
       locale settings, setting the environment variable LANG=en_US.UTF-8 will
       cause pbcopy and pbpaste to use UTF-8 for  input  and  output.	If  an
       encoding  cannot be determined from the locale, the standard C encoding
       will be used.  Use of UTF-8 is recommended.  Note that by  default  the
       Terminal application uses the UTF-8 encoding and automatically sets the
       appropriate locale environment variable.

OPTIONS
       -pboard {general | ruler | find | font}
	      specifies which pasteboard to copy to  or  paste	from.	If  no
	      pasteboard  is  given,  the  general  pasteboard will be used by
	      default.

       -Prefer {txt | rtf | ps}
	      tells pbpaste what type of data to look for  in  the  pasteboard
	      first.   As stated above, pbpaste normally looks first for plain
	      text data; however,  by  specifying  -Prefer  ps	you  can  tell
	      pbpaste to look first for Encapsulated PostScript.  If you spec-
	      ify -Prefer rtf, pbpaste looks first for Rich Text  format.   In
	      any  case,  pbpaste looks for the other formats if the preferred
	      one is not found.  The txt option replaces the deprecated  ascii
	      option,  which continues to function as before.  Both indicate a
	      preference for plain text.

SEE ALSO
       ADC Reference Library:
       Cocoa > Interapplication Communication > Copying and Pasting
       Carbon > Interapplication Communication > Pasteboard  Manager  Program-
       ming Guide
       Carbon > Interapplication Communication > Pasteboard Manager Reference

BUGS
       There is no way to tell pbpaste to get only a specified data type.



Apple Computer, Inc.	       January 12, 2005 		     PBCOPY(1)
","# pbcopy

> Place standard output in the clipboard.

- Place the contents of a file in the clipboard:

`pbcopy < {{file}}`

- Place the results of a command in the clipboard:

`find . -type t -name ""*.png"" | pbcopy`
"
command,,,"
BUILTIN(1)		  BSD General Commands Manual		    BUILTIN(1)

NAME
     builtin, !, %, ., :, @, {, }, alias, alloc, bg, bind, bindkey, break,
     breaksw, builtins, case, cd, chdir, command, complete, continue, default,
     dirs, do, done, echo, echotc, elif, else, end, endif, endsw, esac, eval,
     exec, exit, export, false, fc, fg, filetest, fi, for, foreach, getopts,
     glob, goto, hash, hashstat, history, hup, if, jobid, jobs, kill, limit,
     local, log, login, logout, ls-F, nice, nohup, notify, onintr, popd,
     printenv, pushd, pwd, read, readonly, rehash, repeat, return, sched, set,
     setenv, settc, setty, setvar, shift, source, stop, suspend, switch,
     telltc, test, then, time, times, trap, true, type, ulimit, umask,
     unalias, uncomplete, unhash, unlimit, unset, unsetenv, until, wait,
     where, which, while -- shell built-in commands

SYNOPSIS
     builtin [-options] [args ...]

DESCRIPTION
     Shell builtin commands are commands that can be executed within the run-
     ning shell's process.  Note that, in the case of csh(1) builtin commands,
     the command is executed in a subshell if it occurs as any component of a
     pipeline except the last.

     If a command specified to the shell contains a slash ``/'', the shell
     will not execute a builtin command, even if the last component of the
     specified command matches the name of a builtin command.  Thus, while
     specifying ``echo'' causes a builtin command to be executed under shells
     that support the echo builtin command, specifying ``/bin/echo'' or
     ``./echo'' does not.

     While some builtin commands may exist in more than one shell, their oper-
     ation may be different under each shell which supports them.  Below is a
     table which lists shell builtin commands, the standard shells that sup-
     port them and whether they exist as standalone utilities.

     Only builtin commands for the csh(1) and sh(1) shells are listed here.
     Consult a shell's manual page for details on the operation of its builtin
     commands.	Beware that the sh(1) manual page, at least, calls some of
     these commands ``built-in commands'' and some of them ``reserved words''.
     Users of other shells may need to consult an info(1) page or other
     sources of documentation.

     Commands marked ``No**'' under External do exist externally, but are
     implemented as scripts using a builtin command of the same name.

	   Command	 External    csh(1)    sh(1)
	   !		 No	     No        Yes
	   %		 No	     Yes       No
	   .		 No	     No        Yes
	   :		 No	     Yes       Yes
	   @		 No	     Yes       Yes
	   {		 No	     No        Yes
	   }		 No	     No        Yes
	   alias	 No**	     Yes       Yes
	   alloc	 No	     Yes       No
	   bg		 No**	     Yes       Yes
	   bind 	 No	     No        Yes
	   bindkey	 No	     Yes       No
	   break	 No	     Yes       Yes
	   breaksw	 No	     Yes       No
	   builtin	 No	     No        Yes
	   builtins	 No	     Yes       No
	   case 	 No	     Yes       Yes
	   cd		 No**	     Yes       Yes
	   chdir	 No	     Yes       Yes
	   command	 No**	     No        Yes
	   complete	 No	     Yes       No
	   continue	 No	     Yes       Yes
	   default	 No	     Yes       No
	   dirs 	 No	     Yes       No
	   do		 No	     No        Yes
	   done 	 No	     No        Yes
	   echo 	 Yes	     Yes       Yes
	   echotc	 No	     Yes       No
	   elif 	 No	     No        Yes
	   else 	 No	     Yes       Yes
	   end		 No	     Yes       No
	   endif	 No	     Yes       No
	   endsw	 No	     Yes       No
	   esac 	 No	     No        Yes
	   eval 	 No	     Yes       Yes
	   exec 	 No	     Yes       Yes
	   exit 	 No	     Yes       Yes
	   export	 No	     No        Yes
	   false	 Yes	     No        Yes
	   fc		 No**	     No        Yes
	   fg		 No**	     Yes       Yes
	   filetest	 No	     Yes       No
	   fi		 No	     No        Yes
	   for		 No	     No        Yes
	   foreach	 No	     Yes       No
	   getopts	 No**	     No        Yes
	   glob 	 No	     Yes       No
	   goto 	 No	     Yes       No
	   hash 	 No	     No        Yes
	   hashstat	 No	     Yes       No
	   history	 No	     Yes       No
	   hup		 No	     Yes       No
	   if		 No	     Yes       Yes
	   jobid	 No	     No        Yes
	   jobs 	 No**	     Yes       Yes
	   kill 	 Yes	     Yes       No
	   limit	 No	     Yes       No
	   local	 No	     No        Yes
	   log		 No	     Yes       No
	   login	 Yes	     Yes       No
	   logout	 No	     Yes       No
	   ls-F 	 No	     Yes       No
	   nice 	 Yes	     Yes       No
	   nohup	 Yes	     Yes       No
	   notify	 No	     Yes       No
	   onintr	 No	     Yes       No
	   popd 	 No	     Yes       No
	   printenv	 Yes	     Yes       No
	   pushd	 No	     Yes       No
	   pwd		 Yes	     No        Yes
	   read 	 No**	     No        Yes
	   readonly	 No	     No        Yes
	   rehash	 No	     Yes       No
	   repeat	 No	     Yes       No
	   return	 No	     No        Yes
	   sched	 No	     Yes       No
	   set		 No	     Yes       Yes
	   setenv	 No	     Yes       No
	   settc	 No	     Yes       No
	   setty	 No	     Yes       No
	   setvar	 No	     No        Yes
	   shift	 No	     Yes       Yes
	   source	 No	     Yes       No
	   stop 	 No	     Yes       No
	   suspend	 No	     Yes       No
	   switch	 No	     Yes       No
	   telltc	 No	     Yes       No
	   test 	 Yes	     No        Yes
	   then 	 No	     No        Yes
	   time 	 Yes	     Yes       No
	   times	 No	     No        Yes
	   trap 	 No	     No        Yes
	   true 	 Yes	     No        Yes
	   type 	 No	     No        Yes
	   ulimit	 No	     No        Yes
	   umask	 No**	     Yes       Yes
	   unalias	 No**	     Yes       Yes
	   uncomplete	 No	     Yes       No
	   unhash	 No	     Yes       No
	   unlimit	 No	     Yes       No
	   unset	 No	     Yes       Yes
	   unsetenv	 No	     Yes       No
	   until	 No	     No        Yes
	   wait 	 No**	     Yes       Yes
	   where	 No	     Yes       No
	   which	 Yes	     Yes       No
	   while	 No	     Yes       Yes

SEE ALSO
     csh(1), echo(1), false(1), info(1), kill(1), login(1), nice(1), nohup(1),
     printenv(1), pwd(1), sh(1), test(1), time(1), true(1), which(1)

HISTORY
     The builtin manual page first appeared in FreeBSD 3.4.

AUTHORS
     This manual page was written by Sheldon Hearn <sheldonh@FreeBSD.org>.

BSD			       February 23, 2005			   BSD
","# command

> Command forces the shell to execute the program and ignore any functions, builtins and aliases with the same name.

- Execute the ls program literally, even if an ls alias exists:

`command {{ls}}`
"
xsltproc,,,"XSLTPROC(1)			xsltproc Manual 		   XSLTPROC(1)



NAME
       xsltproc - command line XSLT processor

SYNOPSIS
       xsltproc [[-V | --version] [-v | --verbose] [{-o | --output} {FILE |
		DIRECTORY}] | --timing | --repeat | --debug | --novalid |
		--noout | --maxdepth VALUE | --html | --encoding ENCODING  |
		--param PARAMNAME PARAMVALUE  |
		--stringparam PARAMNAME PARAMVALUE  | --nonet |
		--path ""PATH(S)"" | --load-trace | --catalogs | --xinclude |
		[--profile | --norman] | --dumpextensions | --nowrite |
		--nomkdir | --writesubtree PATH | --nodtdattr] [STYLESHEET]
		{XML-FILE | -}

DESCRIPTION
       xsltproc is a command line tool for applying XSLT stylesheets to XML
       documents. It is part of libxslt(3), the XSLT C library for GNOME.
       While it was developed as part of the GNOME project, it can operate
       independently of the GNOME desktop.


       xsltproc is invoked from the command line with the name of the
       stylesheet to be used followed by the name of the file or files to
       which the stylesheet is to be applied. It will use the standard input
       if a filename provided is -

       If a stylesheet is included in an XML document with a Stylesheet
       Processing Instruction, no stylesheet need to be named at the command
       line.  xsltproc will automatically detect the included stylesheet and
       use it.

       By default, output is to stdout. You can specify a file for output
       using the -o or --output option.

OPTIONS
       xsltproc accepts the following options (in alphabetical order):

       --catalogs
	   Use the SGML catalog specified in SGML_CATALOG_FILES to resolve the
	   location of external entities. By default, xsltproc looks for the
	   catalog specified in XML_CATALOG_FILES. If that is not specified,
	   it uses /etc/xml/catalog.

       --debug
	   Output an XML tree of the transformed document for debugging
	   purposes.

       --dumpextensions
	   Dumps the list of all registered extensions on stdout.

       --html
	   The input document is an HTML file.

       --load-trace
	   Display all the documents loaded during the processing to stderr.

       --maxdepth VALUE
	   Adjust the maximum depth of the template stack before libxslt(3)
	   concludes it is in an infinite loop. The default is 3000.

       --nodtdattr
	   Do not apply default attributes from the document's DTD.

       --nomkdir
	   Refuses to create directories.

       --nonet
	   Do not use the Internet to fetch DTDs, entities or documents.

       --noout
	   Do not output the result.

       --novalid
	   Skip loading the document's DTD.

       --nowrite
	   Refuses to write to any file or resource.

       -o or --output FILE | DIRECTORY
	   Direct output to the given FILE. Using the option with a DIRECTORY
	   directs the output files to the specified directory. This can be
	   useful for multiple outputs (also known as ""chunking"") or manpage
	   processing.

	   Important
	   The given directory must already exist.

	   Note
	   Make sure that FILE and DIRECTORY follow the ""URI reference
	   computation"" as described in RFC 2396 and laters. This means, that
	   e.g.  -o directory will maybe not work, but -o directory/ will.

       --encoding ENCODING
	   Allow to specify the encoding for the input.

       --param PARAMNAME PARAMVALUE
	   Pass a parameter of name PARAMNAME and value PARAMVALUE to the
	   stylesheet. You may pass multiple name/value pairs up to a maximum
	   of 32. If the value being passed is a string, you can use
	   --stringparam instead, to avoid additional quote characters that
	   appear in string expressions. Note: the XPath expression must be
	   UTF-8 encoded.

       --path ""PATH(S)""
	   Use the (space- or colon-separated) list of filesystem paths
	   specified by PATHS to load DTDs, entities or documents. Enclose
	   space-separated lists by quotation marks.

       --profile or --norman
	   Output profiling information detailing the amount of time spent in
	   each part of the stylesheet. This is useful in optimizing
	   stylesheet performance.

       --repeat
	   Run the transformation 20 times. Used for timing tests.

       --stringparam PARAMNAME PARAMVALUE
	   Pass a parameter of name PARAMNAME and value PARAMVALUE where
	   PARAMVALUE is a string rather than a node identifier.  Note: The
	   string must be UTF-8 encoded.

       --timing
	   Display the time used for parsing the stylesheet, parsing the
	   document and applying the stylesheet and saving the result.
	   Displayed in milliseconds.

       -v or --verbose
	   Output each step taken by xsltproc in processing the stylesheet and
	   the document.

       -V or --version
	   Show the version of libxml(3) and libxslt(3) used.

       --writesubtree PATH
	   Allow file write only within the PATH subtree.

       --xinclude
	   Process the input document using the XInclude specification. More
	   details on this can be found in the XInclude specification:
	   http://www.w3.org/TR/xinclude/

ENVIRONMENT
       SGML_CATALOG_FILES
	   SGML catalog behavior can be changed by redirecting queries to the
	   user's own set of catalogs. This can be done by setting the
	   SGML_CATALOG_FILES environment variable to a list of catalogs. An
	   empty one should deactivate loading the default /etc/sgml/catalog
	   catalog.

       XML_CATALOG_FILES
	   XML catalog behavior can be changed by redirecting queries to the
	   user's own set of catalogs. This can be done by setting the
	   XML_CATALOG_FILES environment variable to a list of catalogs. An
	   empty one should deactivate loading the default /etc/xml/catalog
	   catalog.

DIAGNOSTICS
       xsltproc return codes provide information that can be used when calling
       it from scripts.

       0
	   No error (normal operation)

       1
	   No argument

       2
	   Too many parameters

       3
	   Unknown option

       4
	   Failed to parse the stylesheet

       5
	   Error in the stylesheet

       6
	   Error in one of the documents

       7
	   Unsupported xsl:output method

       8
	   String parameter contains both quote and double-quotes

       9
	   Internal processing error

       10
	   Processing was stopped by a terminating message

       11
	   Could not write the result to the output file

SEE ALSO
       libxml(3), libxslt(3)

       More information can be found at

       o   libxml(3) web page http://www.xmlsoft.org/

       o   W3C XSLT page http://www.w3.org/TR/xslt


AUTHOR
       John Fleck <jfleck@inkstain.net>
	   Author.

COPYRIGHT
       Copyright (C) 2001, 2002



libxslt      $Date: 2008-04-21 16:28:56 +0200 (Mon, 21 Apr 2008) $ XSLTPROC(1)
","# xsltproc

> Transform XML with XSLT to produce output (usually HTML or XML).

- Transform an XML file with a specific XSLT stylesheet:

`xsltproc --output {{output.html}} {{stylesheet.xslt}} {{xmlfile.xml}}`

- Pass a value to a parameter in the stylesheet:

`xsltproc --output {{output.html}} --stringparam {{name}} {{value}} {{stylesheet.xslt}} {{xmlfile.xml}}`
"
fc,,,"
BUILTIN(1)		  BSD General Commands Manual		    BUILTIN(1)

NAME
     builtin, !, %, ., :, @, {, }, alias, alloc, bg, bind, bindkey, break,
     breaksw, builtins, case, cd, chdir, command, complete, continue, default,
     dirs, do, done, echo, echotc, elif, else, end, endif, endsw, esac, eval,
     exec, exit, export, false, fc, fg, filetest, fi, for, foreach, getopts,
     glob, goto, hash, hashstat, history, hup, if, jobid, jobs, kill, limit,
     local, log, login, logout, ls-F, nice, nohup, notify, onintr, popd,
     printenv, pushd, pwd, read, readonly, rehash, repeat, return, sched, set,
     setenv, settc, setty, setvar, shift, source, stop, suspend, switch,
     telltc, test, then, time, times, trap, true, type, ulimit, umask,
     unalias, uncomplete, unhash, unlimit, unset, unsetenv, until, wait,
     where, which, while -- shell built-in commands

SYNOPSIS
     builtin [-options] [args ...]

DESCRIPTION
     Shell builtin commands are commands that can be executed within the run-
     ning shell's process.  Note that, in the case of csh(1) builtin commands,
     the command is executed in a subshell if it occurs as any component of a
     pipeline except the last.

     If a command specified to the shell contains a slash ``/'', the shell
     will not execute a builtin command, even if the last component of the
     specified command matches the name of a builtin command.  Thus, while
     specifying ``echo'' causes a builtin command to be executed under shells
     that support the echo builtin command, specifying ``/bin/echo'' or
     ``./echo'' does not.

     While some builtin commands may exist in more than one shell, their oper-
     ation may be different under each shell which supports them.  Below is a
     table which lists shell builtin commands, the standard shells that sup-
     port them and whether they exist as standalone utilities.

     Only builtin commands for the csh(1) and sh(1) shells are listed here.
     Consult a shell's manual page for details on the operation of its builtin
     commands.	Beware that the sh(1) manual page, at least, calls some of
     these commands ``built-in commands'' and some of them ``reserved words''.
     Users of other shells may need to consult an info(1) page or other
     sources of documentation.

     Commands marked ``No**'' under External do exist externally, but are
     implemented as scripts using a builtin command of the same name.

	   Command	 External    csh(1)    sh(1)
	   !		 No	     No        Yes
	   %		 No	     Yes       No
	   .		 No	     No        Yes
	   :		 No	     Yes       Yes
	   @		 No	     Yes       Yes
	   {		 No	     No        Yes
	   }		 No	     No        Yes
	   alias	 No**	     Yes       Yes
	   alloc	 No	     Yes       No
	   bg		 No**	     Yes       Yes
	   bind 	 No	     No        Yes
	   bindkey	 No	     Yes       No
	   break	 No	     Yes       Yes
	   breaksw	 No	     Yes       No
	   builtin	 No	     No        Yes
	   builtins	 No	     Yes       No
	   case 	 No	     Yes       Yes
	   cd		 No**	     Yes       Yes
	   chdir	 No	     Yes       Yes
	   command	 No**	     No        Yes
	   complete	 No	     Yes       No
	   continue	 No	     Yes       Yes
	   default	 No	     Yes       No
	   dirs 	 No	     Yes       No
	   do		 No	     No        Yes
	   done 	 No	     No        Yes
	   echo 	 Yes	     Yes       Yes
	   echotc	 No	     Yes       No
	   elif 	 No	     No        Yes
	   else 	 No	     Yes       Yes
	   end		 No	     Yes       No
	   endif	 No	     Yes       No
	   endsw	 No	     Yes       No
	   esac 	 No	     No        Yes
	   eval 	 No	     Yes       Yes
	   exec 	 No	     Yes       Yes
	   exit 	 No	     Yes       Yes
	   export	 No	     No        Yes
	   false	 Yes	     No        Yes
	   fc		 No**	     No        Yes
	   fg		 No**	     Yes       Yes
	   filetest	 No	     Yes       No
	   fi		 No	     No        Yes
	   for		 No	     No        Yes
	   foreach	 No	     Yes       No
	   getopts	 No**	     No        Yes
	   glob 	 No	     Yes       No
	   goto 	 No	     Yes       No
	   hash 	 No	     No        Yes
	   hashstat	 No	     Yes       No
	   history	 No	     Yes       No
	   hup		 No	     Yes       No
	   if		 No	     Yes       Yes
	   jobid	 No	     No        Yes
	   jobs 	 No**	     Yes       Yes
	   kill 	 Yes	     Yes       No
	   limit	 No	     Yes       No
	   local	 No	     No        Yes
	   log		 No	     Yes       No
	   login	 Yes	     Yes       No
	   logout	 No	     Yes       No
	   ls-F 	 No	     Yes       No
	   nice 	 Yes	     Yes       No
	   nohup	 Yes	     Yes       No
	   notify	 No	     Yes       No
	   onintr	 No	     Yes       No
	   popd 	 No	     Yes       No
	   printenv	 Yes	     Yes       No
	   pushd	 No	     Yes       No
	   pwd		 Yes	     No        Yes
	   read 	 No**	     No        Yes
	   readonly	 No	     No        Yes
	   rehash	 No	     Yes       No
	   repeat	 No	     Yes       No
	   return	 No	     No        Yes
	   sched	 No	     Yes       No
	   set		 No	     Yes       Yes
	   setenv	 No	     Yes       No
	   settc	 No	     Yes       No
	   setty	 No	     Yes       No
	   setvar	 No	     No        Yes
	   shift	 No	     Yes       Yes
	   source	 No	     Yes       No
	   stop 	 No	     Yes       No
	   suspend	 No	     Yes       No
	   switch	 No	     Yes       No
	   telltc	 No	     Yes       No
	   test 	 Yes	     No        Yes
	   then 	 No	     No        Yes
	   time 	 Yes	     Yes       No
	   times	 No	     No        Yes
	   trap 	 No	     No        Yes
	   true 	 Yes	     No        Yes
	   type 	 No	     No        Yes
	   ulimit	 No	     No        Yes
	   umask	 No**	     Yes       Yes
	   unalias	 No**	     Yes       Yes
	   uncomplete	 No	     Yes       No
	   unhash	 No	     Yes       No
	   unlimit	 No	     Yes       No
	   unset	 No	     Yes       Yes
	   unsetenv	 No	     Yes       No
	   until	 No	     No        Yes
	   wait 	 No**	     Yes       Yes
	   where	 No	     Yes       No
	   which	 Yes	     Yes       No
	   while	 No	     Yes       Yes

SEE ALSO
     csh(1), echo(1), false(1), info(1), kill(1), login(1), nice(1), nohup(1),
     printenv(1), pwd(1), sh(1), test(1), time(1), true(1), which(1)

HISTORY
     The builtin manual page first appeared in FreeBSD 3.4.

AUTHORS
     This manual page was written by Sheldon Hearn <sheldonh@FreeBSD.org>.

BSD			       February 23, 2005			   BSD
","# fc

> Open the most recent command and edit it.

- Open in the default system editor:

`fc`

- Specify an editor to open with:

`fc -e {{'emacs'}}`

- List recent commands from history:

`fc -l`
"
xed,,,,"# xed

> Opens files for editing in XCode.

- Open file in XCode:

`xed {{file1}}`

- Open file(s) in XCode, create if it doesn't exist:

`xed -c {{filename1}}`

- Open a file in XCode and jump to line number 75:

`xed -l 75 {{filename}}`
"
ditto,,,"


DITTO(1)		  BSD General Commands Manual		      DITTO(1)

NAME
     ditto -- copy directory hierarchies, create and extract archives

SYNOPSIS
     ditto [-v] [-V] [-X] [<options>] src ... dst_directory
     ditto [-v] [-V] [<options>] src_file dst_file
     ditto -c [-z | -j | -k] [-v] [-V] [-X] [<options>] src dst_archive
     ditto -x [-z | -j | -k] [-v] [-V] [<options>] src_archive ...
	   dst_directory
     ditto -h | --help

DESCRIPTION
     In its first form, ditto copies one or more source files or directories
     to a destination directory.  If the destination directory does not exist
     it will be created before the first source is copied.  If the destination
     directory already exists then the source directories are merged with the
     previous contents of the destination.

     In its second form, ditto copies a file to the supplied dst_file path-
     name.

     The next two forms reflect ditto's ability to create and extract ar-
     chives.  These archives can be either CPIO format (preferred for unix
     content) or PKZip (for Windows compatibility).  src_archive (and
     dst_archive) can be the single character '-', causing ditto to read
     (write) archive data from stdin (or to stdout, respectively).

     ditto follows symbolic links provided as arguments but does not follow
     any links as it traverses the source or destination hierarchies.  ditto
     overwrites existing files, symbolic links, and devices in the destination
     when these are copied from a source.  The resulting files, links, and
     devices will have the same mode, access time, modification time, owner,
     and group as the source items from which they are copied.	Pipes, sock-
     ets, and files with names beginning with .nfs or .afpDeleted will be
     ignored.  ditto does not modify the mode, owner, group, extended
     attributes, or ACLs of existing directories in the destination.  Files
     and symbolic links cannot overwrite directories or vice-versa.

     ditto can be used to ""thin"" Universal Mach-O binaries during a copy.
     ditto can also copy files selectively based on the contents of a BOM
     (""Bill of Materials"") file.  ditto preserves file hard links (but not
     directory hard links) present in the source directories and preserves
     setuid and setgid modes when run as the superuser.

     ditto will preserve resource forks and HFS meta-data information when
     copying unless instructed otherwise using --norsrc .  Similarly, ditto
     will preserve extended attributes and Access Control Lists (ACLs) unless
     --noextattr or --noacl is passed.	DITTONORSRC can be set in the environ-
     ment as an alias to --norsrc --noextattr --noacl on the command line.

OPTIONS
     -h 	   Print full usage.

     -v 	   Print a line of output to stderr for each source directory
		   copied.

     -V 	   Print a line of output to stderr for every file, symbolic
		   link, and device copied.

     -X 	   When copying one or more source directories, do not descend
		   into directories that have a different device ID.

     -c 	   Create an archive at the destination path.  The default
		   format is CPIO, unless -k is given.	CPIO archives should
		   be stored in files with names ending in .cpio.  Compressed
		   CPIO archives should be stored in files with names ending
		   in .cpgz.

     -z 	   Create compressed CPIO archives, using gzip(1) compression.

     -j 	   Create compressed CPIO archives, using bzip2(1) compres-
		   sion.

     -x 	   Extract the archives given as source arguments. The format
		   is assumed to be CPIO, unless -k is given.  Compressed CPIO
		   is automatically handled.

     -k 	   Create or extract from a PKZip archive instead of the
		   default CPIO.  PKZip archives should be stored in filenames
		   ending in .zip.

     --keepParent  When creating an archive, embed the parent directory name
		   src in dst_archive.

     --arch arch   Thin Universal binaries to the specified architecture.  If
		   multiple --arch options are specified then the resulting
		   destination file will contain each of the specified archi-
		   tectures (if they are present in the source file).  arch
		   should be specified as ""i386"", ""x86_64"", etc.

     --bom bom	   Copy only files, links, devices, and directories that are
		   present in the specified BOM.

     --rsrc	   Preserve resource forks and HFS meta-data.  ditto will
		   store this data in Carbon-compatible ._ AppleDouble files
		   on filesystems that do not natively support resource forks.
		   As of Mac OS X 10.4, --rsrc is default behavior.

     --norsrc	   Do not preserve resource forks and HFS meta-data.  If both
		   --norsrc and --rsrc are passed, whichever is passed last
		   will take precedence.  Both options override DITTONORSRC.
		   Unless explicitly specified, --norsrc also implies
		   --noextattr and --noacl to match the behavior of Mac OS X
		   10.4.

     --extattr	   Preserve extended attributes (requires --rsrc). As of Mac
		   OS X 10.5, --extattr is the default.

     --noextattr   Do not preserve extended attributes (requires --norsrc).

     --qtn	   Preserve quarantine information.  As of Mac OS X 10.5,
		   --qtn is the default.

     --noqtn	   Do not preserve quarantine information.

     --acl	   Preserve Access Control Lists (ACLs).  As of Mac OS X 10.5,
		   --acl is the default.

     --noacl	   Do not preserve ACLs.

     --nocache	   Do not perform copies using the Mac OS X Unified Buffer
		   Cache. Files read and written will not be cached, although
		   if the file is already present in the cache, the cached
		   information will be used.

     --hfsCompression
		   When copying files or extracting content from an archive,
		   if the destination is an HFS+ volume that supports compres-
		   sion, all the content will be compressed if appropriate.
		   This is only supported on Mac OS X 10.6 or later, and is
		   only intended to be used in installation and backup scenar-
		   ios that involve system files. Since files using HFS+ com-
		   pression are not readable on versions of Mac OS X earlier
		   than 10.6, this flag should not be used when dealing with
		   non-system files or other user-generated content that will
		   be used on a version of Mac OS X earlier than 10.6.

     --nohfsCompression
		   Do not compress files with HFS+ compression when copying or
		   extracting content from an archive unless the content is
		   already compressed with HFS+ compression.  This flag is
		   only supported on Mac OS X 10.6 or later.
		   --nohfsCompression is the default.

     --preserveHFSCompression
		   When copying files to an HFS+ volume that supports compres-
		   sion, ditto will preserve the compression of any source
		   files that were using HFS+ compression.  This flag is only
		   supported on Mac OS X 10.6 or later.
		   --preserveHFSCompression is the default.

     --nopreserveHFSCompression
		   Do not preserve HFS+ compression when copying files that
		   are already compressed with HFS+ compression. This is only
		   supported on Mac OS X 10.6 or later.

     --sequesterRsrc
		   When creating a PKZip archive, preserve resource forks and
		   HFS meta-data in the subdirectory __MACOSX.	PKZip extrac-
		   tion will automatically find these resources.

     --zlibCompressionLevel num
		   Sets the compression level to use when creating a PKZip ar-
		   chive. The compression level can be set from 0 to 9, where
		   0 represents no compression, and 9 represents optimal
		   (slowest) compression. By default, ditto will use the
		   default compression level as defined by zlib.

     --password    When extracting a password-encrypted ZIP archive, you must
		   specify --password to allow ditto to prompt for a password
		   to use to extract the contents of the file. If this option
		   is not provided, and a password-encrypted file is encoun-
		   tered, ditto will emit an error message.

EXAMPLES
     The command:
	   ditto src_directory dst_directory
     copies the contents of src_directory into dst_directory, creating
     dst_directory if it does not already exist.

     The command:
	   ditto src_directory dir/dst_directory
     copies the contents of src_directory into dir/dst_directory, creating dir
     and dst_directory if they don't already exist.

     The command:
	   ditto src-1 ... src-n dst_directory
     copies the contents of all of the src directories into dst_directory,
     creating dst_directory if it does not already exist.

     The command:
	   ditto --arch ppc universal_file thin_file
     copies the contents of universal_file into thin_file, thinning executable
     code to ppc-only on the fly.

     The command:
	   ditto -c --norsrc Scripts -|ssh rhost ditto -x --norsrc - ./Scripts
     copies Scripts, skipping any resources or meta-data, to rhost.

     The command:
	   pax -f archive.cpio
     will list the files in the CPIO archive archive.cpio.

     The command:
	   pax -zf archive.cpgz
     will list the files in the compressed CPIO archive archive.cpgz.

     The command:
	   ditto -c -k --sequesterRsrc --keepParent src_directory archive.zip
     will create a PKZip archive similarly to the Finder's Compress function-
     ality.

     The command:
	   unzip -l archive.zip
     will list the files in the PKZip archive archive.zip.

ERRORS
     ditto returns 0 if everything is copied, otherwise non-zero.  ditto
     almost never gives up, preferring to report errors along the way.	Diag-
     nostic messages will be printed to standard error.

ENVIRONMENT
     DITTOABORT  If the environment variable DITTOABORT is set, ditto will
		 call abort(3) if it encounters a fatal error.

     DITTONORSRC
		 If DITTONORSRC is set but --rsrc, --extattr, and --acl are
		 not specified, ditto will not preserve those additional types
		 of metadata.

BUGS
     ditto doesn't copy directories into directories in the same way as cp(1).
     In particular,
	   ditto foo bar
     will copy the contents of foo into bar, whereas
	   cp -r foo bar
     copies foo itself into bar. Though this is not a bug, some may consider
     this bug-like behavior.  --keepParent for non-archive copies will eventu-
     ally alleviate this problem.

SEE ALSO
     bom(5), lsbom(8), mkbom(8), cpio(1), zip(1), gzip(1), bzip2(1), tar(1).

Mac OS X		       December 19, 2008		      Mac OS X
","# ditto

> Copy files and directories.

- Overwrite contents of destination directory with contents of source directory:

`ditto {{path/to/source}} {{path/to/destination}}`

- Print a line to the Terminal window for every file that's being copied:

`ditto -V {{path/to/source}} {{path/to/destination}}`

- Copy a given file or directory, while retaining the original file permissions:

`ditto -rsrc {{path/to/source}} {{path/to/destination}}`
"
afinfo,,,"
AFINFO(1)		  BSD General Commands Manual		     AFINFO(1)

NAME
     afinfo -- Audio File Info

SYNOPSIS
     afinfo audiofile

DESCRIPTION
     Audio File Info prints out information about an audio file to stdout

Darwin			       February 13, 2007			Darwin
","# afinfo

> Audio file metadata parser for OS X.
> Built-in command of OS X.

- Display info of a given audio file:

`afinfo {{path/to/file}}`

- Print a one line description of the audio file:

`afinfo -b {{path/to/file}}`

- Print metadata info and contents of the audio file's InfoDictionary:

`afinfo -i {{path/to/file}}`

- Print output in xml format:

`afinfo -x {{path/to/file}}`

- Print warnings for the audio file if any:

`afinfo --warnings {{path/to/file}}`

- Display help for full usage:

`afinfo -h`
"
wifi-password,https://github.com/rauchg/wifi-password,"













GitHub - rauchg/wifi-password: Get the password of the wifi you're on (bash)








































Skip to content













                Sign up
              
















                    Why GitHub?
                    




Features →

Code review
Project management
Integrations
Actions
Packages
Security
Team management
Hosting
Mobile


Customer stories →
Security →





Team


Enterprise




                    Explore
                    





Explore GitHub →

Learn & contribute

Topics
Collections
Trending
Learning Lab
Open source guides

Connect with others

Events
Community forum
GitHub Education
GitHub Stars program





Marketplace




                    Pricing
                    




Plans →

Compare plans
Contact Sales


Nonprofit →
Education →






























        In this repository
      

        All GitHub
      
↵


      Jump to
      ↵






No suggested jump to results















        In this repository
      

        All GitHub
      
↵


      Jump to
      ↵















        In this repository
      

        All GitHub
      
↵


      Jump to
      ↵






 



          Sign in
        

              Sign up
            



















rauchg

/

wifi-password







    Watch
 
      52
    




      Star


      3.4k
    




          Fork


        185
      





        Get the password of the wifi you're on (bash)
      



3.4k
        stars
 

185
        forks
 




      Star





    Watch









Code

 



Issues
8
 



Pull requests
5
 



Actions

 



Projects
0
 



Security

 



Insights

 
 




More

 




                    Code
 


                    Issues
 


                    Pull requests
 


                    Actions
 


                    Projects
 


                    Security
 


                    Insights
 


 










          Dismiss
        
Join GitHub today
GitHub is home to over 50 million developers working together to host and review code, manage projects, and build software together.
Sign up










master














1
branch



2
tags




    Go to file






      Code
      
 








  Clone






            HTTPS
 
            GitHub CLI
 









      Use Git or checkout with SVN using the web URL.
    









      Work fast with our official CLI.
      Learn more.
    







                Open with GitHub Desktop
 



                Download ZIP
 



Launching GitHub Desktop
If nothing happens, download GitHub Desktop and try again.
Go back


Launching GitHub Desktop
If nothing happens, download GitHub Desktop and try again.
Go back


Launching Xcode
If nothing happens, download Xcode and try again.
Go back


Launching Visual Studio
If nothing happens, download the GitHub extension for Visual Studio and try again.
Go back









Latest commit






 




rauchg

OSX -> macOS



…




          3
        

d17a0dd

Jul 17, 2016





OSX -> macOS


d17a0dd


          3
        



Git stats





20
commits







Files
Permalink


  
    Failed to load latest commit information.

 


Type
Name
Latest commit message
Commit time






History.md



Release 0.1.0



Feb 16, 2015







Readme.md



OSX -> macOS



Jul 17, 2016







package.json



make bpkg friendly



Feb 15, 2015







wifi-password.plugin.zsh



Prepend ourself to `$PATH` instead of appending



Jul 12, 2016







wifi-password.sh



Make sure you get the wifi password



Feb 17, 2015





        View code
      






        Readme.md
      


wifi-password
People ask you for the Wi-Fi password. Answer quickly. macOS only.
Windows version.

How to use
1. Install it
With bpkg:
$ bpkg install rauchg/wifi-password

With Homebrew:
$ brew install wifi-password

With Antigen:
Add antigen bundle rauchg/wifi-password to your .zshrc with your other antigen commands
With Zgen
Add zgen load rauchg/wifi-password to your .zshrc with your other zgen commands
or with curl:
curl -L https://raw.github.com/rauchg/wifi-password/master/wifi-password.sh -o ~/bin/wifi-password && chmod +x ~/bin/wifi-password

If you don't have ~/bin in your $PATH, replace it with /usr/local/bin or
similar.
2. Use it:
To get the password for the WiFi you're currently logged onto:
$ wifi-password

To get it for a specific SSID:
$ wifi-password <ssid>

To put it straight in your clipboard for pasting elsewhere (OS X only):
$ wifi-password | pbcopy

License
MIT








About

      Get the password of the wifi you're on (bash)
    
Resources



      Readme
 






    Releases



2
tags







    Packages 0


        No packages published 













    Contributors 7





 



 



 



 



 



 



 





Languages








Shell
100.0%















© 2020 GitHub, Inc.
Terms
Privacy
Security
Status
Help





Contact GitHub
Pricing
API
Training
Blog
About











    You can’t perform that action at this time.
  


















You signed in with another tab or window. Reload to refresh your session.
You signed out in another tab or window. Reload to refresh your session.







",,"# wifi-password

> Get the password of the wifi.
> More information: <https://github.com/rauchg/wifi-password>.

- Get the password for the wifi you are currently logged onto:

`wifi-password`

- Get the password for the wifi with a specific SSID:

`wifi-password {{ssid}}`

- Print only the password as output:

`wifi-password -q`
"
stty,,,"
STTY(1) 		  BSD General Commands Manual		       STTY(1)

NAME
     stty -- set the options for a terminal device interface

SYNOPSIS
     stty [-a | -e | -g] [-f file] [operands]

DESCRIPTION
     The stty utility sets or reports on terminal characteristics for the
     device that is its standard input.  If no options or operands are speci-
     fied, it reports the settings of a subset of characteristics as well as
     additional ones if they differ from their default values.	Otherwise it
     modifies the terminal state according to the specified arguments.	Some
     combinations of arguments are mutually exclusive on some terminal types.

     The following options are available:

     -a      Display all the current settings for the terminal to standard
	     output as per IEEE Std 1003.2 (``POSIX.2'').

     -e      Display all the current settings for the terminal to standard
	     output in the traditional BSD ``all'' and ``everything'' formats.

     -f      Open and use the terminal named by file rather than using stan-
	     dard input.  The file is opened using the O_NONBLOCK flag of
	     open(), making it possible to set or display settings on a termi-
	     nal that might otherwise block on the open.

     -g      Display all the current settings for the terminal to standard
	     output in a form that may be used as an argument to a subsequent
	     invocation of stty to restore the current terminal state as per
	     IEEE Std 1003.2 (``POSIX.2'').

     The following arguments are available to set the terminal characteris-
     tics:

   Control Modes:
     Control mode flags affect hardware characteristics associated with the
     terminal.	This corresponds to the c_cflag in the termios structure.

     number	 Set terminal baud rate to the number given, if possible.  If
		 the baud rate is set to zero, modem control is no longer
		 asserted.

     clocal (-clocal)
		 Assume a line without (with) modem control.

     cread (-cread)
		 Enable (disable) the receiver.

     crtscts (-crtscts)
		 Enable (disable) RTS/CTS flow control.

     cs5 cs6 cs7 cs8
		 Select character size, if possible.

     cstopb (-cstopb)
		 Use two (one) stop bits per character.

     hup (-hup)  Same as hupcl (-hupcl).

     hupcl (-hupcl)
		 Stop asserting modem control (do not stop asserting modem
		 control) on last close.

     ispeed number
		 Set terminal input baud rate to the number given, if possi-
		 ble.  If the input baud rate is set to zero, the input baud
		 rate is set to the value of the output baud rate.

     ospeed number
		 Set terminal output baud rate to the number given, if possi-
		 ble.  If the output baud rate is set to zero, modem control
		 is no longer asserted.

     parenb (-parenb)
		 Enable (disable) parity generation and detection.

     parodd (-parodd)
		 Select odd (even) parity.

     speed number
		 This sets both ispeed and ospeed to number.

   Input Modes:
     This corresponds to the c_iflag in the termios structure.

     brkint (-brkint)
		 Signal (do not signal) INTR on break.

     icrnl (-icrnl)
		 Map (do not map) CR to NL on input.

     ignbrk (-ignbrk)
		 Ignore (do not ignore) break on input.

     igncr (-igncr)
		 Ignore (do not ignore) CR on input.

     ignpar (-ignpar)
		 Ignore (do not ignore) characters with parity errors.

     imaxbel (-imaxbel)
		 The system imposes a limit of MAX_INPUT (currently 255) char-
		 acters in the input queue.  If imaxbel is set and the input
		 queue limit has been reached, subsequent input causes the
		 system to send an ASCII BEL character to the output queue
		 (the terminal beeps at you).  Otherwise, if imaxbel is unset
		 and the input queue is full, the next input character causes
		 the entire input and output queues to be discarded.

     inlcr (-inlcr)
		 Map (do not map) NL to CR on input.

     inpck (-inpck)
		 Enable (disable) input parity checking.

     istrip (-istrip)
		 Strip (do not strip) input characters to seven bits.

     iutf8 (-iutf8)
		 Assume input characters are UTF-8 encoded.

     ixany (-ixany)
		 Allow any character (allow only START) to restart output.

     ixoff (-ixoff)
		 Request that the system send (not send) START/STOP characters
		 when the input queue is nearly empty/full.

     ixon (-ixon)
		 Enable (disable) START/STOP output control.  Output from the
		 system is stopped when the system receives STOP and started
		 when the system receives START, or if ixany is set, any char-
		 acter restarts output.

     parmrk (-parmrk)
		 Mark (do not mark) characters with parity errors.

   Output Modes:
     This corresponds to the c_oflag of the termios structure.

     bs0 bs1	 Select the style of delay for backspaces (e.g., set BSDLY to
		 BS0).

     cr0 cr1 cr2 cr3
		 Select the style of delay for carriage returns (e.g., set
		 CRDLY to CR0).

     ff0 ff1	 Select the style of delay for form feeds (e.g., set FFDLY to
		 FF0).

     nl0 nl1	 Select the style of delay for newlines (e.g., set NLDLY to
		 NL0).

     ocrnl (-ocrnl)
		 Map (do not map) carriage return to newline on output.

     ofdel (-odell)
		 Use DELs (NULs) as fill characters.

     ofill (-ofill)
		 Use fill characters (use timing) for delays.

     onlcr (-onlcr)
		 Map (do not map) NL to CR-NL on output.

     onlret (-onlret)
		 On the terminal, NL performs (does not perform) the CR func-
		 tion.

     onocr (-onocr)
		 Do not (do) output CRs at column zero.

     opost (-opost)
		 Post-process output (do not post-process output; ignore all
		 other output modes).

     oxtabs (-oxtabs)
		 Expand (do not expand) tabs to spaces on output.

     tab0 tab1 tab2 tab3
		 Select the style of delay for horizontal tabs (e.g., set
		 TABDLY to TAB0).

     tabs (-tabs)
		 Same as tab0 (tab3).

     vt0 vt1	 Select the style of delay for vertical tabs (e.g., set VTDLY
		 to VT0).

   Local Modes:
     Local mode flags (lflags) affect various and sundry characteristics of
     terminal processing.  Historically the term ""local"" pertained to new job
     control features implemented by Jim Kulp on a Pdp 11/70 at IIASA.	Later,
     the driver ran on the first VAX at Evans Hall, UC Berkeley, where the job
     control details were greatly modified, but the structure definitions and
     names remained essentially unchanged.  The second interpretation of the
     'l' in lflag is ``line discipline flag'', which corresponds to the
     c_lflag of the termios structure.

     altwerase (-altwerase)
		 Use (do not use) an alternate word erase algorithm when pro-
		 cessing WERASE characters.  This alternate algorithm consid-
		 ers sequences of alphanumeric/underscores as words.  It also
		 skips the first preceding character in its classification (as
		 a convenience, since the one preceding character could have
		 been erased with simply an ERASE character.)

     echo (-echo)
		 Echo back (do not echo back) every character typed.

     echoctl (-echoctl)
		 If echoctl is set, echo control characters as ^X.  Otherwise,
		 control characters echo as themselves.

     echoe (-echoe)
		 The ERASE character shall (shall not) visually erase the last
		 character in the current line from the display, if possible.

     echok (-echok)
		 Echo (do not echo) NL after KILL character.

     echoke (-echoke)
		 The KILL character shall (shall not) visually erase the cur-
		 rent line from the display, if possible.

     echonl (-echonl)
		 Echo (do not echo) NL, even if echo is disabled.

     echoprt (-echoprt)
		 For printing terminals.  If set, echo erased characters back-
		 wards within ``\'' and ``/''.	Otherwise, disable this fea-
		 ture.

     flusho (-flusho)
		 Indicates output is (is not) being discarded.

     icanon (-icanon)
		 Enable (disable) canonical input (ERASE and KILL processing).

     iexten (-iexten)
		 Enable (disable) any implementation-defined special control
		 characters that are not currently controlled by icanon, isig,
		 ixoff, or ixon.

     isig (-isig)
		 Enable (disable) the checking of characters against the spe-
		 cial control characters INTR, QUIT, and SUSP.

     mdmbuf (-mdmbuf)
		 If set, flow control output based on condition of Carrier
		 Detect.  Otherwise, writes return an error if Carrier Detect
		 is low (and Carrier is not being ignored with the CLOCAL
		 flag.)

     noflsh (-noflsh)
		 Disable (enable) flush after INTR, QUIT, or SUSP.

     pendin (-pendin)
		 Indicates input is (is not) pending after a switch from non-
		 canonical to canonical mode and will be re-input when a read
		 becomes pending or more input arrives.

     tostop (-tostop)
		 Send (do not send) SIGTTOU for background output.  This
		 causes background jobs to stop if they attempt terminal out-
		 put.

   Control Characters:
     control-character string
		 Set control-character to string.  If string is a single char-
		 acter, the control character is set to that character.  If
		 string is the two character sequence ""^-"" or the string
		 ""undef"" the control character is disabled (i.e. set to
		 {_POSIX_VDISABLE}.)

		 Recognized control-characters:


		       control-
		       character    Subscript	 Description
		       _________    _________	 _______________
		       eof	    VEOF	 EOF character
		       eol	    VEOL	 EOL character
		       eol2	    VEOL2	 EOL2 character
		       erase	    VERASE	 ERASE character
		       erase2	    VERASE2	 ERASE2 character
		       werase	    VWERASE	 WERASE character
		       intr	    VINTR	 INTR character
		       kill	    VKILL	 KILL character
		       quit	    VQUIT	 QUIT character
		       susp	    VSUSP	 SUSP character
		       start	    VSTART	 START character
		       stop	    VSTOP	 STOP character
		       dsusp	    VDSUSP	 DSUSP character
		       lnext	    VLNEXT	 LNEXT character
		       reprint	    VREPRINT	 REPRINT character
		       status	    VSTATUS	 STATUS character

     min number

     time number
		 Set the value of min or time to number.  MIN and TIME are
		 used in Non-Canonical mode input processing (-icanon).

   Combination Modes:
     saved settings
		 Set the current terminal characteristics to the saved set-
		 tings produced by the -g option.

     cols number
		 Same as columns.

     columns number
		 The terminal size is recorded as having number columns.

     crt (-crt)  Set (disable) all modes suitable for a CRT display device.

     dec	 Set modes suitable for users of Digital Equipment Corporation
		 systems (ERASE, KILL, and INTR characters are set to ^?, ^U,
		 and ^C; ixany is disabled, and crt is enabled.)

     ek 	 Reset ERASE, ERASE2, and KILL characters back to system
		 defaults.

     -evenp	 Same as -oddp and -parity.

     evenp	 Enable parenb and cs7; disable parodd.

     extproc (-extproc)
		 If set, this flag indicates that some amount of terminal pro-
		 cessing is being performed by either the terminal hardware or
		 by the remote side connected to a pty.

     kerninfo (-kerninfo)
		 Enable (disable) the system generated status line associated
		 with processing a STATUS character (usually set to ^T).  The
		 status line consists of the system load average, the current
		 command name, its process ID, the event the process is wait-
		 ing on (or the status of the process), the user and system
		 times, percent cpu, and current memory usage.

     nl (-nl)	 Enable (disable) icrnl.  In addition, -nl unsets inlcr and
		 igncr.

     -oddp	 Same as -evenp and -parity.

     oddp	 Enable parenb, cs7, and parodd.

     -parity	 Disable parenb; set cs8.

     parity	 Same as evenp.

     raw (-raw)  If set, change the modes of the terminal so that no input or
		 output processing is performed.  If unset, change the modes
		 of the terminal to some reasonable state that performs input
		 and output processing.  Note that since the terminal driver
		 no longer has a single RAW bit, it is not possible to intuit
		 what flags were set prior to setting raw.  This means that
		 unsetting raw may not put back all the setting that were pre-
		 viously in effect.  To set the terminal into a raw state and
		 then accurately restore it, the following shell code is rec-
		 ommended:

		 save_state=$(stty -g)
		 stty raw
		 ...
		 stty ""$save_state""

     rows number
		 The terminal size is recorded as having number rows.

     sane	 Resets all modes to reasonable values for interactive termi-
		 nal use.

     size	 The size of the terminal is printed as two numbers on a sin-
		 gle line, first rows, then columns.

     tty	 Set the line discipline to the standard terminal line disci-
		 pline TTYDISC.

   Compatibility Modes:
     These modes remain for compatibility with the previous version of the
     stty command.

     all	 Reports all the terminal modes as with stty -a, except that
		 the control characters are printed in a columnar format.

     brk value	 Same as the control character eol.

     cbreak	 If set, enables brkint, ixon, imaxbel, opost, isig, iexten,
		 and -icanon.  If unset, same as sane.

     cooked	 Same as sane.

     crtbs (-crtbs)
		 Same as echoe.

     crterase (-crterase)
		 Same as echoe.

     crtkill (-crtkill)
		 Same as echoke.

     ctlecho (-ctlecho)
		 Same as echoctl.

     decctlq (-decctlq)
		 The converse of ixany.

     everything  Same as all.

     flush value
		 Same as the control character discard.

     litout (-litout)
		 The converse of opost.

     new	 Same as tty.

     newcrt (-newcrt)
		 Same as crt.

     old	 Same as tty.

     pass8	 The converse of parity.

     prterase (-prterase)
		 Same as echoprt.

     rprnt value
		 Same as the control character reprint.

     tabs (-tabs)
		 The converse of oxtabs.

     tandem (-tandem)
		 Same as ixoff.

DIAGNOSTICS
     The stty utility exits 0 on success, and >0 if an error occurs.

LEGACY DESCRIPTION
     In legacy operation, the bs[01], cr[0-3], ff[01], nl[01], tab[0-3], and
     vt[01] control modes are not accepted, nor are ocrnl (-ocrnl), ofdel
     (-ofdel), ofill (-ofill), onlret (-onlret), and onocr (-onocr).

     For more information about legacy mode, see compat(5).

SEE ALSO
     termios(4), compat(5)

STANDARDS
     The stty utility is expected to be IEEE Std 1003.2 (``POSIX.2'') compati-
     ble.  The flags -e and -f are extensions to the standard.

BSD				April 18, 1994				   BSD
","# stty

> Set options for a terminal device interface.

- Display all settings for the current terminal:

`stty -a`

- Set the number of rows:

`stty rows {{rows}}`

- Set the number of columns:

`stty cols {{cols}}`

- Get the actual transfer speed of a device:

`stty -f {{path/to/device_file}} speed`

- Reset all modes to reasonable values for the current terminal:

`stty sane`
"
softwareupdate,,,"
softwareupdate(8)	  BSD System Manager's Manual	     softwareupdate(8)

NAME
     softwareupdate -- system software update tool

SYNOPSIS
     softwareupdate command [args ...]

DESCRIPTION
     Software Update checks for new and updated versions of your software
     based on information about your computer and current software.

     Invoke softwareupdate by specifying a command followed by zero or more
     args.

     softwareupdate requires admin authentication for all commands except
     --list.  If you run softwareupdate as a normal admin user, you will be
     prompted for a password where required. Alternatively, you can run
     softwareupdate as root and avoid all further authentication prompts.

     The following commands are available:

     -l | --list
		 List all available updates.

     -i | --install
		 Each update specified by args is downloaded and installed.
		 args can be one of the following:

		 -r | --recommended
			     All updates that are recommended for your system.
			     These are prefixed with a * character in the
			     --list output.

		 -R | --restart
			     Automatically restart (or shut down) if required
			     to complete installation. If the user invoking
			     this tool is logged in then macOS will attempt to
			     quit all applications, logout, and restart. If
			     the user is not logged in, macOS will trigger a
			     forced reboot if necessary. If you wish to always
			     perform a forced reboot, pass --force.

		 -a | --all  All updates that are applicable to your system,
			     including those non-recommended ones, which are
			     prefixed with a - character in the --list output.
			     (Non-recommended updates are uncommon in any
			     case.)

		 item ...    One or more specified updates. The --list output
			     shows the item names you can specify here, pre-
			     fixed by the * or - characters. See EXAMPLES.

     -d | --download
		 Each update specified by args is downloaded but not
		 installed. The values of args are the same as for the
		 --install command. Updates downloaded with --download can be
		 subsequently installed with --install, or through the App
		 Store (as long as they remain applicable to your system).
		 Updates are downloaded to /Library/Updates, but are not
		 designed to be installed by double-clicking the packages in
		 that directory: always use --install or the App Store to
		 actually perform the install.

     --ignore identifier ...
		 Manages the per-machine list of ignored updates. The
		 identifier is the first part of the item name (before the
		 dash and version number) that is shown by --list.  See
		 EXAMPLES.

     --reset-ignored
		 Clears the per-machine list of ignored updates.

     --schedule on | off
		 Manages the per-machine automatic (background) check prefer-
		 ence.

     -h | --help
		 Print command usage.

EXAMPLES
     The following examples are shown as given to the shell:

     softwareupdate --list

	   Software Update Tool

	   Finding available software
	   Software Update found the following new or updated software:
	      * MacBookAirEFIUpdate2.4-2.4
		   MacBook Air EFI Firmware Update (2.4), 3817K [recommended] [restart]
	      * ProAppsQTCodecs-1.0
		   ProApps QuickTime codecs (1.0), 968K [recommended]
	      * JavaForOSX-1.0
		   Java for OS X 2012-005 (1.0), 65288K [recommended]

     sudo softwareupdate --install JavaForOSX-1.0

	   Software Update Tool

	   Finding available software

	   Downloading Java for OS X 2012-005
	   Downloaded Java for OS X 2012-005
	   Installing Java for OS X 2012-005
	   Done with Java for OS X 2012-005
	   Done.

     sudo softwareupdate --schedule

	   Automatic check is on

Mac OS			      September 11, 2012			Mac OS
","# softwareupdate

> A tool for updating MacOS App Store apps via the command line.

- List all available updates:

`softwareupdate -l`

- Download and install all updates:

`softwareupdate -ia`

- Download and install all recommended updates:

`softwareupdate -ir`

- Download and install a specific app:

`softwareupdate -i {{update_name}}`
"
mkfile,,,"MKFILE(8)							     MKFILE(8)



NAME
       mkfile - create a file

SYNOPSIS
       mkfile [ -nv ] size[b|k|m|g] filename ...

DESCRIPTION
       mkfile  creates	one  or  more  files that are suitable for use as NFS-
       mounted swap areas.  The sticky bit is set, and the file is padded with
       zeroes  by  default.   Non-root	users  must  set  the sticky bit using
       chmod(1).  The default size unit is bytes, but the  following  suffixes
       may  be	used  to  multiply  by	the given factor: b (512), k (1024), m
       (1048576), and g (1073741824).

OPTIONS
       -n     Create an empty filename.  The size is noted,  but  disk	blocks
	      aren't allocated until data is written to them.

       -v     Verbose.	Report the names and sizes of created files.

WARNING
       If  a  client's	swap  file  is	removed  and recreated, it must be re-
       exported before the client will be able to access it.  This action  may
       only be done when the client is not running.

SEE ALSO
       chmod(2), stat(2), sticky(7)



			       1 September 1997 		     MKFILE(8)
","# mkfile

> Create one or more empty files of any size.

- Create an empty file of 15 kilobytes:

`mkfile -n {{15k}} {{filename}}`

- Create a file of a given size and unit (bytes, KB, MB, GB):

`mkfile -n {{size}}{{b|k|m|g}} {{filename}}`

- Create two files of 4 megabytes each:

`mkfile -n {{4m}} {{first_filename}} {{second_filename}}`
"
pdfgrep,,,,"# pdfgrep

> Search text in PDF files.

- Find lines that match pattern in a PDF:

`pdfgrep {{pattern}} {{file.pdf}}`

- Include file name and page number for each matched line:

`pdfgrep --with-filename --page-number {{pattern}} {{file.pdf}}`

- Do a case insensitive search for lines that begin with ""foo"" and return the first 3 matches:

`pdfgrep --max-count {{3}} --ignore-case {{'^foo'}} {{file.pdf}}`

- Find pattern in files with a .pdf extension in the current directory recursively:

`pdfgrep --recursive {{pattern}}`

- Find pattern on files that match a specific glob in the current directory recursively:

`pdfgrep --recursive --include {{'*book.pdf'}} {{pattern}}`
"
pkgutil,,,"
pkgutil(1)		  BSD General Commands Manual		    pkgutil(1)

NAME
     pkgutil -- Query and manipulate Mac OS X Installer packages and receipts.

SYNOPSIS
     pkgutil [options] [commands]

DESCRIPTION
     pkgutil reads and manipulates Mac OS X Installer flat packages, and pro-
     vides access to the ``receipt'' database used by the Installer. Options
     are processed first, and affect the operation of all commands. Multiple
     commands are performed sequentially in the given order.

     The files and directories where receipts are stored are subject to
     change. Always use pkgutil to query or modify them.

OPTIONS
     --help, -h  A brief summary of commands and usage.

     --force, -f
		 Don't ask for confirmation before performing a potentially
		 destructive or ambiguous operation.

     --verbose, -v
		 Output in a ""human-readable"" format with extra headers, foot-
		 ers, indentation, and other contextual information.

     --volume path
		 Perform all operations on the specified volume or home direc-
		 tory.	The root volume '/' will be used if unspecified.

     --edit-pkg package-id
		 Specifies an existing receipt to be modified in-place by
		 --learn.

     --only-files
		 List only files (not directories) in --files listing.

     --only-dirs
		 List only directories (not files) in --files listing.

     --regexp	 Try to match package-id arguments as a regular expression if
		 an exact match isn't found. See egrep(1) and re_format(7) for
		 syntax.

RECEIPT DATABASE COMMANDS
     --packages, --pkgs
		 List all installed package IDs on the specified --volume.

     --pkgs-plist
		 List all installed package IDs on the specified --volume in
		 Mac OS X plist(5) format.

     --pkgs=REGEXP
		 List all installed package IDs matching REGEXP on the speci-
		 fied --volume.  The equal sign (=) is required or the search
		 string will be ignored and all package IDs will be returned.
		 Be mindful of escaping characters in both your shell and the
		 regular expression.  (Eg, 'pkgutil --pkgs=\\.D' searches for
		 package IDs matching the literal '.D' after escaping the
		 backslash from your shell and then the dot from the regex to
		 make it literal.) Regular expressions are more complex than
		 simple shell globbing. A dot (.) matches any character, while
		 '*' matches zero or more of the previous character. See
		 re_format(7) for a complete description of the syntax.

     --files package-id
		 List all of the files installed under the package-id.

     --export-plist package-id
		 Print all receipt information about the specified package-id
		 in the standard Mac OS X plist(5) format.

     --pkg-info package-id
		 Print extended information about the specified package-id.

     --pkg-info-plist package-id
		 Print extended information about the specified package-id in
		 Mac OS X plist(5) format.

     --forget package-id
		 Discard all receipt data about package-id, but do not touch
		 the installed files.  DO NOT use this command from an
		 installer package script to fix broken package design.

     --learn path
		 Update the ACLs of the given path in the receipt identified
		 by --edit-pkg.  This affects subsequent repair operations on
		 the package. This command cannot be used from package postin-
		 stall scripts, but if a postinstall script changes the ACLs
		 on the installed files, the receipt is automatically be
		 updated to reflect those changes.  This command will not
		 update the filesystem permissions in the receipt.

     --pkg-groups package-id
		 List all of the package groups this package-id is a member
		 of.

     --groups	 List all of the package groups on the specified --volume.

     --groups-plist
		 List all of the package groups on the specified --volume in
		 Mac OS X plist(5) format.

     --group-pkgs group-id
		 List all of the packages that are members of this group-id.

     --file-info path
		 Show the metadata known about path.

     --file-info-plist path
		 Show the metadata known about path in Mac OS X plist(5) for-
		 mat.

FILE COMMANDS
     --expand pkg-path dir-path
		 Expand the flat package at pkg-path into a new directory
		 specified by dir-path.

     --flatten dir-path pkg-path
		 Flatten the dir-path into a new flat package created at
		 pkg-path.  The directory to be flattened must have the proper
		 contents and layout for a flat package.  This is not intended
		 as a substitute for pkgbuild(1).

     --bom path  Extract any BOM files from the flat pkg at path into /tmp and
		 return the filename(s).  Suggested use is as an argument to
		 lsbom(8).  Eg, ""lsbom `pkgutil --bom path`"". Note that some
		 flat package archives may contain no BOM, one BOM, or several
		 BOMs.

     --payload-files path
		 List the files archived within the payload of the uninstalled
		 flat package(s) contained at path.  This should be equivalent
		 to ""lsbom -s `pkgutil --bom path`"". Note that flat package
		 archives may contain more than one package, and the destina-
		 tion location for the uninstalled package(s) is unknown to
		 this command.

     --check-signature pkg-path
		 Check the validity and trust of the signature on the package
		 at pkg-path.  In addition to the status of the signature, the
		 associated certificate chain will be shown.

SEE ALSO
     installer(8)
     pkgbuild(1)
     productbuild(1)

Mac OS				 March 2, 2011				Mac OS
","# pkgutil

> Query and manipulate Mac OS X Installer packages and receipts.

- List package IDs for all installed packages:

`pkgutil --pkgs`

- Verify cryptographic signatures of a package file:

`pkgutil --check-signature {{path/to/filename.pkg}}`

- List all the files for an installed package given its ID:

`pkgutil --files {{com.microsoft.Word}}`

- Extract the contents of a package file into a directory:

`pkgutil  --expand-full {{path/to/filename.pkg}} {{path/to/directory}}`
"
port,,,,"# port

> Package manager for macOS.

- Search for a package:

`port search {{search_term}}`

- Install a package:

`sudo port install {{package_name}}`

- List installed packages:

`port installed`

- Update port and fetch latest list of available packages:

`sudo port selfupdate`

- Upgrade outdated packages:

`sudo port upgrade outdated`

- Remove old versions of installed packages:

`sudo port uninstall inactive`
"
sw_vers,,,"
SW_VERS(1)		  BSD General Commands Manual		    SW_VERS(1)

NAME
     sw_vers -- print Mac OS X operating system version information

SYNOPSIS
     sw_vers
     sw_vers -productName
     sw_vers -productVersion
     sw_vers -buildVersion

DESCRIPTION
     sw_vers prints version information about the Mac OS X or Mac OS X Server
     operating system running on the local machine.

     When executed with no options sw_vers prints a short list of version
     properties:

	   % sw_vers
	   ProductName:    Mac OS X
	   ProductVersion: 10.3
	   BuildVersion:   7A100

     The ProductName property provides the name of the operating system
     release (typically either ""Mac OS X"" or ""Mac OS X Server"").  The
     ProductVersion property defines the version of the operating system
     release (for example, ""10.2.4"" or ""10.3"").  The BuildVersion property
     provides the specific revision of the operating system as generated by
     the Mac OS X build system.

OPTIONS
     The output of sw_vers can be refined by the following options.

     -productName     Print just the value of the ProductName property.

     -productVersion  Print just the value of the ProductVersion property.

     -buildVersion    Print just the value of the BuildVersion property.

EXAMPLES
     % sw_vers -productName
     Mac OS X

     % sw_vers -productVersion
     10.3

     % sw_vers -buildVersion
     7A100

FILES
     /System/Library/CoreServices/SystemVersion.plist
     /System/Library/CoreServices/ServerVersion.plist

Mac OS X			March 10, 2003			      Mac OS X
","# sw_vers

> Print macOS operating system version information.

- Print all available information (OS name, version number, and build):

`sw_vers`

- Print only the version number of the operating system:

`sw_vers -productVersion`

- Print only the build identifier:

`sw_vers -buildVersion`
"
pbpaste,,,"PBCOPY(1)							     PBCOPY(1)



NAME
       pbcopy,	pbpaste  -  provide copying and pasting to the pasteboard (the
       Clipboard) from command line

SYNOPSIS
       pbcopy [-help] [-pboard {general | ruler | find | font}]

       pbpaste [-help] [-pboard {general | ruler | find | font}] [-Prefer {txt
       | rtf | ps}]

DESCRIPTION
       pbcopy  takes  the standard input and places it in the specified paste-
       board. If no pasteboard is specified, the general  pasteboard  will  be
       used  by  default.  The input is placed in the pasteboard as plain text
       data unless it begins  with  the  Encapsulated  PostScript  (EPS)  file
       header  or  the Rich Text Format (RTF) file header, in which case it is
       placed in the pasteboard as one of those data types.

       pbpaste removes the data from the pasteboard and writes it to the stan-
       dard output.  It normally looks first for plain text data in the paste-
       board and writes that to the standard output; if no plain text data  is
       in  the	pasteboard  it looks for Encapsulated PostScript; if no EPS is
       present it looks for Rich Text.	If none of those types is  present  in
       the pasteboard, pbpaste produces no output.

       * Encoding:

       pbcopy  and  pbpaste  use locale environment variables to determine the
       encoding to be used for input and output.  For  example,  absent  other
       locale settings, setting the environment variable LANG=en_US.UTF-8 will
       cause pbcopy and pbpaste to use UTF-8 for  input  and  output.	If  an
       encoding  cannot be determined from the locale, the standard C encoding
       will be used.  Use of UTF-8 is recommended.  Note that by  default  the
       Terminal application uses the UTF-8 encoding and automatically sets the
       appropriate locale environment variable.

OPTIONS
       -pboard {general | ruler | find | font}
	      specifies which pasteboard to copy to  or  paste	from.	If  no
	      pasteboard  is  given,  the  general  pasteboard will be used by
	      default.

       -Prefer {txt | rtf | ps}
	      tells pbpaste what type of data to look for  in  the  pasteboard
	      first.   As stated above, pbpaste normally looks first for plain
	      text data; however,  by  specifying  -Prefer  ps	you  can  tell
	      pbpaste to look first for Encapsulated PostScript.  If you spec-
	      ify -Prefer rtf, pbpaste looks first for Rich Text  format.   In
	      any  case,  pbpaste looks for the other formats if the preferred
	      one is not found.  The txt option replaces the deprecated  ascii
	      option,  which continues to function as before.  Both indicate a
	      preference for plain text.

SEE ALSO
       ADC Reference Library:
       Cocoa > Interapplication Communication > Copying and Pasting
       Carbon > Interapplication Communication > Pasteboard  Manager  Program-
       ming Guide
       Carbon > Interapplication Communication > Pasteboard Manager Reference

BUGS
       There is no way to tell pbpaste to get only a specified data type.



Apple Computer, Inc.	       January 12, 2005 		     PBCOPY(1)
","# pbpaste

> Send the contents of the clipboard to standard output.

- Write the contents of the clipboard to a file:

`pbpaste > {{file}}`

- Use the contents of the clipboard as input to a command:

`pbpaste | grep foo`
"
whereis,,,"
WHEREIS(1)		  BSD General Commands Manual		    WHEREIS(1)

NAME
     whereis -- locate programs

SYNOPSIS
     whereis [program ...]

DESCRIPTION
     The whereis utility checks the standard binary directories for the speci-
     fied programs, printing out the paths of any it finds.

     The path searched is the string returned by the sysctl(8) utility for the
     ``user.cs_path'' string.

SEE ALSO
     find(1), locate(1), man(1), which(1), sysctl(8)

COMPATIBILITY
     The historic flags and arguments for the whereis utility are no longer
     available in this version.

HISTORY
     The whereis command appeared in 3.0BSD.

BSD				April 27, 1995				   BSD
","# whereis

> Locate the binary, source, and manual page files for a command.

- Locate binary, source and man pages for ssh:

`whereis {{ssh}}`

- Locate binary and man pages for ls:

`whereis -bm {{ls}}`

- Locate source of gcc and man pages for git:

`whereis -s {{gcc}} -m {{git}}`

- Locate binaries for gcc in /usr/bin/ only:

`whereis -b -B {{/usr/bin/}} -f {{gcc}}`
"
uname,,,"
UNAME(1)		  BSD General Commands Manual		      UNAME(1)

NAME
     uname -- Print operating system name

SYNOPSIS
     uname [-amnprsv]

DESCRIPTION
     The uname utility writes symbols representing one or more system charac-
     teristics to the standard output.

     The following options are available:

     -a      Behave as though all of the options -mnrsv were specified.

     -m      print the machine hardware name.

     -n      print the nodename (the nodename may be a name that the system is
	     known by to a communications network).

     -p      print the machine processor architecture name.

     -r      print the operating system release.

     -s      print the operating system name.

     -v      print the operating system version.

     If no options are specified, uname prints the operating system name as if
     the -s option had been specified.

SEE ALSO
     hostname(1), machine(1), sw_vers(1), uname(3)

STANDARDS
     The uname utility conforms to IEEE Std 1003.2-1992 (``POSIX.2'').	The -p
     option is an extension to the standard.

BSD			       November 9, 1998 			   BSD
","# uname

> Print details about the current machine and the operating system running on it.
> Note: for additional information about the operating system, try the `sw_vers` command.

- Print hardware-related information: machine and processor:

`uname -mp`

- Print software-related information: operating system, release number, and version:

`uname -srv`

- Print the nodename (hostname) of the system:

`uname -n`

- Print all available system information (hardware, software, nodename):

`uname -a`
"
xctool,https://github.com/facebook/xctool,"













GitHub - facebook/xctool: An extension for Apple's xcodebuild that makes it easier to test iOS and macOS apps.








































Skip to content













                Sign up
              
















                    Why GitHub?
                    




Features →

Code review
Project management
Integrations
Actions
Packages
Security
Team management
Hosting
Mobile


Customer stories →
Security →





Team


Enterprise




                    Explore
                    





Explore GitHub →

Learn & contribute

Topics
Collections
Trending
Learning Lab
Open source guides

Connect with others

Events
Community forum
GitHub Education
GitHub Stars program





Marketplace




                    Pricing
                    




Plans →

Compare plans
Contact Sales


Nonprofit →
Education →






























        In this repository
      

        All GitHub
      
↵


      Jump to
      ↵






No suggested jump to results















        In this repository
      

        All GitHub
      
↵


      Jump to
      ↵















        In this repository
      

        All GitHub
      
↵


      Jump to
      ↵






 



          Sign in
        

              Sign up
            



















facebook

/

xctool







    Watch
 
      283
    




      Star


      7k
    




          Fork


        782
      





        An extension for Apple's xcodebuild that makes it easier to test iOS and macOS apps.
      



            Apache-2.0 License
        




7k
        stars
 

782
        forks
 




      Star





    Watch









Code

 



Issues
9
 



Pull requests
0
 



Actions

 



Projects
0
 



Wiki

 



Security

 



Insights

 
 




More

 




                    Code
 


                    Issues
 


                    Pull requests
 


                    Actions
 


                    Projects
 


                    Wiki
 


                    Security
 


                    Insights
 


 










          Dismiss
        
Join GitHub today
GitHub is home to over 50 million developers working together to host and review code, manage projects, and build software together.
Sign up










master














1
branch



35
tags




    Go to file






      Code
      
 








  Clone






            HTTPS
 
            GitHub CLI
 









      Use Git or checkout with SVN using the web URL.
    









      Work fast with our official CLI.
      Learn more.
    







                Open with GitHub Desktop
 



                Download ZIP
 



Launching GitHub Desktop
If nothing happens, download GitHub Desktop and try again.
Go back


Launching GitHub Desktop
If nothing happens, download GitHub Desktop and try again.
Go back


Launching Xcode
If nothing happens, download Xcode and try again.
Go back


Launching Visual Studio
If nothing happens, download the GitHub extension for Visual Studio and try again.
Go back









Latest commit



 
 
Git stats





1,228
commits







Files

Permalink


  
    Failed to load latest commit information.

 


Type
Name
Latest commit message
Commit time






Common


 


 







Configurations


 


 







Vendor


 


 







otest-query


 


 







otest-shim


 


 







reporters


 


 







scripts


 


 







xcodebuild-shim


 


 







xctool.xcworkspace


 


 







xctool


 


 







.buckconfig


 


 







.buckversion


 


 







.gitignore


 


 







.travis.yml


 


 







.watchmanconfig


 


 







BUCK


 


 







CODE_OF_CONDUCT.md


 


 







CONTRIBUTING.md


 


 







LICENSE


 


 







README.md


 


 







xctool.sh


 


 





        View code
      







        README.md
      








xctool
xctool is an extension for Apple's xcodebuild which makes it
easier to test iOS and Mac products.  It's especially helpful
for continuous integration.

[ Features • Requirements • Usage
• Continuous Integration
• Reporters •
Configuration •
Contributing • Known Issues & Tips • License ]
Features
xctool is drop-in replacement for xcodebuild test that adds a few
extra features:


Faster, parallelized test runs.
xctool can optionally run all of your test bundles in parallel,
speeding up your test runs significantly.  At Facebook, we've seen 2x
and 3x speed ups by parallelizing our runs.
Use the -parallelize option with run-tests or test to enable.
See Parallelizing Test Runs for more info.


Structured output of test results.
xctool captures all test results as structured JSON objects.  If
you're building a continuous integration system, this means you don't
have to regex parse xcodebuild output anymore.
Try one of the Reporters to customize the output or get
the full event stream with the -reporter json-stream option.


Human-friendly, ANSI-colored output.
xcodebuild is incredibly verbose, printing the full compile command
and output for every source file.  By default, xctool is only verbose
if something goes wrong, making it much easier to identify where the
problems are.
Example:



Written in Objective-C.
xctool is written in Objective-C. Mac OS X and iOS developers can
easily submit new features and fix any bugs they may encounter without
learning a new language. We very much welcome pull requests!


Note: Support for building projects with xctool is deprecated and will
not be updated to support future versions of Xcode. We suggest moving to
xcodebuild (with xcpretty) for
simple needs, or xcbuild for more
involved requirements. xctool will continue to support testing (see above).
Requirements

Xcode 7 or higher
You'll need Xcode's Command Line Tools installed.  From Xcode, install
via Xcode → Preferences → Downloads.

Installation
xctool can be installed from homebrew via
brew install xctool
or can be downloaded and run via the xctool.sh command.
Usage
xctool's commands and options are mostly a superset of xcodebuild's.  In
most cases, you can just swap xcodebuild with xctool and things will
run as expected but with more attractive output.
You can always get help and a full list of options with:
path/to/xctool.sh -help
Testing
xctool has a run-tests action which knows how to run the
tests in your scheme.  You can optionally limit what tests are run
or change the SDK they're run against.
To run all tests in your scheme, you would use:
path/to/xctool.sh \
  -workspace YourWorkspace.xcworkspace \
  -scheme YourScheme \
  run-tests
To run just the tests in a specific target, use the -only option:
path/to/xctool.sh \
  -workspace YourWorkspace.xcworkspace \
  -scheme YourScheme \
  run-tests -only SomeTestTarget
You can go further and just run a specific test class:
path/to/xctool.sh \
  -workspace YourWorkspace.xcworkspace \
  -scheme YourScheme \
  run-tests -only SomeTestTarget:SomeTestClass
Or, even further and run just a single test method:
path/to/xctool.sh \
  -workspace YourWorkspace.xcworkspace \
  -scheme YourScheme \
  run-tests -only SomeTestTarget:SomeTestClass/testSomeMethod
You can also specify prefix matching for classes or test methods:
path/to/xctool.sh \
  -workspace YourWorkspace.xcworkspace \
  -scheme YourScheme \
  run-tests -only SomeTestTarget:SomeTestClassPrefix*,SomeTestClass/testSomeMethodPrefix*
Alternatively, you can omit a specific item by prefix matching for classes or test methods:
path/to/xctool.sh \
  -workspace YourWorkspace.xcworkspace \
  -scheme YourScheme \
  run-tests -omit SomeTestTarget:SomeTestClass/testSomeMethodPrefix*
You can also run tests against a different SDK:
path/to/xctool.sh \
  -workspace YourWorkspace.xcworkspace \
  -scheme YourScheme \
  run-tests -test-sdk iphonesimulator5.1
Optionally you can specify -testTimeout when running tests. When an individual
test hits this timeout, it is considered a failure rather than waiting indefinitely.
This can prevent your test run from deadlocking forever due to misbehaving tests.
By default application tests will wait at most 30 seconds for the simulator
to launch. If you need to change this timeout, use the -launch-timeout option.
Building Tests
Before running tests you need to build them. You can use xcodebuild,  xcbuild or Buck to do that.
For example:
xcodebuild \
  -workspace YourWorkspace.xcworkspace \
  -scheme YourScheme \
  build-for-testing
Xcode 7
If you are using Xcode 7 for building you can continue using xctool to build tests using
build-tests or just use test actions to run tests.
For example:
path/to/xctool.sh \
  -workspace YourWorkspace.xcworkspace \
  -scheme YourScheme \
  build-tests
You can optionally just build a single test target with the -only option:
path/to/xctool.sh \
  -workspace YourWorkspace.xcworkspace \
  -scheme YourScheme \
  build-tests -only SomeTestTarget
Parallelizing Test Runs
xctool can optionally run unit tests in parallel, making better use of
otherwise idle CPU cores.  At Facebook, we've seen 2x and 3x gains by
parallelizing our test runs.
To allow test bundles to run concurrently, use the -parallelize
option:
path/to/xctool.sh \
  -workspace YourWorkspace.xcworkspace \
  -scheme YourScheme \
  run-tests -parallelize
The above gives you parallelism, but you're bounded by your slowest test
bundle.  For example, if you had two test bundles ('A' and 'B'), but 'B'
took 10 times as long to run because it contained 10 times as many
tests, then the above parallelism won't help much.
You can get further gains by breaking your test execution into buckets
using the -logicTestBucketSize option:
path/to/xctool.sh \
  -workspace YourWorkspace.xcworkspace \
  -scheme YourScheme \
  run-tests -parallelize -logicTestBucketSize 20
The above will break your test execution into buckets of 20 test
cases each, and those bundles will be run concurrently.  If some of your
test bundles are much larger than others, this will help even things out
and speed up the overall test run.
Building (Xcode 7 only)
Note: Support for building projects with xctool is deprecated and isn't
supported in Xcode 8 and later. We suggest moving to xcodebuild (with
xcpretty) for
simple needs, or xcbuild for more
involved requirements. Alternatively, you can use Buck.
Building products with xctool is the same as building them with
xcodebuild.
If you use workspaces and schemes:
path/to/xctool.sh \
  -workspace YourWorkspace.xcworkspace \
  -scheme YourScheme \
  build
If you use projects and schemes:
path/to/xctool.sh \
  -project YourProject.xcodeproj \
  -scheme YourScheme \
  build
All of the common options like -configuration, -sdk, -arch work
just as they do with xcodebuild.
NOTE: xctool doesn't support directly building targets using
-target; you must use schemes.
Continuous Integration
xctool is an excellent choice for running your tests under a continuous
integration server such as Travis CI or Jenkins.
To run tests within a continuous integration environment,
you must create Shared Schemes for your application target and ensure that all dependencies (such as CocoaPods) are added explicitly to the Scheme. To do so:

Open up the Manage Schemes sheet by selecting the Product menu > Schemes > Manage Schemes...
Locate your application target in the list. Ensure that the Shared checkbox in far right hand column of the sheet is checked.
If your application or test targets include cross-project dependencies such as CocoaPods, then you will need to ensure that they have been
configured as explicit dependencies. To do so:

Highlight your application target and hit the Edit... button to open the Scheme editing sheet.
Click the Build tab in the left-hand panel of the Scheme editor.
Click the + button and add each dependency to the project. CocoaPods will appear as a static library named Pods.
Drag the dependency above your application target so that it is built first.



You will now have a new file in the xcshareddata/xcschemes directory underneath your Xcode project. This is the
shared Scheme that you just configured. Check this file into your repository and xctool will be able to find and execute
your tests on the next CI build.
Example Travis CI Configuration
Travis CI is a very popular continuous
integration system offered for free to Open Source projects.  It
integrates well with Github, and it now uses xctool as the default
build and test tool for Objective-C projects.  Once you have set up your
shared Scheme for use with xctool, you will need to configure a
.travis.yml file.
If you're using workspaces, your .travis.yml might be:
language: objective-c
xcode_workspace: path/to/YourApp.xcworkspace
xcode_scheme: YourApp
If you're using projects, your .travis.yml might be:
language: objective-c
xcode_project: path/to/YourApp.xcodeproj
xcode_scheme: YourApp
For more flexibility, you can also control how Travis installs and
invokes xctool:
language: objective-c
before_install:
    - brew update
    - brew install xctool
script: xctool -workspace MyApp.xcworkspace -scheme MyApp test
You can learn more about the Travis CI environment for iOS and OS X
application by referring to the About OS X Travis CI
Environment
document and find in-depth documentation for configuring your project by
consulting the Getting
Started page.
Reporters
xctool has reporters that output build and test results in different
formats.  If you do not specify any reporters yourself, xctool uses
the pretty and user-notifications reporters by default. xctool also
has these special rules:

Overwrite is disabled on the pretty reporter when xctool does not
detect a TTY. This can be overridden by setting XCTOOL_FORCE_TTY in
the environment.
The user-notifications reporter will not be used
if xctool detects that the build is being run by Travis CI, CircleCI, TeamCity,
or Jenkins (i.e. TRAVIS=true, CIRCLECI=true, TEAMCITY_VERSION, or
JENKINS_URL in the environment).

You can choose your own reporters with the -reporter option:
path/to/xctool.sh \
  -workspace YourWorkspace.xcworkspace \
  -scheme YourScheme \
  -reporter plain \
  build
By default, reporters output to standard out, but you can also direct
the output to a file by adding :OUTPUT_PATH after the reporter name:
path/to/xctool.sh \
  -workspace YourWorkspace.xcworkspace \
  -scheme YourScheme \
  -reporter plain:/path/to/plain-output.txt \
  build
You can use as many reporters as you like; just use the -reporter
option multiple times.
Included Reporters

pretty: a text-based reporter that uses ANSI colors and unicode
symbols for pretty output (the default).
plain: like pretty, but with no colors or unicode.
phabricator: outputs a JSON array of build/test results which can
be fed into the Phabricator code-review tool.
junit: produces a JUnit/xUnit compatible XML file with test
results.
json-stream: a stream of build/test events as JSON dictionaries,
one per line (example
output).
json-compilation-database: outputs a JSON Compilation Database of build events which can be used by Clang Tooling based tools, e.g. OCLint.
user-notifications: sends notification to Notification Center when action is completed (example notifications).
teamcity: sends service messages to TeamCity Continuous Integration Server

Implementing Your Own Reporters
You can also implement your own reporters using whatever language you
like.  Reporters in xctool are separate executables that read JSON
objects from STDIN and write formatted results to STDOUT.
You can invoke reporters by passing their full path via the -reporter
option:
path/to/xctool.sh \
  -workspace YourWorkspace.xcworkspace \
  -scheme YourScheme \
  -reporter /path/to/your/reporter \
  test
For example, here's a simple reporter in Python that outputs a period
for every passing test and an exclamation mark for every failing test:
#!/usr/bin/python

import fileinput
import json
import sys

for line in fileinput.input():
    obj = json.loads(line)

    if obj['event'] == 'end-test':
        if obj['succeeded']:
            sys.stdout.write('.')
        else:
            sys.stdout.write('!')

sys.stdout.write('\n')
If you're writing a reporter in Objective-C, you'll find the
Reporter class helpful - see Reporter.h.
Configuration (.xctool-args)
If you routinely need to pass many arguments to xctool on the
command-line, you can use an .xctool-args file to speed up your workflow.
If xctool finds an .xctool-args file in the current directory, it
will automatically pre-populate its arguments from there.
The format is just a JSON array of arguments:
[
  ""-workspace"", ""YourWorkspace.xcworkspace"",
  ""-scheme"", ""YourScheme"",
  ""-configuration"", ""Debug"",
  ""-sdk"", ""iphonesimulator"",
  ""-arch"", ""i386""
]
Any extra arguments you pass on the command-line will take precedence
over those in the .xctool-args file.
Contributing
Bug fixes, improvements, and especially new
Reporter
implementations are welcome.  Before submitting a pull
request, please
be sure to sign the Facebook
Contributor License
Agreement.  We can't
accept pull requests unless it's been signed.
Workflow

Fork.
Make a feature branch: git checkout -b my-feature
Make your feature.  Keep things tidy so you have one commit per self-contained change (squashing can help).
Push your branch to your fork: git push -u origin my-feature
Open GitHub, under ""Your recently pushed branches"", click Pull
Request for my-feature.

Be sure to use a separate feature branch and pull request for every
self-contained feature.  If you need to make changes from feedback, make
the changes in place rather than layering on commits (use interactive
rebase to edit your earlier commits).  Then use git push --force
origin my-feature to update your pull request.
Workflow (for Facebook people, other committers)
Mostly the same, but use branches in the main xctool repo if you prefer.
It's a nice way to keep things together.

Make a feature branch: git checkout -b myusername/my-feature
Push your branch: git push -u origin myusername/my-feature
Open GitHub to facebook/xctool,
under ""Your recently pushed branches"", click Pull Request for
myusername/my-feature.

Known Issues & Tips


Use shared schemes and disable the Autocreate Schemes feature.
Xcode has two kinds of schemes: shared, and user.  User schemes are
the default, and they're stored under a folder called USERNAME.xcuserdatad,
which most people correctly add to their .gitignore.
Use shared schemes instead, and commit them to your repo.  This way
everyone on your team (and your build server) are working from the
same information, and are building in the same way.



Make sure simulators run in a GUI context.
If you are running xctool in continuous integration, the user account
calling xctool must have an active GUI context.
If not, the simulator will fail to start with cryptic warnings like:
Tried to install the test host app 'com.myapp.test' but failed.
Preparing test environment failed.
-[TEST_BUNDLE FAILED_TO_START] 
There was a problem starting the test bundle: Simulator 'iPhone 6' was not prepared: Failed for unknown reason.
Test did not run: Simulator 'iPhone 6' was not prepared: Failed for unknown reason.
2015-01-21 12:02:19.296 xcodebuild[35135:875297]  iPhoneSimulator: Timed out waiting 120 seconds for simulator to boot, current state is 1.
Testing failed:
Test target MyProjectTests encountered an error (Timed out waiting 120 seconds for simulator to boot, current state is 1.  

Note that the
same holds true with xcodebuild...this is not xctool specific.
For more information, see this post by Jason Jarrett.


License
Copyright 2014-present Facebook
Licensed under the Apache License, Version 2.0 (the ""License""); you may
not use this work except in compliance with the License. You may obtain
a copy of the License in the LICENSE file, or at:
http://www.apache.org/licenses/LICENSE-2.0
Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an ""AS IS"" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.








About

      An extension for Apple's xcodebuild that makes it easier to test iOS and macOS apps.
    
Resources



      Readme
 
License



        Apache-2.0 License
    







    Releases
      35





0.3.7

          Latest
 
Dec 11, 2019

 

        + 34 releases







    Packages 0


        No packages published 













    Contributors 82








































      + 71 contributors





Languages














Objective-C
95.0%





Objective-C++
1.6%





Shell
1.5%





Python
0.8%





C++
0.6%





C
0.3%





Other
0.2%















© 2020 GitHub, Inc.
Terms
Privacy
Security
Status
Help





Contact GitHub
Pricing
API
Training
Blog
About











    You can’t perform that action at this time.
  


















You signed in with another tab or window. Reload to refresh your session.
You signed out in another tab or window. Reload to refresh your session.







",,"# xctool

> Tool for building Xcode projects.
> More information: <https://github.com/facebook/xctool>.

- Build a single project without any workspace:

`xctool -project {{YourProject.xcodeproj}} -scheme {{YourScheme}} build`

- Build a project that is part of a workspace:

`xctool -workspace {{YourWorkspace.xcworkspace}} -scheme {{YourScheme}} build`

- Clean, build and execute all the tests:

`xctool -workspace {{YourWorkspace.xcworkspace}} -scheme {{YourScheme}} clean build test`
"
pwgen,,,,"# pwgen

> Generate pronounceable passwords.

- Generate random password with s[y]mbols:

`pwgen -y {{length}}`

- Generate secure, hard-to-memorize passwords:

`pwgen -s {{length}}`

- Generate password with at least one capital letter in them:

`pwgen -c {{length}}`
"
w,,,"
W(1)			  BSD General Commands Manual			  W(1)

NAME
     w -- display who is logged in and what they are doing

SYNOPSIS
     w [-hin] [user ...]

DESCRIPTION
     The w utility prints a summary of the current activity on the system,
     including what each user is doing.  The first line displays the current
     time of day, how long the system has been running, the number of users
     logged into the system, and the load averages.  The load average numbers
     give the number of jobs in the run queue averaged over 1, 5 and 15 min-
     utes.

     The fields output are the user's login name, the name of the terminal the
     user is on, the host from which the user is logged in, the time the user
     logged on, the time since the user last typed anything, and the name and
     arguments of the current process.

     The options are as follows:

     -h      Suppress the heading.

     -i      Output is sorted by idle time.

     If one or more user names are specified, the output is restricted to
     those users.

COMPATIBILITY
     The -M, -d, -f, -l, -n, -s, and -w flags are no longer supported.

SEE ALSO
     finger(1), ps(1), uptime(1), who(1)

HISTORY
     The w command appeared in 3.0BSD.

BUGS
     The notion of the ``current process'' is muddy.  The current algorithm is
     ``the highest numbered process on the terminal that is not ignoring
     interrupts, or, if there is none, the highest numbered process on the
     terminal''.  This fails, for example, in critical sections of programs
     like the shell and editor, or when faulty programs running in the back-
     ground fork and fail to ignore interrupts.  (In cases where no process
     can be found, w prints ``-''.)

     The CPU time is only an estimate, in particular, if someone leaves a
     background process running after logging out, the person currently on
     that terminal is ``charged'' with the time.

     Background processes are not shown, even though they account for much of
     the load on the system.

     Sometimes processes, typically those in the background, are printed with
     null or garbaged arguments.  In these cases, the name of the command is
     printed in parentheses.

     The w utility does not know about the new conventions for detection of
     background jobs.  It will sometimes find a background job instead of the
     right one.

     Long hostnames and IPv6 addresses may be truncated; however, the who(1)
     utility will display full hostnames.

BSD				 June 6, 1993				   BSD
","# w

> Show who is logged on and what they are doing.
> Print user login, TTY, remote host, login time, idle time, current process.

- Show logged-in users info:

`w`

- Show logged-in users info without a header:

`w -h`

- Show info about logged-in users, sorted by their idle time:

`w -i`
"
tree,http://mama.indstate.edu/users/ice/tree/,"
 The Tree Command for Linux Homepage 




 The Tree Command for Linux Homepage 

   E-mail me   

 &nbsp < &nbsp 
 Latest Version (1.8.0)
 Changelog 
 Thanks 
 Tree Example 
 Versions 

 1.8.0 
 1.7.0 
 1.6.0 
 1.5.3 
 1.5.2.2 
 1.5.2.1 
 1.5.2 
 1.5.1.2 
 1.5.1.1 
 1.5.0 
 1.4b3 
 1.4b2 
 1.4b1 
 1.3 
 1.2 
 1.1 





 Description:
Tree is a recursive directory listing command that produces a depth
indented listing of files, which is colorized ala dircolors if the LS_COLORS
environment variable is set and output is to tty.  Tree has been ported and
reported to work under the following operating systems: Linux, FreeBSD, OS X,
Solaris, HP/UX, Cygwin, HP Nonstop and OS/2.

Here is an example of the output of tree:
  
~> tree -d /proc/self/
/proc/self/
|-- attr
|-- cwd -> /proc
|-- fd
|   `-- 3 -> /proc/15589/fd
|-- fdinfo
|-- net
|   |-- dev_snmp6
|   |-- netfilter
|   |-- rpc
|   |   |-- auth.rpcsec.context
|   |   |-- auth.rpcsec.init
|   |   |-- auth.unix.gid
|   |   |-- auth.unix.ip
|   |   |-- nfs4.idtoname
|   |   |-- nfs4.nametoid
|   |   |-- nfsd.export
|   |   `-- nfsd.fh
|   `-- stat
|-- root -> /
`-- task
    `-- 15589
        |-- attr
        |-- cwd -> /proc
        |-- fd
        | `-- 3 -> /proc/15589/task/15589/fd
        |-- fdinfo
        `-- root -> /

27 directories


  Download the latest version (tree-1.8.0.tgz) (FTP) .
  Download the latest version (tree-1.8.0.tgz) (HTTP).
  Online Man page for Tree 1.8.0 .
  Review the changelog .
  Contributors to Tree .
  Tree view of my webpage .
  Send a nice e-mail to the maintainer.
  Send a nasty e-mail to the maintainer.



","TREE(1) 							       TREE(1)



NAME
       tree - list contents of directories in a tree-like format.

SYNOPSIS
       tree  [-acdfghilnpqrstuvxACDFQNSUX]  [-L  level [-R]] [-H baseHREF] [-T
       title] [-o filename] [--nolinks] [-P pattern] [-I  pattern]  [--inodes]
       [--device] [--noreport] [--dirsfirst] [--version] [--help] [--filelimit
       #] [--si] [--prune] [--du] [--timefmt  format]  [--matchdirs]  [--from-
       file] [--] [directory ...]


DESCRIPTION
       Tree  is  a  recursive  directory listing program that produces a depth
       indented listing of files, which is  colorized  ala  dircolors  if  the
       LS_COLORS  environment  variable  is set and output is to tty.  With no
       arguments, tree lists the files in the current directory.  When	direc-
       tory  arguments	are given, tree lists all the files and/or directories
       found in the given directories each in turn.  Upon completion of  list-
       ing all files/directories found, tree returns the total number of files
       and/or directories listed.

       By default, when a symbolic link is encountered, the path that the sym-
       bolic  link refers to is printed after the name of the link in the for-
       mat:

	   name -> real-path

       If the `-l' option is given and the symbolic link refers to  an	actual
       directory, then tree will follow the path of the symbolic link as if it
       were a real directory.


OPTIONS
       Tree understands the following command line switches:


LISTING OPTIONS
       -a     All files are printed.  By default tree does  not  print	hidden
	      files  (those  beginning with a dot `.').  In no event does tree
	      print the file system constructs	`.'  (current  directory)  and
	      `..' (previous directory).


       -d     List directories only.


       -l     Follows  symbolic links if they point to directories, as if they
	      were directories. Symbolic links that will result  in  recursion
	      are avoided when detected.


       -f     Prints the full path prefix for each file.


       -x     Stay on the current file-system only.  Ala find -xdev.


       -L level
	      Max display depth of the directory tree.


       -R     Recursively  cross  down the tree each level directories (see -L
	      option), and at each of  them  execute  tree  again  adding  `-o
	      00Tree.html' as a new option.


       -P pattern
	      List  only  those files that match the wild-card pattern.  Note:
	      you must use the -a option to also consider those  files	begin-
	      ning with a dot `.'  for matching.  Valid wildcard operators are
	      `*' (any zero or more characters), `?' (any  single  character),
	      `[...]'  (any single character listed between brackets (optional
	      - (dash) for character  range  may  be  used:  ex:  [A-Z]),  and
	      `[^...]'	(any  single character not listed in brackets) and `|'
	      separates alternate patterns.


       -I pattern
	      Do not list those files that match the wild-card pattern.


       --ignore-case
	      If a match pattern is specified by the -P  or  -I  option,  this
	      will  cause  the pattern to match without regards to the case of
	      each letter.


       --matchdirs
	      If a match pattern is specified by  the  -P  option,  this  will
	      cause  the pattern to be applied to directory names (in addition
	      to filenames).  In the event of a match on the  directory  name,
	      matching	is  disabled  for  the	directory's  contents.	If the
	      --prune option is used, empty folders  that  match  the  pattern
	      will not be pruned.


       --prune
	      Makes  tree prune empty directories from the output, useful when
	      used in conjunction with -P or -I.  See BUGS AND NOTES below for
	      more information on this option.


       --noreport
	      Omits  printing  of  the file and directory report at the end of
	      the tree listing.


       --charset charset
	      Set the character set to use when outputting HTML and  for  line
	      drawing.


       --filelimit #
	      Do not descend directories that contain more than # entries.


       --timefmt format
	      Prints (implies -D) and formats the date according to the format
	      string which uses the strftime(3) syntax.


       -o filename
	      Send output to filename.



FILE OPTIONS
       -q     Print non-printable characters in filenames  as  question  marks
	      instead of the default.


       -N     Print non-printable characters as is instead of as escaped octal
	      numbers.


       -Q     Quote the names of files in double quotes.


       -p     Print the file type and permissions for each  file  (as  per  ls
	      -l).


       -u     Print the username, or UID # if no username is available, of the
	      file.


       -g     Print the group name, or GID # if no group name is available, of
	      the file.


       -s     Print the size of each file in bytes along with the name.


       -h     Print  the  size	of each file but in a more human readable way,
	      e.g. appending a size letter for kilobytes (K),  megabytes  (M),
	      gigabytes (G), terabytes (T), petabytes (P) and exabytes (E).


       --si   Like -h but use SI units (powers of 1000) instead.


       --du   For  each directory report its size as the accumulation of sizes
	      of all its files and sub-directories (and their  files,  and  so
	      on).   The total amount of used space is also given in the final
	      report (like the 'du -c' command.) This option requires tree  to
	      read  the entire directory tree before emitting it, see BUGS AND
	      NOTES below.  Implies -s.


       -D     Print the date of the last modification time or if -c  is  used,
	      the last status change time for the file listed.


       -F     Append  a `/' for directories, a `=' for socket files, a `*' for
	      executable files, a `>'  for  doors  (Solaris)  and  a  `|'  for
	      FIFO's, as per ls -F


       --inodes
	      Prints the inode number of the file or directory


       --device
	      Prints the device number to which the file or directory belongs



SORTING OPTIONS
       -v     Sort the output by version.


       -t     Sort  the output by last modification time instead of alphabeti-
	      cally.


       -c     Sort the output by last status change instead of alphabetically.
	      Modifies the -D option (if used) to print the last status change
	      instead of modification time.


       -U     Do not sort.  Lists files in directory order.  Disables  --dirs-
	      first.


       -r     Sort  the  output  in  reverse  order.  This is a meta-sort that
	      alter the above sorts.  This option is disabled when -U is used.


       --dirsfirst
	      List  directories  before files. This is a meta-sort that alters
	      the above sorts.	This option is disabled when -U is used.


       --sort[=]type
	      Sort the output by type instead of name.	Possible  values  are:
	      ctime (-c), mtime (-t), size, or version (-v).


GRAPHICS OPTIONS
       -i     Makes  tree not print the indentation lines, useful when used in
	      conjunction with the -f option.  Also removes as much whitespace
	      as possible when used with the -J or -x options.


       -A     Turn  on	ANSI  line graphics hack when printing the indentation
	      lines.


       -S     Turn on CP437 line graphics (useful  when  using	Linux  console
	      mode fonts). This option is now equivalent to `--charset=IBM437'
	      and may eventually be depreciated.


       -n     Turn colorization off always, over-ridden by the -C option.


       -C     Turn colorization on always, using built-in  color  defaults  if
	      the  LS_COLORS or TREE_COLORS environment variables are not set.
	      Useful to colorize output to a pipe.



XML/JSON/HTML OPTIONS
       -X     Turn on XML output. Outputs the directory tree as an XML format-
	      ted file.


       -J     Turn  on JSON output. Outputs the directory tree as an JSON for-
	      matted array.


       -H baseHREF
	      Turn on HTML output, including HTTP references. Useful  for  ftp
	      sites.   baseHREF  gives	the  base ftp location when using HTML
	      output. That is, the local directory  may  be  `/local/ftp/pub',
	      but   it	 must	be   referenced  as  `ftp://hostname.organiza-
	      tion.domain/pub' (baseHREF should  be  `ftp://hostname.organiza-
	      tion.domain').  Hint: don't use ANSI lines with this option, and
	      don't give more than one directory in the directory list. If you
	      wish  to	use  colors  via CSS style-sheet, use the -C option in
	      addition to this option to force color output.


       -T title
	      Sets the title and H1 header string in HTML output mode.


       --nolinks
	      Turns off hyperlinks in HTML output.



INPUT OPTIONS
       --fromfile Reads a directory listing from a file rather than the  file-
       system.	 Paths	provided  on  the  command line are files to read from
       rather than directories to search.  The	dot  (.)  directory  indicates
       that tree should read paths from standard input.


MISC OPTIONS
       --help Outputs a verbose usage listing.


       --version
	      Outputs the version of tree.


       --     Option  processing  terminator.  No further options will be pro-
	      cessed after this.



FILES
       /etc/DIR_COLORS		System color database.
       ~/.dircolors	   Users color database.


ENVIRONMENT
       LS_COLORS      Color information created by dircolors
       TREE_COLORS    Uses this for color information over LS_COLORS if it  is
       set.
       TREE_CHARSET   Character set for tree to use in HTML mode.
       CLICOLOR       Enables colorization even if TREE_COLORS or LS_COLORS is
       not set.
       CLICOLOR_FORCE Always enables colorization (effectively -C)
       LC_CTYPE       Locale for filename output.
       LC_TIME	      Locale for timefmt output, see strftime(3).
       TZ	 Timezone for timefmt output, see strftime(3).


AUTHOR
       Steve Baker (ice@mama.indstate.edu)
       HTML output hacked by Francesc Rocher (rocher@econ.udg.es)
       Charsets and OS/2 support by Kyosuke Tokoro (NBG01720@nifty.ne.jp)


BUGS AND NOTES
       Tree does not prune ""empty"" directories when the -P and -I options  are
       used by default. Use the --prune option.

       The -h and --si options round to the nearest whole number unlike the ls
       implementations which rounds up always.

       Pruning files and directories with the -I, -P and  --filelimit  options
       will lead to incorrect file/directory count reports.

       The  --prune  and --du options cause tree to accumulate the entire tree
       in memory before emitting it. For large directory trees this can  cause
       a significant delay in output and the use of large amounts of memory.

       The  timefmt  expansion	buffer	is limited to a ridiculously large 255
       characters.  Output of time strings longer than this will be undefined,
       but are guaranteed to not exceed 255 characters.

       XML/JSON trees are not colored, which is a bit of a shame.

       Probably more.


SEE ALSO
       dircolors(1), ls(1), find(1), du(1), strftime(3)



Tree 1.8.0							       TREE(1)
","# tree

> Show the contents of the current directory as a tree.
> More information: <http://mama.indstate.edu/users/ice/tree/>.

- Print files and directories up to 'num' levels of depth (where 1 means the current directory):

`tree -L {{num}}`

- Print directories only:

`tree -d`

- Print hidden files too with colorization on:

`tree -a -C`

- Print the tree without indentation lines, showing the full path instead (use `-N` to not escape whitespace and special characters):

`tree -i -f`

- Print the size of each node next to it, in human-readable format, with directories displaying their cumulative size (as in the `du` command):

`tree -s -h --du`

- Print files within the tree hierarchy, using a wildcard (glob) pattern, and pruning out directories that don't contain matching files:

`tree -P '{{*.txt}}' --prune`

- Print directories within the tree hierarchy, using the wildcard (glob) pattern, and pruning out directories that aren't ancestors of the wanted one:

`tree -P {{directory_name}} --matchdirs --prune`

- Print the tree ignoring the given directories:

`tree -I '{{directory_name1|directory_name2}}'`
"
yank,,,,"# yank

> Read input from `stdin` and display a selection interface that allows a field to be selected and copied to the clipboard.

- Yank using the default delimiters (\f, \n, \r, \s, \t):

`{{sudo dmesg}} | yank`

- Yank an entire line:

`{{sudo dmesg}} | yank -l`

- Yank using a specific delimiter:

`{{echo hello=world}} | yank -d {{=}}`

- Only yank fields matching a specific pattern:

`{{ps ux}} | yank -g {{""[0-9]+""}}`
"
istats,https://github.com/Chris911/iStats,"













GitHub - Chris911/iStats: Ruby gem for your mac stats








































Skip to content













                Sign up
              
















                    Why GitHub?
                    




Features →

Code review
Project management
Integrations
Actions
Packages
Security
Team management
Hosting
Mobile


Customer stories →
Security →





Team


Enterprise




                    Explore
                    





Explore GitHub →

Learn & contribute

Topics
Collections
Trending
Learning Lab
Open source guides

Connect with others

Events
Community forum
GitHub Education
GitHub Stars program





Marketplace




                    Pricing
                    




Plans →

Compare plans
Contact Sales


Nonprofit →
Education →






























        In this repository
      

        All GitHub
      
↵


      Jump to
      ↵






No suggested jump to results















        In this repository
      

        All GitHub
      
↵


      Jump to
      ↵















        In this repository
      

        All GitHub
      
↵


      Jump to
      ↵






 



          Sign in
        

              Sign up
            



















Chris911

/

iStats







    Watch
 
      40
    




      Star


      2.1k
    




          Fork


        156
      





        Ruby gem for your mac stats
      



chris911.github.io/istats/





            MIT License
        




2.1k
        stars
 

156
        forks
 




      Star





    Watch









Code

 



Issues
19
 



Pull requests
5
 



Actions

 



Projects
0
 



Security

 



Insights

 
 




More

 




                    Code
 


                    Issues
 


                    Pull requests
 


                    Actions
 


                    Projects
 


                    Security
 


                    Insights
 


 










          Dismiss
        
Join GitHub today
GitHub is home to over 50 million developers working together to host and review code, manage projects, and build software together.
Sign up










master














4
branches



0
tags




    Go to file






      Code
      
 








  Clone






            HTTPS
 
            GitHub CLI
 









      Use Git or checkout with SVN using the web URL.
    









      Work fast with our official CLI.
      Learn more.
    







                Open with GitHub Desktop
 



                Download ZIP
 



Launching GitHub Desktop
If nothing happens, download GitHub Desktop and try again.
Go back


Launching GitHub Desktop
If nothing happens, download GitHub Desktop and try again.
Go back


Launching Xcode
If nothing happens, download Xcode and try again.
Go back


Launching Visual Studio
If nothing happens, download the GitHub extension for Visual Studio and try again.
Go back









Latest commit






 




Chris911

v1.6.1



…



0b86af3

Jul 29, 2018





v1.6.1

Fix fahrenheit thresholds in extra module

0b86af3



Git stats





167
commits







Files
Permalink


  
    Failed to load latest commit information.

 


Type
Name
Latest commit message
Commit time






bin



Add --no-graphs option



Oct 10, 2016







ext/osx_stats



Update SMC `GetFanSpeed` method with support for flt type (#67)



Jul 29, 2018







integrations



Unified output for Zabbix or other machine-parsing integrations (#56)



Aug 31, 2017







lib



v1.6.1



Jul 29, 2018







.gitignore



Add compiled files to git ignore



Oct 10, 2016







Gemfile



Gem structure



Apr 13, 2014







LICENSE



Initial commit



Apr 13, 2014







README.md



v1.5.1



Nov 20, 2017







Rakefile



Version 0.0.2 - No pre-compiled extensions



Apr 14, 2014







iStats.gemspec



v1.5.1



Nov 20, 2017





        View code
      






        README.md
      








iStats 
iStats is a command-line tool that allows you to easily grab the CPU temperature, fan speeds and battery information on OS X. If you'd like to see more data available feel free to open an issue.
Installation
$ gem install iStats

Note
If you are running an older version of OS X and the install fails you might want to try running this command instead:
sudo ARCHFLAGS=-Wno-error=unused-command-line-argument-hard-error-in-future gem install iStats
Screenshot
All Stats

Sparkline levels

Usage
  - iStats: help ---------------------------------------------------

  istats --help                        This help text
  istats --version                     Print current version

  # Commands
  istats all                           Print all stats
  istats cpu                           Print all CPU stats
  istats cpu [temp | temperature]      Print CPU temperature
  istats fan                           Print all fan stats
  istats fan [speed]                   Print fan speed
  istats battery                       Print all battery stats
  istats battery [health]              Print battery health
  istats battery [time | remain]       Print battery time remaining
  istats battery [cycle_count | cc]    Print battery cycle count info
  istats battery [temp | temperature]  Print battery temperature
  istats battery [charge]              Print battery charge
  istats battery [capacity]            Print battery capacity info

  istats scan                          Scans and print temperatures
  istats scan [key]                    Print single SMC temperature key
  istats scan [zabbix]                 JSON output for Zabbix discovery
  istats enable [key | all]            Enables key
  istats disable [key | all]           Disable key
  istats list                          List available keys

  # Arguments
  --no-graphs                          Don't display sparklines graphs
  --no-labels                          Don't display item names/labels
  --no-scale                           Display just the stat value
  --value-only                         No graph, label, or scale
  -f, --fahrenheit                     Display temperatures in fahrenheit

  for more help see: https://github.com/Chris911/iStats

Advanced usage
iStats now supports extra sensors for advanced users. Here's how to enable that functionality:

Run istats scan to scan your computer for SMC sensors
Enable extra sensors by running istats enable key or istats enable all
Run istats or istats extra to see the extra sensors information.

Contributing

Fork it
Create your feature branch (git checkout -b my-new-feature)
Commit your changes (git commit -am 'Add some feature')
Push to the branch (git push origin my-new-feature)
Create new Pull Request

Tested on

Click to expand


    MacBook Pro 2016    
    macOS: 10.12.6    
    Ruby: 2.4.1    
    
    MacBook Pro 2011    
    OS X: 10.11.6    
    Ruby: 2.0.0    
    
    MacBook Pro 2012    
    OS X: 10.9.3    
    Ruby: 1.9.3, 2.0.0, 2.1.1    
    
    MacBook Pro 2014    
    OS X: 10.10.3, 10.10.4    
    Ruby: 2.1.3    
    
    Mac Pro 2013    
    OS X: 10.12.6    
    Ruby: 2.0.0
  

Zabbix Integration
iStats has a ""scan zabbix"" mode which will emit JSON suitable for use with
Zabbix low-level discovery.  See the accompanying
template and agent config in the integrations directory.








About

      Ruby gem for your mac stats
    



chris911.github.io/istats/


Resources



      Readme
 
License



        MIT License
    







    Releases

No releases published






    Packages 0


        No packages published 







        Used by 12
 




























            + 4
          







    Contributors 11





 



 



 



 



 



 



 



 



 



 



 





Languages









Ruby
64.7%





C
35.3%















© 2020 GitHub, Inc.
Terms
Privacy
Security
Status
Help





Contact GitHub
Pricing
API
Training
Blog
About











    You can’t perform that action at this time.
  


















You signed in with another tab or window. Reload to refresh your session.
You signed out in another tab or window. Reload to refresh your session.







",,"# istats

> CLI tool that shows statistics such as CPU temperature, fan speeds and battery status.
> More information: <https://github.com/Chris911/iStats>.

- Show all the stats:

`istats`

- Show all CPU stats:

`istats cpu`

- Show all fan stats:

`istats fan`

- Scan and print temperatures:

`istats scan`
"
shutdown,,,"
SHUTDOWN(8)		  BSD System Manager's Manual		   SHUTDOWN(8)

NAME
     shutdown -- close down the system at a given time

SYNOPSIS
     shutdown [-] [-h [-u] | -r | -s | -k] [-o [-n]] time
	      [warning-message ...]

DESCRIPTION
     The shutdown utility provides an automated shutdown procedure for super-
     users to nicely notify users when the system is shutting down, saving
     them from system administrators, hackers, and gurus, who would otherwise
     not bother with such niceties.

     The following options are available:

     -h      The system is halted at the specified time.

     -k      Kick everybody off.  The -k option does not actually halt the
	     system, but leaves the system multi-user with logins disabled
	     (for all but super-user).

     -n      If the -o is specified, prevent the file system cache from being
	     flushed by passing -n option to halt(8) or reboot(8).  This
	     option should probably not be used.

     -o      If -h or -r is specified, shutdown will execute halt(8) or
	     reboot(8) instead of sending a signal to launchd(8).

     -r      The system is rebooted at the specified time.

     -s      The system is put to sleep at the specified time.

     -u      The system is halted up until the point of removing system power,
	     but waits before removing power for 5 minutes so that an external
	     UPS (uninterruptible power supply) can forcibly remove power.
	     This simulates a dirty shutdown to permit a later automatic power
	     on. OS X uses this mode automatically with supported UPSs in
	     emergency shutdowns.

     time    Time is the time at which shutdown will bring the system down and
	     may be the word now (indicating an immediate shutdown) or specify
	     a future time in one of two formats: +number, or yymmddhhmm,
	     where the year, month, and day may be defaulted to the current
	     system values.  The first form brings the system down in number
	     minutes and the second at the absolute time specified.

     warning-message
	     Any other arguments comprise the warning message that is broad-
	     cast to users currently logged into the system.

     -	     If `-' is supplied as an option, the warning message is read from
	     the standard input.

     At intervals, becoming more frequent as apocalypse approaches and start-
     ing at ten hours before shutdown, warning messages are displayed on the
     terminals of all users logged in.

     At shutdown time a message is written to the system log, containing the
     time of shutdown, the person who initiated the shutdown and the reason.
     Corresponding signal is then sent to launchd(8) to respectively halt,
     reboot or bring the system down to single-user state (depending on the
     above options).

     A scheduled shutdown can be canceled by killing the shutdown process (a
     SIGTERM should suffice).

SIGTERM TO SIGKILL INTERVAL
     Upon shutdown, all running processes are sent a SIGTERM followed by a
     SIGKILL.  The SIGKILL will follow the SIGTERM by an intentionally inde-
     terminate period of time.	Programs are expected to take only enough time
     to flush all dirty data and exit.	Developers are encouraged to file a
     bug with the OS vendor, should they encounter an issue with this func-
     tionality.

SEE ALSO
     kill(1), login(1), wall(1), halt(8), launchd(8), reboot(8)

BACKWARD COMPATIBILITY
     The hours and minutes in the second time format may be separated by a
     colon (``:'') for backward compatibility.

HISTORY
     The shutdown utility appeared in 4.0BSD.

BSD			       December 11, 1998			   BSD
","# shutdown

> Shutdown and reboot the system.

- Power off (halt) immediately:

`shutdown -h now`

- Sleep immediately:

`shutdown -s now`

- Reboot immediately:

`shutdown -r now`

- Reboot in 5 minutes:

`shutdown -r +{{5}}`

- Power off (halt) at 1:00 pm (Uses 24h clock):

`shutdown -h {{1300}}`

- Reboot on May 10th 2042 at 11:30 am (Input format: YYMMDDHHMM):

`shutdown -r {{4205101130}}`
"
mas,https://github.com/mas-cli/mas,"













GitHub - mas-cli/mas: Mac App Store command line interface








































Skip to content













                Sign up
              
















                    Why GitHub?
                    




Features →

Code review
Project management
Integrations
Actions
Packages
Security
Team management
Hosting
Mobile


Customer stories →
Security →





Team


Enterprise




                    Explore
                    





Explore GitHub →

Learn & contribute

Topics
Collections
Trending
Learning Lab
Open source guides

Connect with others

Events
Community forum
GitHub Education
GitHub Stars program





Marketplace




                    Pricing
                    




Plans →

Compare plans
Contact Sales


Nonprofit →
Education →






























        In this repository
      

        All GitHub
      
↵


      Jump to
      ↵






No suggested jump to results















        In this repository
      

        All GitHub
      
↵


      Jump to
      ↵















        In this repository
      

        All GitHub
      
↵


      Jump to
      ↵






 



          Sign in
        

              Sign up
            



















mas-cli

/

mas







    Watch
 
      95
    




      Star


      7.4k
    




          Fork


        188
      





📦 Mac App Store command line interface
      



            MIT License
        




7.4k
        stars
 

188
        forks
 




      Star





    Watch









Code

 



Issues
52
 



Pull requests
3
 



Actions

 



Projects
0
 



Wiki

 



Security

 



Insights

 
 




More

 




                    Code
 


                    Issues
 


                    Pull requests
 


                    Actions
 


                    Projects
 


                    Wiki
 


                    Security
 


                    Insights
 


 










          Dismiss
        
Join GitHub today
GitHub is home to over 50 million developers working together to host and review code, manage projects, and build software together.
Sign up










master














6
branches



25
tags




    Go to file






      Code
      
 








  Clone






            HTTPS
 
            GitHub CLI
 









      Use Git or checkout with SVN using the web URL.
    









      Work fast with our official CLI.
      Learn more.
    







                Open with GitHub Desktop
 



                Download ZIP
 



Launching GitHub Desktop
If nothing happens, download GitHub Desktop and try again.
Go back


Launching GitHub Desktop
If nothing happens, download GitHub Desktop and try again.
Go back


Launching Xcode
If nothing happens, download Xcode and try again.
Go back


Launching Visual Studio
If nothing happens, download the GitHub extension for Visual Studio and try again.
Go back









Latest commit






 




phatblat

Merge pull request #303 from mas-cli/v1.7-rebase



…



94eb4e5

Sep 7, 2020





Merge pull request #303 from mas-cli/v1.7-rebase

🔀 Merge 1.7.1 hotfix into master

94eb4e5



Git stats





849
commits







Files
Permalink


  
    Failed to load latest commit information.

 


Type
Name
Latest commit message
Commit time






.bundle



💎 Configure bundler



Jan 27, 2018







.github



📝 Revise bug report template



Apr 6, 2019







Carthage/Checkouts



⬆️ Quick (3.0.0), Nimble (8.1.2)



Sep 7, 2020







Homebrew



🍼 Update bottle hashes after BrewTestBot build



Sep 7, 2020







MasKit



🐛 Fix list command after merge mistake



Sep 7, 2020







MasKitTests



👽 Remove force try from tests



Sep 7, 2020







Package



➖Remote Result from Components.plist



Feb 10, 2020







PrivateFrameworks



🛸 Update macOS private headers from 10.14.4



Mar 30, 2019







contrib/completion



Seriously more interactive fish completions



May 23, 2019







docs



🎨 Apply swiftformat



Jan 30, 2019







mas-cli.xcodeproj



🔖 Version 1.7.1



Sep 7, 2020







mas.xcworkspace



🗃️ Add misc file refrences



Jan 15, 2019







mas



Merge branch 'master' into feature/purchase-apps



May 14, 2020







script



📜 Add brew_update script



Sep 7, 2020







.editorconfig



🔧 Revise editorconfig globs



Sep 7, 2020







.gitignore



🙈 Ignore default.profraw



Sep 7, 2020







.hound.yml



🙅🏻‍♂️ Disable rubocop checks



Jan 22, 2019







.ruby-version



⬆️ ruby (2.4.3)



Dec 14, 2019







.shellcheck.yml



🚨📜 Add shellcheck



Jan 16, 2019







.swift-version



📌 Swift (5.2.4)



May 29, 2020







.swiftformat



🔧 Configure .swiftformat



Jan 30, 2019







.swiftlint.yml



🔧 Enable linting tests, disable some rules



May 15, 2020







.travis.yml



⬆️ Xcode (11.5)



May 24, 2020







Brewfile



➕ make (4.3)



May 29, 2020







Brewfile.lock.json



📦 Update brew lockfile



Sep 7, 2020







CHANGELOG.md



📝 Update changelog



Sep 7, 2020







CODE_OF_CONDUCT.md



📄 Add GitHub's template contributor covenant code of conduct



Jan 12, 2019







CONTRIBUTING.md



📝 Add Contributing Guidelines (#126)



Jan 29, 2018







Cartfile



➖ Result, ⬆️ Quick (2.2.0), Nimble (8.0.4), Commandant (0.17.0)



Dec 14, 2019







Cartfile.private



Add dependency on Carthage



Sep 4, 2018







Cartfile.resolved



⬆️ Quick (3.0.0), Nimble (8.1.1)



Sep 7, 2020







Dangerfile



⚠️ Update app and test paths



Jan 16, 2019







Gemfile



Remove CocoaPods from project



Sep 4, 2018







Gemfile.lock



Bump kramdown from 2.2.1 to 2.3.0



Aug 8, 2020







Jenkinsfile



⬆️ Xcode (11.5)



May 24, 2020







LICENSE



Add the license



Sep 20, 2015







Makefile



Makefile: Add support for PREFIX in make install



Jul 30, 2020







Mintfile



⬆️ SwiftFormat (0.44.11)



May 24, 2020







README.md



Update README.md



Aug 11, 2020







mas-cli.png



Add logo to the readme



Sep 25, 2016





        View code
      






        README.md
      









mas-cli
A simple command line interface for the Mac App Store. Designed for scripting and automation.





📲 Install
🍺 Homebrew
Homebrew is the preferred way to install:
brew install mas
MacPorts
MacPorts works as well:
sudo port install mas
⚠️ Note that macOS 10.14 (Mojave) is required to install mas from MacPorts or the core Homebrew formula.
☎️ Older macOS Versions
We provide a custom Homebrew tap with pre-built bottles
for all macOS versions since 10.11.
To install mas from our tap:
brew install mas-cli/tap/mas
Known Installation Issues On macOS Before 10.14.4
Starting with mas 1.7.0, if you get
an error similar to dyld: Symbol not found: _$s11SubSequenceSlTl when running mas,
you'll need to install the Swift 5 Runtime Support for Command Line Tools.
Alternatively, you can:

Update to macOS 10.14.4 or later
Install Xcode 10.2 or later at /Applications/Xcode.app
Rebuild mas from source using Xcode 10.0 or later

🐙 GitHub Releases
Alternatively, binaries are available in the GitHub Releases
🤳🏻 Usage
Each application in the Mac App Store has a product identifier which is also
used for mas-cli commands. Using mas list will show all installed
applications and their product identifiers.
$ mas list
446107677 Screens
407963104 Pixelmator
497799835 Xcode
It is possible to search for applications by name using mas search which
will search the Mac App Store and return matching identifiers.
Include the --price flag to include prices in the result.
$ mas search Xcode
497799835 Xcode
688199928 Docs for Xcode
449589707 Dash 3 - API Docs & Snippets. Integrates with Xcode, Alfred, TextWrangler and many more.
[...]
To install or update an application simply run mas install with an
application identifier:
$ mas install 808809998
==> Downloading PaintCode 2
==> Installed PaintCode 2
If you want to install the first result that the search command returns, use the lucky command.
$ mas lucky twitter
==> Downloading Twitter
==> Installed Twitter

Please note that this command will not allow you to install (or even purchase) an app for the first time:
use the purchase command in that case.

$ mas purchase 768053424
==> Downloading Gapplin
==> Installed Gapplin

Please note that you may have to re-authenticate yourself in the App Store to complete the purchase.
This is the case if the application is not free or if you configured your account not to remember the credentials for free purchases.

Use mas outdated to list all applications with pending updates.
$ mas outdated
497799835 Xcode (7.0)
446107677 Screens VNC - Access Your Computer From Anywhere (3.6.7)

mas is only able to install/update applications that are listed in the Mac App Store itself.
Use softwareupdate(8) utility for downloading system updates (like iTunes, Xcode Command Line Tools, etc)

To install all pending updates run mas upgrade.
$ mas upgrade
Upgrading 2 outdated applications:
Xcode (7.0), Screens VNC - Access Your Computer From Anywhere (3.6.7)
==> Downloading Xcode
==> Installed Xcode
==> Downloading iFlicks
==> Installed iFlicks
Updates can be performed selectively by providing the app identifier(s) to
mas upgrade
$ mas upgrade 715768417
Upgrading 1 outdated application:
Xcode (8.0)
==> Downloading Xcode
==> Installed Xcode
🚏📥 Sign-in
To sign into the Mac App Store for the first time run mas signin.
$ mas signin mas@example.com
==> Signing in to Apple ID: mas@example.com
Password:

⚠️ Due to breaking changes in the underlying API that mas uses to interact with the Mac App Store,
the signin command has been temporarily disabled on macOS 10.13+ ⛔.
For more information on this issue, see #164.

If you experience issues signing in this way, you can ask to signin using a graphical dialog (provided by Mac App Store application):
$ mas signin --dialog mas@example.com
==> Signing in to Apple ID: mas@example.com
You can also embed your password in the command.
$ mas signin mas@example.com 'ZdkM4f$gzF;gX3ABXNLf8KcCt.x.np'
==> Signing in to Apple ID: mas@example.com
Use mas signout to sign out from the Mac App Store.
🍺 Homebrew integration
mas is integrated with homebrew-bundle. If mas is installed, and you run brew bundle dump,
then your Mac App Store apps will be included in the Brewfile created. See the homebrew-bundle
docs for more details.
💥 When something doesn't work
If you see the error ""This redownload is not available for this Apple ID either because it was bought by a different user of the item was refunded or cancelled."", it's probably because you haven't installed the app through the App Store yet. See #46.
If mas doesn't work for you as expected (e.g. you can't update/download apps), run mas reset and try again. If the issue persists, please file a bug! All your feedback is much appreciated ✨
📺 Using tmux
mas operates via the same system services as the Mac App Store. These exist as
separate processes with communication through XPC. As a result of this, mas
experiences similar problems as the pasteboard when running inside tmux. A
wrapper tool exists to
fix pasteboard behaviour which also works for mas.
You should consider configuring tmux to use the wrapper but if you do not wish
to do this it can be used on a one-off basis as follows:
brew install reattach-to-user-namespace
reattach-to-user-namespace mas install
ℹ️ Build from source
You can now build from Xcode by opening mas-cli.xcodeproj, or from the Terminal:
script/build
Build output can be found in the build/ directory within the project.
✅ Tests
The tests in this project are a recent work-in-progress.
Since Xcode does not officially support tests for command-line tool targets,
all logic is part of the MasKit target with tests in MasKitTests.
Tests are written using Quick.
📄 License
mas-cli was created by @argon.
Code is under the MIT license.








About

📦 Mac App Store command line interface
    
Topics



  mas


  osx


  macos


  mac-app-store


  homebrew


  software-update



Resources



      Readme
 
License



        MIT License
    







    Releases
      25





v1.7.1: 🐛 Search JSON Fix

          Latest
 
Sep 7, 2020

 

        + 24 releases







    Packages 0


        No packages published 













    Contributors 31





 



 



 



 



 



 



 



 



 



 



 



      + 20 contributors





Languages













Swift
58.4%





Objective-C
22.9%





Shell
11.3%





Ruby
3.3%





Perl
2.8%





Makefile
1.3%















© 2020 GitHub, Inc.
Terms
Privacy
Security
Status
Help





Contact GitHub
Pricing
API
Training
Blog
About











    You can’t perform that action at this time.
  


















You signed in with another tab or window. Reload to refresh your session.
You signed out in another tab or window. Reload to refresh your session.







",,"# mas

> Command line interface for the Mac App Store.
> More information: <https://github.com/mas-cli/mas>.

- Sign into the Mac App Store for the first time:

`mas signin {{user@example.com}}`

- Show all installed applications and their product identifiers:

`mas list`

- Search for an application, displaying the price alongside the results:

`mas search {{application}} --price`

- Install or update an application:

`mas install {{product_identifier}}`

- Install all pending updates:

`mas upgrade`
"
pod,,,,"# pod

> Dependency manager for Swift and Objective-C Cocoa projects.

- Create a Podfile for the current project with the default contents:

`pod init`

- Download and install all pods defined in the Podfile (that haven't been installed before):

`pod install`

- List all available pods:

`pod list`

- Show the outdated pods (of those currently installed):

`pod outdated`

- Update all currently installed pods to their newest version:

`pod update`

- Update a specific (previously installed) pod to its newest version:

`pod update {{pod_name}}`

- Remove CocoaPods from a Xcode project:

`pod deintegrate {{xcode_project}}`
"
xcode-select,,,"XCODE-SELECT(1) 	  BSD General Commands Manual	       XCODE-SELECT(1)



NAME
       xcode-select - Manages the active developer directory for Xcode and BSD
       tools.

SYNOPSIS
       xcode-select   [-h|--help]   [-s|--switch   <path>]   [-p|--print-path]
       [-v|--version]

DESCRIPTION
       xcode-select  controls  the location of the developer directory used by
       xcrun(1), xcodebuild(1), cc(1), and other  Xcode  and  BSD  development
       tools. This also controls the locations that are searched for by man(1)
       for developer tool manpages.

       This allows you to easily switch  between  different  versions  of  the
       Xcode  tools  and  can be used to update the path to the Xcode if it is
       moved after installation.

   Usage
       When multiple Xcode  applications  are  installed  on  a  system  (e.g.
       /Applications/Xcode.app,  containing  the  latest  Xcode, and /Applica-
       tions/Xcode-beta.app  containing  a  beta)  use	xcode-select  --switch
       path/to/Xcode.app to specify the Xcode that you wish to use for command
       line developer tools.

       After setting a developer directory, all of the	xcode-select  provided
       developer  tool shims (see FILES) will automatically invoke the version
       of the tool inside the selected developer directory. Your own  scripts,
       makefiles, and other tools can also use xcrun(1) to easily lookup tools
       inside the active developer directory, making it easy  to  switch  them
       between	different  versions  of  the  Xcode tools and allowing them to
       function properly on systems  where  the  Xcode	application  has  been
       installed to a non-default location.

OPTIONS
       -h, --help
	      Prints the usage message.

       -s <path>, --switch <path>
	      Sets the active developer directory to the given path, for exam-
	      ple /Applications/Xcode-beta.app. This command must be run  with
	      superuser  permissions  (see sudo(8)), and will affect all users
	      on the system. To set the path without superuser permissions  or
	      only  for the current shell session, use the DEVELOPER_DIR envi-
	      ronment variable instead (see ENVIRONMENT).

       -p, --print-path
	      Prints the path to the currently selected  developer  directory.
	      This  is	useful	for  inspection,  but  scripts and other tools
	      should use xcrun(1) to locate tool inside the  active  developer
	      directory.

       -r, --reset
	      Unsets  any  user-specified  developer  directory,  so  that the
	      developer directory will be found via the default search	mecha-
	      nism.  This  command must be run with superuser permissions (see
	      sudo(8)), and will affect all users on the system.

       -v, --version
	      Prints xcode-select version information.

       --install
	      Opens a user interface dialog to request automatic  installation
	      of the command line developer tools.

ENVIRONMENT
       DEVELOPER_DIR
	  Overrides the active developer directory. When DEVELOPER_DIR is set,
	  its value will be used instead of the system-wide  active  developer
	  directory.

	  Note	that for historical reason, the developer directory is consid-
	  ered to be the Developer content directory inside the Xcode applica-
	  tion	(for  example /Applications/Xcode.app/Contents/Developer). You
	  can set the environment variable to either the actual Developer con-
	  tents   directory,   or  the	Xcode  application  directory  --  the
	  xcode-select provided shims will automatically convert the  environ-
	  ment variable into the full Developer content path.

EXAMPLES
       xcode-select --switch /Applications/Xcode.app/Contents/Developer
	  Select   /Applications/Xcode.app/Contents/Developer  as  the	active
	  developer directory.

       xcode-select --switch /Applications/Xcode.app
	  As above, selects /Applications/Xcode.app/Contents/Developer as  the
	  active developer directory. The Developer content directory is auto-
	  matically inferred by xcode-select.

       /usr/bin/xcodebuild
	  Runs xcodebuild out of the active developer directory.

       /usr/bin/xcrun --find xcodebuild
	  Use xcrun to locate xcodebuild inside the  active  developer	direc-
	  tory.

       env DEVELOPER_DIR=""/Applications/Xcode-beta.app"" /usr/bin/xcodebuild
	  Execute xcodebuild using an alternate developer directory.

FILES
       /usr/bin/xcrun
	  Used	to  find  or  run arbitrary commands from the active developer
	  directory. See xcrun(1) for more information.

       /usr/bin/actool	/usr/bin/agvtool  /usr/bin/desdp   /usr/bin/genstrings
       /usr/bin/ibtool /usr/bin/ictool /usr/bin/instruments /usr/bin/iprofiler
       /usr/bin/opendiff    /usr/bin/sdef    /usr/bin/sdp     /usr/bin/stapler
       /usr/bin/xcodebuild /usr/bin/xed
	  Runs	the  matching Xcode tool from with the active developer direc-
	  tory.

       /usr/bin/BuildStrings /usr/bin/CpMac  /usr/bin/DeRez  /usr/bin/GetFile-
       Info	 /usr/bin/MergePef	/usr/bin/MvMac	    /usr/bin/ResMerger
       /usr/bin/RezDet	  /usr/bin/RezWack    /usr/bin/Rez    /usr/bin/SetFile
       /usr/bin/SplitForks    /usr/bin/UnRezWack    /usr/bin/ar    /usr/bin/as
       /usr/bin/asa /usr/bin/bison /usr/bin/c89 /usr/bin/c99  /usr/bin/clang++
       /usr/bin/clang	    /usr/bin/cmpdylib	    /usr/bin/codesign_allocate
       /usr/bin/cpp   /usr/bin/ctags   /usr/bin/ctf_insert   /usr/bin/dsymutil
       /usr/bin/dwarfdump     /usr/bin/flex++	 /usr/bin/flex	  /usr/bin/g++
       /usr/bin/gatherheaderdoc 	  /usr/bin/gcc		 /usr/bin/gcov
       /usr/bin/git-cvsserver	/usr/bin/git-receive-pack   /usr/bin/git-shell
       /usr/bin/git-upload-archive    /usr/bin/git-upload-pack	  /usr/bin/git
       /usr/bin/gm4   /usr/bin/gnumake	 /usr/bin/gperf  /usr/bin/hdxml2manxml
       /usr/bin/headerdoc2html	 /usr/bin/indent    /usr/bin/install_name_tool
       /usr/bin/ld  /usr/bin/lex  /usr/bin/libtool /usr/bin/lipo /usr/bin/lldb
       /usr/bin/lorder /usr/bin/m4 /usr/bin/make  /usr/bin/mig	/usr/bin/mkdep
       /usr/bin/nasm	  /usr/bin/ndisasm     /usr/bin/nm     /usr/bin/nmedit
       /usr/bin/objdump  /usr/bin/otool   /usr/bin/pagestuff   /usr/bin/ranlib
       /usr/bin/rebase	    /usr/bin/redo_prebinding	 /usr/bin/resolveLinks
       /usr/bin/rpcgen	 /usr/bin/segedit    /usr/bin/size    /usr/bin/strings
       /usr/bin/strip  /usr/bin/svn  /usr/bin/svnadmin	/usr/bin/svndumpfilter
       /usr/bin/svnlook /usr/bin/svnserve /usr/bin/svnsync /usr/bin/svnversion
       /usr/bin/swift	/usr/bin/swiftc  /usr/bin/unifdef  /usr/bin/unifdefall
       /usr/bin/xml2man /usr/bin/yacc
	  Runs the matching BSD tool from with the active developer directory.

SEE ALSO
       xcrun(1), xcodebuild(1)

HISTORY
       The xcode-select command first appeared in Xcode 3.0.



Mac OS X			March 08, 2016		       XCODE-SELECT(1)
","# xcode-select

> Switch between different versions of Xcode and the included developer tools.
> Also used to update the path to Xcode if it is moved after installation.

- Install Xcode's command-line tools:

`xcode-select --install`

- Select a given path as the active developer directory:

`xcode-select -s {{path/to/Xcode.app/Contents/Developer}}`

- Select a given Xcode instance and use its developer directory as the active one:

`xcode-select -s {{path/to/Xcode.app}}`

- Print the currently selected developer directory:

`xcode-select -p`

- Discard any user-specified developer directory so that it will be found via the default search mechanism:

`sudo xcode-select -r`
"
screencapture,,,"
SCREENCAPTURE(1)	  BSD General Commands Manual	      SCREENCAPTURE(1)

NAME
     screencapture -- capture images from the screen and save them to a file
     or the clipboard

SYNOPSIS
     screencapture [-SWCTMPcimswxto] file

DESCRIPTION
     The screencapture utility is not very well documented to date.  A list of
     options follows.

     -c      Force screen capture to go to the clipboard.

     -b      Capture Touch Bar, only works in non-interactive modes.

     -C      Capture the cursor as well as the screen.	Only allowed in non-
	     interactive modes.

     -d      Display errors to the user graphically.

     -i      Capture screen interactively, by selection or window.  The con-
	     trol key will cause the screen shot to go to the clipboard.  The
	     space key will toggle between mouse selection and window selec-
	     tion modes.  The escape key will cancel the interactive screen
	     shot.

     -m      Only capture the main monitor, undefined if -i is set.

     -D      <display> Screen capture or record from the display specified. 1
	     is main, 2 secondary, etc

     -o      In window capture mode, do not capture the shadow of the window.

     -p      Screen capture will use the default settings for capture. The
	     files argument will be ignored.

     -M      Open the taken picture in a new Mail message.

     -P      Open the taken picture in a Preview window or QuickTime Player if
	     video.

     -I      Open the taken picture in Mesages.

     -B      <bundleid> Open in the app matching bundleid.

     -s      Only allow mouse selection mode.

     -S      In window capture mode, capture the screen instead of the window.

     -J      <style> Sets the starting style of interfactive capture ""selec-
	     tion"",""window"",""video"".

     -t      <format> Image format to create, default is png (other options
	     include pdf, jpg, tiff and other formats).

     -T      <seconds> Take the picture after a delay of <seconds>, default is
	     5.

     -w      Only allow window selection mode.

     -W      Start interaction in window selection mode.

     -x      Do not play sounds.

     -a      Do not capture attached windows.

     -r      Do not add screen dpi meta data to captured file.

     -l      <windowid> Captures the window with windowid.

     -R      <rectangle> Capture rectangle using format x,y,width,height.

     -v      Capture video recording of the screen.

     -V      <seconds> Capture video recording of the screen for the specified
	     seconds.

     -A      <id> Captures audio during a video recording using default input.
	     Optionally pass id of the audio source.

     -k      Show clicks in video recordings.

     -U      Show interactive toolbar in interactive mode.

     -u      Present UI after screencapture is complete. Files passed to com-
	     mandline will be ignored.

     files   where to save the screen capture, 1 file per screen

BUGS
     Better documentation is needed for this utility.

SECURITY CONSIDERATIONS
     To capture screen content while logged in via ssh, you must launch
     screencapture in the same mach bootstrap hierarchy as loginwindow:

     PID=pid of loginwindow
     sudo launchctl bsexec $PID screencapture [options]

HISTORY
     A screencapture utility first appeared in Mac OS X v10.2.

Mac OS				 June 16, 2004				Mac OS
","# screencapture

> Utility to take screenshots and screen recordings.

- Take a screenshot and save it to a file:

`screencapture {{path/to/file.png}}`

- Take a screenshot including the mouse cursor:

`screencapture -C {{path/to/file.png}}`

- Take a screenshot and open it in Preview, instead of saving:

`screencapture -P`

- Take a screenshot of a selected rectangular area:

`screencapture -i {{path/to/file.png}}`

- Take a screenshot after a delay:

`screencapture -T {{seconds}} {{path/to/file.png}}`

- Make a screen recording and save it to a file:

`screencapture -v {{path/to/file.mp4}}`
"
du,,,"
DU(1)			  BSD General Commands Manual			 DU(1)

NAME
     du -- display disk usage statistics

SYNOPSIS
     du [-H | -L | -P] [-a | -s | -d depth] [-c] [-h | -k | -m | -g] [-x]
	[-I mask] [file ...]

DESCRIPTION
     The du utility displays the file system block usage for each file argu-
     ment and for each directory in the file hierarchy rooted in each direc-
     tory argument.  If no file is specified, the block usage of the hierarchy
     rooted in the current directory is displayed.

     The options are as follows:

     -a      Display an entry for each file in a file hierarchy.

     -c      Display a grand total.

     -d depth
	     Display an entry for all files and directories depth directories
	     deep.

     -H      Symbolic links on the command line are followed, symbolic links
	     in file hierarchies are not followed.

     -h      ""Human-readable"" output.  Use unit suffixes: Byte, Kilobyte,
	     Megabyte, Gigabyte, Terabyte and Petabyte.

     -I mask
	     Ignore files and directories matching the specified mask.

     -g      Display block counts in 1073741824-byte (1-Gbyte) blocks.

     -k      Display block counts in 1024-byte (1-Kbyte) blocks.

     -L      Symbolic links on the command line and in file hierarchies are
	     followed.

     -m      Display block counts in 1048576-byte (1-Mbyte) blocks.

     -P      No symbolic links are followed.  This is the default.

     -r      Generate messages about directories that cannot be read, files
	     that cannot be opened, and so on.	This is the default case.
	     This option exists solely for conformance with X/Open Portability
	     Guide Issue 4 (``XPG4'').

     -s      Display an entry for each specified file.	(Equivalent to -d 0)

     -x      File system mount points are not traversed.

     The du utility counts the storage used by symbolic links and not the
     files they reference unless the -H or -L option is specified.  If either
     the -H or -L options are specified, storage used by any symbolic links
     which are followed is not counted or displayed.  If more than one of the
     -H, -L, and -P options is specified, the last one given is used.

     Files having multiple hard links are counted (and displayed) a single
     time per du execution.  Directories having multiple hard links (typically
     Time Machine backups) are counted a single time per du execution.

ENVIRONMENT
     BLOCKSIZE	If the environment variable BLOCKSIZE is set, and the -k
		option is not specified, the block counts will be displayed in
		units of that size block.  If BLOCKSIZE is not set, and the -k
		option is not specified, the block counts will be displayed in
		512-byte blocks.

LEGACY DESCRIPTION
     In legacy mode, only one of the -H, -L, or -P options may be specified.

     The command will detect and report a SYMLOOP error (loop involving sym-
     bolic links).  In legacy mode, this is not the case.

     For more information about legacy mode, see compat(5).

SEE ALSO
     df(1), fts(3), compat(5), symlink(7), quot(8)

HISTORY
     A du command appeared in Version 1 AT&T UNIX.

BSD				 June 2, 2004				   BSD
","# du

> Disk usage: estimate and summarize file and directory space usage.

- List the sizes of a directory and any subdirectories, in the given unit (KB/MB/GB):

`du -{{k|m|g}} {{path/to/directory}}`

- List the sizes of a directory and any subdirectories, in human-readable form (i.e. auto-selecting the appropriate unit for each size):

`du -h {{path/to/directory}}`

- Show the size of a single directory, in human readable units:

`du -sh {{path/to/directory}}`

- List the human-readable sizes of a directory and of all the files and directories within it:

`du -ah {{path/to/directory}}`

- List the human-readable sizes of a directory and any subdirectories, up to N levels deep:

`du -h -d {{N}} {{path/to/directory}}`

- List the human-readable size of all .jpg files in subdirectories of the current directory, and show a cumulative total at the end:

`du -ch */*.jpg`
"
networksetup,,,"
NETWORKSETUP(8) 	  BSD System Manager's Manual	       NETWORKSETUP(8)

NAME
     networksetup -- configuration tool for network settings in System Prefer-
     ences.

SYNOPSIS
     networksetup [-listnetworkserviceorder] [-listallnetworkservices]
		  [-listallhardwareports] [-detectnewhardware]
		  [-getmacaddress hardwareport] [-getcomputername]
		  [-setcomputername computername] [-getinfo networkservice]
		  [-setmanual networkservice ip subnet router]
		  [-setdhcp networkservice [clientid]]
		  [-setbootp networkservice]
		  [-setmanualwithdhcprouter networkservice ip]
		  [-getadditionalroutes networkservice]
		  [-setadditionalroutes networkservice [dest1 mask1 gate1] [dest2 mask2 gate2] ... [destN maskN gateN]]
		  [-setv4off networkservice] [-setv6off networkservice]
		  [-setv6automatic networkservice]
		  [-setv6linklocal networkservice]
		  [-setv6manual networkservice address prefixLength router]
		  [-getv6additionalroutes networkservice]
		  [-setv6additionalroutes networkservice [dest1 prefixlength1 gate1] [dest2 prefixlength2 gate2] ... [destN prefixlengthN gateN]]
		  [-getdnsservers networkservice]
		  [-setdnsservers networkservice dns1 [dns2] [...]]
		  [-getsearchdomains networkservice]
		  [-setsearchdomains networkservice domain1 [domain2] [...]]
		  [-create6to4service networkservicename]
		  [-set6to4automatic networkservice]
		  [-set6to4manual networkservice relayAddress]
		  [-getftpproxy networkservice]
		  [-setftpproxy networkservice domain portnumber authenticated username password]
		  [-setftpproxystate networkservice on | off]
		  [-getwebproxy networkservice]
		  [-setwebproxy networkservice domain portnumber authenticated username password]
		  [-setwebproxystate networkservice on | off]
		  [-getsecurewebproxy networkservice]
		  [-setsecurewebproxy networkservice domain portnumber authenticated username password]
		  [-setsecurewebproxystate networkservice on | off]
		  [-getstreamingproxy networkservice]
		  [-setstreamingproxy networkservice domain portnumber authenticated username password]
		  [-setstreamingproxystate networkservice on | off]
		  [-getgopherproxy networkservice]
		  [-setgopherproxy networkservice domain portnumber authenticated username password]
		  [-setgopherproxystate networkservice on | off]
		  [-getsocksfirewallproxy networkservice]
		  [-setsocksfirewallproxy networkservice domain portnumber authenticated username password]
		  [-setsocksfirewallproxystate networkservice on | off]
		  [-getproxybypassdomains networkservice]
		  [-setproxybypassdomains networkservice domain1 [domain2] [...]]
		  [-getproxyautodiscovery networkservice]
		  [-setproxyautodiscovery networkservice on | off]
		  [-getpassiveftp networkservice]
		  [-setpassiveftp networkservice on | off]
		  [-getairportnetwork device]
		  [-setairportnetwork device network [password]]
		  [-getairportpower device] [-setairportpower device on | off]
		  [-listpreferredwirelessnetworks hardwareport]
		  [-addpreferredwirelessnetworkatindex hardwareport network index securitytype [password]]
		  [-removepreferredwirelessnetwork hardwareport network]
		  [-removeallpreferredwirelessnetworks hardwareport]
		  [-getnetworkserviceenabled networkservice]
		  [-setnetworkserviceenabled networkservice on | off]
		  [-createnetworkservice networkservicename hardwareport]
		  [-renamenetworkservice networkservice newnetworkservicename]
		  [-duplicatenetworkservice networkservice newnetworkservicename]
		  [-removenetworkservice networkservice]
		  [-ordernetworkservices service1 [service2] [service3] [...]]
		  [-getMTU hardwareport] [-setMTU hardwarePort value]
		  [-listvalidMTUrange hardwareport] [-getmedia hardwareport]
		  [-setmedia hardwareport subtype [option1] [option2] [...]]
		  [-listvalidmedia hardwareport]
		  [-createVLAN name parentdevice tag]
		  [-deleteVLAN name parentdevice tag] [-listVLANs]
		  [-listdevicesthatsupportVLAN] [-isBondSupported device]
		  [-createBond name [device1] [device2] [...]]
		  [-deleteBond bond] [-addDeviceToBond device bond]
		  [-removeDeviceFromBond device bond] [-listBonds]
		  [-showBondStatus bond] [-listpppoeservices]
		  [-showpppoestatus name]
		  [-createpppoeservice device name account password [pppoeName]]
		  [-deletepppoeservice service]
		  [-setpppoeaccountname service account]
		  [-setpppoepassword service password]
		  [-connectpppoeservice service]
		  [-disconnectpppoeservice service] [-listlocations]
		  [-getcurrentlocation] [-createlocation location [populate]]
		  [-deletelocation location] [-switchtolocation location]
		  [-listalluserprofiles] [-listloginprofiles service]
		  [-enablesystemprofile service on | off]
		  [-enableloginprofile service profile on | off]
		  [-enableuserprofile profile on | off]
		  [-import8021xProfiles service path]
		  [-export8021xProfiles service path yes | no]
		  [-export8021xUserProfiles path yes | no]
		  [-export8021xLoginProfiles service path yes | no]
		  [-export8021xSystemProfile service path yes | no]
		  [-settlsidentityonsystemprofile service path passphrase]
		  [-settlsidentityonuserprofile profile path passphrase]
		  [-deletesystemprofile service]
		  [-deleteloginprofile service profile]
		  [-deleteuserprofile profile] [-version] [-help]
		  [-printcommands]

DESCRIPTION
     The networksetup command is used to configure network settings typically
     configured in the System Preferences application. The networksetup com-
     mand requires at least admin privileges to change network settings. If
     the ""Require an administrator password to access system-wide preferences""
     option is selected in System Preferences > Security & Privacy, then root
     privileges are required to change network settings.

     Any flag that takes a password will accept ""-"" in place of the password
     to indicate it should read the password from stdin.

     A list of flags and their descriptions:

     -listnetworkserviceorder
	     Displays a list of network services in the order they are con-
	     tacted for a connection, along with the corresponding port and
	     device for each. An asterisk (*) next to a service means the ser-
	     vice is inactive.

     -listallnetworkservices
	     Displays a list of all the network services on the server's hard-
	     ware ports. An asterisk (*) denotes that a network service is
	     disabled.

     -listallhardwareports
	     Displays list of hardware ports with corresponding device name
	     and ethernet address.

     -detectnewhardware
	     Detects new network hardware and creates a default network ser-
	     vice on the hardware.

     -getmacaddress hardwareport
	     Displays ethernet (or Wi-Fi) address for hardwareport or device
	     specified.

     -getcomputername
	     Displays the computer name.

     -setcomputername computername
	     Sets computer name to <computername>. This name is used by AFP.

     -getinfo networkservice
	     Displays the IP address, subnet mask, router, and hardware
	     address for the <networkservice> that you specify.

     -setmanual networkservice ip subnet router
	     Set the TCP/IP configuration for <networkservice> to manual with
	     IP address set to <ip>, Subnet Mask set to <subnet>, and Router
	     address set to <router>.

     -setdhcp networkservice [clientid]
	     Use this command to set the TCP/IP configuration for the speci-
	     fied <networkservice> to use DHCP. The client ID is optional.
	     Specify ""Empty"" for [clientid] to clear the DHCP client id.

     -setbootp networkservice
	     Use this command to set the TCP/IP configuration for the speci-
	     fied <networkservice> to use BOOTP.

     -setmanualwithdhcprouter networkservice ip
	     Use this command to specify a manual IP address to use for DHCP
	     for the specified <networkservice>.

     -getadditionalroutes networkservice
	     Use this command to display the list of additional IPv4 routes
	     configured for the service.

     -setadditionalroutes networkservice [dest1 mask1 gate1] [dest2 mask2
	     gate2] ... [destN maskN gateN]
	     Use this command to set the list of IPv4 additional routes con-
	     figured for the service. Each route is specified as a (destina-
	     tion address, subnet mask, gateway address) tuple. Specifying no
	     tuples clears the list of routes.

     -setv4off networkservice
	     Use this command to turn IPv4 off on the specified <networkser-
	     vice>.

     -setv6off networkservice
	     Use this command to turn IPv6 off on the specified <networkser-
	     vice>.

     -setv6automatic networkservice
	     Use this command to set IPv6 to get its addresses automatically
	     for <networkservice>.

     -setv6linklocal networkservice
	     Use this command to set IPv6 to only use link local for <network-
	     service>.

     -setv6manual ip prefixlength router
	     Use this command to set IPv6 to get its addresses manually for
	     <networkservice>. Specify the ip address, the prefix length and
	     the router.

     -getv6additionalroutes networkservice
	     Use this command to display the list of additional IPv6 routes
	     configured for the service.

     -setv6additionalroutes networkservice [dest1 prefixlength1 gate1] [dest2
	     prefixlength2 gate2] ... [destN prefixlengthN gateN]
	     Use this command to set the list of additional routes configured
	     for the service. Each route is specified as a
	     (destination address, prefix length, gateway address) tuple.
	     Specifying no tuples clears the list of routes.

     -getdnsservers networkservice
	     Displays DNS info for <networkservice>.

     -setdnsservers networkservice dns1 [dns2] [...]
	     Use this command to specify the IP addresses of servers you want
	     the specified <networkservice> to use to resolve domain names.
	     You can list any number of servers (replace dns1, dns2, and so on
	     with the IP addresses of domain name servers). If you want to
	     clear all DNS entries for the specified network service, type
	     ""empty"" in place of the DNS server names.

     -getsearchdomains networkservice
	     Displays Domain Name info for <networkservice>.

     -setsearchdomains networkservice domain1 [domain2] [...]
	     Use this command to designate the search domain for the specified
	     <networkservice>. You can list any number of search domains
	     (replace domain1, domain2, and so on with the name of a local
	     domain). If you want to clear all search domain entries for the
	     specified network service, type aemptya in place of the domain
	     name.

     -create6to4service -<newnetworkservicename>
	     Use this command to create a new 6 to 4 service with name
	     <newnetworkservicename>.

     -set6to4automatic -<newnetworkservicename>
	     Use this command to set the 6 to 4 service such that it will get
	     the relay address automatically.

     -set6to4manual -<newnetworkservicename> -<relayaddress>
	     Use this command to set the 6 to 4 service such that it will get
	     the relay address manually. Specify the <relayaddress> that you
	     would like to set.

     -getftpproxy networkservice
	     Displays FTP proxy (server, port, enabled value) info for <net-
	     workservice>.

     -setftpproxy networkservice domain portnumber authenticated username
	     password
	     Set FTP proxy for <networkservice> with <domain> and <port num-
	     ber>. Turns proxy on. Optionally, specify <on> or <off> for
	     <authenticated> to enable and disable authenticated proxy sup-
	     port. Specify <username> and <password> if you turn authenticated
	     proxy support on.

     -setftpproxystate networkservice on | off
	     Set FTP proxy on <networkservice> to either <on> or <off>.

     -getwebproxy networkservice
	     Displays Web proxy (server, port, enabled value) info for <net-
	     workservice>.

     -setwebproxy networkservice domain portnumber authenticated username
	     password
	     Set Web proxy for <networkservice> with <domain> and <port num-
	     ber>. Turns proxy on. Optionally, specify <on> or <off> for
	     <authenticated> to enable and disable authenticated proxy sup-
	     port. Specify <username> and <password> if you turn authenticated
	     proxy support on.

     -setwebproxystate networkservice on | off
	     Set Web proxy on <networkservice> to either <on> or <off>.

     -getsecurewebproxy networkservice
	     Displays Secure Web proxy (server, port, enabled value) info for
	     <networkservice>.

     -setsecurewebproxy networkservice domain portnumber authenticated
	     username password
	     Set Secure Web proxy for <networkservice> with <domain> and <port
	     number>. Turns proxy on. Optionally, specify <on> or <off> for
	     <authenticated> to enable and disable authenticated proxy sup-
	     port. Specify <username> and <password> if you turn authenticated
	     proxy support on.

     -setsecurewebproxystate networkservice on | off
	     Set SecureWeb proxy on <networkservice> to either <on> or <off>.

     -getstreamingproxy networkservice
	     Displays Streaming proxy (server, port, enabled value) info for
	     <networkservice>.

     -setstreamingproxy networkservice domain portnumber authenticated
	     username password
	     Set Streaming proxy for <networkservice> with <networkservice>.
	     Turns proxy on. Optionally, specify <on> or <off> for <authenti-
	     cated> to enable and disable authenticated proxy support. Specify
	     <username> and <password> if you turn authenticated proxy support
	     on.

     -setstreamingproxystate networkservice on | off
	     Set Streamingproxy on <networkservice> to either <on> or <off>.

     -getgopherproxy networkservice
	     Displays Gopher proxy (server, port, enabled value) info for
	     <networkservice>.

     -setgopherproxy networkservice domain portnumber authenticated username
	     password
	     Set Gopher proxy for <networkservice> with <domain> and <port
	     number>. Turns proxy on. Optionally, specify <on> or <off> for
	     <authenticated> to enable and disable authenticated proxy sup-
	     port. Specify <username> and <password> if you turn authenticated
	     proxy support on.

     -setgopherproxystate networkservice on | off
	     Set Gopher proxy on <networkservice> to either <on> or <off>.

     -getsocksfirewallproxy networkservice
	     Displays SOCKS Firewall proxy (server, port, enabled value) info
	     for <networkservice>.

     -setsocksfirewallproxy networkservice domain portnumber authenticated
	     username password
	     Set SOCKS Firewall proxy for <networkservice> with <domain> and
	     <port number>. Turns proxy on. Optionally, specify <on> or <off>
	     for <authenticated> to enable and disable authenticated proxy
	     support. Specify <username> and <password> if you turn authenti-
	     cated proxy support on.

     -setsocksfirewallproxystate networkservice on | off
	     Set SOCKS Firewall proxy to  either <on> or <off>.

     -getproxybypassdomains networkservice
	     Displays Bypass Domain Names for <networkservice>.

     -setproxybypassdomains networkservice domain1 [domain2] [...]
	     Set the Bypass Domain Name Servers for <networkservice> to
	     <domain1> [domain2] [...]. Any number of Domain Name servers can
	     be specified. Specify ""Empty"" for <domain1> to clear all Domain
	     Name entries.

     -getproxyautodiscovery networkservice
	     Displays Proxy Auto Discover for <networkservice>.

     -setproxyautodiscovery networkservice on | off
	     Set Proxy Auto Discover for <networkservice> to either <on> or
	     <off>.

     -getpassiveftp networkservice
	     Displays whether Passive FTP is on or off for <networkservice>.

     -setpassiveftp networkservice on | off
	     Set Passive FTP to either <on> or <off>.

     -setautoproxyurl networkservice url
	     Set proxy auto-config to url for <networkservice> and enable it.

     -getautoproxyurl networkservice
	     Displays proxy auto-config (url, enabled) info for <networkser-
	     vice>.

     -setsocksfirewallproxystate networkservice on | off
	     Set SOCKS Firewall proxy to  either <on> or <off>.

     -getairportnetwork hardwareport
	     Displays current Wi-Fi Network.

     -setairportnetwork hardwareport network [password]
	     Set Wi-Fi Network to <network> using optional [password] if spec-
	     ified.

     -getairportpower hardwareport
	     Displays whether Wi-Fi power is on or off.

     -setairportpower hardwareport on | off
	     Set Wi-Fi power to either <on> or <off>.

     -listpreferredwirelessnetworks hardwareport
	     List the preferred wireless networks for <hardwareport>

     -addpreferredwirelessnetworkatindex hardwareport network index
	     securitytype [password]
	     Add wireless network named <network> to preferred list for <hard-
	     wareport> at <index>. Store the optional password in the keychain
	     For security type, use OPEN for none, WPA for WPA Personal, WPA2
	     for WPA2 Personal, WPA/WPA2 for WPA/WPA2 Personal, WPAE for WPA
	     Enterprise, WPA2E for WPA2 Enterprise, WPAE/WPA2E for WPA/WPA2
	     Enterprise, WEP for plain WEP, and 8021XWEP for 802.1X WEP.

     -removepreferredwirelessnetwork hardwareport network
	     Remove <network> from the preferred wireless network list for
	     <hardwareport>

     -removeallpreferredwirelessnetworks hardwareport
	     Remove all networks from the preferred wireless network list for
	     <hardwareport>

     -getnetworkserviceenabled networkservice
	     Displays whether a service is on or off (enabled or disabled).

     -setnetworkserviceenabled networkservice on | off
	     Use this command to turn the specified network service on or off
	     (enable or disable).

     -createnetworkservice networkservicename hardwareport
	     Create a service named <networkservice> on port <hardwareport>.
	     The new service will be enabled by default.

     -renamenetworkservice networkservice newnetworkservicename
	     Use this command to rename the specified network service <net-
	     workservice> to <newnetworkservicename>.

     -duplicatenetworkservice networkservice newnetworkservicename
	     Use this command to duplicate an existing network service <net-
	     workservice> and rename it to the specified name <newnetworkser-
	     vicename>.

     -removenetworkservice networkservice
	     Use this command to delete a network service <networkservice>.
	     You cannot use this command to delete the last remaining service
	     for a hardware port. To do so, you use the -setnetworkserviceen-
	     abled command.

     -ordernetworkservices service1 [service2] [service3] [...]
	     Use this command to designate the order network services are con-
	     tacted on the specified hardware port. Name the network you want
	     contacted first, then the second, and so on. Use ""listnetworkser-
	     viceorder"" to view current service order. Note: use quotes around
	     service names which contain spaces (ie. ""Built-in Ethernet"").

     -setMTUAndMediaAutomatically hardwarePort
	     Set hardwareport or device specified back to automatically set-
	     ting the MTU and Media.

     -getMTU hardwareport
	     Get the MTU value for hardwareport or device specified.

     -setMTU hardwarePort value
	     Set MTU for hardwareport or device specified.

     -listValidMTURange hardwareport
	     List the valid MTU range for hardwareport or device specified.

     -getMedia hardwareport
	     Show both the current setting for media and the active media on
	     hardwareport or device specified.

     -setMedia hardwareport subtype [option1] [option2] [...]
	     Set media for hardwareport or device specified to subtype. Spec-
	     ify optional [option1] and additional options depending on sub-
	     type. Any number of valid options can be specified.

     -listValidMedia hardwareport
	     List valid media options for hardwareport or device name. Enumer-
	     ates available subtypes and options per subtype.

     -createVLAN name parentdevice tag
	     Create a VLAN with the name <name> over the parent device <par-
	     entdevice> and with the tag <tag>.

     -deleteVLAN name parentdevice tag
	     Delete the VLAN with the name <name> over the parent device <par-
	     entdevice> and with the tag <tag>.

     -listVLANs
	     List the VLANs that have been created.

     -listdevicesthatsupportVLAN
	     List the devices that support VLANs.

     -isBondSupported device
	     Displays YES if the device can be added to a bond. NO if it can-
	     not.

     -createBond name [device1] [device2] [...]
	     Create a bond with the user-defined-name name and optionally add
	     any listed devices if they support bonding.

     -deleteBond bond
	     Delete the bond with the specified device-name.

     -addDeviceToBond device bond
	     Add device to bond.

     -removeDeviceFromBond device bond
	     Remove device from bond.

     -listBonds
	     List of all bonds.

     -showBondStatus bond
	     Display the status of the specified bond.

     -listpppoeservices
	     List all PPPoE services in the current set.

     -showpppoestatus name
	     Display the status of the PPPoE service with the specified name.

     -createpppoeservice device name account password [pppoeName]
	     Create a PPPoE service on the specified device with the service
	     name specified.

     -deletepppoeservice service
	     Delete the service.

     -setpppoeaccountname service account
	     Set the account name for the service.

     -setpppoepassword service password
	     Set the password for the service.

     -connectpppoeservice service
	     Connect the service.

     -disconnectpppoeservice service
	     Disconnect the service.

     -listlocations
	     List all network locations.

     -getcurrentlocation
	     Display the name of the current set.

     -createlocation location [populate]
	     Create a set with the user-defined-name name and optionally popu-
	     late it with the default services.

     -deletelocation location
	     Delete the set.

     -switchtolocation location
	     Make the specified set the current set.

     -listalluserprofiles
	     Display the names of all of the user profiles.

     -listloginprofiles service
	     Display the names of the loginwindow profiles for the specified
	     service.

     -enablesystemprofile service on | off
	     Enables or disables the system profile for the specified ser-
	     vice.

     -enableloginprofile service profile on | off
	     Enables or disables the specified loginwindow profile for the
	     specified service.

     -enableuserprofile profile on | off
	     Enables or disables the specified user profile.

     -import8021xProfiles service path
	     Imports the 802.1x profiles for the specified service.

     -export8021xProfiles service path yes | no
	     Exports all of the profiles for the specified service and option-
	     ally includes the items from the keychain.

     -export8021xUserProfiles path yes | no
	     Exports only the user profiles and optionally includes the items
	     from the keychain.

     -export8021xLoginProfiles service path yes | no
	     Exports only the loginwindow profiles for the specified ser-
	     vice  and optionally includes the items from the keychain.

     -export8021xSystemProfile service path yes | no
	     Exports only the system profile for the specified service and
	     optionally includes the items from the keychain.

     -settlsidentityonsystemprofile service path passphrase
	     Sets the TLS identity on the system profile for the specified
	     service. Identity must be a pkcs12 file.

     -settlsidentityonuserprofile profile path passphrase
	     Sets the TLS identity on the specified user profile. Identity
	     must be a pkcs12 file.

     -deletesystemprofile service
	     Deletes the system profile for the specified service.

     -deleteloginprofile service profile
	     Deletes the specified loginwindow profile for the specified ser-
	     vice.

     -deleteuserprofile profile
	     Deletes the specified user profile.  Displays version of network-
	     setup tool.

     -help   Displays a list of all the commands available in the Network Set-
	     up Tool, with explanatory information.

     -printcommands
	     Displays a list of commands with no detail.

EXAMPLES
     networksetup -listallnetworkservices

     networksetup -setmanual ""Built-in Ethernet"" 192.168.100.100 255.255.255.0
     192.168.100.1

     networksetup -setdnsservers ""Built-in Ethernet"" 192.168.100.100
     192.168.100.12

     networksetup -setsearchdomains ""Built-in Ethernet"" company.com corp.com

     networksetup -setwebproxy ""Built-in Ethernet"" proxy.company.com 80

     networksetup -setwebproxy ""Built-In Ethernet"" proxy.company.com 80 On
     authusername authpassword

     networksetup -duplicatenetworkservice ""Built-In Ethernet"" ""Local LAN""

     networksetup -getdnsservers ""Built-In Ethernet""

     networksetup -setMTU en0 1500

     networksetup -setMedia en0 autoselect

     networksetup -setMedia en0 100baseTX half-duplex

     networksetup -createBond MyBond en0 en1

     networksetup -addDeviceToBond en0 bond0

     networksetup -setpppoepassword MyPPPoE - < ~/Desktop/MyPasswordFile.txt

     networksetup -createlocation Home populate

     networksetup -import8021xProfiles Ethernet ""/Users/MyHome/Down-
     loads/ExportedConfigs.networkconnect""

FILES
     /usr/sbin/networksetup

SEE ALSO
     systemsetup(8)

Mac OS X			April 16, 2002			      Mac OS X
","# networksetup

> Configuration tool for Network System Preferences.

- List available network service providers (Ethernet, Wi-Fi, Bluetooth, etc):

`networksetup -listallnetworkservices`

- Show network settings for a particular networking device:

`networksetup -getinfo {{""Wi-Fi""}}`

- Get currently connected Wi-Fi network name (Wi-Fi device usually en0 or en1):

`networksetup -getairportnetwork {{en0}}`

- Connect to a particular Wi-Fi network:

`networksetup -setairportnetwork {{en0}} {{""Airport Network SSID""}} {{password}}`
"
logger,,,"
LOGGER(1)		  BSD General Commands Manual		     LOGGER(1)

NAME
     logger -- make entries in the system log

SYNOPSIS
     logger [-is] [-f file] [-p pri] [-t tag] [message ...]

DESCRIPTION
     Logger provides a shell command interface to the syslog(3) system log
     module.

     Options:

     -i       Log the process id of the logger process with each line.

     -s       Log the message to standard error, as well as the system log.

     -f file  Log the specified file.

     -p pri   Enter the message with the specified priority.  The priority may
	      be specified numerically or as a ``facility.level'' pair.  For
	      example, ``-p local3.info'' logs the message(s) as informational
	      level in the local3 facility.  The default is ``user.notice.''

     -t tag   Mark every line in the log with the specified tag.

     message  Write the message to log; if not specified, and the -f flag is
	      not provided, standard input is logged.

     The logger utility exits 0 on success, and >0 if an error occurs.

EXAMPLES
	   logger System rebooted

	   logger -p local0.notice -t HOSTIDM -f /dev/idmc

SEE ALSO
     syslog(3), syslogd(8)

STANDARDS
     The logger utility conforms to IEEE Std 1003.2-1992 (``POSIX.2'').

4.3 Berkeley Distribution	 June 6, 1993	     4.3 Berkeley Distribution
","# logger

> Add messages to syslog (/var/log/syslog).

- Log a message to syslog:

`logger {{message}}`

- Take input from `stdin` and log to syslog:

`echo {{log_entry}} | logger`

- Send the output to a remote syslog server running at a given port. Default port is 514:

`echo {{log_entry}} | logger -h {{hostname}} -P {{port}}`

- Use a specific tag for every line logged. Default is the name of logged in user:

`echo {{log_entry}} | logger -t {{tag}}`

- Log messages with a given priority. Default is `user.notice`. See `man logger` for all priority options:

`echo {{log_entry}} | logger -p {{user.warning}}`
"
top,,,"
TOP(1)			  BSD General Commands Manual			TOP(1)

NAME
     top -- display and update sorted information about processes

SYNOPSIS
     top [-a | -d | -e | -c mode]
	 [-F | -f]
	 [-h]
	 [-i interval]
	 [-l samples]
	 [-ncols columns]
	 [-o key | -O skey]
	 [-R | -r]
	 [-S]
	 [-s delay-secs]
	 [-n nprocs]
	 [-stats keys]
	 [-pid processid]
	 [-user username]
	 [-U username]
	 [-u]

DESCRIPTION
     The top program periodically displays a sorted list of system processes.
     The default sorting key is pid, but other keys can be used instead.  Var-
     ious output options are available.

OPTIONS
     Command line option specifications are processed from left to right.
     Options can be specified more than once.  If conflicting options are
     specified, later specifications override earlier ones.  This makes it
     viable to create a shell alias for top with preferred defaults specified,
     then override those preferred defaults as desired on the command line.

     -a      Equivalent to Fl c Ar a .

     -c mode
	     Set event counting mode to mode.  The supported modes are

	     a	     Accumulative mode.  Count events cumulatively, starting
		     at the launch of top.  Calculate CPU usage and CPU time
		     since the launch of top.

	     d	     Delta mode.  Count events relative to the previous sam-
		     ple.  Calculate CPU usage since the previous sample.
		     This mode by default disables the memory object map
		     reporting.  The memory object map reporting may be re-
		     enabled with the -r option or the interactive r command.

	     e	     Absolute mode.  Count events using absolute counters.

	     n	     Non-event mode (default).	Calculate CPU usage since the
		     previous sample.

     -d      Equivalent to -c d.

     -e      Equivalent to -c e.

     -F      Do not calculate statistics on shared libraries, also known as
	     frameworks.

     -f      Calculate statistics on shared libraries, also known as frame-
	     works (default).

     -h      Print command line usage information and exit.

     -i interval
	     Update framework (-f) info every interval samples; see the
	     PERFORMANCE/ACCURACY TRADEOFF section for more details.

     -l samples
	     Use logging mode and display samples samples, even if standard
	     output is a terminal.  0 is treated as infinity.  Rather than
	     redisplaying, output is periodically printed in raw form.	Note
	     that the first sample displayed will have an invalid %CPU dis-
	     played for each process, as it is calculated using the delta
	     between samples.

     -ncols columns
	     Display columns when using logging mode.  The default is infi-
	     nite.  The number must be >0 or an error will occur.

     -n nprocs
	     Only display up to nprocs processes.

     -O skey
	     Use skey as a secondary key when ordering the process display.
	     See -o for key names (pid is the default).

     -o key  Order the process display by sorting on key in descending order.
	     A + or - can be prefixed to the key name to specify ascending or
	     descending order, respectively.  The supported keys are:

	     pid     Process ID (default).

	     command
		     Command name.

	     cpu     CPU usage.

	     cpu_me  CPU time charged to me by other processes.

	     cpu_others
		     CPU time charged to other processes by me.

	     csw     The number of context switches.

	     time    Execution time.

	     threads
		     alias: th
		     Number of threads (total/running).

	     ports   alias: prt
		     Number of Mach ports.

	     mregion
		     alias: mreg, reg
		     Number of memory regions.

	     mem     Physical memory footprint of the process.

	     rprvt   Resident private address space size.

	     purg    Purgeable memory size.

	     vsize   Total memory size.

	     vprvt   Private address space size.

	     kprvt   Private kernel memory size.

	     kshrd   Shared kernel memory size.

	     pgrp    Process group ID.

	     ppid    Parent process ID.

	     state   alias: pstate
		     Process state.

	     uid     User ID.

	     wq      alias: #wq, workqueue
		     The workqueue total/running.

	     faults  alias: fault
		     The number of page faults.

	     cow     alias: cow_faults
		     The copy-on-write faults.

	     user    alias: username
		     Username.

	     msgsent
		     Total number of Mach messages sent.

	     msgrecv
		     Total number of Mach messages received.

	     sysbsd  Total BSD syscalls.

	     sysmach
		     Total Mach syscalls.

	     pageins
		     Total pageins.

	     boosts  The number of boosts help by the process.	This is fol-
		     lowed by the number of times the process has transitioned
		     from unboosted to boosted in brackets.  An asterisk
		     before the value indicates that the process was able to
		     send boosts at some point since the previous update.  For
		     more information about boosts, see xpc_transac-
		     tion_begin(3).

	     instrs  The number of instructions retired by the process in both
		     user space and the kernel.

	     cycles  The number of cycles spent executing instructions in the
		     process in both user space and the kernel.

     -R      Do not traverse and report the memory object map for each process
	     (default).

     -r      Traverse and report the memory object map for each process.

     -S      Display the global statistics for swap and purgeable memory.

     -s delay-secs
	     Set the delay between updates to delay-secs seconds.  The default
	     delay between updates is 1 second.

     -stats keys
	     Only display the comma separated statistics.  See the -o flag for
	     the valid keys.

     -pid processid
	     Only display processid in top.  This option may be specified mul-
	     tiple times.

     -user user
	     Only display processes owned by user

     -U user
	     This is an alias for -user.

     -u      This is an alas equivalent to: -o cpu -O time

DISPLAY
     The first several lines of the top display show various global state.
     All of the information is labeled.  Following is an alphabetical list of
     global state fields and their descriptions.

     CPU	 Percentage of processor usage, broken into user, system, and
		 idle components.  The time period for which these percentages
		 are calculated depends on the event counting mode.

     Disks	 Number and total size of disk reads and writes.

     LoadAvg	 Load average over 1, 5, and 15 minutes.  The load average is
		 the average number of jobs in the run queue.

     MemRegions  Number and total size of memory regions, and total size of
		 memory regions broken into private (broken into non-library
		 and library) and shared components.

     Networks	 Number and total size of input and output network packets.

     PhysMem	 Physical memory usage, broken into wired, active, inactive,
		 used, and free components.

     Procs	 Total number of processes and number of processes in each
		 process state.

     SharedLibs  Resident sizes of code and data segments, and link editor
		 memory usage.

     Threads	 Number of threads.

     Time	 Time, in H:MM:SS format.  When running in logging mode, Time
		 is in YYYY/MM/DD HH:MM:SS format by default, but may be over-
		 ridden with accumulative mode.  When running in accumulative
		 event counting mode, the Time is in HH:MM:SS since the begin-
		 ning of the top process.

     VirtMem	 Total virtual memory, virtual memory consumed by shared
		 libraries, and number of pageins and pageouts.

     Swap	 Swap usage: total size of swap areas, amount of swap space in
		 use and amount of swap space available.

     Purgeable	 Number of pages purged and number of pages currently purge-
		 able.

     Below the global state fields, a list of processes is displayed.  The
     fields that are displayed depend on the options that are set.  The pid
     field displays the following for the architecture:

     + for 64-bit native architecture, or - for 32-bit native architecture, or
     * for a non-native architecture.

INTERACTION
     When top is run in interactive (non-logging) mode, it is possible to con-
     trol the output of top, as well as interactively send signals to pro-
     cesses.  The interactive command syntax is terse.	Each command is one
     character, followed by 0 to 2 arguments.  Commands that take arguments
     prompt interactively for the arguments, and where applicable, the default
     value is shown in square brackets.  The default value can be selected by
     leaving the input field blank and pressing enter.	^G escapes the inter-
     active argument prompt, and has the same effect as leaving the input
     field blank and pressing enter.

     The following commands are supported:

     ?	     Display the help screen.  Any character exits help screen mode.
	     This command always works, even in the middle of a command.

     ^L      Redraw the screen.

     cmode   Set output mode to mode.  See the -c option for descriptions of
	     the allowed modes.

     Oskey   Use skey as a secondary key when ordering the process display.
	     See the -o option for key names.

     okey    Order the process display by sorting on key in descending order.
	     A + or - can be prefixed to the key name to specify ascending or
	     descending order, respectively.  The supported keys and alises
	     are listed with the -o option above.

     q	     Quit.

     r	     Toggle traversal and reporting of the memory object map for each
	     process.

     Ssignalpid
	     Send signal signal to pid.  signal can be specified either as a
	     number or as a name (for example, HUP).  The default signal
	     starts out as TERM.  Each time a signal is successfully sent, the
	     default signal is updated to be that signal.  pid is a process
	     id.

     s delay-secs
	     Set the delay between updates to delay-secs seconds.

     U user  Only display processes owned by user. Either the username or uid
	     number can be specified.  To display all processes, press enter
	     without entering a username or uid number.

PERFORMANCE/ACCURACY TRADEOFF
     Calculating detailed memory statistics is fundamentally resource-inten-
     sive.  To reduce the CPU usage in top, the -i option has been introduced
     to allow the user to tune this tradeoff.  With the default value of 10,
     framework stats will be updated once every 10 samples.  Specifying -i 1
     will result in the most accurate display, at the expense of system
     resources.

NOT AVAILABLE
     When N/A occurs in a stat, it's caused by the memory object map reporting
     being disabled.  Memory object map reporting is disabled by default in
     delta mode, but may be optionally enabled via -r or the interactive r
     command.  To enable the -r option, use it after any -c mode options.

EXAMPLES
     top -o cpu -O +rsize -s 5 -n 20
	     Sort the processes according to CPU usage (descending) and resi-
	     dent memory size (ascending), sample and update the display at 5
	     second intervals, and limit the display to 20 processes.

     top -c d
	     Run top in delta mode.

     top -stats pid,command,cpu,th,pstate,time
	     Display only the specified statistics, regardless of any growth
	     of the terminal.  If the terminal is too small, only the statis-
	     tics that fit will be displayed.

SEE ALSO
     kill(2), vm_stat(1), signal(3), vmmap(1)

Darwin				 13 March 2017				Darwin
","# top

> Display dynamic real-time information about running processes.

- Start top, all options are available in the interface:

`top`

- Start top sorting processes by internal memory size (default order - process ID):

`top -o mem`

- Start top sorting processes first by CPU, then by running time:

`top -o cpu -O time`

- Start top displaying only processes owned by given user:

`top -user {{user_name}}`

- Get help about interactive commands:

`?`
"
export,,,"
BUILTIN(1)		  BSD General Commands Manual		    BUILTIN(1)

NAME
     builtin, !, %, ., :, @, {, }, alias, alloc, bg, bind, bindkey, break,
     breaksw, builtins, case, cd, chdir, command, complete, continue, default,
     dirs, do, done, echo, echotc, elif, else, end, endif, endsw, esac, eval,
     exec, exit, export, false, fc, fg, filetest, fi, for, foreach, getopts,
     glob, goto, hash, hashstat, history, hup, if, jobid, jobs, kill, limit,
     local, log, login, logout, ls-F, nice, nohup, notify, onintr, popd,
     printenv, pushd, pwd, read, readonly, rehash, repeat, return, sched, set,
     setenv, settc, setty, setvar, shift, source, stop, suspend, switch,
     telltc, test, then, time, times, trap, true, type, ulimit, umask,
     unalias, uncomplete, unhash, unlimit, unset, unsetenv, until, wait,
     where, which, while -- shell built-in commands

SYNOPSIS
     builtin [-options] [args ...]

DESCRIPTION
     Shell builtin commands are commands that can be executed within the run-
     ning shell's process.  Note that, in the case of csh(1) builtin commands,
     the command is executed in a subshell if it occurs as any component of a
     pipeline except the last.

     If a command specified to the shell contains a slash ``/'', the shell
     will not execute a builtin command, even if the last component of the
     specified command matches the name of a builtin command.  Thus, while
     specifying ``echo'' causes a builtin command to be executed under shells
     that support the echo builtin command, specifying ``/bin/echo'' or
     ``./echo'' does not.

     While some builtin commands may exist in more than one shell, their oper-
     ation may be different under each shell which supports them.  Below is a
     table which lists shell builtin commands, the standard shells that sup-
     port them and whether they exist as standalone utilities.

     Only builtin commands for the csh(1) and sh(1) shells are listed here.
     Consult a shell's manual page for details on the operation of its builtin
     commands.	Beware that the sh(1) manual page, at least, calls some of
     these commands ``built-in commands'' and some of them ``reserved words''.
     Users of other shells may need to consult an info(1) page or other
     sources of documentation.

     Commands marked ``No**'' under External do exist externally, but are
     implemented as scripts using a builtin command of the same name.

	   Command	 External    csh(1)    sh(1)
	   !		 No	     No        Yes
	   %		 No	     Yes       No
	   .		 No	     No        Yes
	   :		 No	     Yes       Yes
	   @		 No	     Yes       Yes
	   {		 No	     No        Yes
	   }		 No	     No        Yes
	   alias	 No**	     Yes       Yes
	   alloc	 No	     Yes       No
	   bg		 No**	     Yes       Yes
	   bind 	 No	     No        Yes
	   bindkey	 No	     Yes       No
	   break	 No	     Yes       Yes
	   breaksw	 No	     Yes       No
	   builtin	 No	     No        Yes
	   builtins	 No	     Yes       No
	   case 	 No	     Yes       Yes
	   cd		 No**	     Yes       Yes
	   chdir	 No	     Yes       Yes
	   command	 No**	     No        Yes
	   complete	 No	     Yes       No
	   continue	 No	     Yes       Yes
	   default	 No	     Yes       No
	   dirs 	 No	     Yes       No
	   do		 No	     No        Yes
	   done 	 No	     No        Yes
	   echo 	 Yes	     Yes       Yes
	   echotc	 No	     Yes       No
	   elif 	 No	     No        Yes
	   else 	 No	     Yes       Yes
	   end		 No	     Yes       No
	   endif	 No	     Yes       No
	   endsw	 No	     Yes       No
	   esac 	 No	     No        Yes
	   eval 	 No	     Yes       Yes
	   exec 	 No	     Yes       Yes
	   exit 	 No	     Yes       Yes
	   export	 No	     No        Yes
	   false	 Yes	     No        Yes
	   fc		 No**	     No        Yes
	   fg		 No**	     Yes       Yes
	   filetest	 No	     Yes       No
	   fi		 No	     No        Yes
	   for		 No	     No        Yes
	   foreach	 No	     Yes       No
	   getopts	 No**	     No        Yes
	   glob 	 No	     Yes       No
	   goto 	 No	     Yes       No
	   hash 	 No	     No        Yes
	   hashstat	 No	     Yes       No
	   history	 No	     Yes       No
	   hup		 No	     Yes       No
	   if		 No	     Yes       Yes
	   jobid	 No	     No        Yes
	   jobs 	 No**	     Yes       Yes
	   kill 	 Yes	     Yes       No
	   limit	 No	     Yes       No
	   local	 No	     No        Yes
	   log		 No	     Yes       No
	   login	 Yes	     Yes       No
	   logout	 No	     Yes       No
	   ls-F 	 No	     Yes       No
	   nice 	 Yes	     Yes       No
	   nohup	 Yes	     Yes       No
	   notify	 No	     Yes       No
	   onintr	 No	     Yes       No
	   popd 	 No	     Yes       No
	   printenv	 Yes	     Yes       No
	   pushd	 No	     Yes       No
	   pwd		 Yes	     No        Yes
	   read 	 No**	     No        Yes
	   readonly	 No	     No        Yes
	   rehash	 No	     Yes       No
	   repeat	 No	     Yes       No
	   return	 No	     No        Yes
	   sched	 No	     Yes       No
	   set		 No	     Yes       Yes
	   setenv	 No	     Yes       No
	   settc	 No	     Yes       No
	   setty	 No	     Yes       No
	   setvar	 No	     No        Yes
	   shift	 No	     Yes       Yes
	   source	 No	     Yes       No
	   stop 	 No	     Yes       No
	   suspend	 No	     Yes       No
	   switch	 No	     Yes       No
	   telltc	 No	     Yes       No
	   test 	 Yes	     No        Yes
	   then 	 No	     No        Yes
	   time 	 Yes	     Yes       No
	   times	 No	     No        Yes
	   trap 	 No	     No        Yes
	   true 	 Yes	     No        Yes
	   type 	 No	     No        Yes
	   ulimit	 No	     No        Yes
	   umask	 No**	     Yes       Yes
	   unalias	 No**	     Yes       Yes
	   uncomplete	 No	     Yes       No
	   unhash	 No	     Yes       No
	   unlimit	 No	     Yes       No
	   unset	 No	     Yes       Yes
	   unsetenv	 No	     Yes       No
	   until	 No	     No        Yes
	   wait 	 No**	     Yes       Yes
	   where	 No	     Yes       No
	   which	 Yes	     Yes       No
	   while	 No	     Yes       Yes

SEE ALSO
     csh(1), echo(1), false(1), info(1), kill(1), login(1), nice(1), nohup(1),
     printenv(1), pwd(1), sh(1), test(1), time(1), true(1), which(1)

HISTORY
     The builtin manual page first appeared in FreeBSD 3.4.

AUTHORS
     This manual page was written by Sheldon Hearn <sheldonh@FreeBSD.org>.

BSD			       February 23, 2005			   BSD
","# export

> Command to mark shell variables in the current environment to be exported with any newly forked child processes.

- Set a new environment variable:

`export {{VARIABLE}}={{value}}`

- Remove an environment variable:

`export -n {{VARIABLE}}`

- Append something to the PATH variable:

`export PATH=$PATH:{{path/to/append}}`
"
csshX,https://github.com/brockgr/csshx,"













GitHub - brockgr/csshx: Automatically exported from code.google.com/p/csshx








































Skip to content













                Sign up
              
















                    Why GitHub?
                    




Features →

Code review
Project management
Integrations
Actions
Packages
Security
Team management
Hosting
Mobile


Customer stories →
Security →





Team


Enterprise




                    Explore
                    





Explore GitHub →

Learn & contribute

Topics
Collections
Trending
Learning Lab
Open source guides

Connect with others

Events
Community forum
GitHub Education
GitHub Stars program





Marketplace




                    Pricing
                    




Plans →

Compare plans
Contact Sales


Nonprofit →
Education →






























        In this repository
      

        All GitHub
      
↵


      Jump to
      ↵






No suggested jump to results















        In this repository
      

        All GitHub
      
↵


      Jump to
      ↵















        In this repository
      

        All GitHub
      
↵


      Jump to
      ↵






 



          Sign in
        

              Sign up
            



















brockgr

/

csshx







    Watch
 
      32
    




      Star


      387
    




          Fork


        69
      





        Automatically exported from code.google.com/p/csshx
      



387
        stars
 

69
        forks
 




      Star





    Watch









Code

 



Issues
46
 



Pull requests
6
 



Actions

 



Projects
0
 



Security

 



Insights

 
 




More

 




                    Code
 


                    Issues
 


                    Pull requests
 


                    Actions
 


                    Projects
 


                    Security
 


                    Insights
 


 










          Dismiss
        
Join GitHub today
GitHub is home to over 50 million developers working together to host and review code, manage projects, and build software together.
Sign up










master














3
branches



1
tag




    Go to file






      Code
      
 








  Clone






            HTTPS
 
            GitHub CLI
 









      Use Git or checkout with SVN using the web URL.
    









      Work fast with our official CLI.
      Learn more.
    







                Open with GitHub Desktop
 



                Download ZIP
 



Launching GitHub Desktop
If nothing happens, download GitHub Desktop and try again.
Go back


Launching GitHub Desktop
If nothing happens, download GitHub Desktop and try again.
Go back


Launching Xcode
If nothing happens, download Xcode and try again.
Go back


Launching Visual Studio
If nothing happens, download the GitHub extension for Visual Studio and try again.
Go back









Latest commit






 




brockgr

Fix doc typos



…



533b262

Oct 1, 2012





Fix doc typos


533b262



Git stats





147
commits







Files
Permalink


  
    Failed to load latest commit information.

 


Type
Name
Latest commit message
Commit time






rewrite



Messing with 10.7 dock - still can't set space by index :-(



Sep 20, 2011







tools



Many housekeeping scripts changed



Sep 12, 2011







.gitignore



Many housekeeping scripts changed



Sep 12, 2011







MANIFEST



Added tools to make a download



Mar 4, 2009







README.txt



csshX with bash completion - inspired by



Oct 1, 2012







csshX



Fix doc typos



Oct 1, 2012







csshX.iterm



Add iterm support



Nov 21, 2010





        View code
      






        README.txt
      


            -------------------------------------------------
            csshX - Cluster SSH tool for Mac OS X Termial.app
            -------------------------------------------------
            Copyright 2011 by Gavin Brock   <gbrock@cpan.org>
            -------------------------------------------------


INSTALLATION:

As csshX is a command line tool, no special installation is needed. It may
be copied into a directory in your path, (e.g. /usr/local/bin) for your 
convenience.

The software has been tested on Mac OS X 10.5, 10.6 and 10.7 with the default
Perl installation - no additional Perl modules are required.


DOCUMENTATION:

The documentation for csshX is self contained. Please run:

    ./csshX --man

If that does not work, you can try the FAQ:

    http://code.google.com/p/csshx/wiki/FAQ


UPDATES:

The latest version of the software is available here:

    http://code.google.com/p/csshx/

Important update information will be posted on:

    http://gavcode.wordpress.com/tag/csshX/

Information for enthusiasts will be posted on twitter:

    http://twitter.com/csshx


LICENSE:

This program is free software; you may redistribute it and/or modify it 
under the same terms as Perl itself. 

Full details can be found by running:

    perldoc perlartistic
    perldoc perlgpl


CREDITS:

Thanks to everyone for the suggestions and bug reports. That's what makes
coding fun. In addition, I would like to thank the following people for their
patches and code: Eric Lubow, mtbeedee, Mitch Silverstein, Robin Stephenson, 
Chris Yunker, Song Gao and Jean-Sebastien Morisset.








About

      Automatically exported from code.google.com/p/csshx
    
Resources



      Readme
 






    Releases



1
tags







    Packages 0


        No packages published 











Languages










Objective-C
68.0%





Perl
31.5%





Other
0.5%















© 2020 GitHub, Inc.
Terms
Privacy
Security
Status
Help





Contact GitHub
Pricing
API
Training
Blog
About











    You can’t perform that action at this time.
  


















You signed in with another tab or window. Reload to refresh your session.
You signed out in another tab or window. Reload to refresh your session.







",,"# csshX

> Cluster SSH tool for MacOS.
> More information: <https://github.com/brockgr/csshx>.

- Connect to multiple hosts:

`csshX {{hostname1}} {{hostname2}}`

- Connect to multiple hosts with a given SSH key:

`csshX {{user@hostname1}} {{user@hostname2}} '--ssh_args' '-i {{path/to/ssh_key.pem}}'`

- Connect to a pre-defined cluster from /etc/clusters:

`csshX cluster1`
"
asr,,,"

ASR(8)			  BSD System Manager's Manual			ASR(8)

NAME
     asr -- Apple Software Restore; copy volumes (e.g. from disk images)

SYNOPSIS
     asr verb [options]
     asr restore[exact] --source source --target target [options]
     asr server --source source --config configuration [options]
     asr restore --source asr://source --file file [options]
     asr imagescan --source image [options]
     asr help | version

DESCRIPTION
     asr efficiently copies disk images onto volumes, either directly or via a
     multicast network stream.	asr can also accurately clone volumes without
     the use of an intermediate disk image.

     In its first form, asr copies source (usually a disk image, potentially
     on an HTTP server) to target.  source can be specified using a path in
     the filesystem, or an http or https URL.  It can also be an asr:// URL to
     indicate a multicast source.  asr can also be invoked with its second
     form to act as a multicast server.  In its third form, asr will restore a
     multicast disk image to a file instead of disk volume.  In its fourth
     form, asr prepares a disk image to be restored efficiently, adding whole-
     volume checksum information.  help and version provide usage and version
     information, respectively.

     source and target can be /dev entries or volume mountpoints. For more
     information on restoring to or from APFS filesystems, see the RESTORING
     WITH APFS FILESYSTEMS section below.  If restoring a multicast disk image
     to a file, file can be a path to a local file or directory. If the speci-
     fied path is a file, the disk image is given the specified name. If a
     directory, the name of the disk image being multicast is used. When spec-
     ifying server, source has to be a UDIF disk image. Restoring from a mul-
     ticast stream is accomplished by passing a asr:// url as source.

     When run in its first form above, the --erase option must always be used,
     as asr no longer supports file copying.  Such functionality is done bet-
     ter by ditto(1).

     asr needs to be run as root (see sudo(8)) in order to accomplish its
     tasks.

VERBS
     Each verb is listed with its description and individual arguments.

     restore	   restores a disk image or volume to another volume (includ-
		   ing a mounted disk image)

		   --source	  can be a disk image, /dev entry, or volume
				  mountpoint. In the latter two cases, the
				  volume must be unmountable or mounted read-
				  only in order for a erase blockcopy to occur
				  (thus, one cannot erase blockcopy the root
				  filesystem as the source, unless it happened
				  to be mounted read-only).

		   --target	  can be a /dev entry, or volume mountpoint.
				  Must be unmountable in order for an erase
				  block-copy to occur.	If source specifies an
				  image of an APFS container, then target can
				  specify a mounted APFS volume.  See the
				  RESTORING WITH APFS FILESYSTEMS section
				  below for details.

		   --file	  when performing a multicast restore, --file
				  can be specified instead of --target. If the
				  specified path is a file, the disk image is
				  given the specified name. If a directory,
				  the name of the disk image being multicast
				  is used.

		   --erase	  erases target and is required.  --erase must
				  always be used, as file copies are no longer
				  supported by asr.  If source is a asr:// url
				  for restoring from a multicast stream,
				  --erase must be passed (multicasting only
				  supports erase block-copy restores).	Pass-
				  ing --erase with --file indicates any exist-
				  ing file should be overwritten when doing a
				  multicast file copy.

		   --format HFS+ | HFSX
				  specifies the destination filesystem format,
				  when --erase is also given. If not speci-
				  fied, the destination will be formatted with
				  the same filesystem format as the source. If
				  multicasting, the --format specified must be
				  block copy compatible with the source.
				  --format is ignored if --erase is not used.
				  Note: HFS Journaling is an attribute of the
				  source image, and is not affected by
				  --format.

		   --noprompt	  suppresses the prompt which usually occurs
				  before target is erased.  newfs_hfs(8) will
				  be called on target and once you start writ-
				  ing new data, there isn't much hope for
				  recovery.  You have been warned.

		   --timeout num  specifies num seconds that a multicast
				  client should wait when no payload data has
				  been received over a multicast stream before
				  exiting, allowing the client to stop in case
				  of server failure/stoppage.  It defaults to
				  0 (i.e. never time out).

		   --puppetstrings
				  provide progress output that is easy for
				  another program to parse.  Any program try-
				  ing to interpret asr's progress should use
				  --puppetstrings.

		   --noverify	  skips the verification steps normally taken
				  to ensure that a volume has been properly
				  restored.  --noverify allows images which
				  have not been scanned to be restored.  Skip-
				  ping verification is dangerous for a number
				  of reasons and should never be used in pro-
				  duction systems.

		   --allowfragmentedcatalog
				  allows restores to proceed even if the
				  source's catalog file is fragmented (in par-
				  ticular, if it has more than 8 extents).  By
				  default such restores are disallowed.  Cata-
				  log fragmentation is undesirable and in most
				  cases it is better to fix the problem on the
				  source (e.g. by running fsck_hfs -r on it),
				  but --allowfragmentedcatalog is provided for
				  situations where such a change is impracti-
				  cal.	This option only makes sense if the
				  source specifes an HFS+ filesystem variant.
				  It is otherwise ignored.

		   --corestorageconvert
				  Cause target to be converted to a Core Stor-
				  age LVG at the end of the restore.  After
				  the copy and verify are complete, asr will
				  create a new Core Storage Logical Volume
				  Group (LVG), using the partition represented
				  by target as its only physical volume (PV).
				  The volume contents restored from source
				  will be present as a single logical volume
				  (LV) exported from this LVG.	If target is
				  already a Core Storage LV, then this option
				  has no effect.

		   --SHA256	  forces the restore to use the SHA-256 hash
				  in the image during verification.  If the
				  image doesn't contain a SHA-256 hash, then
				  an error will be raised.

		   --sourcevolumename
				  tells asr which volume in the source con-
				  tainer to invert when doing an APFS restore.
				  It is an error if more than one volume has
				  the specified name.  You can see the volume
				  names and UUIDs by running asr with the info
				  verb.  See the section RESTORING WITH APFS
				  FILESYSTEMS below for when this option is
				  necessary.

		   --sourcevolumeUUID
				  tells asr which volume in the source con-
				  tainer to invert when doing an APFS restore.
				  You can see the volume names and UUIDs by
				  running asr with the info verb.  See the
				  section RESTORING WITH APFS FILESYSTEMS
				  below for when this option is necessary.

     restoreexact  performs the same operation as restore, taking all the same
		   options, but with the following difference:	the target
		   partition is resized to exactly match the size of the
		   source partition/volume, if such a resize can be done.  If
		   the target partition needs to grow and there is not enough
		   space, then the operation will fail.  If it needs to
		   shrink, then it should always be able to do so, possibly
		   leaving free space in the target disk's partition map.
		   Because the target exactly matches the source in size, all
		   volume structures should be identical in source and target
		   upon completion of the restore.

     server	   multicasts source over the network. Requires --erase be
		   passed in by clients (multicasting only supports erase
		   block-copy restores).

		   --source   source has to be a UDIF disk image. A path to a
			      disk image on a local/remote volume can be
			      passed in, or a http:// url to a disk image that
			      is accessible via a web server.

		   --interface
			      the network interface to be used for multicast-
			      ing (e.g. en0) instead of the default network
			      interface.

		   --config   server requires a configuration file to be
			      passed, in standard property list format.  The
			      following keys/options configure the various
			      parameters for multicast operation.

		   Required

		   Data Rate		  this is the desired data rate in
					  bytes per second.  On average, the
					  stream will go slightly slower than
					  this speed, but will never exceed
					  it.  It's a number in the plist
					  (-int when set with defaults(1)).

					  Note: The performance/reliability of
					  the networking infrastructure being
					  multicast on is an important factor
					  in determining what data rate can be
					  supported. Excessive/bursty packet
					  loss for a given data rate could be
					  due to an inability of the
					  server/client to be able to
					  send/receive multicast data at that
					  rate, but it's equally important to
					  verify that the network infrastruc-
					  ture can support multicasting at the
					  requested rate.

		   Multicast Address	  this is the Multicast address for
					  the data stream. It's a string in
					  the plist.

		   Optional

		   Client Data Rate	  this is the rate the slowest client
					  can write data to its target in
					  bytes per second.  if asr misses
					  data on the first pass (x's during
					  progress) and slowing the Data Rate
					  doesn't resolve it, setting the
					  Client Data Rate will dynamically
					  regulate the speed of the multicast
					  stream to allow clients more time to
					  write the data. It's a number in the
					  plist (-int when set with
					  defaults(1)).

		   DNS Service Discovery  whether the server should be adver-
					  tised via DNS Service Discovery,
					  a.k.a. Bonjour (tm).	It defaults to
					  true.  It's a boolean in the plist
					  (-bool when set with defaults(1)).

		   Loop Suspend 	  a limit of the number of times to
					  multicast the image file when no
					  clients have started a restore oper-
					  ation. Once exceeded, the server
					  will stop the stream and wait for
					  new clients before multicasting the
					  image file. It defaults to 0 (e.g.
					  never stop multicasting once a
					  client starts the stream), and
					  should not be set to <2.  It's a
					  number in the plist (-int when set
					  with defaults(1)).

		   Multicast TTL	  the time to live on the multicast
					  packets (for multicasting through
					  routers). It defaults to 3.  It can-
					  not be set to 0, and should not be
					  set to 1 (otherwise, it could
					  adversely affect some network
					  routers).  It's a number in the
					  plist (-int when set with
					  defaults(1)).

		   Port 		  the port of initial client-server
					  handshake, version checks, multicast
					  restore metadata, and stream data.
					  It defaults to 7800.	This should
					  only be included/modified if the
					  default port cannot be used.	It's a
					  number in the plist (-int when set
					  with defaults(1)).

     imagescan	   calculate checksums of the data in the provided image and
		   store them in the image.  These checksums are used to
		   ensure proper restores.  SHA-1 and SHA-256 hashes are used.
		   Also determines if the disk image is in order for multicas-
		   ting, and rewrites the file in order if not.  If the image
		   has to be reordered, it will require free disk space equal
		   to the size of the disk image being scanned.

		   --nostream
			     bypasses the check/reordering of a disk image
			     file for multicasting. By default disk images
			     will be rewritten in a way that's necessary for
			     multicasting.

		   --allowfragmentedcatalog
			     bypasses the check for a fragmented catalog file.
			     By default that check is done and scanning won't
			     be allowed on an image that has a fragmented cat-
			     alog file.  It is usually a better idea to fix
			     the image (e.g. run fsck_hfs -r on a writable
			     copy of it) than to use --allowfragmentedcatalog,
			     but it is provided in case fixing the image is
			     impractical.

     info	   report the image metadata which was placed in the image by
		   a previous use of the imagescan verb.  Requires --source.
		   The report is written to standard output.

		   --plist
			  writes its output as an XML-formatted plist, suit-
			  able for parsing by another program.

RESTORING WITH APFS FILESYSTEMS
     Individual APFS volumes can not be restored directly, because their
     device nodes don't allow I/O from a standard process.  However, asr can
     restore entire APFS containers, including all volumes.  Or it can restore
     valid system configurations, which can get the effect of restoring a sin-
     gle system.  This requires understanding what is meant by a valid system.

     In order for an APFS volume to be bootable, it must contain a properly
     installed macOS system.  It must also be part of an APFS container which
     also has two special volumes in it: a Preboot volume and a Recovery vol-
     ume.  A container may have arbitrarily many system volumes in it, but it
     must have only one Preboot volume and one Recovery volume, each with the
     corresponding APFS volume role set (see diskutil(1) for information on
     roles).  The Preboot and Recovery volumes contain information which is
     tied to each system volume in the container.  So for a system volume to
     be bootable, that information needs to be set up in the Preboot and
     Recovery volumes.	A system which is part of a container that has these
     two special volumes, and for which the requisite information is set up in
     those volumes, will be referred to here as a valid system.

     If the source of a restore is an APFS image (i.e. an image which contains
     an APFS container), then asr does different things depending on how
     target was specified:

     Volume Restore
	   If the target is an individual volume within an existing APFS con-
	   tainer, then asr will block restore the APFS container to a file
	   within that volume, after which it will invert the volume within
	   the restored container, erasing the previous contents of the target
	   volume and replacing them with the source volume contents.  If the
	   source container only has a single non-special volume (i.e. not
	   Preboot or Recovery), then that is the volume which will be
	   inverted.  If the source container has more than one non-special
	   volume, then either the --sourcevolumename or --sourcevolumeUUID
	   option must be present and must specify the volume to invert.
	   Additionally, if the volume being inverted is a valid system (as
	   defined above), then the relevant contents of both the Preboot and
	   Recovery volumes will be copied from the source to the target, cre-
	   ating those volumes on the target if necessary.

     Volume Restore with Creation
	   If the target is a synthesized APFS whole disk or Apple_APFS parti-
	   tion, and the --erase option is not present, then asr will create a
	   new volume in the given container, after which it will do a volume
	   restore to that new volume, as with the previous section.  All
	   other volumes in the container are preserved.

     Volume Restore with Erase
	   If the target is a synthesized APFS whole disk or any disk parti-
	   tion, and the --erase option is present, then asr will erase the
	   existing partition, create a new APFS container and a new volume in
	   it, after which it will do a volume restore to that new volume, as
	   with the previous section.

     See the EXAMPLES section below for some command lines that show these
     operations.

BUFFERING
     The following options control how asr uses memory.  These options can
     have a significant impact on performance.	asr is optimized for copying
     between devices (different disk drives, from a network volume to a local
     disk, etc).  As such, asr defaults to using eight one megabyte buffers.
     These buffers are wired down (occupying physical memory).	For partition
     to partition copies on the same device, one large buffer (e.g. 32 MB) is
     much faster than the default eight medium sized ones. For multicast, 4
     256k buffers are the default.  Custom buffering for multicast operation
     is not recommended.

     --csumbuffers and --csumbuffersize allow a different buffer configuration
     for checksumming operations.  One checksum buffer offers the best perfor-
     mance.  The default is 1 1MB buffer. Custom checksum buffering is not
     recommended.

     Like mkfile(8), size defaults to bytes but can be followed by a multi-
     plier character (e.g. 'm').

     --buffers num
		 specifies that num buffers should be used.

     --buffersize size
		 specifies the size of each buffer.

     --csumbuffers num
		 specifies that num buffers should be used for checksumming
		 operations (which only affect the target).  Custom checksum
		 buffering is not recommended.

     --csumbuffersize size
		 specifies the size of each buffer used for checksumming.
		 Custom checksum buffering is not recommended.

OTHER OPTIONS
     --verbose	 enables verbose progress and error messages.
     --debug	 enables other progress and error messages.

EXAMPLES
     Volume cloning:
	   sudo asr restore --source /Volumes/Classic --target
	   /Volumes/install --erase

     Restoring:
	   sudo asr restore -s <compressedimage> -t <targetvol> --erase

     Will erase the target and potentially do a block copy restore.

     Multicast server:
	   asr server --source <compressedimage> --config
	   <configuration.plist>

     Will start up a multicast server for the specified image, using the
     parameters in the configuration.plist. The image will not start multicas-
     ting on the network until a client attempts to start a restore. The
     server will continue to multicast the image until the process is termi-
     nated.

     An example multicast configuration file:
	   defaults write /tmp/streamconfig ""Data Rate"" -int 6000000
	   defaults write /tmp/streamconfig ""Multicast Address"" <mcastaddr>
	   (will create the file /tmp/streamconfig.plist)
	   <mcastaddr> should be appropriate for your network infrastructure
	   and policy, usually from a range assigned by your network
	   administrator.

     Multicast client
	   sudo asr restore --source asr://<hostname> --target <targetvol>
	   --erase

     Multicast client restoring to a file
	   sudo asr restore --source asr://<hostname> --file <file> --erase
     Will receive the multicast stream from <hostname> and save it to a file.
     If <file> is a directory, the image of the streamed disk image will be
     used the save the file. --erase causes any existing file with the same
     name to be overwritten.

     Restoring a single APFS volume
	   sudo asr restore -s <APFS image> -t /Volumes/MyAPFSVolume --erase
     In this case the contents of MyAPFSVolume will be replaced by the con-
     tents of the source container's single APFS volume, possibly including
     any associated data for the Preboot and Recovery volumes, if the source
     is a valid system.  If the source has more than one non-special volume,
     this is an error.	No other volumes in the target will be affected.

     Restoring one of many APFS volumes
	   sudo asr restore -s <APFS image> --sourcevolumename SourceVolume -t
	   /Volumes/MyAPFSVolume --erase
     This tells asr to select the volume named ""SourceVolume"" from the given
     APFS image.  If there is no volume with that name, or if there are more
     than one with that name, it is an error.  Use the info verb to see the
     volume names and UUIDs for an image.  No other volumes in the target will
     be affected.

     Creating a new APFS volume on the fly
	   sudo asr restore -s <APFS image> --sourcevolumename SourceVolume -t
	   /dev/disk2
     Here we get the same effect as the last example, except that asr will
     create a new volume on the target APFS container disk, given by
     /dev/disk2, and use that newly created volume as the target.  Any volumes
     which already existed in the container will still be there after the
     restore.

     Overwriting the existing container
	   sudo asr restore -s <APFS image> --sourcevolumename SourceVolume -t
	   /dev/disk2 --erase
     Like the last example, we restore to a new volume on the target APFS con-
     tainer disk.  However in this case we are erasing the target, so any vol-
     umes which already existed are destroyed.

     Looking at an image's volume names/UUIDs
	   asr info -s <APFS image>
     Assuming this image has been previously scanned (using the imagescan
     verb), this will display the volumes' names and UUIDs so they can be used
     with the --sourcevolumename or --sourcevolumeUUID options.

HOW TO USE ASR
     asr requires a properly created disk image for most efficient operation.
     This image is most easily made with the Disk Utility application's ""Image
     from Folder"" function in OS X 10.3.  The Disk Copy from OS X 10.2.3
     (v55.6) or later can also be used.

     Basic steps for imaging and restoring a volume:

     1.   Set up the source volume the way you want it.

     2.   Use Disk Utility's ""File -> New Image -> Image from Folder..."" func-
	  tion and select the root of the volume.  Save the image as read-only
	  or compressed.  ""File->New Image->Image from <device>"" is not recom-
	  mended for restorable images.

     3.   Scan the image with ""Images -> Scan Image for Restore...""

     4.   Select a volume and click on the ""Restore"" button.  Then click on
	  the ""Image...""  button to select the image you have scanned.	Click
	  Restore.

BLOCK COPY RESTORE REQUIREMENTS
     asr can block copy restore HFS+/HFSX filesystems and resize the source
     filesystem to fit in the target's partition if the source filesystem data
     blocks will fit within the target partition's space (resizing the
     filesystem geometry as appropriate).

     HFS+ can be used as the source of a block copy to either an HFS+ or HFSX
     destination.  However, an HFSX source can only be used to block copy to
     an HFSX destination.  This is because case collision of file names could
     occur when converting from an HFSX filesystem to HFS+.

     Certain non-HFS+/HFSX filesystems will block copy restore, but the target
     partition will be resized to match the size of the source image/partition
     size, with no filesystem resizing occurring.

COMPATIBILITY
     asr maintains compatibility with previous syntax, e.g.

     asr -source source -target target [options]
     asr -source source -server configuration [options]
     asr -source asr://source -file file [options]
     asr -imagescan [options] image
     asr -h | -v

     where -source, -target, and -file are equivalent to --source, --target,
     and --file respectively, and all [options] are equivalent to their --
     descriptions.  asr -server configuration is superseded by asr server
     --config configuration.  The following deprecated options also remain:

     -nocheck	this option is deprecated, but remains for script compatibil-
		ity.  Use -noverify instead.

     -blockonly
		this option is deprecated, but remains for script compatibil-
		ity. On by default.  Note that if an image scanned with
		-blockonly cannot be block-copied to a particular target an
		error will occur, since the file-copy information was omitted.

     Note: Compatibility with previous syntax is not guaranteed in the next
     major OS release.

ERRORS
     asr will exit with status 1 if it cannot complete the requested opera-
     tion.  A human readable error message will be printed in most cases.  If
     asr has already started writing to the target volume when the error
     occurs, then it will erase the target, leaving it in a valid (but empty)
     state.  It will, however, leave it unmounted.

     Some of the error messages which asr prints are generated by the underly-
     ing subsystems that it uses, and their meaning is not always obvious.
     Here are some useful guidelines:

     1.   asr does some preflight testing before it starts actually copying
	  data.  Errors that show up during this preflighting are usually
	  clear (e.g. ""There is not enough space in volume ""Macintosh HD"" to
	  do the restore."")

     2.   If an error occurs during the copy, it might be because there is
	  corruption in the source image file.	Try running ""hdiutil verify""
	  with the image.  A common error message which indicates this is
	  ""codec overrun"".

     3.   Errors which occur during the copy and which don't have an obvious
	  cause (i.e. the error message is difficult to interpret) may be
	  transient in nature (e.g. there was an I/O error on the disk), and
	  it is worth simply trying the restore again.

HISTORY
     Apple Software Restore got its start as a field service restoration tool
     used to reconfigure computers' software to 'factory' state.  It later
     became a more general software restore mechanism and software installa-
     tion helper application for various Apple computer products.  ASR has
     been used in manufacturing processes and in shipping computers' System
     Software Installers.

     For Mac OS X, asr was rewritten as a command line tool for manufacturing
     and professional customers.  asr is the backend for the Mac OS X Software
     Restore application that shipped on Macintosh computers as well as the
     Scan and Restore functionality in Disk Utility.

     Multicast support was added to allow multiple clients to erase restore an
     image from a multicast network stream.

     Per its history, most functionality in asr is limited to HFS+ volumes.

SEE ALSO
     hdiutil(1), df(1), bless(8), ditto(1), and what(1)

Mac OS X			23 October 2012 		      Mac OS X
","# asr

> Restore (copy) a disk image onto a volume.
> The command name stands for Apple Software Restore.

- Restore a disk image to a target volume:

`sudo asr restore --source {{image_name}}.dmg --target {{path/to/volume}}`

- Erase the target volume before restoring:

`sudo asr restore --source {{image_name}}.dmg --target {{path/to/volume}} --erase`

- Skip verification after restoring:

`sudo asr restore --source {{image_name}}.dmg --target {{path/to/volume}} --noverify`

- Clone volumes without the use of an intermediate disk image:

`sudo asr restore --source {{path/to/volume}} --target {{path/to/cloned_volume}}`
"
mdutil,,,"
mdutil(1)		  BSD General Commands Manual		     mdutil(1)

NAME
     mdutil -- manage the metadata stores used by Spotlight

SYNOPSIS
     mdutil [-pEsav] [-i on | off] mountPoint ...

DESCRIPTION
     The mdutil command is useful for managing the metadata stores for mounted
     volumes.

     The following options are available:

     -p  Spotlight caches indexes of some network devices locally.  This
	 option requests that a local caches be flushed to the appropriate
	 network device.

     -E  This flag will cause each local store for the volumes indicated to be
	 erased.  The stores will be rebuilt if appropriate.

     -i on | off
	 Sets the indexing status for the provided volumes to on or off.  Note
	 that indexing may be delayed due to low disk space or other condi-
	 tions.

     -d  Disables Spotlight searches on the provided volume.

     -s  Display the indexing status of the listed volumes.

     -a  Apply command to all volumes.

     -v  Print verbose information when available.

SEE ALSO
     mdfind(1), mds(8), mdimport(1)

Mac OS X		       September 1, 2005		      Mac OS X
","# mdutil

> Manage the metadata stores used by Spotlight for indexing.

- Show the indexing status of the startup volume:

`mdutil -s {{/}}`

- Turn on/off the Spotlight indexing for a given volume:

`mdutil -i {{on|off}} {{path/to/volume}}`

- Erase the metadata stores and restart the indexing process:

`mdutil -E {{path/to/volume}}`
"
xcodebuild,,,,"# xcodebuild

> Build Xcode projects.

- Build workspace:

`xcodebuild -workspace {{workspace_name.workspace}} -scheme {{scheme_name}} -configuration {{configuration_name}} clean build SYMROOT={{SYMROOT_path}}`

- Build project:

`xcodebuild -target {{target_name}} -configuration {{configuration_name}} clean build SYMROOT={{SYMROOT_path}}`

- Show SDKs:

`xcodebuild -showsdks`
"
fdesetup,,,"
fdesetup(8)		  BSD System Manager's Manual		   fdesetup(8)

NAME
     fdesetup -- FileVault configuration tool

SYNOPSIS
     fdesetup verb [options]

DESCRIPTION
     fdesetup is used to enable or disable FileVault, to list, add, or remove
     enabled FileVault users, and to obtain status about the current state of
     FileVault. Most commands require root access and need to be authenticated
     with either a FileVault password, a personal recovery key (if enabled),
     and in some cases the private key from the installed institutional recov-
     ery key.  Some status related commands can be run from a non-root ses-
     sion.

     Certain commands on CoreStorage volumes allow you to authenticate and
     unlock by providing the -key option followed by the path to a keychain
     file containing the private key of the installed institutional recovery
     key.  Do not include the certificate in this keychain.

     By default, when enabling FileVault fdesetup will only return a personal
     recovery key. Given the proper certificate information, fdesetup can
     install an institutional recovery key.  You can also set it up without
     creating a personal recovery key using the -norecoverykey option, though
     this is not recommended unless you are also installing an institutional
     recovery key.  On APFS volumes, if you already have a personal recovery
     key created from a previous enablement, it will not remove or create a
     new personal recovery key, allowing you to reuse the existing key.
     Either type of keys can be added or changed at a later time.

     With the -keychain option, an institutional recovery key can be set up by
     placing an X.509 asymmetric public certificate in the /Library/Key-
     chains/FileVaultMaster.keychain file. security create-filevaultmaster-
     keychain can be used to create the keychain. Alternatively a certificate
     can be passed in by using the -certificate option and entering the path
     to the DER encoded certificate file. In this case the FileVaultMas-
     ter.keychain file will be created using the certificate. With your .cer
     file, the optional certificate data can be obtained using the base64
     tool.  For example: 'base64 /path/to/mycert.cer > /mynewdata.txt', at
     which point you would copy the data string contained in the text file and
     place it into the Certificate <data></data> value area of the property
     list.  The certificate should be self signed, and the common name must be
     ""FileVault Recovery Key""

     Because the user password may not be immediately available, read the
     DEFERRED ENABLEMENT section below for information on how to delay
     enabling FileVault until the user logs in or out.

     The status command will indicate if FileVault is On or Off.  If a File-
     Vault master keychain is installed into the /Library/Keychains folder it
     will also report this back.  Note that this, by itself, does not indicate
     whether or not FileVault has been set up with an institutional recovery
     key.  The -extended option will display extended status information,
     including the time remaining for encrypting or decrypting.  The calcula-
     tion of this remaining time may take a few minutes and is only an approx-
     imate value.

     The list command will display the short names and UUIDs of enabled File-
     Vault users. You can use the -extended option to display a full list of
     existing user types along with some additional information.  This infor-
     mation will include if the recovery key was escrowed, though note that it
     will show ""Yes"" even if the information has not yet been successfully
     sent to the server.  You can also use the -offline option to get a list
     of currently locked and offline CoreStorage FileVault volumes.  You can
     use this information as part of the haspersonalrecoverykey or
     hasinstitutionalrecoverykey commands.

     The remove command will remove a user from FileVault given either the
     user name or the FileVault UUID.

     The sync command synchronizes Open Directory attributes (e.g. user pic-
     tures) with appropriate FileVault users, and removes FileVault users that
     were removed from Open Directory.	 In most cases these changes will
     already be updated in FileVault.  sync does not add users to FileVault.

     Use the haspersonalrecoverykey or hasinstitutionalrecoverykey commands to
     see if FileVault has a personal or institutional recovery key set up.  If
     FileVault is active and the key is set, by default these commands will
     return ""true"" or ""false"".	Note that ""false"" may also be returned if any
     error occurs, or if FileVault is not yet fully enabled.   You can use the
     device option to specify either a mount path (e.g. /Volumes/myvolume), a
     bsd name identifier (e.g. disk0), or Logical Volume or Logical Volume
     Family UUID (obtained using either the list command, or using disku-
     til(8)).	If you specify a device parameter and it finds the institu-
     tional recovery key, a hex representation of the public key hash will be
     returned in lieu of ""true"".

     On CoreStorage volumes, if a user currently has the system unlocked using
     the recovery key, the usingrecoverykey command will return ""true"".

     The changerecovery command changes or adds either the personal or insti-
     tutional recovery key.  You can only have one recovery key of each type,
     so any associated existing key will be removed.  The removerecovery com-
     mand will remove any existing recovery key of the type specified.	It is
     not recommended that you remove all recovery keys since, if you lose your
     FileVault password, you may not be able to access your information.   On
     APFS volumes using 10.14 or later, the existing recovery key can be used
     as authentication to change or remove the personal recovery key.

     On supported hardware, fdesetup allows restart of a FileVault-enabled
     system without requiring unlock during the subsequent boot using the
     authrestart command. WARNING: FileVault protections are reduced during
     authenticated restarts. In particular, fdesetup deliberately stores at
     least one additional copy of a permanent FDE (full disk encryption)
     unlock key in both system memory and (on supported systems) the System
     Management Controller (SMC).  fdesetup must be run as root and itself
     prompts for a password to unlock the FileVault root volume.  Use pmset
     destroyfvkeyonstandby to prevent saving the key across standby modes.
     Once authrestart is authenticated, it launches shutdown(8) and, upon suc-
     cessful unlock, the unlock key will be removed.  You can also use this as
     an option to the enable command if the system supports this feature.  The
     supportsauthrestart command will check the system to see if it supports
     the authrestart command option, however you should note that even if this
     returns true, FileVault must still be enabled for authrestart to work.

VERBS
     Each command verb is listed with its description and individual argu-
     ments.

     help
		Shows abbreviated help

     list	[-extended] [-offline] [-verbose]
		List enabled users, or locked volumes.

     enable	[[[-user username ...] [-usertoadd added_username ...]] |
		[-inputplist]] [-outputplist] [-prompt] [-forcerestart]
		[-authrestart] [-keychain | [-certificate path_to_cer_file]]
		[[-defer file_path] [-forceatlogin max_cancel_attempts]
		[-dontaskatlogout]] [-norecoverykey] [-verbose]
		Enables FileVault.  This command will fail if no recovery par-
		tition was found on your disk.	 Additionally, all Secure
		Token users must contain valid passwords.

     disable	[-verbose]
		Disables FileVault.

     status	[-extended] [-verbose]
		Returns current status about FileVault.   On APFS volumes, the
		-extended option will give continuous updates and estimated
		completion times during encryption and decryption phases.

     sync
		Synchronizes information from Open Directory to FileVault.

     add	-usertoadd added_username ... | -inputplist [-verbose]
		Adds additional FileVault users.   A FileVault user password
		or recovery key must be used to authenticate.

     remove	-uuid user_uuid | -user username [-verbose]
		Removes enabled user from FileVault.   It will not remove the
		user if it's the last OS user on the volume.

     changerecovery -personal | -institutional -user [[-keychain] |
		[-certificate path_to_cer_file]] [-key path_to_keychain_file]
		[-inputplist] [-verbose]
		Adds or updates the current recovery key.   Either personal
		and/or institutional options must be specified.  When changing
		the personal recovery key, the updated personal recovery key
		will be automatically generated.   When changing either key,
		the old value will be removed and replaced.  On CoreStorage
		volumes the -key option can be used to unlock FileVault.
		More information on this is described elsewhere in this docu-
		ment.

     removerecovery -personal -user | -institutional [[-key
		path_to_keychain_file] | [-inputplist]] [-verbose]
		Removes the current recovery key.   Either personal and/or
		institutional options must be specified.  The -key option can
		be optionally used to unlock FileVault.  More information on
		this is described elsewhere in this document.

     authrestart [-inputplist] [-delayminutes number_of_minutes_to_delay]
		[-verbose]
		If FileVault is enabled on the current volume, it restarts the
		system, bypassing the initial unlock.	The optional
		-delayminutes option can be used to delay the restart command
		for a set number of minutes.  A value of 0 represents 'immedi-
		ately', and a value of -1 represents 'never'.  The command may
		not work on all systems.

     isactive	[-verbose]
		Returns status 0 if FileVault is enabled along with the string
		""true"".  Will return status 1 if FileVault is Off, along with
		""false"".

     haspersonalrecoverykey [-device] [-verbose]
		Returns the string ""true"" if FileVault contains a personal
		recovery key.

     hasinstitutionalrecoverykey [-device] [-verbose]
		By default, this will return the string ""true"" if FileVault
		contains an institutional recovery key.   On CoreStorage vol-
		umes specified using the --device option, this will return the
		hex representation of the public key hash instead of ""true"".
		The hash option is not supported for APFS volumes.   This will
		return ""false"" if there is no institutional recovery key
		installed.

     usingrecoverykey [-verbose]
		Returns the string ""true"" if FileVault is currently unlocked
		using the personal recovery key.

     supportsauthrestart
		Returns the string ""true"" if the system supports the authenti-
		cated restart option.	Note that even if true is returned,
		this does not necessarily mean that authrestart will work
		since it requires that FileVault be enabled.

     validaterecovery [-inputplist] [-verbose]
		Returns the string ""true"" if the personal recovery key is val-
		idated.  The validated recovery key must be in the form xxxx-
		xxxx-xxxx-xxxx-xxxx-xxxx.

     showdeferralinfo
		If the defer mode is set, this will show the current settings.

     version
		Displays current tool version.

OPTIONS
     -defer file_path
	     Defer enabling FileVault until the user password is obtained, and
	     recovery key and system information will be written to the file
	     path.

     -user user_shortname
	     Short user name.

     -uuid user_uuid
	     User UUID in canonical form:
	     11111111-2222-3333-4444-555555555555.

     -usertoadd added_user
	     Additional user(s) to be added to FileVault.

     -inputplist
	     Acquire configuration information from stdin when enabling or
	     adding users to FileVault.

     -prompt
	     Always prompt for information.

     -forcerestart
	     Force a normal restart after FileVault has been successfully con-
	     figured.	Only valid for CoreStorage volumes.

     -authrestart
	     Do an authenticated restart after a successful enable occurs.

     -outputplist
	     Outputs the recovery key and additional system information to
	     stdout in a plist dictionary.  If the recovery key changes, the
	     dictionary will also contain a Change key and the EnableDate key
	     will contain the date of the change.   Where possible, you should
	     avoid writing this file to a persistent location since it may
	     pose additional security risk, and at the very least, securely
	     remove the file as soon as possible.

     -keychain
	     Use the institutional recovery key stored in /Library/Key-
	     chains/FileVaultMaster.keychain.

     -certificate path_to_cer_file
	     Use the certificate data located at the path. Any existing
	     /Library/Keychains/FileVaultMaster.keychain file will be moved
	     away with the location logged in the system log.  Do not set this
	     option if your certificate data is located in the input plist
	     information.   The common name of the certificate must be ""File-
	     Vault Recovery Key""

     -key path_to_keychain_file
	     Use the keychain file located at the path containing the private
	     key for the currently installed institutional recovery key to
	     unlock and authenticate FileVault.

     -norecoverykey
	     Do not return a personal recovery key.   On APFS volumes, you can
	     use this option to reuse an existing recovery key previously cre-
	     ated.

     -forceatlogin max_cancel_attempts
	     When using the -defer option, prompt the designated user at login
	     time to enable FileVault.	The user has at most
	     max_cancel_attempts to cancel and bypass enabling FileVault
	     before it will be required to log in.   If this value is 0, the
	     user's next login will require that they enable FileVault before
	     being allowed to use their account.   Other special values
	     include -1 to ignore this option, and 9999, which means that the
	     user should never be forced to enable FileVault (instead the user
	     will just be prompted each time at login until FileVault is
	     enabled).

     -dontaskatlogout
	     When using the -defer option, the default action will be to
	     prompt the designated user at user logout time for their password
	     in order to enable FileVault.  If this option is used, the logout
	     enablement window is not shown.  The assumption is that you are
	     instead using the -forceatlogin option to prompt at user login
	     time to enable FileVault.

     -extended
	     Return extended output information for certain commands.	When
	     using this while checking status on enabling or disabling File-
	     Vault on APFS volumes, a rough estimate of the time remaining
	     will be displayed.  This value may take a few minutes to ini-
	     tially calculate.	 Hit Ctrl-C to stop the status display.

     -offline
	     Display the current offline and locked FileVault volumes. Cur-
	     rently only used for the list command.

     -device bsd_name_or_mount_path_or_lvf_or_lv_UUID
	     Device location to be applied for the command.  This can be in
	     the form ""disk1"", ""/Volumes/MyVolume"", or when asking for a
	     CoreStorage recovery user, a UUID for the Logical Volume or Logi-
	     cal Volume Family of a volume.   Not all commands can use this
	     option.

     -delayminutes number_of_minutes_to_delay
	     The integer number of minutes to delay the authenticated restart.
	     If this option is not set or the value is 0, the auth restart
	     will happen immediately.	A value of -1 will never attempt to
	     automatically restart; instead the auth restart operation will
	     occur whenever the user next restarts.

DEFERRED ENABLEMENT
     The -defer option can be used with the enable command option to delay
     enabling FileVault until after the current (or next) local user logs in
     or out, thus avoiding the need to enter a password when the tool is run.
     Depending on the options set, the user will either be prompted at logout
     time for the password, or the user will be prompted to enable FileVault
     when they log in. If the volume is not already a CoreStorage volume, the
     system may need to be restarted to start the encryption process. Dialogs
     are automatically dismissed and canceled after 60 seconds if no interac-
     tion occurs.

     The -defer option sets up a single user to be added to FileVault. If
     there was no user specified (e.g. without the -user option), then the
     currently logged in user will be added to the configuration and becomes
     the designated user. If there is no user specified and no users are
     logged in at the time of configuration, then the next user that logs in
     will become the designated user.

     As recovery key information is not generated until the user password is
     obtained, the -defer option requires a path where this information will
     be written to. The property list file will be created as a root-only
     readable file and should be placed in a secure location.  You can use the
     showdeferralinfo command to view the current deferral configuration
     information.

     Options that can be used in conjunction with the -defer option include:
     -keychain, -certificate, -forcerestart, -forceatlogin, -dontaskatlogout,
     -user, and -norecoverykey.

     Note that if the designated user is being prompted at logout to enable
     FileVault, and doesn't complete the setup, FileVault will not be enabled,
     but the configuration will remain and be used again for the designated
     user's next logout (or login if the -forceatlogin option is enabled),
     thereby 'nagging' the user to enable FileVault.   When using the
     -forceatlogin option, the user is given a certain number of attempts to
     enable FileVault, in which they can cancel the operation and continue to
     use their system without FileVault.  When the number of cancel attempts
     is reached, the user will not be able to log into their account until
     FileVault is enabled.    The current value of the user's remaining
     attempts can be viewed using the showdeferralinfo command.   Special val-
     ues for the -forceatlogin option include setting it to '0' to force the
     enablement immediately at next login, a '-1' disables the check entirely,
     and a special value of '9999' means that the user will never be required
     to enable FileVault, though it will continually prompt the user until
     FileVault is enabled.   If a personal recovery key is used, the user
     should probably be warned ahead of time that, upon successful enablement,
     they will need to write down and keep in a safe place the FileVault
     recovery key shown on the screen.

     The designated user must be a local user (or a mobile account user).

     To remove an active deferred enablement configuration, you can use the
     disable command, even if FileVault is not currently enabled.

INPUT PROPERTY LIST
	       <plist>
		   <dict>
		       <key>Username</key>
		       <string>sally</string>
		       <key>Password</key>
		       <string>mypassword</string>
		       <key>AdditionalUsers</key>
		       <array>
			   <dict>
			       <key>Username</key>
			       <string>johnny</string>
			       <key>Password</key>
			       <string>johnnypassword</string>
			   </dict>
			   <dict>
			       <key>Username</key>
			       <string>henry</string>
			       <key>Password</key>
			       <string>henrypassword</string>
			   </dict>
			   (etc)
		       </array>
		       <key>Certificate</key>
		       <data>2v6tJdfabvtofALrDtXAu1w5cUOMCumz
			     ...
		       </data>
		       <key>KeychainPath</key>
		       <string>/privatekey.keychain</string>
		   </dict>
	       </plist>

     Username
	     Short name of OD user used in enabling FileVault.

     Password
	     Either password of the user, or in some cases, the personal
	     recovery key.

     AdditionalUsers
	     An array of dictionaries for each OD user that will be added dur-
	     ing enablment.

     AdditionalUsers/Username
	     The OD short user name for a user to be added to the FileVault
	     user list.

     Certificate
	     The institutional recovery key asymmetric certficate data.

     KeychainPath
	     The path to the private key keychain file if you are authenticat-
	     ing to certain comamnds.

     Care should be taken with passwords that may be used within files. Pre-
     cautions should be taken in your scripts to try to pass plist data
     directly from one tool to another to avoid writing this information to a
     persistent location.

EXAMPLES
     fdesetup enable
	      Enable FileVault after prompting for an OpenDirectory user name
	      and password, and return the personal recovery key.

     fdesetup enable -keychain -norecoverykey
	      Enables FileVault using an institutional recovery key in the
	      FileVaultMaster.keychain file. No personal recovery key will be
	      created.

     fdesetup enable -defer /MykeyAndInfo.plist
	      Enables FileVault when the current user logs out and success-
	      fully enters their password and then writes the personal recov-
	      ery key and other relevant information to the file.

     fdesetup enable -defer /MykeyAndInfo.plist -showrecoverykey -forceatlogin
	      3 -dontaskatlogout
	      Will prompt to enable FileVault when the user logs in, allowing
	      a maximum of 3 aborted enable attempts before requiring File-
	      Vault be enabled.  After the 3 attempts, the user will not be
	      able to log in to the client until either FileVault is enabled,
	      or the deferral information is removed (via fdesetup disable).

     fdesetup enable -certificate /mycertfile.cer
	      Enables FileVault with an institutional recovery key based off
	      the certificate data in the DER encoded file. A FileVaultMas-
	      ter.keychain file will be created automatically.

     fdesetup enable -inputplist < /someinfo.plist
	      Enables FileVault using information from the property list read
	      in from stdin.

     fdesetup changerecovery -institutional -keychain
	      Adds or updates the institutional recovery key from the existing
	      FileVaultMaster.keychain.

     fdesetup status
	      Shows the current status of FileVault.

     fdesetup list -extended
	      Lists the current FileVault users, including recovery key
	      records, in an extended format.

     fdesetup remove -uuid A6C75639-1D98-4F19-ACD5-1892BAE27991
	      Removes the user with the UUID from the FileVault users list.

     fdesetup isactive
	      Returns with exit status zero and ""true"" if FileVault is enabled
	      and active.

     fdesetup add -usertoadd betty
	      Adds the user betty to the existing FileVault setup.

     fdesetup changerecovery -personal -inputplist < /authinfo.plist
	      Changes the existing recovery key and generates a new recovery
	      key.

     fdesetup validaterecovery
	      Gets the existing personal recovery key and returns ""true"" if
	      the recovery key appears to be valid.

EXIT STATUS
     The exit status of the tool is set to indicate whether any error was
     detected. The values returned are:

     0			No error, or successful operation.

     1			FileVault is Off.

     2			FileVault appears to be On but Busy.

     11 		Authentication error.

     12 		Parameter error.

     13 		Unknown command error.

     14 		Bad command error.

     15 		Bad input error.

     16 		Legacy FileVault error.

     17 		Added users failed error.

     18 		Unexpected keychain found error.

     19 		Keychain error. This usually means the FileVaultMaster
			keychain could not be moved or replaced.

     20 		Deferred configuration setup missing or error.

     21 		Enable failed (Keychain) error.

     22 		Enable failed (CoreStorage) error.

     23 		Enable failed (DiskManager) error.

     24 		Already enabled error.

     25 		Unable to remove user or disable FileVault.

     26 		Unable to change recovery key.

     27 		Unable to remove recovery key.

     28 		FileVault is either off, busy, or the volume is
			locked.

     29 		Did not find FileVault information at the specified
			location.

     30 		Unable to add user to FileVault because user record
			could not be found.

     31 		Unable to enable FileVault due to management settings.

     32 		FileVault is already active.

     33 		Command option is unsupported on this file system.

     34 		An option or parameter is not supported for APFS vol-
			umes.

     35 		An error occurred during FileVault disablement.

     36 		This computer does not support enabling FileVault.

     37 		One or more users have a blank password.   FileVault
			cannot be enabled.

     99 		Internal error.

SEE ALSO
     security(1), diskutil(8), base64(1), pmset(1), shutdown(8)

macOS				 July 08, 2018				 macOS
","# fdesetup

> Set and retrieve FileVault related information.

- List current FileVault enabled users:

`sudo fdesetup list`

- Get current FileVault status:

`fdesetup status`

- Add FileVault enabled user:

`sudo fdesetup add -usertoadd user1`

- Enable FileVault:

`sudo fdesetup enable`

- Disable FileVault:

`sudo fdesetup disable`
"
airport,,,"
airport(8)		  BSD System Manager's Manual		    airport(8)

NAME
     airport -- get information for 802.11 interface

SYNOPSIS
     airport

DESCRIPTION
     airport manages 802.11 interfaces.  airport more information needed here.

BSD			      September 25, 2020			   BSD
","# airport

> Wireless network configuration utility.

- Show current wireless status information:

`airport -I`

- Sniff wireless traffic on channel 1:

`airport sniff {{1}}`

- Scan for available wireless networks:

`airport -s`

- Disassociate from current airport network:

`sudo airport -z`
"
brew-bundle,https://github.com/Homebrew/homebrew-bundle,"













GitHub - Homebrew/homebrew-bundle: 📦 Bundler for non-Ruby dependencies from Homebrew, Homebrew Cask and the Mac App Store.








































Skip to content













                Sign up
              
















                    Why GitHub?
                    




Features →

Code review
Project management
Integrations
Actions
Packages
Security
Team management
Hosting
Mobile


Customer stories →
Security →





Team


Enterprise




                    Explore
                    





Explore GitHub →

Learn & contribute

Topics
Collections
Trending
Learning Lab
Open source guides

Connect with others

Events
Community forum
GitHub Education
GitHub Stars program





Marketplace




                    Pricing
                    




Plans →

Compare plans
Contact Sales


Nonprofit →
Education →






























        In this repository
      

        All GitHub
      
↵


      Jump to
      ↵






No suggested jump to results















        In this repository
      

        All GitHub
      
↵


      Jump to
      ↵















        In this repository
      

        All GitHub
      
↵


      Jump to
      ↵






 



          Sign in
        

              Sign up
            



















Homebrew

/

homebrew-bundle








          Sponsor
        






              Sponsor Homebrew/homebrew-bundle
            












    Watch
 
      61
    




      Star


      3.4k
    




          Fork


        210
      





📦 Bundler for non-Ruby dependencies from Homebrew, Homebrew Cask and the Mac App Store.
      



            MIT License
        




3.4k
        stars
 

210
        forks
 




      Star





    Watch









Code

 



Issues
1
 



Pull requests
0
 



Actions

 



Security

 



Insights

 
 




More

 




                    Code
 


                    Issues
 


                    Pull requests
 


                    Actions
 


                    Security
 


                    Insights
 


 










          Dismiss
        
Join GitHub today
GitHub is home to over 50 million developers working together to host and review code, manage projects, and build software together.
Sign up










master














2
branches



12
tags




    Go to file






      Code
      
 








  Clone






            HTTPS
 
            GitHub CLI
 









      Use Git or checkout with SVN using the web URL.
    









      Work fast with our official CLI.
      Learn more.
    







                Open with GitHub Desktop
 



                Download ZIP
 



Launching GitHub Desktop
If nothing happens, download GitHub Desktop and try again.
Go back


Launching GitHub Desktop
If nothing happens, download GitHub Desktop and try again.
Go back


Launching Xcode
If nothing happens, download Xcode and try again.
Go back


Launching Visual Studio
If nothing happens, download the GitHub extension for Visual Studio and try again.
Go back









Latest commit






 




jacobbednarz

Merge pull request #794 from Homebrew/dependabot/bundler/simplecov-ht…



…



12702c2

Sep 23, 2020





Merge pull request #794 from Homebrew/dependabot/bundler/simplecov-ht…

…ml-0.12.3

build(deps): bump simplecov-html from 0.12.2 to 0.12.3

12702c2



Git stats





1,298
commits







Files
Permalink


  
    Failed to load latest commit information.

 


Type
Name
Latest commit message
Commit time






.github/workflows



GitHub Actions cleanup



Aug 14, 2020







cmd



cmd/bundle: fix arg names.



Aug 7, 2020







lib



Fix `brew cask upgrade` deprecations



Sep 13, 2020







spec



Fix `brew cask upgrade` deprecations



Sep 13, 2020







.gitignore



Write Brewfile.lock.json files



Nov 12, 2019







CONTRIBUTING.md



Refer to default branch in links with HEAD



Jun 25, 2020







Gemfile



Fix RuboCop violations.



Aug 31, 2020







Gemfile.lock



build(deps): bump simplecov-html from 0.12.2 to 0.12.3



Sep 23, 2020







Guardfile



Fix RuboCop violations.



Aug 31, 2020







LICENSE



Update license and documentation.



Mar 15, 2018







README.md



Refer to default branch in links with HEAD



Jun 25, 2020





        View code
      






        README.md
      








Homebrew Bundle
Bundler for non-Ruby dependencies from Homebrew, Homebrew Cask, Mac App Store and Whalebrew.
Requirements
Homebrew (on macOS or Linux) for installing dependencies.
Homebrew Cask is optional and used for installing Mac applications.
mas-cli is optional and used for installing Mac App Store applications.
whalebrew is optional and used for installing Whalebrew images.
Installation
brew bundle is automatically installed when first run.
Usage
See the brew bundle section of the brew man output or brew bundle --help.
An example Brewfile:
# 'brew tap'
tap ""homebrew/cask""
# 'brew tap' with custom Git URL
tap ""user/tap-repo"", ""https://user@bitbucket.org/user/homebrew-tap-repo.git""
# set arguments for all 'brew cask install' commands
cask_args appdir: ""~/Applications""

# 'brew install'
brew ""imagemagick""
# 'brew install --with-rmtp', 'brew services restart' on version changes
brew ""denji/nginx/nginx-full"", args: [""with-rmtp""], restart_service: :changed
# 'brew install', always 'brew services restart', 'brew link', 'brew unlink mysql' (if it is installed)
brew ""mysql@5.6"", restart_service: true, link: true, conflicts_with: [""mysql""]

# 'brew cask install'
cask ""google-chrome""
# 'brew cask install --appdir=~/my-apps/Applications'
cask ""firefox"", args: { appdir: ""~/my-apps/Applications"" }
# 'brew cask install' only if '/usr/libexec/java_home --failfast' fails
cask ""java"" unless system ""/usr/libexec/java_home --failfast""

# 'mas install'
mas ""1Password"", id: 443987910

# 'whalebrew install'
whalebrew ""whalebrew/wget""
Note
Homebrew does not support installing specific versions of a library, only the most recent one, so there is no good mechanism for storing installed versions in a .lock file.
If your software needs specific versions then perhaps you'll want to look at using Vagrant to better match your development and production environments.
Tests
Tests can be run with bundle install && bundle exec rspec.
Copyright
Copyright (c) Homebrew maintainers and Andrew Nesbitt. See LICENSE for details.








About

📦 Bundler for non-Ruby dependencies from Homebrew, Homebrew Cask and the Mac App Store.
    
Topics



  ruby


  homebrew


  tap


  cmd


  bundle



Resources



      Readme
 
License



        MIT License
    







    Releases
      12





v1.1.0

          Latest
 
Dec 30, 2014

 

        + 11 releases





Sponsor this project




 


 





patreon.com/homebrew







https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&hosted_button_id=V6ZE57MJRYC8L







https://github.com/homebrew/brew/#donations




  Learn more about GitHub Sponsors







    Packages 0


        No packages published 













    Contributors 68








































      + 57 contributors





Languages








Ruby
100.0%















© 2020 GitHub, Inc.
Terms
Privacy
Security
Status
Help





Contact GitHub
Pricing
API
Training
Blog
About











    You can’t perform that action at this time.
  


















You signed in with another tab or window. Reload to refresh your session.
You signed out in another tab or window. Reload to refresh your session.







",,"# brew bundle

> Bundler for Homebrew, Homebrew Cask and the Mac App Store.
> More information: <https://github.com/Homebrew/homebrew-bundle>.

- Install packages from a Brewfile at the current path:

`brew bundle`

- Install packages from a specific Brewfile at a specific path:

`brew bundle --file={{path/to/file}}`

- Create a Brewfile from all installed packages:

`brew bundle dump`

- Uninstall all formulae not listed in the Brewfile:

`brew bundle cleanup --force`

- Check if there is anything to install or upgrade in the Brewfile:

`brew bundle check`

- Output a list of all entries in the Brewfile:

`brew bundle list --all`
"
GetFileInfo,,,"
GETFILEINFO(1)		  BSD General Commands Manual		GETFILEINFO(1)

NAME
     /usr/bin/GetFileInfo -- get attributes of files and directories (DEPRE-
     CATED)

SYNOPSIS
     /usr/bin/GetFileInfo [-P -a[<attribute-letter>] | -c | -d | -m | -t] file
			  ...

DESCRIPTION
     Tools supporting Carbon development, including /usr/bin/GetFileInfo, were
     deprecated with Xcode 6.

     /usr/bin/GetFileInfo is a tool to get the file attributes.

     With no flags, GetFileInfo retrieves all information about the file.  If
     exactly one option is provided, GetFileInfo retrieves and displays just
     that information; supplying more than one is an error.

     Flags:

     -P  Acts on a symlink file instead of the file the symlink resolves to.

     -a[<attribute-letter>]
		    Gets a file's attribute bits where <attribute-letter> is
		    one of the following:

		    a	     Alias file

		    b	     Has bundle

		    c	     Custom icon (allowed on folders)

		    d	     Located on the desktop (allowed on folders)

		    e	     Extension is hidden (allowed on folders)

		    i	     Inited - Finder is aware of this file and has
			     given it a location in a window. (allowed on
			     folders)

		    l	     Locked

		    m	     Shared (can run multiple times)

		    n	     File has no INIT resource

		    s	     System file (name locked)

		    t	     ""Stationery Pad"" file

		    v	     Invisible (allowed on folders)

		    z	     Busy (allowed on folders)

		    The value of a single attribute is printed as 0 for off or
		    false, 1 for on or true.  If no attribute letter is speci-
		    fied, the value of all attributes is returned, with lower-
		    case letters representing off or false, and uppercase rep-
		    resenting on or true.

     -t 	    Gets the file type, a string of exactly four characters.
		    If the type is not set, these will display as an empty
		    pair of quotation marks.  Directories do not have types,
		    so the type will be skipped if all information is being
		    displayed; specifying -t for a directory is an error.

     -c 	    Gets the file's creator, a string of four characters
		    enclosed in quotation marks.  If the creator is not set,
		    these will display as an empty pair of quotation marks.
		    Directories do not have creators, so the creator will be
		    skipped if all information is being displayed; specifying
		    -c for a directory is an error.

     -d 	    Gets the creation date, a string of the form ""mm/dd/yyyy
		    hh:mm:ss"" in 24-hour clock format.

     -m 	    Gets the modification date, a string of the form
		    ""mm/dd/yyyy hh:mm:ss"" in 24-hour clock format.

RETURN VALUES
     0	      success
     1	      syntax error
     2	      any other error

SEE ALSO
     SetFile(1)

EXAMPLES
     The following command line gets and prints the creator for the ""Late
     Breaking News"" file:

     /Developer/Tools/GetFileInfo -c ""Late Breaking News""

     This command line prints the modification date of ""myFile"":

     /Developer/Tools/GetFileInfo -m myFile

Mac OS X		      September 27, 2005		      Mac OS X
","# GetFileInfo

> Get information about a file in an HFS+ directory.

- Display infomation about a given file:

`GetFileInfo {{path/to/filename}}`

- Display the date and time a given file was created:

`GetFileInfo -d {{path/to/filename}}`

- Display the date and time a given file was last modified:

`GetFileInfo -m {{path/to/filename}}`

- Display the creator of a given file:

`GetFileInfo -c {{path/to/filename}}`
"
cal,,,"
CAL(1)			  BSD General Commands Manual			CAL(1)

NAME
     cal, ncal -- displays a calendar and the date of Easter

SYNOPSIS
     cal [-3hjy] [-A number] [-B number] [[month] year]
     cal [-3hj] [-A number] [-B number] -m month [year]
     ncal [-3hjJpwy] [-A number] [-B number] [-s country_code] [[month] year]
     ncal [-3hJeo] [-A number] [-B number] [year]
     ncal [-CN] [-H yyyy-mm-dd] [-d yyyy-mm]

DESCRIPTION
     The cal utility displays a simple calendar in traditional format and ncal
     offers an alternative layout, more options and the date of Easter.  The
     new format is a little cramped but it makes a year fit on a 25x80 termi-
     nal.  If arguments are not specified, the current month is displayed.

     The options are as follows:

     -h      Turns off highlighting of today.

     -J      Display Julian Calendar, if combined with the -e option, display
	     date of Easter according to the Julian Calendar.

     -e      Display date of Easter (for western churches).

     -j      Display Julian days (days one-based, numbered from January 1).

     -m month
	     Display the specified month.  If month is specified as a decimal
	     number, it may be followed by the letter `f' or `p' to indicate
	     the following or preceding month of that number, respectively.

     -o      Display date of Orthodox Easter (Greek and Russian Orthodox
	     Churches).

     -p      Print the country codes and switching days from Julian to Grego-
	     rian Calendar as they are assumed by ncal.  The country code as
	     determined from the local environment is marked with an asterisk.

     -s country_code
	     Assume the switch from Julian to Gregorian Calendar at the date
	     associated with the country_code.	If not specified, ncal tries
	     to guess the switch date from the local environment or falls back
	     to September 2, 1752.  This was when Great Britain and her
	     colonies switched to the Gregorian Calendar.

     -w      Print the number of the week below each week column.

     -y      Display a calendar for the specified year.

     -3      Display the previous, current and next month surrounding today.

     -A number
	     Display the number of months after the current month.

     -B number
	     Display the number of months before the current month.

     -C      Switch to cal mode.

     -N      Switch to ncal mode.

     -d yyyy-mm
	     Use yyyy-mm as the current date (for debugging of date selec-
	     tion).

     -H yyyy-mm-dd
	     Use yyyy-mm-dd as the current date (for debugging of highlight-
	     ing).

     A single parameter specifies the year (1-9999) to be displayed; note the
     year must be fully specified: ``cal 89'' will not display a calendar for
     1989.  Two parameters denote the month and year; the month is either a
     number between 1 and 12, or a full or abbreviated name as specified by
     the current locale.  Month and year default to those of the current sys-
     tem clock and time zone (so ``cal -m 8'' will display a calendar for the
     month of August in the current year).

     Not all options can be used together. For example ``-3 -A 2 -B 3 -y -m
     7'' would mean: show me the three months around the seventh month, three
     before that, two after that and the whole year.  ncal will warn about
     these combinations.

     A year starts on January 1.

     Highlighting of dates is disabled if stdout is not a tty.

SEE ALSO
     calendar(3), strftime(3)

HISTORY
     A cal command appeared in Version 5 AT&T UNIX.  The ncal command appeared
     in FreeBSD 2.2.6.

AUTHORS
     The ncal command and manual were written by Wolfgang Helbig
     <helbig@FreeBSD.org>.

BUGS
     The assignment of Julian-Gregorian switching dates to country codes is
     historically naive for many countries.

     Not all options are compatible and using them in different orders will
     give varying results.

BSD				March 14, 2009				   BSD
","# cal

> Prints calendar information.

- Display a calendar for the current month:

`cal`

- Display previous, current and next month:

`cal -3`

- Display a calendar for a specific month (1-12 or name):

`cal -m {{month}}`

- Display a calendar for the current year:

`cal -y`

- Display a calendar for a specific year (4 digits):

`cal {{year}}`

- Display a calendar for a specific month and year:

`cal {{month}} {{year}}`

- Display date of Easter (Western Christian churches) in a given year:

`ncal -e {{year}}`
"
icalbuddy,https://hasseg.org/icalBuddy/,Not Acceptable!Not Acceptable!An appropriate representation of the requested resource could not be found on this server. This error was generated by Mod_Security.,,"# icalBuddy

> Command-line utility for printing events and tasks from the macOS calendar database.
> More information: <https://hasseg.org/icalBuddy/>.

- Show events later today:

`icalBuddy -n eventsToday`

- Show uncompleted tasks:

`icalBuddy uncompletedTasks`

- Show a formated list separated by calendar for all events today:

`icalBuddy -f -sc eventsToday`

- Show tasks for a specified number of days:

`icalBuddy -n tasksDueBefore:today+{{days}}`

- Show events in a time range:

`icalBuddy eventsFrom:'{{start date}}' to:'{{end date}}'`
"
shuf,,,,"# shuf

> Generate random permutations.

- Randomize the order of lines in a file and output the result:

`shuf {{filename}}`

- Only output the first 5 entries of the result:

`shuf -n {{5}} {{filename}}`

- Write output to another file:

`shuf {{filename}} -o {{output_filename}}`

- Generate random numbers in range 1-10:

`shuf -i {{1-10}}`
"
sed,,,"
SED(1)			  BSD General Commands Manual			SED(1)

NAME
     sed -- stream editor

SYNOPSIS
     sed [-Ealn] command [file ...]
     sed [-Ealn] [-e command] [-f command_file] [-i extension] [file ...]

DESCRIPTION
     The sed utility reads the specified files, or the standard input if no
     files are specified, modifying the input as specified by a list of com-
     mands.  The input is then written to the standard output.

     A single command may be specified as the first argument to sed.  Multiple
     commands may be specified by using the -e or -f options.  All commands
     are applied to the input in the order they are specified regardless of
     their origin.

     The following options are available:

     -E      Interpret regular expressions as extended (modern) regular
	     expressions rather than basic regular expressions (BRE's).  The
	     re_format(7) manual page fully describes both formats.

     -a      The files listed as parameters for the ``w'' functions are cre-
	     ated (or truncated) before any processing begins, by default.
	     The -a option causes sed to delay opening each file until a com-
	     mand containing the related ``w'' function is applied to a line
	     of input.

     -e command
	     Append the editing commands specified by the command argument to
	     the list of commands.

     -f command_file
	     Append the editing commands found in the file command_file to the
	     list of commands.	The editing commands should each be listed on
	     a separate line.

     -i extension
	     Edit files in-place, saving backups with the specified extension.
	     If a zero-length extension is given, no backup will be saved.  It
	     is not recommended to give a zero-length extension when in-place
	     editing files, as you risk corruption or partial content in situ-
	     ations where disk space is exhausted, etc.

     -l      Make output line buffered.

     -n      By default, each line of input is echoed to the standard output
	     after all of the commands have been applied to it.  The -n option
	     suppresses this behavior.

     The form of a sed command is as follows:

	   [address[,address]]function[arguments]

     Whitespace may be inserted before the first address and the function por-
     tions of the command.

     Normally, sed cyclically copies a line of input, not including its termi-
     nating newline character, into a pattern space, (unless there is some-
     thing left after a ``D'' function), applies all of the commands with
     addresses that select that pattern space, copies the pattern space to the
     standard output, appending a newline, and deletes the pattern space.

     Some of the functions use a hold space to save all or part of the pattern
     space for subsequent retrieval.

Sed Addresses
     An address is not required, but if specified must be a number (that
     counts input lines cumulatively across input files), a dollar (``$'')
     character that addresses the last line of input, or a context address
     (which consists of a regular expression preceded and followed by a delim-
     iter).

     A command line with no addresses selects every pattern space.

     A command line with one address selects all of the pattern spaces that
     match the address.

     A command line with two addresses selects an inclusive range.  This range
     starts with the first pattern space that matches the first address.  The
     end of the range is the next following pattern space that matches the
     second address.  If the second address is a number less than or equal to
     the line number first selected, only that line is selected.  In the case
     when the second address is a context address, sed does not re-match the
     second address against the pattern space that matched the first address.
     Starting at the first line following the selected range, sed starts look-
     ing again for the first address.

     Editing commands can be applied to non-selected pattern spaces by use of
     the exclamation character (``!'') function.

Sed Regular Expressions
     The regular expressions used in sed, by default, are basic regular
     expressions (BREs, see re_format(7) for more information), but extended
     (modern) regular expressions can be used instead if the -E flag is given.
     In addition, sed has the following two additions to regular expressions:

     1.   In a context address, any character other than a backslash (``\'')
	  or newline character may be used to delimit the regular expression.
	  Also, putting a backslash character before the delimiting character
	  causes the character to be treated literally.  For example, in the
	  context address \xabc\xdefx, the RE delimiter is an ``x'' and the
	  second ``x'' stands for itself, so that the regular expression is
	  ``abcxdef''.

     2.   The escape sequence \n matches a newline character embedded in the
	  pattern space.  You cannot, however, use a literal newline character
	  in an address or in the substitute command.

     One special feature of sed regular expressions is that they can default
     to the last regular expression used.  If a regular expression is empty,
     i.e., just the delimiter characters are specified, the last regular
     expression encountered is used instead.  The last regular expression is
     defined as the last regular expression used as part of an address or sub-
     stitute command, and at run-time, not compile-time.  For example, the
     command ``/abc/s//XXX/'' will substitute ``XXX'' for the pattern ``abc''.

Sed Functions
     In the following list of commands, the maximum number of permissible
     addresses for each command is indicated by [0addr], [1addr], or [2addr],
     representing zero, one, or two addresses.

     The argument text consists of one or more lines.  To embed a newline in
     the text, precede it with a backslash.  Other backslashes in text are
     deleted and the following character taken literally.

     The ``r'' and ``w'' functions take an optional file parameter, which
     should be separated from the function letter by white space.  Each file
     given as an argument to sed is created (or its contents truncated) before
     any input processing begins.

     The ``b'', ``r'', ``s'', ``t'', ``w'', ``y'', ``!'', and ``:'' functions
     all accept additional arguments.  The following synopses indicate which
     arguments have to be separated from the function letters by white space
     characters.

     Two of the functions take a function-list.  This is a list of sed func-
     tions separated by newlines, as follows:

	   { function
	     function
	     ...
	     function
	   }

     The ``{'' can be preceded by white space and can be followed by white
     space.  The function can be preceded by white space.  The terminating
     ``}'' must be preceded by a newline or optional white space.

     [2addr] function-list
	     Execute function-list only when the pattern space is selected.

     [1addr]a\
     text    Write text to standard output immediately before each attempt to
	     read a line of input, whether by executing the ``N'' function or
	     by beginning a new cycle.

     [2addr]b[label]
	     Branch to the ``:'' function with the specified label.  If the
	     label is not specified, branch to the end of the script.

     [2addr]c\
     text    Delete the pattern space.	With 0 or 1 address or at the end of a
	     2-address range, text is written to the standard output.

     [2addr]d
	     Delete the pattern space and start the next cycle.

     [2addr]D
	     Delete the initial segment of the pattern space through the first
	     newline character and start the next cycle.

     [2addr]g
	     Replace the contents of the pattern space with the contents of
	     the hold space.

     [2addr]G
	     Append a newline character followed by the contents of the hold
	     space to the pattern space.

     [2addr]h
	     Replace the contents of the hold space with the contents of the
	     pattern space.

     [2addr]H
	     Append a newline character followed by the contents of the pat-
	     tern space to the hold space.

     [1addr]i\
     text    Write text to the standard output.

     [2addr]l
	     (The letter ell.)	Write the pattern space to the standard output
	     in a visually unambiguous form.  This form is as follows:

		   backslash	      \\
		   alert	      \a
		   form-feed	      \f
		   carriage-return    \r
		   tab		      \t
		   vertical tab       \v

	     Nonprintable characters are written as three-digit octal numbers
	     (with a preceding backslash) for each byte in the character (most
	     significant byte first).  Long lines are folded, with the point
	     of folding indicated by displaying a backslash followed by a new-
	     line.  The end of each line is marked with a ``$''.

     [2addr]n
	     Write the pattern space to the standard output if the default
	     output has not been suppressed, and replace the pattern space
	     with the next line of input.

     [2addr]N
	     Append the next line of input to the pattern space, using an
	     embedded newline character to separate the appended material from
	     the original contents.  Note that the current line number
	     changes.

     [2addr]p
	     Write the pattern space to standard output.

     [2addr]P
	     Write the pattern space, up to the first newline character to the
	     standard output.

     [1addr]q
	     Branch to the end of the script and quit without starting a new
	     cycle.

     [1addr]r file
	     Copy the contents of file to the standard output immediately
	     before the next attempt to read a line of input.  If file cannot
	     be read for any reason, it is silently ignored and no error con-
	     dition is set.

     [2addr]s/regular expression/replacement/flags
	     Substitute the replacement string for the first instance of the
	     regular expression in the pattern space.  Any character other
	     than backslash or newline can be used instead of a slash to
	     delimit the RE and the replacement.  Within the RE and the
	     replacement, the RE delimiter itself can be used as a literal
	     character if it is preceded by a backslash.

	     An ampersand (``&'') appearing in the replacement is replaced by
	     the string matching the RE.  The special meaning of ``&'' in this
	     context can be suppressed by preceding it by a backslash.	The
	     string ``\#'', where ``#'' is a digit, is replaced by the text
	     matched by the corresponding backreference expression (see
	     re_format(7)).

	     A line can be split by substituting a newline character into it.
	     To specify a newline character in the replacement string, precede
	     it with a backslash.

	     The value of flags in the substitute function is zero or more of
	     the following:

		   N	   Make the substitution only for the N'th occurrence
			   of the regular expression in the pattern space.

		   g	   Make the substitution for all non-overlapping
			   matches of the regular expression, not just the
			   first one.

		   p	   Write the pattern space to standard output if a
			   replacement was made.  If the replacement string is
			   identical to that which it replaces, it is still
			   considered to have been a replacement.

		   w file  Append the pattern space to file if a replacement
			   was made.  If the replacement string is identical
			   to that which it replaces, it is still considered
			   to have been a replacement.

     [2addr]t [label]
	     Branch to the ``:'' function bearing the label if any substitu-
	     tions have been made since the most recent reading of an input
	     line or execution of a ``t'' function.  If no label is specified,
	     branch to the end of the script.

     [2addr]w file
	     Append the pattern space to the file.

     [2addr]x
	     Swap the contents of the pattern and hold spaces.

     [2addr]y/string1/string2/
	     Replace all occurrences of characters in string1 in the pattern
	     space with the corresponding characters from string2.  Any char-
	     acter other than a backslash or newline can be used instead of a
	     slash to delimit the strings.  Within string1 and string2, a
	     backslash followed by an ``n'' is replaced by a newline charac-
	     ter.  A pair of backslashes is replaced by a literal backslash.
	     Finally, a backslash followed by any other character (except a
	     newline) is that literal character.

     [2addr]!function
     [2addr]!function-list
	     Apply the function or function-list only to the lines that are
	     not selected by the address(es).

     [0addr]:label
	     This function does nothing; it bears a label to which the ``b''
	     and ``t'' commands may branch.

     [1addr]=
	     Write the line number to the standard output followed by a new-
	     line character.

     [0addr]
	     Empty lines are ignored.

     [0addr]#
	     The ``#'' and the remainder of the line are ignored (treated as a
	     comment), with the single exception that if the first two charac-
	     ters in the file are ``#n'', the default output is suppressed.
	     This is the same as specifying the -n option on the command line.

ENVIRONMENT
     The COLUMNS, LANG, LC_ALL, LC_CTYPE and LC_COLLATE environment variables
     affect the execution of sed as described in environ(7).

EXIT STATUS
     The sed utility exits 0 on success, and >0 if an error occurs.

LEGACY DESCRIPTION
     Warnings are not generated for unused labels.  In legacy mode, they are.

     In the -y function, doubled backslashes are not converted to single ones.
     In legacy mode, they are.

     For more information about legacy mode, see compat(5).

SEE ALSO
     awk(1), ed(1), grep(1), regex(3), compat(5), re_format(7)

STANDARDS
     The sed utility is expected to be a superset of the IEEE Std 1003.2
     (``POSIX.2'') specification.

     The -E, -a and -i options are non-standard FreeBSD extensions and may not
     be available on other operating systems.

HISTORY
     A sed command, written by L. E. McMahon, appeared in Version 7 AT&T UNIX.

AUTHORS
     Diomidis D. Spinellis <dds@FreeBSD.org>

BUGS
     Multibyte characters containing a byte with value 0x5C (ASCII `\') may be
     incorrectly treated as line continuation characters in arguments to the
     ``a'', ``c'' and ``i'' commands.  Multibyte characters cannot be used as
     delimiters with the ``s'' and ``y'' commands.

BSD				 May 10, 2005				   BSD
","# sed

> Edit text in a scriptable manner.

- Replace the first occurrence of a string in a file, and print the result:

`sed 's/{{find}}/{{replace}}/' {{filename}}`

- Replace all occurrences of an extended regular expression in a file:

`sed -E 's/{{regex}}/{{replace}}/g' {{filename}}`

- Replace all occurrences of a string in a file, overwriting the file (i.e. in-place):

`sed --in-place='' 's/{{find}}/{{replace}}/g' {{filename}}`

- Replace only on lines matching the line pattern:

`sed '/{{line_pattern}}/s/{{find}}/{{replace}}/' {{filename}}`

- Print only text between n-th line till the next empty line:

`sed -n '{{line_number}},/^$/p' {{filename}}`

- Apply multiple find-replace expressions to a file:

`sed -e 's/{{find}}/{{replace}}/' -e 's/{{find}}/{{replace}}/' {{filename}}`

- Replace separator / by any other character not used in the find or replace patterns, e.g., #:

`sed 's#{{find}}#{{replace}}#' {{filename}}`
"
valet,https://laravel.com/docs/5.8/valet,"


Laravel Valet - Laravel - The PHP Framework For Web Artisans

































Prologue

Release Notes
Upgrade Guide
Contribution Guide
API Documentation



Getting Started

Installation
Configuration
Directory Structure
Homestead
Valet
Deployment



Architecture Concepts

Request Lifecycle
Service Container
Service Providers
Facades
Contracts



The Basics

Routing
Middleware
CSRF Protection
Controllers
Requests
Responses
Views
URL Generation
Session
Validation
Error Handling
Logging



Frontend

Blade Templates
Localization
Frontend Scaffolding
Compiling Assets



Security

Authentication
API Authentication
Authorization
Email Verification
Encryption
Hashing
Password Reset



Digging Deeper

Artisan Console
Broadcasting
Cache
Collections
Events
File Storage
Helpers
Mail
Notifications
Package Development
Queues
Task Scheduling



Database

Getting Started
Query Builder
Pagination
Migrations
Seeding
Redis



Eloquent ORM

Getting Started
Relationships
Collections
Mutators
API Resources
Serialization



Testing

Getting Started
HTTP Tests
Console Tests
Browser Tests
Database
Mocking



Official Packages

Cashier
Dusk
Envoy
Horizon
Passport
Scout
Socialite
Telescope

















Version


Master
8.x
7.x
6.x
5.8
5.7
5.6
5.5
5.4
5.3
5.2
5.1
5.0
4.2



















WARNING You're browsing the documentation for an old version of Laravel.
                                            Consider upgrading your project to Laravel 8.x.
                                        


Laravel Valet

Introduction

Valet Or Homestead

Installation

Upgrading

Serving Sites

The ""Park"" Command
The ""Link"" Command
Securing Sites With TLS

Sharing Sites
Site Specific Environment Variables
Custom Valet Drivers

Local Drivers

Other Valet Commands


Introduction
Valet is a Laravel development environment for Mac minimalists. No Vagrant, no /etc/hosts file. You can even share your sites publicly using local tunnels. Yeah, we like it too.
Laravel Valet configures your Mac to always run Nginx in the background when your machine starts. Then, using DnsMasq, Valet proxies all requests on the *.test domain to point to sites installed on your local machine.
In other words, a blazing fast Laravel development environment that uses roughly 7 MB of RAM. Valet isn't a complete replacement for Vagrant or Homestead, but provides a great alternative if you want flexible basics, prefer extreme speed, or are working on a machine with a limited amount of RAM.
Out of the box, Valet support includes, but is not limited to:



Laravel
Lumen
Bedrock
CakePHP 3
Concrete5
Contao
Craft
Drupal
Jigsaw
Joomla
Katana
Kirby
Magento
OctoberCMS
Sculpin
Slim
Statamic
Static HTML
Symfony
WordPress
Zend


However, you may extend Valet with your own custom drivers.

Valet Or Homestead
As you may know, Laravel offers Homestead, another local Laravel development environment. Homestead and Valet differ in regards to their intended audience and their approach to local development. Homestead offers an entire Ubuntu virtual machine with automated Nginx configuration. Homestead is a wonderful choice if you want a fully virtualized Linux development environment or are on Windows / Linux.
Valet only supports Mac, and requires you to install PHP and a database server directly onto your local machine. This is easily achieved by using Homebrew with commands like brew install php and brew install mysql. Valet provides a blazing fast local development environment with minimal resource consumption, so it's great for developers who only require PHP / MySQL and do not need a fully virtualized development environment.
Both Valet and Homestead are great choices for configuring your Laravel development environment. Which one you choose will depend on your personal taste and your team's needs.

Installation
Valet requires macOS and Homebrew. Before installation, you should make sure that no other programs such as Apache or Nginx are binding to your local machine's port 80.


Install or update Homebrew to the latest version using brew update.
Install PHP 7.3 using Homebrew via brew install php.
Install Composer.
Install Valet with Composer via composer global require laravel/valet. Make sure the ~/.composer/vendor/bin directory is in your system's ""PATH"".
Run the valet install command. This will configure and install Valet and DnsMasq, and register Valet's daemon to launch when your system starts.


Once Valet is installed, try pinging any *.test domain on your terminal using a command such as ping foobar.test. If Valet is installed correctly you should see this domain responding on 127.0.0.1.
Valet will automatically start its daemon each time your machine boots. There is no need to run valet start or valet install ever again once the initial Valet installation is complete.
Using Another Domain
By default, Valet serves your projects using the .test TLD. If you'd like to use another domain, you can do so using the valet tld tld-name command.
For example, if you'd like to use .app instead of .test, run valet tld app and Valet will start serving your projects at *.app automatically.
Database
If you need a database, try MySQL by running brew install [email protected] on your command line. Once MySQL has been installed, you may start it using the brew services start [email protected] command. You can then connect to the database at 127.0.0.1 using the root username and an empty string for the password.
PHP Versions
Valet allows you to switch PHP versions using the valet use [email protected] command. Valet will install the specified PHP version via Brew if it is not already installed:
valet use [email protected]

valet use php

Upgrading
You may update your Valet installation using the composer global update command in your terminal. After upgrading, it is good practice to run the valet install command so Valet can make additional upgrades to your configuration files if necessary.
Upgrading To Valet 2.0
Valet 2.0 transitions Valet's underlying web server from Caddy to Nginx. Before upgrading to this version you should run the following commands to stop and uninstall the existing Caddy daemon:
valet stop
valet uninstall
Next, you should upgrade to the latest version of Valet. Depending on how you installed Valet, this is typically done through Git or Composer. If you installed Valet via Composer, you should use the following command to update to the latest major version:
composer global require laravel/valet
Once the fresh Valet source code has been downloaded, you should run the install command:
valet install
valet restart
After upgrading, it may be necessary to re-park or re-link your sites.

Serving Sites
Once Valet is installed, you're ready to start serving sites. Valet provides two commands to help you serve your Laravel sites: park and link.

The park Command


Create a new directory on your Mac by running something like mkdir ~/Sites. Next, cd ~/Sites and run valet park. This command will register your current working directory as a path that Valet should search for sites.
Next, create a new Laravel site within this directory: laravel new blog.
Open http://blog.test in your browser.


That's all there is to it. Now, any Laravel project you create within your ""parked"" directory will automatically be served using the http://folder-name.test convention. To view a list of all of your parked directory's sites, you may execute the valet parked command.

The link Command
The link command may also be used to serve your Laravel sites. This command is useful if you want to serve a single site in a directory and not the entire directory.


To use the command, navigate to one of your projects and run valet link app-name in your terminal. Valet will create a symbolic link in ~/.config/valet/Sites which points to your current working directory.
After running the link command, you can access the site in your browser at http://app-name.test.


To see a listing of all of your linked directories, run the valet links command. You may use valet unlink app-name to destroy the symbolic link.

{tip} You can use valet link to serve the same project from multiple (sub)domains. To add a subdomain or another domain to your project run valet link subdomain.app-name from the project folder.


Securing Sites With TLS
By default, Valet serves sites over plain HTTP. However, if you would like to serve a site over encrypted TLS using HTTP/2, use the secure command. For example, if your site is being served by Valet on the laravel.test domain, you should run the following command to secure it:
valet secure laravel
To ""unsecure"" a site and revert back to serving its traffic over plain HTTP, use the unsecure command. Like the secure command, this command accepts the host name that you wish to unsecure:
valet unsecure laravel

Sharing Sites
Valet even includes a command to share your local sites with the world. No additional software installation is required once Valet is installed.
To share a site, navigate to the site's directory in your terminal and run the valet share command. A publicly accessible URL will be inserted into your clipboard and is ready to paste directly into your browser. That's it.
To stop sharing your site, hit Control + C to cancel the process.

Site Specific Environment Variables
Some applications using other frameworks may depend on server environment variables but do not provide a way for those variables to be configured within your project. Valet allows you to configure site specific environment variables by adding a .valet-env.php file within the root of your project. These variables will be added to the $_SERVER global array:
<?php

return [
    'WEBSITE_NAME' => 'My Blog',
];

Custom Valet Drivers
You can write your own Valet ""driver"" to serve PHP applications running on another framework or CMS that is not natively supported by Valet. When you install Valet, a ~/.config/valet/Drivers directory is created which contains a SampleValetDriver.php file. This file contains a sample driver implementation to demonstrate how to write a custom driver. Writing a driver only requires you to implement three methods: serves, isStaticFile, and frontControllerPath.
All three methods receive the $sitePath, $siteName, and $uri values as their arguments. The $sitePath is the fully qualified path to the site being served on your machine, such as /Users/Lisa/Sites/my-project. The $siteName is the ""host"" / ""site name"" portion of the domain (my-project). The $uri is the incoming request URI (/foo/bar).
Once you have completed your custom Valet driver, place it in the ~/.config/valet/Drivers directory using the FrameworkValetDriver.php naming convention. For example, if you are writing a custom valet driver for WordPress, your file name should be WordPressValetDriver.php.
Let's take a look at a sample implementation of each method your custom Valet driver should implement.
The serves Method
The serves method should return true if your driver should handle the incoming request. Otherwise, the method should return false. So, within this method you should attempt to determine if the given $sitePath contains a project of the type you are trying to serve.
For example, let's pretend we are writing a WordPressValetDriver. Our serves method might look something like this:
/**
 * Determine if the driver serves the request.
 *
 * @param  string  $sitePath
 * @param  string  $siteName
 * @param  string  $uri
 * @return bool
 */
public function serves($sitePath, $siteName, $uri)
{
    return is_dir($sitePath.'/wp-admin');
}
The isStaticFile Method
The isStaticFile should determine if the incoming request is for a file that is ""static"", such as an image or a stylesheet. If the file is static, the method should return the fully qualified path to the static file on disk. If the incoming request is not for a static file, the method should return false:
/**
 * Determine if the incoming request is for a static file.
 *
 * @param  string  $sitePath
 * @param  string  $siteName
 * @param  string  $uri
 * @return string|false
 */
public function isStaticFile($sitePath, $siteName, $uri)
{
    if (file_exists($staticFilePath = $sitePath.'/public/'.$uri)) {
        return $staticFilePath;
    }

    return false;
}

{note} The isStaticFile method will only be called if the serves method returns true for the incoming request and the request URI is not /.

The frontControllerPath Method
The frontControllerPath method should return the fully qualified path to your application's ""front controller"", which is typically your ""index.php"" file or equivalent:
/**
 * Get the fully resolved path to the application's front controller.
 *
 * @param  string  $sitePath
 * @param  string  $siteName
 * @param  string  $uri
 * @return string
 */
public function frontControllerPath($sitePath, $siteName, $uri)
{
    return $sitePath.'/public/index.php';
}

Local Drivers
If you would like to define a custom Valet driver for a single application, create a LocalValetDriver.php in the application's root directory. Your custom driver may extend the base ValetDriver class or extend an existing application specific driver such as the LaravelValetDriver:
class LocalValetDriver extends LaravelValetDriver
{
    /**
     * Determine if the driver serves the request.
     *
     * @param  string  $sitePath
     * @param  string  $siteName
     * @param  string  $uri
     * @return bool
     */
    public function serves($sitePath, $siteName, $uri)
    {
        return true;
    }

    /**
     * Get the fully resolved path to the application's front controller.
     *
     * @param  string  $sitePath
     * @param  string  $siteName
     * @param  string  $uri
     * @return string
     */
    public function frontControllerPath($sitePath, $siteName, $uri)
    {
        return $sitePath.'/public_html/index.php';
    }
}

Other Valet Commands



Command
Description




valet forget
Run this command from a ""parked"" directory to remove it from the parked directory list.


valet log
View a list of logs which are written by Valet's services.


valet paths
View all of your ""parked"" paths.


valet restart
Restart the Valet daemon.


valet start
Start the Valet daemon.


valet stop
Stop the Valet daemon.


valet trust
Add sudoers files for Brew and Valet to allow Valet commands to be run without prompting for passwords.


valet uninstall
Uninstall the Valet daemon.














Become a Laravel Partner
Laravel Partners are elite shops providing top-notch Laravel development and consulting. Each of our partners can help you craft a beautiful, well-architected project.

Our Partners














Highlights


Release Notes
Getting Started
Routing
Blade Templates
Authentication
Authorization
Artisan Console
Database
Eloquent ORM
Testing




Resources


Laracasts
Laravel News
Laracon
Laracon EU
Laracon AU
Jobs
Certification
Forums








Partners


Vehikl
Tighten Co.
Kirschbaum
Byte 5
64 Robots
Cubet
DevSquad
Ideil
Cyber-Duck
ABOUT YOU
A2 Design
Romega Software
Jump24
Become A Partner




Ecosystem


Vapor
Forge
Envoyer
Horizon
Lumen
Nova
Echo
Valet
Mix
Spark
Cashier
Homestead
Dusk
Passport
Scout
Socialite
Telescope





Laravel is a web application framework with expressive, elegant syntax. We believe development must be an enjoyable and creative experience to be truly fulfilling. Laravel attempts to take the pain out of development by easing common tasks used in most web projects.
Laravel is a Trademark of Taylor Otwell.Copyright © 2011-2020 Laravel LLC.
                        






















",,"# valet

> A Laravel development environment that allows hosting sites via local tunnels on `http://<example>.test`.
> More information: <https://laravel.com/docs/5.8/valet>.

- Start the valet daemon:

`valet start`

- Register the current working directory as a path that Valet should search for sites:

`valet park`

- View 'parked' paths:

`valet paths`

- Serve a single site instead of an entire directory:

`valet link app-name`

- Share a project via an Ngrok tunnel:

`valet share`
"
look,,,"
LOOK(1) 		  BSD General Commands Manual		       LOOK(1)

NAME
     look -- display lines beginning with a given string

SYNOPSIS
     look [-df] [-t termchar] string [file ...]

DESCRIPTION
     The look utility displays any lines in file which contain string as a
     prefix.  As look performs a binary search, the lines in file must be
     sorted.

     If file is not specified, the file /usr/share/dict/words is used, only
     alphanumeric characters are compared and the case of alphabetic charac-
     ters is ignored.

     The following options are available:

     -d      Dictionary character set and order, i.e., only alphanumeric char-
	     acters are compared.

     -f      Ignore the case of alphabetic characters.

     -t      Specify a string termination character, i.e., only the characters
	     in string up to and including the first occurrence of termchar
	     are compared.

ENVIRONMENT
     The LANG, LC_ALL and LC_CTYPE environment variables affect the execution
     of the look utility.  Their effect is described in environ(7).

FILES
     /usr/share/dict/words  the dictionary

EXIT STATUS
     The look utility exits 0 if one or more lines were found and displayed, 1
     if no lines were found, and >1 if an error occurred.

COMPATIBILITY
     The original manual page stated that tabs and blank characters partici-
     pated in comparisons when the -d option was specified.  This was incor-
     rect and the current man page matches the historic implementation.

SEE ALSO
     grep(1), sort(1)

HISTORY
     A look utility appeared in Version 7 AT&T UNIX.

BUGS
     Lines are not compared according to the current locale's collating order.
     Input files must be sorted with LC_COLLATE set to `C'.

BSD				 July 17, 2004				   BSD
","# look

> Look for lines in sorted file.

- Look for lines which begins with the given prefix:

`look {{prefix}} {{file}}`

- Look for lines ignoring case:

`look -f {{prefix}} {{file}}`
"
drutil,,,"

DRUTIL(1)		  BSD General Commands Manual		     DRUTIL(1)

NAME
     drutil -- interact with CD/DVD burners

SYNOPSIS
     drutil verb [options]

DESCRIPTION
     drutil uses the DiscRecording framework to interact with attached burning
     devices.  Common verbs include burn, erase, eject, help, info, list,
     status, and tray.

     The rest of the verbs are: bulkerase, cdtext, discinfo, dumpiso, dumpudf,
     filename, getconfig, poll, size, subchannel, trackinfo, and version.

VERBS
     Each verb is listed with its description and individual arguments.  Drive
     selection arguments must appear before individual arguments.  Drive
     selection and argument descriptions can be found after the verb descrip-
     tions in the Drive Selection Criteria section.

     -drive drive(s)
		Lets you specify a drive or drives, per the output of list,
		for those verbs that can operate on one or more drives.  See
		the Drive Selection Criterion section for more info.

     help verb
		Display the usage information for the specified verb.

     atip
		Displays the Absolute Time in Pre-Groove (ATIP) for inserted
		CD-R/RW media.

     bulkerase type
		Starts bulk erase mode, in which the drive will continually
		erase inserted -RW media, eject it, and prompt for another
		disc until terminated.

		Types of erase:
		quick	 Performs a quick erase, doing the minimal amount of
			 work to make the disc appear blank. This operation
			 typically takes only a minute or two.

		full	 Performs a complete erase, erasing every block on the
			 disk. This operation is slow (on the order of 30 min-
			 utes) to complete.

     burn options path
		Burns a valid directory or image file to disc. The default is
		to burn the specified directory to a new filesystem. The
		-audio option creates an audio CD (redbook) in which any valid
		QuickTime audio file present in the path is converted to a
		track (in alphabetical order). If a file is specified (valid
		image files only: .dmg, .iso, .cue/bin, and .toc) the contents
		of the image file are burned. Pre-burn and post-burn options,
		and filesystem exclusions can be specificed for enhanced func-
		tionality. Last option takes precedence. Invalid commands are
		ignored.

		path	 A valid path to a directory or file.

		options  Specify an arbitrary valid burn option(s): -test,
			 -appendable, -erase, -mount, -noverify, -nohfsplus,
			 -noiso9660, -nojoliet, -noudf, -nofs, -audio, -speed,
			 -pregap.  Or specify a default burn option: -notest,
			 -noappendable, -noerase, -allfs, -hfsplus, -iso9660,
			 -joliet, -udf, -data, -eject, -verify.

     cdtext
		Reads and displays any CD-Text information reported by the
		drive. The drive must contain an audio CD, and be capable of
		reading CD-Text.

     discinfo [-xml]
		Displays detailed information about present media.

		From the MMC command of the same name.

     dumpiso device block [format]
		Tool to inspect and interpret ISO-9660 and Joliet structures
		on the media.

		device	 Disk node, e.g. /dev/disk1, /dev/disk1s1,
			 /dev/rdisk1.

		block	 Block number to dump (in decimal or 0x hex notation).
			 Blocks are assumed to be 2048-byte blocks.

		format	 How to interpret the block. If format is not speci-
			 fied, dumpiso will attempt to guess.  If present,
			 this argument should be one of the following: None,
			 Boot, BootCat, PVD, SVD, VPD, VDST, MPath, LPath,
			 Dir, HFSPlusVH.

     dumpudf device block
		Tool to inspect and interpret UDF structures on the media.

		device	 Disk node, e.g. /dev/disk1, /dev/disk1s1,
			 /dev/rdisk1.

		block	 Block number to dump (in decimal or 0x hex notation).
			 Blocks are assumed to be 2048-byte blocks.

     eject
		Synonym for drutil tray eject.

     erase type
		Erases -RW media in the drive(s) and ejects it.

		Types of erase:
		quick	 Performs a quick erase, doing the minimal amount of
			 work to make the disc appear blank. This operation
			 typically takes only a minute or two.

		full	 Performs a complete erase, erasing every block on the
			 disk. This operation is slow (on the order of 30 min-
			 utes) to complete.

     filename name
		Shows how the specified filename will be modified to comply
		with the naming rules of the filesystems that DiscRecording
		generates.

     getconfig type
		Displays device feature and profile list.

		Types of config information:
		current  Displays current features and profiles for a drive.

		supported Displays all supported features and profiles for a
			 drive.

     info [-xml]
		Displays various pieces of information for each drive, includ-
		ing how it's connected to the computer and a summary of capa-
		bilities.

     list [-xml]
		Lists all burning devices connected to the machine.

     poll
		Displays device and media notifications until terminated.

     size options path
		Estimates the size of a valid directory or image file (in
		blocks). The default is to estimate the size of the specified
		path as a hybrid filesystem. The -audio option calculates the
		contents of the directory as an audio CD (redbook) (for appli-
		cable files). If a file is specified (valid image files only:
		.dmg, .iso, .cue/bin, and .toc) the contents of the image file
		will be calculated. Filesystem exclusions can be specificed
		for enhanced functionality. Calculated size will be compared
		against blank media that is found unless the -nodrive argument
		is specified. Last option takes precedence. Invalid commands
		are ignored.

		path	 A valid path to a directory or file.

		options  Specify an arbitrary valid burn option(s): -nodrive,
			 -nohfsplus, -noiso9660, -nojoliet, -noudf, -nofs,
			 -audio, -pregap.  Or specify a default burn option:
			 -allfs, -hfsplus, -iso9660, -joliet, -udf, -data.

     status [-xml]
		Displays detailed media-specific information.

     subchannel
		Displays information from the subchannels on CD media. This
		prints the MCN (media catalog number) for the disc, and the
		ISRC (international standard recording code) for all tracks.
		This command only works when CD media is present.

		From the MMC command of the same name.

     toc
		Displays table of contents (TOC) of inserted media.

     trackinfo [-xml]
		Displays detailed information about all tracks present on the
		media.

		From the MMC command of the same name.

     tray command
		Performs a tray/media related command. Note that some drives
		do not have trays, and some have trays but may lack motorized
		eject or inject capability.

		Tray commands:
		open	 Opens a drive's tray, if no media is present and the
			 drive has a tray capable of motorized eject.

		close	 Closes a drive's tray, if the drive has a tray capa-
			 ble of motorized inject.

		eject	 Ejects media from the drive, if the drive has a tray
			 capable of motorized eject. If no media is present,
			 this is equivalent to open.  If media is present and
			 can be unmounted, it will be unmounted and then
			 ejected.  If media is present but cannot be
			 unmounted, the eject will fail.

     version
		Displays operating system and DiscRecording framework version
		numbers.

OPTIONS
     -xml
		When specified (valid options only: discinfo, info, list,
		status, and trackinfo) the output for the specified verb will
		be shown in xml format.

DRIVE SELECTION CRITERIA
     Some functions of drutil operate on a specific drive. Since any number of
     drives may be available, and they may come and go at any time, the device
     selection arguments provide a method for selecting among them.

     The candidate list starts out as a list of all attached drives. One or
     more arguments of the form -drive drive(s) may be specified. Each argu-
     ment has the effect of narrowing the candidate list, depending on what
     drive(s) is. It may be:

	 o	  A positive decimal number, assumed to be a 1-based index
		  into the candidate list. The candidate list is trimmed to
		  just that device.

	 o	  One of the following keywords: internal, external, usb,
		  firewire, atapi, scsi.  The candidate list is trimmed to
		  devices which match the specified location / bus. Case is
		  ignored in this comparison.

	 o	  Any other string, assumed to be a vendor/product name. The
		  candidate list is trimmed to devices whose vendor or product
		  strings exactly match the argument. Case (but not white-
		  space) is ignored in this comparison.

     Multiple -drive arguments may be specified; each argument narrows the
     candidate list further. After all the -drive arguments have been pro-
     cessed, the candidate list is considered. If it contains exactly one
     item, that drive is used. If it contains zero items, drutil prints an
     error message and exits. If it contains more than one item, the selected
     function is executed on all drives remaining in the list.

EXAMPLES
     Simple verbs with no drive commands

	   drutil help status
	     Displays help for the verb ""status"".
	   drutil list
	     Displays a list of attached devices.
	   drutil info
	       Displays miscellaneous information for all attached devices.
	   drutil status
	       Displays media-specific information for all attached devices.
	   drutil -drive internal burn -noverify -eject -speed 24 ~/Documents
	     Burns the Documents directory to the internal drive without
	     verifying, then ejects the disc.
	   drutil -drive internal info -xml > driveInfo.xml
	     Creates a XML file containing info about internal drives.

     Examples of drive selection

	   drutil -drive 1 tray close
	     Closes the tray of the first burning device seen, if possible.
	   drutil -drive external info
	     Lists drive specific information for all externally
	     connected burning devices.
	   drutil -drive firewire status
	     Lists media specific information for media present in
	     attached firewire burning devices.
	   drutil -drive VENDOR tray open
	     Opens the tray of all burning devices whose vendor id is
	     VENDOR, if possible.
	   drutil -drive 'CD-RW CDW827ES' getconfig supported
	     Lists supported features and profiles for attached devices
	     whose product id is 'CD-RW CDW827ES'.

HISTORY
     drutil first appeared in MacOS X 10.3.

SEE ALSO
     diskutil(1), hdiutil(1), /usr/sbin/disktool (run with no args for usage).

Mac OS X			 May 18, 2004			      Mac OS X
","# drutil

> Interact with DVD burners.

- Eject a disk from the drive:

`drutil eject`

- Burn a directory as an ISO9660 filesystem onto a DVD. Don't verify and eject when complete:

`drutil burn -noverify -eject -iso9660`
"
codesign,,,"
CODESIGN(1)		  BSD General Commands Manual		   CODESIGN(1)

NAME
     codesign -- Create and manipulate code signatures

SYNOPSIS
     codesign -s identity [-i identifier] [-r requirements] [-fv] [path ...]
     codesign -v [-R requirement] [-v] [path|pid ...]
     codesign -d [-v] [path|pid ...]
     codesign -h [-v] [pid ...]

DESCRIPTION
     The codesign command is used to create, check, and display code signa-
     tures, as well as inquire into the dynamic status of signed code in the
     system.

     codesign requires exactly one operation option to determine what action
     is to be performed, as well as any number of other options to modify its
     behavior. It can act on any number of objects per invocation, but per-
     forms the same operation on all of them.

     codesign accepts single-character (classic) options, as well as GNU-style
     long options of the form --name and --name=value. Common options have
     both forms; less frequent and specialized options have only long form.
     Note that the form --name value (without equal sign) will not work as
     expected on options with optional values.

OPTIONS
     The options are as follows:

     --all-architectures
	     When verifying a code signature on code that has a universal
	     (""fat"") Mach-O binary, separately verify each architecture con-
	     tained. This is the default unless overridden with the -a
	     (--architecture) option.

     -a, --architecture architecture
	     When verifying or displaying signatures, explicitly select the
	     Mach-O architecture given. The architecture can be specified
	     either by name (e.g. i386) or by number; if by number, a sub-
	     architecture may be appended separated by a comma.  This option
	     applies only to Mach-O binary code and is ignored for other
	     types.  If the path uses the Mach-O format and contains no code
	     of the given architecture, the command will fail.	The default
	     for verification is --all-architectures, to verify all architec-
	     tures present.  The default for display is to report on the
	     native architecture of the host system.  When signing, codesign
	     will always sign all architectures contained in a universal Mach-
	     O file.

     --bundle-version version-string
	     When handling versioned bundles such as frameworks, explicitly
	     specify the version to operate on. This must be one of the names
	     in the ""Versions"" directory of the bundle.  If not specified,
	     codesign uses the bundle's default version.  Note that most
	     frameworks delivered with the system have only one version, and
	     thus this option is irrelevant for them.  There is currently no
	     facility for operating on all versions of a bundle at once.

     -d, --display
	     Display information about the code at the path(s) given. Increas-
	     ing levels of verbosity produce more output.  The format is
	     designed to be moderately easy to parse by simple scripts while
	     still making sense to human eyes.	In addition, the -r, --file-
	     list, --extract-certificates, and --entitlements options can be
	     used to retrieve additional information.

     -D, --detached filename
	     When signing, designates that a detached signature should be
	     written to the specified file. The code being signed is not modi-
	     fied and need not be writable.  When verifying, designates a file
	     containing a detached signature to be used for verification. Any
	     embedded signature in the code is ignored.

     --deep  When signing a bundle, specifies that nested code content such as
	     helpers, frameworks, and plug-ins, should be recursively signed
	     in turn. Beware that all signing options you specify will apply,
	     in turn, to such nested content.
	     When verifying a bundle, specifies that any nested code content
	     will be recursively verified as to its full content. By default,
	     verification of nested content is limited to a shallow investiga-
	     tion that may not detect changes to the nested code.
	     When displaying a signature, specifies that a list of directly
	     nested code should be written to the display output. This lists
	     only code directly nested within the subject; anything nested
	     indirectly will require recursive application of the codesign
	     command.

     --detached-database
	     When signing, specifies that a detached signature should be gen-
	     erated as with the --detached option, but that the resulting sig-
	     nature should be written into a system database, from where it is
	     made automatically available whenever apparently unsigned code is
	     validated on the system.
	     Writing to this system database requires elevated process privi-
	     leges that are not available to ordinary users.

     -f, --force
	     When signing, causes codesign to replace any existing signature
	     on the path(s) given. Without this option, existing signatures
	     will not be replaced, and the signing operation fails.

     -h, --hosting
	     Constructs and prints the hosting chain of a running program. The
	     pid arguments must denote running code (pids etc.) With verbose
	     options, this also displays the individual dynamic validity sta-
	     tus of each element of the hosting chain.

     -i, --identifier identifier
	     During signing, explicitly specify the unique identifier string
	     that is embedded in code signatures. If this option is omitted,
	     the identifier is derived from either the Info.plist (if
	     present), or the filename of the executable being signed, possi-
	     bly modified by the --prefix option.  It is a very bad idea to
	     sign different programs with the same identifier.

     -o, --options flag,...
	     During signing, specifies a set of option flags to be embedded in
	     the code signature. The value takes the form of a comma-separated
	     list of names (with no spaces). Alternatively, a numeric value
	     can be used to directly specify the option mask (CodeDirectory
	     flag word). See OPTION FLAGS below.

     -P, --pagesize pagesize
	     Indicates the granularity of code signing. Pagesize must be a
	     power of two.  Chunks of pagesize bytes are separately signed and
	     can thus be independently verified as needed.  As a special case,
	     a pagesize of zero indicates that the entire code should be
	     signed and verified as a single, possibly gigantic page. This
	     option only applies to the main executable and has no effect on
	     the sealing of associated data, including resources.

     -r, --requirements requirements
	     During signing, indicates that internal requirements should be
	     embedded in the code path(s) as specified. See ""specifying
	     requirements"" below.  Defaults will be applied to requirement
	     types that are not explicitly specified; if you want to defeat
	     such a default, specify ""never"" for that type.
	     During display, indicates where to write the code's internal
	     requirements. Use -r- to write them to standard output.

     -R, --test-requirement requirement
	     During verification, indicates that the path(s) given should be
	     verified against the code requirement specified. If this option
	     is omitted, the code is verified only for internal integrity and
	     against its own designated requirement.

     -s, --sign identity
	     Sign the code at the path(s) given using this identity. See SIGN-
	     ING IDENTITIES below.

     -v, --verbose
	     Sets (with a numeric value) or increments the verbosity level of
	     output. Without the verbose option, no output is produced upon
	     success, in the classic UNIX style.  If no other options request
	     a different action, the first -v encountered will be interpreted
	     as --verify instead (and does not increase verbosity).

     -v, --verify
	     Requests verification of code signatures.	If other actions
	     (sign, display, etc.) are also requested, -v is interpreted to
	     mean --verbose.

     --continue
	     Instructs codesign to continue processing path arguments even if
	     processing one fails.  If this option is given, exit due to oper-
	     ational errors is deferred until all path arguments have been
	     considered. The exit code will then indicate the most severe
	     failure (or, with equal severity, the first such failure encoun-
	     tered).

     --dryrun
	     During signing, performs almost all signing operations, but does
	     not actually write the result anywhere. Cryptographic signatures
	     are still generated, actually using the given signing identity
	     and triggering any access control checks normally, though the
	     resulting signature is then discarded.

     --entitlements path
	     When signing, take the file at the given path and embed its con-
	     tents in the signature as entitlement data. If the data at path
	     does not already begin with a suitable binary (""blob"") header,
	     one is attached automatically.
	     When displaying a signature, extract any entitlement data from
	     the signature and write it to the path given. Use ""-"" to write to
	     standard output.  By default, the binary ""blob"" header is
	     returned intact; prefix the path with a colon "":"" to automati-
	     cally strip it off.  If the signature has no entitlement data,
	     nothing is written (this is not an error).

     --extract-certificates prefix
	     When displaying a signature, extract the certificates in the
	     embedded certificate chain and write them to individual files.
	     The prefix argument is appended with numbers 0, 1, ... to form
	     the filenames, which can be relative or absolute. Certificate 0
	     is the leaf (signing) certificate, and as many files are written
	     as there are certificates in the signature. The files are in
	     ASN.1 (DER) form.	If prefix is omitted, the default prefix is
	     ""codesign"" in the current directory.

     --file-list path
	     When signing or displaying a signature, codesign writes to the
	     given path a list of files that may have been modified as part of
	     the signing process. This is useful for installer or patcher pro-
	     grams that need to know what was changed or what files are needed
	     to make up the ""signature"" of a program. The file given is
	     appended-to, with one line per absolute path written. An argument
	     of ""-"" (single dash) denotes standard output.  Note that the list
	     may be somewhat pessimistic - all files not listed are guaranteed
	     to be unchanged by the signing process, but some of the listed
	     files may not actually have changed.  Also note that changes may
	     have been made to extended attributes of these files.

     --ignore-resources
	     During static validation, do not validate the contents of the
	     code's resources.	In effect, this will pass validation on code
	     whose resources have been corrupted (or inappropriately signed).
	     On large programs, it will also substantially speed up static
	     validation, since all the resources will not be read into memory.
	     Obviously, the outcome of such a validation should be considered
	     on its merits.

     --keychain filename
	     During signing, only search for the signing identity in the key-
	     chain file specified. This can be used to break any matching ties
	     if you have multiple similarly-named identities in several key-
	     chains on the user's search list.	Note that the standard key-
	     chain search path is still consulted while constructing the cer-
	     tificate chain being embedded in the signature.
	     Note that filename will not be searched to resolve the signing
	     identity's certificate chain unless it is also on the user's key-
	     chain search list.

     --prefix string
	     If no explicit unique identifier is specified (using the -i
	     option), and if the implicitly generated identifier does not con-
	     tain any dot (.) characters, then the given string is prefixed to
	     the identifier before use. If the implicit identifier contains a
	     dot, it is used as-is. Typically, this is used to deal with com-
	     mand tools without Info.plists, whose default identifier is sim-
	     ply the command's filename; the conventional prefix used is
	     com.domain. (note that the final dot needs to be explicit).

     --preserve-metadata=list
	     When re-signing code that is already signed, reuse some informa-
	     tion from the old signature.  If new data is specified explic-
	     itly, it is preferred.  You still need to specify the -f
	     (--force) option to enable overwriting signatures at all.	If
	     this option is absent, any old signature has no effect on the
	     signing process.
	     This option takes a comma-separated list of names, which you may
	     reasonably abbreviate:

	     identifier    Preserve the signing identifier (--identifier)
			   instead of generating a default identifier.

	     entitlements  Preserve the entitlement data (--entitlements).

	     requirements  Preserve the internal requirements (--requirements
			   option), including any explicit Designated Require-
			   ment. Note that all internal requirements are pre-
			   served or regenerated as a whole; you cannot pick
			   and choose individual elements with this option.

	     runtime	   Preserve the hardened runtime version (-o runtime
			   flag, --runtime-version option) instead of overrid-
			   ing or deriving the version.
	     For historical reasons, this option can be given without a value,
	     which preserves all of these values as presently known. This use
	     is deprecated and will eventually be removed; always specify an
	     explicit list of preserved items.

     --strict options
	     When validating code, apply additional restrictions beyond the
	     defaults.

	     symlinks  Check that symbolic links inside the code bundle point
		       to sealed files inside its bundle.  This means that
		       broken symbolic links are rejected, as are links to
		       places outside the bundle and to places that are not,
		       for whatever reason, sealed by the signature.

	     sideband  Check that no resource forks, Finder attributes, or
		       similar sideband data is present in the signed code.
		       This is now automatically enforced by signing opera-
		       tions.
	     Options can be specified as a comma-separated list. Use plain
	     --strict or --strict=all to be as strict as possible. Note that
	     --strict=all may include more checking types over time.
	     Not all strictness check make sense in all circumstances, which
	     is why these behaviors are not the defualt.

     --timestamp [=URL]
	     During signing, requests that a timestamp authority server be
	     contacted to authenticate the time of signing. The server con-
	     tacted is given by the URL value.	If this option is given with-
	     out a value, a default server provided by Apple is used.  Note
	     that this server may not support signatures made with identities
	     not furnished by Apple.  If the timestamp authority service can-
	     not be contacted over the Internet, or it malfunctions or refuses
	     service, the signing operation will fail.
	     If this option is not given at all, a system-specific default
	     behavior is invoked.  This may result in some but not all code
	     signatures being timestamped.
	     The special value none explicitly disables the use of timestamp
	     services.

     --runtime-version version
	     During signing, when the runtime OPTION FLAG is set, explicitly
	     specify the hardened runtime version stored in the code signa-
	     ture.  If this option is omitted, but the runtime OPTION FLAG is
	     set then the hardened runtime version is omitted for non-Mach-O
	     files and derived from the SDK version of Mach-O files.

OPERATION
     In the first synopsis form, codesign attempts to sign the code objects at
     the path(s) given, using the identity provided. Internal requirements and
     entitlements are embedded if requested. Internal requirements not speci-
     fied may be assigned suitable default values. Defaulting applies sepa-
     rately to each type of internal requirement.  If an identifier is explic-
     itly given, it is sealed into all path(s).  Otherwise, each path derives
     its identifier independently from its Info.plist or pathname.  Code
     nested within bundle directories must already be signed or the signing
     operation will fail, unless the --deep option is given, in which case any
     unsigned nested code will be recursively signed before proceeding, using
     the same signing options and parameters. If the --force option is given,
     any existing top-level signature is replaced, subject to any
     --preserve-metadata options also present. Combining the --force and
     --deep options results in forcible replacement of all signatures within
     the target bundle.

     In the second synopsis form, codesign verifies the code signatures on all
     the path(s) given. The verification confirms that the code at those
     path(s) is signed, that the signature is valid, and that all sealed com-
     ponents are unaltered. If a requirement is given, each path is also
     checked against this requirement (but see DIAGNOSTICS below).  If verbose
     verification is requested, the program is also checked against its own
     designated requirement, which should never fail for a properly signed
     program.

     If a path begins with a decimal digit, it is interpreted as the process
     id of a running process in the system, and dynamic validation is per-
     formed on that process instead.  This checks the code's dynamic status
     and just enough static data to close the nominal security envelope. Add
     at least one level of verbosity to also perform a full static check.

     In the third synopsis form, codesign displays the contents of the signa-
     tures on the path(s) given. More information is displayed as the ver-
     bosity level increases.  This form may not completely verify the signa-
     tures on the path(s); though it may perform some verification steps in
     the process of obtaining information about the path(s).  If the -r path
     option is given, internal requirements will be extracted from the path(s)
     and written to path; specify a dash ""-"" to write to standard output. If
     the code does not contain an explicit designated requirement, the implied
     one will be retrieved and written out as a source comment.  If the
     --entitlements path option is given, embedded entitlement data will be
     extracted likewise and written to the file specified.

     In the fourth synopsis form, codesign constructs the hosting path for
     each pid given and writes it, one host per line, to standard output. The
     hosting path is the chain of code signing hosts starting with the most
     specific code known to be running, and ending with the root of trust (the
     kernel). If the --verbose option is given, the dynamic validity status of
     each host is also displayed, separated from the path by a tab character.
     Note that hosting chains can at times be constructed for invalid or even
     unsigned code, and the output of this form of the codesign command should
     not be taken as a statement of formal code validity. Only codesign
     --verify can do that; and in fact, formal verification constructs the
     hosting chain as part of its operation (but does not display it).

SIGNING IDENTITIES
     To be used for code signing, a digital identity must be stored in a key-
     chain that is on the calling user's keychain search list.	All keychain
     sources are supported if properly configured. In particular, it is possi-
     ble to sign code with an identity stored on a supported smart card.  If
     your signing identity is stored in a different form, you need to make it
     available in keychain form to sign code with it.
     If the --keychain argument is used, identity is only looked-for in the
     specific keychain given. This is meant to help disambiguate references to
     identities.  Even in that case, the full keychain search list is still
     consulted for additional certificates needed to complete the signature.

     The identity is first considered as the full name of a keychain identity
     preference.  If such a preference exists, it directly names the identity
     used.  Otherwise, the identity is located by searching all keychains for
     a certificate whose subject common name (only) contains the identity
     string given. If there are multiple matches, the operation fails and no
     signing is performed; however, an exact match is preferred over a partial
     match.  These comparisons are case sensitive.  Multiple instances of the
     exactly same certificate in multiple keychains are tolerated as harmless.

     If identity consists of exactly forty hexadecimal digits, it is instead
     interpreted as the SHA-1 hash of the certificate part of the desired
     identity.	In this case, the identity's subject name is not considered.

     Both identity preferences and certificate hashes can be used to identify
     a particular signing identity regardless of name. Identity preferences
     are global settings for each user and provide a layer of indirection.
     Certificate hashes are very explicit and local. These choices, combined
     with what is placed into Xcode project and target build variables and/or
     script settings, allows for very flexible designation of signing identi-
     ties.

     If identity is the single letter ""-"" (dash), ad-hoc signing is performed.
     Ad-hoc signing does not use an identity at all, and identifies exactly
     one instance of code. Significant restrictions apply to the use of ad-hoc
     signed code; consult documentation before using this.

     codesign will attempt to embed the entire certificate chain documenting
     the signing identity in the code signature it generates, including any
     intermediate certificates and the anchor certificate. It looks for those
     in the keychain search list of the user performing the signing operation.
     If it cannot generate the entire certificate chain, signing may still
     succeed, but verification may fail if the verifying code does not have an
     independent source for the missing certificates (from its keychains).

SPECIFYING REQUIREMENTS
     The requirement(s) arguments (-r and -R) can be given in various forms. A
     plain text argument is taken to be a path to a file containing the
     requirement(s).  codesign will accept both binary files containing prop-
     erly compiled requirements code, and source files that are automatically
     compiled before use.  An argument of ""-"" requests that the requirement(s)
     are read from standard input.  Finally, an argument that begins with an
     equal sign ""="" is taken as a literal requirements source text, and is
     compiled accordingly for use.

OPTION FLAGS
     When signing, a set of option flags can be specified to change the behav-
     ior of the system when using the signed code. The following flags are
     recognized by codesign; other flags may exist at the API level. Note that
     you can specify any valid flags by giving a (single) numeric value
     instead of a list of option names.

     kill     Forces the signed code's kill flag to be set when the code
	      begins execution.  Code with the kill flag set will die when it
	      becomes dynamically invalid. It is therefore safe to assume that
	      code marked this way, once validated, will have continue to have
	      a valid identity while alive.

     hard     Forces the signed code's hard flag to be set when the code
	      begins execution.  The hard flag is a hint to the system that
	      the code prefers to be denied access to resources if gaining
	      such access would invalidate its identity.

     host     Marks the code as capable of hosting guest code. You must set
	      this option if you want the code to act as a code signing host,
	      controlling subsidiary (""guest"") code. This flag is set automat-
	      ically if you specify an internal guest requirement.

     expires  Forces any validation of the code to consider expiration of the
	      certificates involved. Code signatures generated with this flag
	      will fail to verify once any of the certificates in the chain
	      has expired, regardless of the intentions of the verifier. Note
	      that this flag does not affect any other checks that may cause
	      signature validation to fail, including checks for certificate
	      revocation.

     library  Forces the signed code's library validation flag to be set when
	      the code begins execution.  The code will only be able to link
	      against system libraries and frameworks, or libraries, frame-
	      works, and plug-in bundles with the same team identifier embed-
	      ded in the code directory.  Team identifiers are automatically
	      recorded in signatures when signing with suitable Apple-issued
	      signing certificates.  Note that the flag is not supported for
	      i386 binaries, and only applies to the main executable.  The
	      flag has no effect when set on frameworks and libraries.

     runtime  On macOS versions >= 10.14.0, opts signed processes into a hard-
	      ened runtime environment which includes runtime code signing
	      enforcement, library validation, hard, kill, and debugging
	      restrictions.  These restrictions can be selectively relaxed via
	      entitlements. Note: macOS versions older than 10.14.0 ignore the
	      presence of this flag in the code signature.

     Note that code can set the hard and kill flags on itself at any time. The
     signing options only affect their initial state. Once set by any means,
     these flags cannot be cleared for the lifetime of the code. Therefore,
     specifying such flags as signing options guarantees that they will be set
     whenever the signed code runs.

     If the code being signed has an Info.plist that contains a key named
     CSFlags, the value of that key is taken as the default value for the
     options. The value of CSFlags can be a string in the same form as the
     --options option, or an integer number specifying the absolute numeric
     value. Note however that while you can abbreviate flag names on the com-
     mand lines, you must spell them out in the Info.plist.

EXAMPLES
     To sign application Terminal.app with a signing identity named ""author-
     ity"":
	   codesign -s authority Terminal.app

     To sign the command-line tool ""helper"" with the same identity, overwrit-
     ing any existing signature, using the signing identifier
     ""com.mycorp.helper"", and embedding a custom designated requirement
	   codesign -f -s authority --prefix=com.mycorp. -r=""designated =>
	   anchor /tmp/foo"" helper

     To verify the signature on Terminal.app and produce some verbose output:
	   codesign --verify --verbose Terminal.app

     To verify the dynamic validity of process 666:
	   codesign --verify 666

     To display all information about Terminal.app's code signature:
	   codesign --display --verbose=4 Terminal.app

     To extract the internal requirements from Terminal.app to standard out-
     put:
	   codesign --display -r- Terminal.app

DIAGNOSTICS
     codesign exits 0 if all operations succeed. This indicates that all codes
     were signed, or all codes verified properly as requested. If a signing or
     verification operation fails, the exit code is 1. Exit code 2 indicates
     invalid arguments or parameters. Exit code 3 indicates that during veri-
     fication, all path(s) were properly signed but at least one of them
     failed to satisfy the requirement specified with the -R option.

     For verification, all path arguments are always investigated before the
     program exits.  For all other operations, the program exits upon the
     first error encountered, and any further path arguments are ignored,
     unless the --continue option was specified, in which case codesign will
     defer the failure exit until after it has attempted to process all path
     arguments in turn.

SIGNING ATOMICITY
     When a signing operation fails for a particular code, the code may
     already have been modified in certain ways by adding requisite signature
     data. Such information will not change the operation of the code, and the
     code will not be considered signed even with these pieces in place. You
     may repeat the signing operation without difficulty.  Note however that a
     previous valid signature may have been effectively destroyed if you spec-
     ified the -f option.
     If you require atomicity of signing stricter than provided by codesign,
     you need to make an explicit copy of your code and sign that.

ENVIRONMENT
     If the CODESIGN_ALLOCATE environment variable is set, it identifies a
     substitute codesign_allocate tool used to allocate space for code signa-
     tures in Mach-O binaries. This is used by Xcode SDK distributions to pro-
     vide architectural support for non-native platforms such as iPhones.  The
     system will not accept such substitutes unless they are specially signed
     (by Apple).

FILES
     /var/db/DetachedSignatures  System-wide database of detached code signa-
				 tures for unsigned code.

SEE ALSO
     csreq(1), xcodebuild(1), codesign_allocate(1)

HISTORY
     The codesign command first appeared in Mac OS 10.5.0 (Leopard).

BUGS
     Some options only apply to particular operations, and codesign ignores
     them (without complaining) if you specify them for an operation for which
     they have no meaning.

     The --preserve-metadata option used to take no value, and varied across
     releases in what exactly it preserved. The ensuing confusion is still
     with you if you need to make backward-compatible scripts.

     The dual meaning of the -v option, indicating either verbosity or verifi-
     cation, confuses some people. If you find it confusing, use the unambigu-
     ous long forms --verbose and --verify instead.

NOTES
     The Xcode build system invokes codesign automatically if the
     CODE_SIGN_IDENTITY build variable is set.	You can express any combina-
     tion of codesign options with additional build variables there.

     codesign is fundamentally a shell around the code signing APIs, and per-
     forms nothing of the underlying work.  Replacing it with older or newer
     versions is unlikely to have a useful effect.

     codesign has several operations and options that are purposely left
     undocumented in this manual page because they are either experimental
     (and subject to change at any time), or unadvised to the unwary.  The
     interminably curious are referred to the published source code.

BSD				  May 7, 2011				   BSD
","# codesign

> Create and manipulate code signatures for macOS.

- Sign an application with a certificate:

`codesign -s {{""My Company Name""}} {{/path/to/App.app}}`

- Verify the certificate of an application:

`codesign -v {{/path/to/App.app}}`
"
route,,,"
ROUTE(8)		  BSD System Manager's Manual		      ROUTE(8)

NAME
     route -- manually manipulate the routing tables

SYNOPSIS
     route [-dnqtv] command [[modifiers] args]

DESCRIPTION
     Route is a utility used to manually manipulate the network routing
     tables.  It normally is not needed, as a system routing table management
     daemon such as routed(8), should tend to this task.

     The route utility supports a limited number of general options, but a
     rich command language, enabling the user to specify any arbitrary request
     that could be delivered via the programmatic interface discussed in
     route(4).

     The following options are available:

     -d      Run in debug-only mode, i.e., do not actually modify the routing
	     table.

     -n      Bypass attempts to print host and network names symbolically when
	     reporting actions.  (The process of translating between symbolic
	     names and numerical equivalents can be quite time consuming, and
	     may require correct operation of the network; thus it may be
	     expedient to forget this, especially when attempting to repair
	     networking operations).

     -t      Run in test-only mode.  /dev/null is used instead of a socket.

     -v      (verbose) Print additional details.

     -q      Suppress all output.

     The route utility provides six commands:

     add	 Add a route.
     flush	 Remove all routes.
     delete	 Delete a specific route.
     change	 Change aspects of a route (such as its gateway).
     get	 Lookup and display the route for a destination.
     monitor	 Continuously report any changes to the routing information
		 base, routing lookup misses, or suspected network partition-
		 ings.

     The monitor command has the syntax:

	   route [-n] monitor

     The flush command has the syntax:

	   route [-n] flush [family]

     If the flush command is specified, route will ``flush'' the routing
     tables of all gateway entries.  When the address family may is specified
     by any of the -osi, -xns, -atalk, -inet6, or -inet modifiers, only routes
     having destinations with addresses in the delineated family will be
     deleted.

     The other commands have the following syntax:

	   route [-n] command [-net | -host] [-ifscope boundif] destination
	   gateway [netmask]

     where destination is the destination host or network, gateway is the
     next-hop intermediary via which packets should be routed.	Routes to a
     particular host may be distinguished from those to a network by inter-
     preting the Internet address specified as the destination argument.  The
     optional modifiers -net and -host force the destination to be interpreted
     as a network or a host, respectively.  Otherwise, if the destination has
     a ``local address part'' of INADDR_ANY (0.0.0.0), or if the destination
     is the symbolic name of a network, then the route is assumed to be to a
     network; otherwise, it is presumed to be a route to a host.  Optionally,
     the destination could also be specified in the net/bits format.

     For example, 128.32 is interpreted as -host 128.0.0.32; 128.32.130 is
     interpreted as -host 128.32.0.130; -net 128.32 is interpreted as
     128.32.0.0; -net 128.32.130 is interpreted as 128.32.130.0; and
     192.168.64/20 is interpreted as -net 192.168.64 -netmask 255.255.240.0.

     A destination of default is a synonym for -net 0.0.0.0, which is the
     default route.

     If the destination is directly reachable via an interface requiring no
     intermediary system to act as a gateway, the -interface modifier should
     be specified; the gateway given is the address of this host on the common
     network, indicating the interface to be used for transmission.  Alter-
     nately, if the interface is point to point the name of the interface
     itself may be given, in which case the route remains valid even if the
     local or remote addresses change.

     For AF_INET and AF_INET6, the -ifscope modifier specifies the additional
     property of the route related to the interface scope derived from inter-
     face boundif.  Such property allows for the presence of multiple route
     entries with the same destination, where each route is associated with a
     unique interface.	This modifier is required in order to manipulate route
     entries marked with the RTF_IFSCOPE flag.

     The optional modifier -link specify that all subsequent addresses are
     specified as link-level addresses, and the names must be numeric specifi-
     cations rather than symbolic names.

     The optional -netmask modifier is intended to achieve the effect of an
     OSI ESIS redirect with the netmask option, or to manually add subnet
     routes with netmasks different from that of the implied network interface
     (as would otherwise be communicated using the OSPF or ISIS routing proto-
     cols).  One specifies an additional ensuing address parameter (to be
     interpreted as a network mask).  The implicit network mask generated in
     the AF_INET case can be overridden by making sure this option follows the
     destination parameter.

     For AF_INET6, the -prefixlen qualifier is available instead of the -mask
     qualifier because non-continuous masks are not allowed in IPv6.  For
     example, -prefixlen 32 specifies network mask of
     ffff:ffff:0000:0000:0000:0000:0000:0000 to be used.  The default value of
     prefixlen is 64 to get along with the aggregatable address.  But 0 is
     assumed if default is specified.  Note that the qualifier works only for
     AF_INET6 address family.

     Routes have associated flags which influence operation of the protocols
     when sending to destinations matched by the routes.  These flags may be
     set (or sometimes cleared) by indicating the following corresponding mod-
     ifiers:

     -cloning	RTF_CLONING    - generates a new route on use
     -xresolve	RTF_XRESOLVE   - emit mesg on use (for external lookup)
     -iface    ~RTF_GATEWAY    - destination is directly reachable
     -static	RTF_STATIC     - manually added route
     -nostatic ~RTF_STATIC     - pretend route added by kernel or daemon
     -reject	RTF_REJECT     - emit an ICMP unreachable when matched
     -blackhole RTF_BLACKHOLE  - silently discard pkts (during updates)
     -proto1	RTF_PROTO1     - set protocol specific routing flag #1
     -proto2	RTF_PROTO2     - set protocol specific routing flag #2
     -llinfo	RTF_LLINFO     - validly translates proto addr to link addr

     The optional modifiers -rtt, -rttvar, -sendpipe, -recvpipe, -mtu,
     -hopcount, -expire, and -ssthresh provide initial values to quantities
     maintained in the routing entry by transport level protocols, such as TCP
     or TP4.  These may be individually locked by preceding each such modifier
     to be locked by the -lock meta-modifier, or one can specify that all
     ensuing metrics may be locked by the -lockrest meta-modifier.

     In a change or add command where the destination and gateway are not suf-
     ficient to specify the route (as in the ISO case where several interfaces
     may have the same address), the -ifp or -ifa modifiers may be used to
     determine the interface or interface address.

     The optional -proxy modifier specifies that the RTF_LLINFO routing table
     entry is the ``published (proxy-only)'' ARP entry, as reported by arp(8).

     All symbolic names specified for a destination or gateway are looked up
     first as a host name using gethostbyname(3).  If this lookup fails,
     getnetbyname(3) is then used to interpret the name as that of a network.

     Route uses a routing socket and the new message types RTM_ADD,
     RTM_DELETE, RTM_GET, and RTM_CHANGE.  As such, only the super-user may
     modify the routing tables.

DIAGNOSTICS
     add [host | network ] %s: gateway %s flags %x  The specified route is
     being added to the tables.  The values printed are from the routing table
     entry supplied in the ioctl(2) call.  If the gateway address used was not
     the primary address of the gateway (the first one returned by
     gethostbyname(3)), the gateway address is printed numerically as well as
     symbolically.

     delete [ host | network ] %s: gateway %s flags %x	As above, but when
     deleting an entry.

     %s %s done  When the flush command is specified, each routing table entry
     deleted is indicated with a message of this form.

     Network is unreachable  An attempt to add a route failed because the
     gateway listed was not on a directly-connected network.  The next-hop
     gateway must be given.

     not in table  A delete operation was attempted for an entry which wasn't
     present in the tables.

     routing table overflow  An add operation was attempted, but the system
     was low on resources and was unable to allocate memory to create the new
     entry.

     gateway uses the same route  A change operation resulted in a route whose
     gateway uses the same route as the one being changed.  The next-hop gate-
     way should be reachable through a different route.

     The route utility exits 0 on success, and >0 if an error occurs.

SEE ALSO
     netintro(4), route(4), arp(8), routed(8)

HISTORY
     The route command appeared in 4.2BSD.

BUGS
     The first paragraph may have slightly exaggerated routed(8)'s abilities.

4.4BSD				 June 8, 2001				4.4BSD
","# route

> Manually manipulate the routing tables.
> Necessitates to be root.

- Add a route to a destination through a gateway:

`sudo route add {{dest_ip_address}} {{gateway_address}}`

- Add a route to a /24 subnet through a gateway:

`sudo route add {{subnet_ip_address}}/24 {{gateway_address}}`

- Run in test mode (does not do anything, just print):

`sudo route -t add {{dest_ip_address}}/24 {{gateway_address}}`

- Remove all routes:

`sudo route flush`

- Delete a specific route:

`sudo route delete {{dest_ip_address}}/24`

- Lookup and display the route for a destination (hostname or IP address):

`sudo route get {{destination}}`
"
xar,https://linux.die.net/man/1/xar,"

xar(1): eXtensible ARchiver - Linux man page
















xar(1) - Linux man page
Name
xar - eXtensible ARchiver
Synopsis
xar -[ctx][v] ...
Description






The XAR project aims to provide an easily extensible archive format. Important design decisions
include an easily extensible XML table of contents (TOC) for random access to archived files, storing the TOC at the beginning of the archive to allow for
efficient handling of streamed archives, the ability to handle files of arbitrarily large sizes, the ability to choose independent encodings for individual
files in the archive, the ability to store checksums for individual files in both compressed and uncompressed form, and the ability to query the table of
content's rich meta-data.
Functions

One of the following options must be used:
-c
Creates an archive
-t
Lists the contents of an archive
-x
Extracts an archive
NOTE: all of the above require the use of the -f option (filename) as this release of xar doesn't correctly handle pipes or sockets.
-f
The filename to use for creation, listing or extraction. With extraction, this can be a POSIX regular expression.
Options

--compression
Specifies the compression type to use. Valid values: none, gzip, bzip2. Default value: gzip
--dump-toc=<filename>
Has xar dump the xml header into the specified file. ""-"" can be specified to mean stdout.
--dump-header
Has xar print out the xar binary header information to stdout.
--list-subdocs
List the subdocuments in the xml header
--toc-cksum
Specifies the hashing algorithm to use for xml header verification. Valid values: none, sha1, and md5. Default value: sha1
-l
On archival, stay on the local device.
-P
On extract, set ownership based on uid/gid.
-p
On extract, set ownership based on symbolic names, if possible.
-s <filename>
On extract, specifies the file to extract subdocuments to. On archival, specifies an xml file to add as a subdocument.
-v
Verbose output
--exclude
Specifies a POSIX regular expression of files to exclude from adding to the archive during creation or from being extracted during extraction. This option
can be specified multiple times.
--rsize
Specifies a size (in bytes) for the internal libxar read buffer while performing I/O.
--coalesce-heap
When multiple files in the archive are identical, only store one copy of the data in the heap. This creates smaller archives, but the archives created are
not streamable.
--link-same
When the data section of multiple files are identical, hardlink them within the archive.
--no-compress
Specifies a POSIX regular expression of files to archive, but not compress. The archived files will be copied raw into the archive. This can be used to
exclude already gzipped files from being gzipped during the archival process.
Examples

xar -cf sample.xar /home/uid
Create a xar archive of all files in /home/uid
xar -tf sample.xar
List the contents of the xar archive sample.xar
xar -xf sample.xar
Extract the contents of sample.xar to the current working directory
Bugs

Doesn't currently work with pipes or streams. Might be fixed in a future release.
Probably one or two more somewhere in there. If you find one please report it to http://code.google.com/p/xar/
Authors
Rob Braun <bbraun AT synack DOT net>
Landon Fuller <landonf AT bikemonkey DOT org>
David LeimbachKevin Van Vechten










Site Search











Library
linux docs
linux man pages
page load time


Toys
world sunlight
moon phase
trace explorer







","XAR(1)				 User Commands				XAR(1)



NAME
       xar - eXtensible ARchiver

SYNOPSIS
       xar -[ctx][v] ...

DESCRIPTION
       The  XAR  project  aims to provide an easily extensible archive format.
       Important design decisions include an easily extensible	XML  table  of
       contents  (TOC) for random access to archived files, storing the TOC at
       the beginning of  the  archive  to  allow  for  efficient  handling  of
       streamed  archives,  the  ability  to handle files of arbitrarily large
       sizes, the ability to choose independent encodings for individual files
       in  the archive, the ability to store checksums for individual files in
       both compressed and uncompressed form, and the ability to query the ta-
       ble of content's rich meta-data.

FUNCTIONS
       One of the following options must be used:

       -c     Creates an archive

       -t     Lists the contents of an archive

       -x     Extracts an archive

       NOTE:  all  of the above require the use of the -f option (filename) as
       this release of xar doesn't correctly handle pipes or sockets.

       -f     The  filename  to use for creation, listing or extraction.  With
	      extraction, this can be a POSIX regular expression.

OPTIONS
       --compression
	      Specifies the compression type  to  use.	 Valid	values:  none,
	      gzip, bzip2, lzma (on some systems).  Default value: gzip

       -C <path>
	      On extract, xar will chdir to the specified path before extract-
	      ing the archive.

       -a     Synonym for --compression=lzma

       -j     Synonym for --compression=bzip2

       -z     Synonym for --compression=gzip

       --compression-args=<arguments>
	      Specifies arguments to the compression engine  selected.	 gzip,
	      bzip2, and lzma all take a single integer argument between 0 and
	      9 specifying the compression level to use.

       --dump-toc=<filename>
	      Has xar dump the xml header into the specified file.  ""-"" can be
	      specified to mean stdout.

       --dump-toc-cksum
	      Dumps the ToC checksum to stdout along with the algorithm of the
	      ToC.

       --dump-header
	      Has xar print out the xar binary header information to stdout.

       --extract-subdoc=<name>
	      Extracts the specified subdocument to a document	in  cwd  named
	      <name>.xml

       --list-subdocs
	      List the subdocuments in the xml header

       --toc-cksum
	      Specifies  the hashing algorithm to use for xml header verifica-
	      tion.  Valid values: md5 (on some systems),  sha1,  sha256,  and
	      sha512.  Default value: sha1

       --file-cksum
	      Specifies  the hashing algorithm to use for file content verifi-
	      cation.  Valid values: md5 (on some systems), sha1, sha256,  and
	      sha512.  Default value: sha1

       -l     On archival, stay on the local device.

       -P     On  extract, set ownership based on uid/gid.  If the uid/gid can
	      be set on the extracted file, setuid/setgid bits	will  also  be
	      preserved.

       -p     On  extract, set ownership based on symbolic names, if possible.
	      If the uid/gid can be set on the extracted  file,  setuid/setgid
	      bits will also be preserved.

       -s <filename>
	      On  extract,  specifies the file to extract subdocuments to.  On
	      archival, specifies an xml file to add as a subdocument.

       -v     Verbose output

       --exclude
	      Specifies a POSIX regular expression of files  to  exclude  from
	      adding  to  the  archive during creation or from being extracted
	      during extraction.  This option can be specified multiple times.

       --rsize
	      Specifies  a size (in bytes) for the internal libxar read buffer
	      while performing I/O.

       --coalesce-heap
	      When multiple files in the archive are identical, only store one
	      copy  of	the  data in the heap.	This creates smaller archives,
	      but the archives created are not streamable.

       --link-same
	      When the data section of multiple files are identical,  hardlink
	      them within the archive.

       --no-compress
	      Specifies  a  POSIX  regular expression of files to archive, but
	      not compress.  The archived files will be copied	raw  into  the
	      archive.	This can be used to exclude already gzipped files from
	      being gzipped during the archival process.

       --prop-include
	      Specifies a file property to be included in the  archive.   When
	      this  option  is	specified,  only the specified options will be
	      included.  Anything not specifically included with  this	option
	      will be omitted.	This option can be used multiple times.

       --prop-exclude
	      Specifies a file property to be excluded from the archive.  When
	      this option is specified, all file properties will  be  included
	      except the specified properties.	This option can be used multi-
	      ple times.

       --distribution
	      Creates an archive to only contain file properties safe for file
	      distribution.   Currently,  only	name, type, mode, and data are
	      preserved with this option.

       --keep-existing
	      Does not overwrite existing files during extraction.  Keeps  any
	      previously existing files while extracting.

       -k     Synonym for --keep-existing.

       --keep-setuid
	      When extracting without -p or -P options, xar will extract files
	      as the uid/gid of the extracting process.   In  this  situation,
	      xar  will  strip setuid/setgid bits from the extracted files for
	      security reasons.  --keep-setuid will preserve the setuid/setgid
	      bits  even  though  the uid/gid of the extracted file is not the
	      same as the archived file.

EXAMPLES
       xar -cf sample.xar /home/uid
	      Create a xar archive of all files in /home/uid

       xar -tf sample.xar
	      List the contents of the xar archive sample.xar

       xar -xf sample.xar
	      Extract the contents of sample.xar to the current working direc-
	      tory

BUGS
       Doesn't	currently  work  with  pipes  or streams.  Might be fixed in a
       future release.

       Probably  one  or  two  more somewhere in there. If you find one please
       report it to http://code.google.com/p/xar/

AUTHORS
       Rob Braun <bbraun AT synack DOT net>
       Landon Fuller <landonf AT bikemonkey DOT org>
       David Leimbach
       Kevin Van Vechten




version 1.8			 June 4, 2015				XAR(1)
","# xar

> Manage .xar archives.
> More information: <https://linux.die.net/man/1/xar>.

- Create a xar archive of all files in a given directory:

`xar -cf {{archive.xar}} {{path/to/directory}}`

- Lis[t] the contents of a given xar archive:

`xar -tf {{archive.xar}}`

- Extract the contents of a given xar archive to the current directory:

`xar -xf {{archive.xar}}`
"
locate,,,"
LOCATE(1)		  BSD General Commands Manual		     LOCATE(1)

NAME
     locate -- find filenames quickly

SYNOPSIS
     locate [-0Scims] [-l limit] [-d database] pattern ...

DESCRIPTION
     The locate program searches a database for all pathnames which match the
     specified pattern.  The database is recomputed periodically (usually
     weekly or daily), and contains the pathnames of all files which are pub-
     licly accessible.

     Shell globbing and quoting characters (``*'', ``?'', ``\'', ``['' and
     ``]'') may be used in pattern, although they will have to be escaped from
     the shell.  Preceding any character with a backslash (``\'') eliminates
     any special meaning which it may have.  The matching differs in that no
     characters must be matched explicitly, including slashes (``/'').

     As a special case, a pattern containing no globbing characters (``foo'')
     is matched as though it were ``*foo*''.

     Historically, locate only stored characters between 32 and 127.  The cur-
     rent implementation store any character except newline (`\n') and NUL
     (`\0').  The 8-bit character support does not waste extra space for plain
     ASCII file names.	Characters less than 32 or greater than 127 are stored
     in 2 bytes.

     The following options are available:

     -0 	 Print pathnames separated by an ASCII NUL character (charac-
		 ter code 0) instead of default NL (newline, character code
		 10).

     -S 	 Print some statistics about the database and exit.

     -c 	 Suppress normal output; instead print a count of matching
		 file names.

     -d database
		 Search in database instead of the default file name database.
		 Multiple -d options are allowed.  Each additional -d option
		 adds the specified database to the list of databases to be
		 searched.

		 The option database may be a colon-separated list of data-
		 bases.  A single colon is a reference to the default data-
		 base.

		 $ locate -d $HOME/lib/mydb: foo

		 will first search string ``foo'' in $HOME/lib/mydb and then
		 in /var/db/locate.database.

		 $ locate -d $HOME/lib/mydb::/cdrom/locate.database foo

		 will first search string ``foo'' in $HOME/lib/mydb and then
		 in /var/db/locate.database and then in
		 /cdrom/locate.database.

		       $ locate -d db1 -d db2 -d db3 pattern

		 is the same as

		       $ locate -d db1:db2:db3 pattern

		 or

		       $ locate -d db1:db2 -d db3 pattern

		 If - is given as the database name, standard input will be
		 read instead.	For example, you can compress your database
		 and use:

		 $ zcat database.gz | locate -d - pattern

		 This might be useful on machines with a fast CPU and little
		 RAM and slow I/O.  Note: you can only use one pattern for
		 stdin.

     -i 	 Ignore case distinctions in both the pattern and the data-
		 base.

     -l number	 Limit output to number of file names and exit.

     -m 	 Use mmap(2) instead of the stdio(3) library.  This is the
		 default behavior and is faster in most cases.

     -s 	 Use the stdio(3) library instead of mmap(2).

ENVIRONMENT
     LOCATE_PATH  path to the locate database if set and not empty, ignored if
		  the -d option was specified.

FILES
     /var/db/locate.database				   locate database
     /usr/libexec/locate.updatedb			   Script to update
							   the locate database
     /System/Library/LaunchDaemons/com.apple.locate.plist  Job that starts the
							   database rebuild

SEE ALSO
     find(1), whereis(1), which(1), fnmatch(3), locate.updatedb(8)

     Woods, James A., ""Finding Files Fast"", ;login, 8:1, pp. 8-10, 1983.

HISTORY
     The locate command first appeared in 4.4BSD.  Many new features were
     added in FreeBSD 2.2.

BUGS
     The locate program may fail to list some files that are present, or may
     list files that have been removed from the system.  This is because
     locate only reports files that are present in the database, which is typ-
     ically only regenerated once a week by the
     /System/Library/LaunchDaemons/com.apple.locate.plist job.	Use find(1) to
     locate files that are of a more transitory nature.

     The locate database is typically built by user ``nobody'' and the
     locate.updatedb(8) utility skips directories which are not readable for
     user ``nobody'', group ``nobody'', or world.  For example, if your HOME
     directory is not world-readable, none of your files are in the database.

     The locate database is not byte order independent.  It is not possible to
     share the databases between machines with different byte order.  The cur-
     rent locate implementation understands databases in host byte order or
     network byte order if both architectures use the same integer size.  So
     on a FreeBSD/i386 machine (little endian), you can read a locate database
     which was built on SunOS/sparc machine (big endian, net).

     The locate utility does not recognize multibyte characters.

BSD				August 17, 2006 			   BSD
","# locate

> Find filenames quickly.

- Look for pattern in the database. Note: the database is recomputed periodically (usually weekly or daily):

`locate {{pattern}}`

- Look for a file by its exact filename (a pattern containing no globbing characters is interpreted as `*pattern*`):

`locate */{{filename}}`

- Recompute the database. You need to do it if you want to find recently added files:

`sudo /usr/libexec/locate.updatedb`
"
duti,,,,"# duti

> Set default applications for document types and URL schemes on macOS.

- Set Safari as the default handler for HTML documents:

`duti -s {{com.apple.Safari}} {{public.html}} all`

- Set VLC as the default viewer for files with .m4v extensions:

`duti -s {{org.videolan.vlc}} {{m4v}} viewer`

- Set Finder as the default handler for the ftp:// URL scheme:

`duti -s {{com.apple.Finder}} {{ftp}}`

- Display information about the default application for a given extension:

`duti -x {{ext}}`

- Display the default handler for a given UTI:

`duti -d {{uti}}`

- Display all handlers of a given UTI:

`duti -l {{uti}}`
"
osascript,,,"
OSASCRIPT(1)		  BSD General Commands Manual		  OSASCRIPT(1)

NAME
     osascript -- execute OSA scripts (AppleScript, JavaScript, etc.)

SYNOPSIS
     osascript [-l language] [-i] [-s flags] [-e statement | programfile]
	       [argument ...]

DESCRIPTION
     osascript executes the given OSA script, which may be plain text or a
     compiled script (.scpt) created by Script Editor or osacompile(1).  By
     default, osascript treats plain text as AppleScript, but you can change
     this using the -l option.	To get a list of the OSA languages installed
     on your system, use osalang(1).

     osascript will look for the script in one of the following three places:

     1.   Specified line by line using -e switches on the command line.

     2.   Contained in the file specified by the first filename on the command
	  line.  This file may be plain text or a compiled script.

     3.   Passed in using standard input.  This works only if there are no
	  filename arguments; to pass arguments to a STDIN-read script, you
	  must explicitly specify ``-'' for the script name.

     Any arguments following the script will be passed as a list of strings to
     the direct parameter of the ``run'' handler.  For example, in Apple-
     Script:

	   a.scpt:
	   on run argv
	       return ""hello, "" & item 1 of argv & "".""
	   end run

	   % osascript a.scpt world
	   hello, world.

     The options are as follows:

     -e statement
	   Enter one line of a script.	If -e is given, osascript will not
	   look for a filename in the argument list.  Multiple -e options may
	   be given to build up a multi-line script.  Because most scripts use
	   characters that are special to many shell programs (for example,
	   AppleScript uses single and double quote marks, ``('', ``)'', and
	   ``*''), the statement will have to be correctly quoted and escaped
	   to get it past the shell intact.

     -i    Interactive mode: osascript will prompt for one line at a time, and
	   print the result, if applicable, after each line.  Any script sup-
	   plied as a command argument using -e or programfile will be loaded,
	   but not executed, before starting the interactive prompt.

     -l language
	   Override the language for any plain text files.  Normally, plain
	   text files are compiled as AppleScript.

     -s flags
	   Modify the output style.  The flags argument is a string consisting
	   of any of the modifier characters e, h, o, and s.  Multiple modi-
	   fiers can be concatenated in the same string, and multiple -s
	   options can be specified.  The modifiers come in exclusive pairs;
	   if conflicting modifiers are specified, the last one takes prece-
	   dence.  The meanings of the modifier characters are as follows:

	   h  Print values in human-readable form (default).
	   s  Print values in recompilable source form.

	      osascript normally prints its results in human-readable form:
	      strings do not have quotes around them, characters are not
	      escaped, braces for lists and records are omitted, etc.  This is
	      generally more useful, but can introduce ambiguities.  For exam-
	      ple, the lists `{""foo"", ""bar""}' and `{{""foo"", {""bar""}}}' would
	      both be displayed as `foo, bar'.	To see the results in an unam-
	      biguous form that could be recompiled into the same value, use
	      the s modifier.

	   e  Print script errors to stderr (default).
	   o  Print script errors to stdout.

	      osascript normally prints script errors to stderr, so downstream
	      clients only see valid results.  When running automated tests,
	      however, using the o modifier lets you distinguish script
	      errors, which you care about matching, from other diagnostic
	      output, which you don't.

SEE ALSO
     osacompile(1), osalang(1), AppleScript Language Guide

HISTORY
     osascript in Mac OS X 10.0 would translate `\r' characters in the output
     to `\n' and provided c and r modifiers for the -s option to change this.
     osascript now always leaves the output alone; pipe through tr(1) if nec-
     essary.

     Prior to Mac OS X 10.4, osascript did not allow passing arguments to the
     script.

Mac OS X			April 24, 2014			      Mac OS X
","# osascript

> Run AppleScript or JavaScript for Automation (JXA) from the command line.

- Run an AppleScript command:

`osascript -e '{{say ""Hello world""}}'`

- Run multiple AppleScript commands:

`osascript -e '{{say ""Hello""}}' -e '{{say ""world""}}'`

- Run a compiled (`*.scpt`), bundled (`*.scptd`), or plaintext (`*.applescript`) AppleScript file:

`osascript {{path/to/apple.scpt}}`

- Get the bundle identifier of an application (useful for `open -b`):

`osascript -e 'id of app ""{{Application}}""'`

- Run a JavaScript command:

`osascript -l JavaScript -e '{{console.log(""Hello world"");}}'`

- Run a JavaScript file:

`osascript -l JavaScript {{path/to/script.js}}`
"
say,,,"SAY(1)			   Speech Synthesis Manager			SAY(1)



NAME
       say - Convert text to audible speech

SYNOPSIS
	   say [-v voice] [-r rate] [-o outfile [audio format options] | -n name:port | -a device] [-f file | string ...]

DESCRIPTION
       This tool uses the Speech Synthesis manager to convert input text to
       audible speech and either play it through the sound output device
       chosen in System Preferences or save it to an AIFF file.

OPTIONS
       string
	   Specify the text to speak on the command line. This can consist of
	   multiple arguments, which are considered to be separated by spaces.

       -f file, --input-file=file
	   Specify a file to be spoken. If file is - or neither this parameter
	   nor a message is specified, read from standard input.

       -v voice, --voice=voice
	   Specify the voice to be used. Default is the voice selected in
	   System Preferences. To obtain a list of voices installed in the
	   system, specify '?' as the voice name.

       -r rate, --rate=rate
	   Speech rate to be used, in words per minute.

       -o out.aiff, --output-file=file
	   Specify the path for an audio file to be written. AIFF is the
	   default and should be supported for most voices, but some voices
	   support many more file formats.

       -n name, --network-send=name
       -n name:port, --network-send=name:port
       -n :port, --network-send=:port
       -n :, --network-send=:
	   Specify a service name (default ""AUNetSend"") and/or IP port to be
	   used for redirecting the speech output through AUNetSend.

       -a ID, --audio-device=ID
       -a name, --audio-device=name
	   Specify, by ID or name prefix, an audio device to be used to play
	   the audio. To obtain a list of audio output devices, specify '?' as
	   the device name.

       --progress
	   Display a progress meter during synthesis.

       -i, --interactive, --interactive=markup
	   Print the text line by line during synthesis, highlighting words as
	   they are spoken. Markup can be one of

	   o   A terminfo capability as described in terminfo(5), e.g. bold,
	       smul, setaf 1.

	   o   A color name, one of black, red, green, yellow, blue, magenta,
	       cyan, or white.

	   o   A foreground and background color from the above list,
	       separated by a slash, e.g. green/black. If the foreground color
	       is omitted, only the background color is set.

	   If markup is not specified, it defaults to smso, i.e. reverse
	   video.

       If the input is a TTY, text is spoken line by line, and the output
       file, if specified, will only contain audio for the last line of the
       input.  Otherwise, text is spoken all at once.

AUDIO FORMATS
       Starting in MacOS X 10.6, file formats other than AIFF may be
       specified, although not all third party synthesizers may initially
       support them. In simple cases, the file format can be inferred from the
       extension, although generally some of the options below are required
       for finer grained control:

       --file-format=format
	   The format of the file to write (AIFF, caff, m4af, WAVE).
	   Generally, it's easier to specify a suitable file extension for the
	   output file. To obtain a list of writable file formats, specify '?'
	   as the format name.

       --data-format=format
	   The format of the audio data to be stored. Formats other than
	   linear PCM are specified by giving their format identifiers (aac,
	   alac). Linear PCM formats are specified as a sequence of:

	   Endianness (optional)
	       One of BE (big endian) or LE (little endian). Default is native
	       endianness.

	   Data type
	       One of F (float), I (integer), or, rarely, UI (unsigned
	       integer).

	   Sample size
	       One of 8, 16, 24, 32, 64.

	   Most available file formats only support a subset of these sample
	   formats.

	   To obtain a list of audio data formats for a file format specified
	   explicitly or by file name, specify '?' as the format name.

	   The format identifier optionally can be followed by @samplerate and
	   /hexflags for the format.

       --channels=channels
	   The number of channels. This will generally be of limited use, as
	   most speech synthesizers produce mono audio only.

       --bit-rate=rate
	   The bit rate for formats like AAC. To obtain a list of valid bit
	   rates, specify '?' as the rate. In practice, not all of these bit
	   rates will be available for a given format.

       --quality=quality
	   The audio converter quality level between 0 (lowest) and 127
	   (highest).

ERRORS
       say returns 0 if the text was spoken successfully, otherwise non-zero.
       Diagnostic messages will be printed to standard error.

EXAMPLES
	  say Hello, World
	  say -v Alex -o hi -f hello_world.txt
	  say --interactive=/green spending each day the color of the leaves
	  say -o hi.aac 'Hello, [[slnc 200]] World'
	  say -o hi.m4a --data-format=alac Hello, World.
	  say -o hi.caf --data-format=LEF32@8000 Hello, World

	  say -v '?'
	  say --file-format=?
	  say --file-format=caff --data-format=?
	  say -o hi.m4a --bit-rate=?

SEE ALSO
       ""Speech Synthesis Programming Guide""



1.0				  2017-12-21				SAY(1)
","# say

> Converts text to speech.

- Say a phrase aloud:

`say {{""I like to ride my bike.""}}`

- Read a file aloud:

`say -f {{filename.txt}}`

- Say a phrase with a custom voice and speech rate:

`say -v {{voice}} -r {{words_per_minute}} {{""I'm sorry Dave, I can't let you do that.""}}`

- List the available voices:

`say -v ""?""`

- Create an audio file of the spoken text:

`say -o {{filename.aiff}} {{""Here's to the Crazy Ones.""}}`
"
