command,doc_url,man_entry,tldr_summary
attrib,https://docs.microsoft.com/en-us/windows-server/administration/windows-commands/attrib,,"# attrib

> Displays or changes file and directory attributes.
> More information: <https://docs.microsoft.com/en-us/windows-server/administration/windows-commands/attrib>.

- Display the attributes of the files in the current directory:

`attrib`

- Display the attributes of the files in the current directory and sub-directories:

`attrib /S`

- Display the attributes of the files and directories in the current directory and sub-directories:

`attrib /S /D`

- Add the read-only attribute to a file:

`attrib +R {{document.txt}}`

- Remove the system and hidden attributes of a file:

`attrib -S -H {{document.txt}}`

- Add the hidden attribute to a directory:

`attrib +H {{path\to\directory}}`
"
vol,https://docs.microsoft.com/en-us/windows-server/administration/windows-commands/vol,,"# vol

> Display information about volumes.
> More information: <https://docs.microsoft.com/en-us/windows-server/administration/windows-commands/vol>.

- Display the label and serial number for the current drive:

`vol`

- Display the label and serial number for a specific volume:

`vol {{D:}}`
"
findstr,https://docs.microsoft.com/en-us/windows-server/administration/windows-commands/findstr,,"# findstr

> Find specified text within one or more files.
> More information: <https://docs.microsoft.com/en-us/windows-server/administration/windows-commands/findstr>.

- Find space-separated string(s) in all files:

`findstr ""{{query}}"" *`

- Find space-separated string(s) in a piped command's output:

`{{dir}} | findstr ""{{query}}""`

- Find space-separated string(s) in all files recur[s]ively:

`findstr /s ""{{query}}"" *`

- Find strings using a case-insensitive search:

`findstr /i ""{{query}}"" *""`

- Find strings in all files using regular expressions:

`findstr /r ""{{expression}}"" *`

- Find a literal string (containing spaces) in all text files:

`findstr /c:""{{query}}"" *.txt`

- Display the line number before each matching line:

`findstr /n ""{{query}}"" *`

- Display only the filenames that contain a match:

`findstr /m ""{{query}}"" *`
"
showmount,https://docs.microsoft.com/windows-server/administration/windows-commands/showmount,"
SHOWMOUNT(8)		  BSD System Manager's Manual		  SHOWMOUNT(8)

NAME
     showmount -- show remote NFS mounts on host

SYNOPSIS
     showmount [-Ae36] [-a | -d] [host]

DESCRIPTION
     showmount shows status information about the NFS server on host.  By
     default it prints the names of all hosts that have NFS file systems
     mounted on the host. See NFS: Network File System Protocol Specification,
     RFC 1094, Appendix A, and NFS: Network File System Version 3 Protocol
     Specification, Appendix I, for a detailed description of the protocol.

     -A      Search for NFS servers advertised via Bonjour.

     -a      List all mount points in the form: host:dirpath

     -d      List directory paths of mount points instead of hosts.

     -e      Show the host's exports list.

     -3      Use mount protocol Version 3, compatible with NFS Version 3.

     -6      Use only IPv6 addresses to contact servers.

SEE ALSO
     mount(1), mountd(8), nfsd(8), mDNSResponder(8)

BUGS
     The mount daemon running on the server only has an idea of the actual
     mounts, since the NFS server is stateless.  showmount will only display
     the information as accurately as the mount daemon reports it.

HISTORY
     The showmount utility first appeared in 4.4BSD.

4th Berkeley Distribution     September 26, 2010     4th Berkeley Distribution
","# showmount

> Display information about NFS filesystems on Windows Server.
> More information: <https://docs.microsoft.com/windows-server/administration/windows-commands/showmount>.

- Display all exported filesystems:

`showmount -e`

- Display all NFS clients and their mounted directories:

`showmount -a`

- Display all NFS mounted directories:

`showmount -d`

- Display all exported filesystems for a remote server:

`showmount -e {{server_address}}`
"
sfc,https://docs.microsoft.com/en-us/windows-server/administration/windows-commands/sfc,,"# sfc

> Scans the integrity of Windows system files.
> More information: <https://docs.microsoft.com/en-us/windows-server/administration/windows-commands/sfc>.

- Display information about the usage of the command:

`sfc`

- Scan all system files and, if possible, repair any problems:

`sfc /scannow`

- Scan all system files without attempting to repair any:

`sfc /verifyonly`

- Scan a specific file and, if possible, repair any problems:

`sfc /scanfile={{path/to/file}}`

- Scan a specific file without attempting to repair it:

`sfc /verifyfile={{path/to/file}}`

- When repairing offline, specify the boot directory:

`sfc /offbootdir={{path/to/dir}}`

- When repairing offline, specify the Windows directory:

`sfc /offwindir={{path/to/dir}}`
"
print,https://docs.microsoft.com/en-us/windows-server/administration/windows-commands/print,,"# print

> Print a text file to a printer.
> More information: <https://docs.microsoft.com/en-us/windows-server/administration/windows-commands/print>.

- Print a text file to the default printer:

`print {{path/to/file}}`

- Print a text file to a specific printer:

`print /d:{{printer}} {{path/to/file}}`
"
find,https://docs.microsoft.com/en-us/windows-server/administration/windows-commands/find,"
FIND(1) 		  BSD General Commands Manual		       FIND(1)

NAME
     find -- walk a file hierarchy

SYNOPSIS
     find [-H | -L | -P] [-EXdsx] [-f path] path ... [expression]
     find [-H | -L | -P] [-EXdsx] -f path [path ...] [expression]

DESCRIPTION
     The find utility recursively descends the directory tree for each path
     listed, evaluating an expression (composed of the ``primaries'' and
     ``operands'' listed below) in terms of each file in the tree.

     The options are as follows:

     -E      Interpret regular expressions followed by -regex and -iregex pri-
	     maries as extended (modern) regular expressions rather than basic
	     regular expressions (BRE's).  The re_format(7) manual page fully
	     describes both formats.

     -H      Cause the file information and file type (see stat(2)) returned
	     for each symbolic link specified on the command line to be those
	     of the file referenced by the link, not the link itself.  If the
	     referenced file does not exist, the file information and type
	     will be for the link itself.  File information of all symbolic
	     links not on the command line is that of the link itself.

     -L      Cause the file information and file type (see stat(2)) returned
	     for each symbolic link to be those of the file referenced by the
	     link, not the link itself.  If the referenced file does not
	     exist, the file information and type will be for the link itself.

	     This option is equivalent to the deprecated -follow primary.

     -P      Cause the file information and file type (see stat(2)) returned
	     for each symbolic link to be those of the link itself.  This is
	     the default.

     -X      Permit find to be safely used in conjunction with xargs(1).  If a
	     file name contains any of the delimiting characters used by
	     xargs(1), a diagnostic message is displayed on standard error,
	     and the file is skipped.  The delimiting characters include sin-
	     gle (`` ' '') and double (`` "" '') quotes, backslash (``\''),
	     space, tab and newline characters.

	     However, you may wish to consider the -print0 primary in conjunc-
	     tion with ``xargs -0'' as an effective alternative.

     -d      Cause find to perform a depth-first traversal, i.e., directories
	     are visited in post-order and all entries in a directory will be
	     acted on before the directory itself.  By default, find visits
	     directories in pre-order, i.e., before their contents.  Note, the
	     default is not a breadth-first traversal.

	     This option is equivalent to the -depth primary of IEEE Std
	     1003.1-2001 (``POSIX.1'').  The -d option can be useful when find
	     is used with cpio(1) to process files that are contained in
	     directories with unusual permissions.  It ensures that you have
	     write permission while you are placing files in a directory, then
	     sets the directory's permissions as the last thing.

     -f      Specify a file hierarchy for find to traverse.  File hierarchies
	     may also be specified as the operands immediately following the
	     options.

     -s      Cause find to traverse the file hierarchies in lexicographical
	     order, i.e., alphabetical order within each directory.  Note:
	     `find -s' and `find | sort' may give different results.

     -x      Prevent find from descending into directories that have a device
	     number different than that of the file from which the descent
	     began.

	     This option is equivalent to the deprecated -xdev primary.

PRIMARIES
     All primaries which take a numeric argument allow the number to be pre-
     ceded by a plus sign (``+'') or a minus sign (``-'').  A preceding plus
     sign means ``more than n'', a preceding minus sign means ``less than n''
     and neither means ``exactly n''.

     -Bmin n
	     True if the difference between the time of a file's inode cre-
	     ation and the time find was started, rounded up to the next full
	     minute, is n minutes.

     -Bnewer file
	     Same as -newerBm.

     -Btime n[smhdw]
	     If no units are specified, this primary evaluates to true if the
	     difference between the time of a file's inode creation and the
	     time find was started, rounded up to the next full 24-hour
	     period, is n 24-hour periods.

	     If units are specified, this primary evaluates to true if the
	     difference between the time of a file's inode creation and the
	     time find was started is exactly n units.	Please refer to the
	     -atime primary description for information on supported time
	     units.

     -acl    May be used in conjunction with other primaries to locate files
	     with extended ACLs.  See acl(3) for more information.

     -amin n
	     True if the difference between the file last access time and the
	     time find was started, rounded up to the next full minute, is n
	     minutes.

     -anewer file
	     Same as -neweram.

     -atime n[smhdw]
	     If no units are specified, this primary evaluates to true if the
	     difference between the file last access time and the time find
	     was started, rounded up to the next full 24-hour period, is n
	     24-hour periods.

	     If units are specified, this primary evaluates to true if the
	     difference between the file last access time and the time find
	     was started is exactly n units.  Possible time units are as fol-
	     lows:

	     s	     second
	     m	     minute (60 seconds)
	     h	     hour (60 minutes)
	     d	     day (24 hours)
	     w	     week (7 days)

	     Any number of units may be combined in one -atime argument, for
	     example, ``-atime -1h30m''.  Units are probably only useful when
	     used in conjunction with the + or - modifier.

     -cmin n
	     True if the difference between the time of last change of file
	     status information and the time find was started, rounded up to
	     the next full minute, is n minutes.

     -cnewer file
	     Same as -newercm.

     -ctime n[smhdw]
	     If no units are specified, this primary evaluates to true if the
	     difference between the time of last change of file status infor-
	     mation and the time find was started, rounded up to the next full
	     24-hour period, is n 24-hour periods.

	     If units are specified, this primary evaluates to true if the
	     difference between the time of last change of file status infor-
	     mation and the time find was started is exactly n units.  Please
	     refer to the -atime primary description for information on sup-
	     ported time units.

     -d      Same as depth.  GNU find implements this as a primary in mistaken
	     emulation of FreeBSD find(1).

     -delete
	     Delete found files and/or directories.  Always returns true.
	     This executes from the current working directory as find recurses
	     down the tree.  It will not attempt to delete a filename with a
	     ``/'' character in its pathname relative to ``.'' for security
	     reasons.  Depth-first traversal processing is implied by this
	     option.  Following symlinks is incompatible with this option.

     -depth  Always true; same as the -d option.

     -depth n
	     True if the depth of the file relative to the starting point of
	     the traversal is n.

     -empty  True if the current file or directory is empty.

     -exec utility [argument ...] ;
	     True if the program named utility returns a zero value as its
	     exit status.  Optional arguments may be passed to the utility.
	     The expression must be terminated by a semicolon (``;'').	If you
	     invoke find from a shell you may need to quote the semicolon if
	     the shell would otherwise treat it as a control operator.	If the
	     string ``{}'' appears anywhere in the utility name or the argu-
	     ments it is replaced by the pathname of the current file.
	     Utility will be executed from the directory from which find was
	     executed.	Utility and arguments are not subject to the further
	     expansion of shell patterns and constructs.

     -exec utility [argument ...] {} +
	     Same as -exec, except that ``{}'' is replaced with as many path-
	     names as possible for each invocation of utility.	This behaviour
	     is similar to that of xargs(1).

     -execdir utility [argument ...] ;
	     The -execdir primary is identical to the -exec primary with the
	     exception that utility will be executed from the directory that
	     holds the current file.  The filename substituted for the string
	     ``{}'' is not qualified.

     -execdir utility [argument ...] {} +
	     Same as -execdir, except that ``{}'' is replaced with as many
	     pathnames as possible for each invocation of utility.  This be-
	     haviour is similar to that of xargs(1).

     -flags [-|+]flags,notflags
	     The flags are specified using symbolic names (see chflags(1)).
	     Those with the ""no"" prefix (except ""nodump"") are said to be
	     notflags.	Flags in flags are checked to be set, and flags in
	     notflags are checked to be not set.  Note that this is different
	     from -perm, which only allows the user to specify mode bits that
	     are set.

	     If flags are preceded by a dash (``-''), this primary evaluates
	     to true if at least all of the bits in flags and none of the bits
	     in notflags are set in the file's flags bits.  If flags are pre-
	     ceded by a plus (``+''), this primary evaluates to true if any of
	     the bits in flags is set in the file's flags bits, or any of the
	     bits in notflags is not set in the file's flags bits.  Otherwise,
	     this primary evaluates to true if the bits in flags exactly match
	     the file's flags bits, and none of the flags bits match those of
	     notflags.

     -fstype type
	     True if the file is contained in a file system of type type.  The
	     lsvfs(1) command can be used to find out the types of file sys-
	     tems that are available on the system.  In addition, there are
	     two pseudo-types, ``local'' and ``rdonly''.  The former matches
	     any file system physically mounted on the system where the find
	     is being executed and the latter matches any file system which is
	     mounted read-only.

     -gid gname
	     The same thing as -group gname for compatibility with GNU find.
	     GNU find imposes a restriction that gname is numeric, while
	     find(1) does not.

     -group gname
	     True if the file belongs to the group gname.  If gname is numeric
	     and there is no such group name, then gname is treated as a group
	     ID.

     -ignore_readdir_race
	     This option is for GNU find compatibility and is ignored.

     -ilname pattern
	     Like -lname, but the match is case insensitive.  This is a GNU
	     find extension.

     -iname pattern
	     Like -name, but the match is case insensitive.

     -inum n
	     True if the file has inode number n.

     -ipath pattern
	     Like -path, but the match is case insensitive.

     -iregex pattern
	     Like -regex, but the match is case insensitive.

     -iwholename pattern
	     The same thing as -ipath, for GNU find compatibility.

     -links n
	     True if the file has n links.

     -lname pattern
	     Like -name, but the contents of the symbolic link are matched
	     instead of the file name.	Note that this only matches broken
	     symbolic links if symbolic links are being followed.  This is a
	     GNU find extension.

     -ls     This primary always evaluates to true.  The following information
	     for the current file is written to standard output: its inode
	     number, size in 512-byte blocks, file permissions, number of hard
	     links, owner, group, size in bytes, last modification time, and
	     pathname.	If the file is a block or character special file, the
	     device number will be displayed instead of the size in bytes.  If
	     the file is a symbolic link, the pathname of the linked-to file
	     will be displayed preceded by ``->''.  The format is identical to
	     that produced by ``ls -dgils''.

     -maxdepth n
	     Always true; descend at most n directory levels below the command
	     line arguments.  If any -maxdepth primary is specified, it
	     applies to the entire expression even if it would not normally be
	     evaluated.  ``-maxdepth 0'' limits the whole search to the com-
	     mand line arguments.

     -mindepth n
	     Always true; do not apply any tests or actions at levels less
	     than n.  If any -mindepth primary is specified, it applies to the
	     entire expression even if it would not normally be evaluated.
	     ``-mindepth 1'' processes all but the command line arguments.

     -mmin n
	     True if the difference between the file last modification time
	     and the time find was started, rounded up to the next full
	     minute, is n minutes.

     -mnewer file
	     Same as -newer.

     -mount  The same thing as -xdev, for GNU find compatibility.

     -mtime n[smhdw]
	     If no units are specified, this primary evaluates to true if the
	     difference between the file last modification time and the time
	     find was started, rounded up to the next full 24-hour period, is
	     n 24-hour periods.

	     If units are specified, this primary evaluates to true if the
	     difference between the file last modification time and the time
	     find was started is exactly n units.  Please refer to the -atime
	     primary description for information on supported time units.

     -name pattern
	     True if the last component of the pathname being examined matches
	     pattern.  Special shell pattern matching characters (``['',
	     ``]'', ``*'', and ``?'') may be used as part of pattern.  These
	     characters may be matched explicitly by escaping them with a
	     backslash (``\'').

     -newer file
	     True if the current file has a more recent last modification time
	     than file.

     -newerXY file
	     True if the current file has a more recent last access time
	     (X=a), inode creation time (X=B), change time (X=c), or modifica-
	     tion time (X=m) than the last access time (Y=a), inode creation
	     time (Y=B), change time (Y=c), or modification time (Y=m) of
	     file.  In addition, if Y=t, then file is instead interpreted as a
	     direct date specification of the form understood by cvs(1).  Note
	     that -newermm is equivalent to -newer.

     -nogroup
	     True if the file belongs to an unknown group.

     -noignore_readdir_race
	     This option is for GNU find compatibility and is ignored.

     -noleaf
	     This option is for GNU find compatibility.  In GNU find it dis-
	     ables an optimization not relevant to find(1), so it is ignored.

     -nouser
	     True if the file belongs to an unknown user.

     -ok utility [argument ...] ;
	     The -ok primary is identical to the -exec primary with the excep-
	     tion that find requests user affirmation for the execution of the
	     utility by printing a message to the terminal and reading a
	     response.	If the response is not affirmative (`y' in the
	     ``POSIX'' locale), the command is not executed and the value of
	     the -ok expression is false.

     -okdir utility [argument ...] ;
	     The -okdir primary is identical to the -execdir primary with the
	     same exception as described for the -ok primary.

     -path pattern
	     True if the pathname being examined matches pattern.  Special
	     shell pattern matching characters (``['', ``]'', ``*'', and
	     ``?'') may be used as part of pattern.  These characters may be
	     matched explicitly by escaping them with a backslash (``\'').
	     Slashes (``/'') are treated as normal characters and do not have
	     to be matched explicitly.

     -perm [-|+]mode
	     The mode may be either symbolic (see chmod(1)) or an octal num-
	     ber.  If the mode is symbolic, a starting value of zero is
	     assumed and the mode sets or clears permissions without regard to
	     the process' file mode creation mask.  If the mode is octal, only
	     bits 07777 (S_ISUID | S_ISGID | S_ISTXT | S_IRWXU | S_IRWXG |
	     S_IRWXO) of the file's mode bits participate in the comparison.
	     If the mode is preceded by a dash (``-''), this primary evaluates
	     to true if at least all of the bits in the mode are set in the
	     file's mode bits.	If the mode is preceded by a plus (``+''),
	     this primary evaluates to true if any of the bits in the mode are
	     set in the file's mode bits.  Otherwise, this primary evaluates
	     to true if the bits in the mode exactly match the file's mode
	     bits.  Note, the first character of a symbolic mode may not be a
	     dash (``-'').

     -print  This primary always evaluates to true.  It prints the pathname of
	     the current file to standard output.  If none of -exec, -ls,
	     -print, -print0, or -ok is specified, the given expression shall
	     be effectively replaced by ( given expression ) -print.

     -print0
	     This primary always evaluates to true.  It prints the pathname of
	     the current file to standard output, followed by an ASCII NUL
	     character (character code 0).

     -prune  This primary always evaluates to true.  It causes find to not
	     descend into the current file.  Note, the -prune primary has no
	     effect if the -d option was specified.

     -regex pattern
	     True if the whole path of the file matches pattern using regular
	     expression.  To match a file named ``./foo/xyzzy'', you can use
	     the regular expression ``.*/[xyz]*'' or ``.*/foo/.*'', but not
	     ``xyzzy'' or ``/foo/''.

     -samefile name
	     True if the file is a hard link to name.  If the command option
	     -L is specified, it is also true if the file is a symbolic link
	     and points to name.

     -size n[ckMGTP]
	     True if the file's size, rounded up, in 512-byte blocks is n.  If
	     n is followed by a c, then the primary is true if the file's size
	     is n bytes (characters).  Similarly if n is followed by a scale
	     indicator then the file's size is compared to n scaled as:

	     k	     kilobytes (1024 bytes)
	     M	     megabytes (1024 kilobytes)
	     G	     gigabytes (1024 megabytes)
	     T	     terabytes (1024 gigabytes)
	     P	     petabytes (1024 terabytes)

     -type t
	     True if the file is of the specified type.  Possible file types
	     are as follows:

	     b	     block special
	     c	     character special
	     d	     directory
	     f	     regular file
	     l	     symbolic link
	     p	     FIFO
	     s	     socket

     -uid uname
	     The same thing as -user uname for compatibility with GNU find.
	     GNU find imposes a restriction that uname is numeric, while
	     find(1) does not.

     -user uname
	     True if the file belongs to the user uname.  If uname is numeric
	     and there is no such user name, then uname is treated as a user
	     ID.

     -wholename pattern
	     The same thing as -path, for GNU find compatibility.

     -xattr  True if the file has any extended attributes.

     -xattrname name
	     True if the file has an extended attribute with the specified
	     name.

OPERATORS
     The primaries may be combined using the following operators.  The opera-
     tors are listed in order of decreasing precedence.

     ( expression )
	     This evaluates to true if the parenthesized expression evaluates
	     to true.

     ! expression
     -not expression
	     This is the unary NOT operator.  It evaluates to true if the
	     expression is false.

     -false  Always false.
     -true   Always true.

     expression -and expression
     expression expression
	     The -and operator is the logical AND operator.  As it is implied
	     by the juxtaposition of two expressions it does not have to be
	     specified.  The expression evaluates to true if both expressions
	     are true.	The second expression is not evaluated if the first
	     expression is false.

     expression -or expression
	     The -or operator is the logical OR operator.  The expression
	     evaluates to true if either the first or the second expression is
	     true.  The second expression is not evaluated if the first
	     expression is true.

     All operands and primaries must be separate arguments to find.  Primaries
     which themselves take arguments expect each argument to be a separate
     argument to find.

ENVIRONMENT
     The LANG, LC_ALL, LC_COLLATE, LC_CTYPE, LC_MESSAGES and LC_TIME environ-
     ment variables affect the execution of the find utility as described in
     environ(7).

EXAMPLES
     The following examples are shown as given to the shell:

     find / \! -name ""*.c"" -print
	     Print out a list of all the files whose names do not end in .c.

     find / -newer ttt -user wnj -print
	     Print out a list of all the files owned by user ``wnj'' that are
	     newer than the file ttt.

     find / \! \( -newer ttt -user wnj \) -print
	     Print out a list of all the files which are not both newer than
	     ttt and owned by ``wnj''.

     find / \( -newer ttt -or -user wnj \) -print
	     Print out a list of all the files that are either owned by
	     ``wnj'' or that are newer than ttt.

     find / -newerct '1 minute ago' -print
	     Print out a list of all the files whose inode change time is more
	     recent than the current time minus one minute.

     find / -type f -exec echo {} \;
	     Use the echo(1) command to print out a list of all the files.

     find -L /usr/ports/packages -type l -exec rm -- {} +
	     Delete all broken symbolic links in /usr/ports/packages.

     find /usr/src -name CVS -prune -o -depth +6 -print
	     Find files and directories that are at least seven levels deep in
	     the working directory /usr/src.

     find /usr/src -name CVS -prune -o -mindepth 7 -print
	     Is not equivalent to the previous example, since -prune is not
	     evaluated below level seven.

COMPATIBILITY
     The -follow primary is deprecated; the -L option should be used instead.
     See the STANDARDS section below for details.

SEE ALSO
     chflags(1), chmod(1), cvs(1), locate(1), lsvfs(1), whereis(1), which(1),
     xargs(1), stat(2), acl(3), fts(3), getgrent(3), getpwent(3), strmode(3),
     re_format(7), symlink(7)

STANDARDS
     The find utility syntax is a superset of the syntax specified by the IEEE
     Std 1003.1-2001 (``POSIX.1'') standard.

     All the single character options except -H and -L as well as -amin,
     -anewer, -cmin, -cnewer, -delete, -empty, -fstype, -iname, -inum,
     -iregex, -ls, -maxdepth, -mindepth, -mmin, -path, -print0, -regex and all
     of the -B* birthtime related primaries are extensions to IEEE Std
     1003.1-2001 (``POSIX.1'').

     Historically, the -d, -L and -x options were implemented using the pri-
     maries -depth, -follow, and -xdev.  These primaries always evaluated to
     true.  As they were really global variables that took effect before the
     traversal began, some legal expressions could have unexpected results.
     An example is the expression -print -o -depth.  As -print always evalu-
     ates to true, the standard order of evaluation implies that -depth would
     never be evaluated.  This is not the case.

     The operator -or was implemented as -o, and the operator -and was imple-
     mented as -a.

     Historic implementations of the -exec and -ok primaries did not replace
     the string ``{}'' in the utility name or the utility arguments if it had
     preceding or following non-whitespace characters.	This version replaces
     it no matter where in the utility name or arguments it appears.

     The -E option was inspired by the equivalent grep(1) and sed(1) options.

HISTORY
     A find command appeared in Version 1 AT&T UNIX.

BUGS
     The special characters used by find are also special characters to many
     shell programs.  In particular, the characters ``*'', ``['', ``]'',
     ``?'', ``('', ``)'', ``!'', ``\'' and ``;'' may have to be escaped from
     the shell.

     As there is no delimiter separating options and file names or file names
     and the expression, it is difficult to specify files named -xdev or !.
     These problems are handled by the -f option and the getopt(3) ``--'' con-
     struct.

     The -delete primary does not interact well with other options that cause
     the file system tree traversal options to be changed.

     The -mindepth and -maxdepth primaries are actually global options (as
     documented above).  They should probably be replaced by options which
     look like options.

BSD			      September 28, 2011			   BSD
","# find

> Find a specified string in one or more files.
> More information: <https://docs.microsoft.com/en-us/windows-server/administration/windows-commands/find>.

- Find lines that contain a specified string:

`find {{string}} {{path/to/file_or_directory}}`

- Display lines that do not contain the specified string:

`find {{string}} {{path/to/file_or_directory}} /v`

- Display the count of lines that contain the specified string:

`find {{string}} {{path/to/file_or_directory}} /c`

- Display line numbers with the list of lines:

`find {{string}} {{path/to/file_or_directory}} /n`
"
choco-install,https://chocolatey.org/docs/commands-install,,"# choco install

> Install one or more packages with Chocolatey.
> More information: <https://chocolatey.org/docs/commands-install>.

- Install one or more space-separated packages:

`choco install {{package(s)}}`

- Install packages from a custom configuration file:

`choco install {{path/to/packages.config}}`

- Install a specific ""nuspec"" or ""nupkg"" file:

`choco install {{path/to/file}}`

- Install a specific version of a package:

`choco install {{package}} --version {{version}}`

- Allow installing multiple versions of a package:

`choco install {{package}} --allow-multiple`

- Confirm all prompts automatically:

`choco install {{package}} --yes`

- Specify a custom source to receive packages from:

`choco install {{package}} --source {{source_url|alias}}`

- Provide a username and password for authentication:

`choco install {{package}} --user {{username}} --password {{password}}`
"
ver,https://docs.microsoft.com/en-us/windows-server/administration/windows-commands/ver,,"# ver

> Display the current Windows or MS-DOS version number.
> More information: <https://docs.microsoft.com/en-us/windows-server/administration/windows-commands/ver>.

- Display the current version number:

`ver`
"
tasklist,https://docs.microsoft.com/en-us/windows-server/administration/windows-commands/tasklist,,"# tasklist

> Display a list of currently running processes on a local or remote machine.
> More information: <https://docs.microsoft.com/en-us/windows-server/administration/windows-commands/tasklist>.

- Display currently running processes:

`tasklist`

- Display running processes in a specified output format:

`tasklist /fo {{table|list|csv}}`

- Display running processes using the specified `.exe` or `.dll` file name:

`tasklist /m {{module_pattern}}`

- Display processes running on a remote machine:

`tasklist /s {{remote_name}} /u {{username}} /p {{password}}`

- Display services using each process:

`tasklist /svc`
"
robocopy,https://docs.microsoft.com/en-us/windows-server/administration/windows-commands/robocopy,,"# robocopy

> Robust File and Folder Copy.
> By default files will only be copied if the source and destination have different time stamps or different file sizes.
> More information: <https://docs.microsoft.com/en-us/windows-server/administration/windows-commands/robocopy>.

- Copy all .jpg and .bmp files from one directory to another:

`robocopy {{path/to/source}} {{path/to/destination}} {{*.jpg}} {{*.bmp}}`

- Copy all files and subdirectories, including empty ones:

`robocopy {{path/to/source}} {{path/to/destination}} /E`

- Mirror/Sync a directory, deleting anything not in source and include all attributes and permissions:

`robocopy {{path/to/source}} {{path/to/destination}} /MIR /COPYALL`

- Copy all files and subdirectories, excluding source files that are older than destination files:

`robocopy {{path/to/source}} {{path/to/destination}} /E /XO`

- List all files 50 MBytes or larger in size instead of copying them:

`robocopy {{path/to/source}} {{path/to/destination}} /MIN:52428800 /L`

- Allow resuming if network connection is lost and limit retries to 5 and wait time to 15 sec:

`robocopy {{path/to/source}} {{path/to/destination}} /Z /R:5 /W:15`

- Display detailed usage information:

`robocopy /?`
"
choco-list,https://chocolatey.org/docs/commands-list,,"# choco list

> Display a list of packages with Chocolatey.
> More information: <https://chocolatey.org/docs/commands-list>.

- Display all available packages:

`choco list`

- Display all locally installed packages:

`choco list --local-only`

- Display a list including local programs:

`choco list --include-programs`

- Display only approved packages:

`choco list --approved-only`

- Specify a custom source to display packages from:

`choco list --source {{source_url|alias}}`

- Provide a username and password for authentication:

`choco list --user {{username}} --password {{password}}`
"
whoami,https://docs.microsoft.com/en-us/windows-server/administration/windows-commands/whoami,"
WHOAMI(1)		  BSD General Commands Manual		     WHOAMI(1)

NAME
     whoami -- display effective user id

SYNOPSIS
     whoami

DESCRIPTION
     The whoami utility has been obsoleted by the id(1) utility, and is equiv-
     alent to ``id -un''.  The command ``id -p'' is suggested for normal
     interactive use.

     The whoami utility displays your effective user ID as a name.

EXIT STATUS
     The whoami utility exits 0 on success, and >0 if an error occurs.

SEE ALSO
     id(1)

BSD				 June 6, 1993				   BSD
","# whoami

> Display details about the current user.
> More information: <https://docs.microsoft.com/en-us/windows-server/administration/windows-commands/whoami>.

- Display the username of the current user:

`whoami`

- Display the groups that the current user is a member of:

`whoami /groups`

- Display the privileges of the current user:

`whoami /priv`

- Display the user principal name (UPN) of the current user:

`whoami /upn`

- Display the logon id of the current user:

`whoami /logonid`
"
more,https://docs.microsoft.com/en-us/windows-server/administration/windows-commands/more,"LESS(1) 							       LESS(1)



NAME
       less - opposite of more

SYNOPSIS
       less -?
       less --help
       less -V
       less --version
       less [-[+]aABcCdeEfFgGiIJKLmMnNqQrRsSuUVwWX~]
	    [-b space] [-h lines] [-j line] [-k keyfile]
	    [-{oO} logfile] [-p pattern] [-P prompt] [-t tag]
	    [-T tagsfile] [-x tab,...] [-y lines] [-[z] lines]
	    [-# shift] [+[+]cmd] [--] [filename]...
       (See  the  OPTIONS section for alternate option syntax with long option
       names.)


DESCRIPTION
       Less is a program similar to more (1), but which allows backward  move-
       ment in the file as well as forward movement.  Also, less does not have
       to read the entire input file before  starting,	so  with  large  input
       files  it  starts  up  faster than text editors like vi (1).  Less uses
       termcap (or terminfo on some systems), so it can run on	a  variety  of
       terminals.   There is even limited support for hardcopy terminals.  (On
       a hardcopy terminal, lines which should be printed at the  top  of  the
       screen are prefixed with a caret.)

       Commands  are based on both more and vi.  Commands may be preceded by a
       decimal number, called N in the descriptions below.  The number is used
       by some commands, as indicated.


COMMANDS
       In  the following descriptions, ^X means control-X.  ESC stands for the
       ESCAPE  key;  for  example  ESC-v  means  the  two  character  sequence
       ""ESCAPE"", then ""v"".

       h or H Help:  display  a  summary of these commands.  If you forget all
	      the other commands, remember this one.

       SPACE or ^V or f or ^F
	      Scroll forward N	lines,	default  one  window  (see  option  -z
	      below).	If  N  is  more  than  the screen size, only the final
	      screenful is displayed.  Warning: some systems use ^V as a  spe-
	      cial literalization character.

       z      Like  SPACE,  but  if  N is specified, it becomes the new window
	      size.

       ESC-SPACE
	      Like SPACE, but scrolls a full screenful,  even  if  it  reaches
	      end-of-file in the process.

       ENTER or RETURN or ^N or e or ^E or j or ^J
	      Scroll  forward N lines, default 1.  The entire N lines are dis-
	      played, even if N is more than the screen size.

       d or ^D
	      Scroll forward N lines, default one half of the screen size.  If
	      N  is specified, it becomes the new default for subsequent d and
	      u commands.

       b or ^B or ESC-v
	      Scroll backward N lines,	default  one  window  (see  option  -z
	      below).	If  N  is  more  than  the screen size, only the final
	      screenful is displayed.

       w      Like ESC-v, but if N is specified, it  becomes  the  new	window
	      size.

       y or ^Y or ^P or k or ^K
	      Scroll backward N lines, default 1.  The entire N lines are dis-
	      played, even if N is more than the screen size.	Warning:  some
	      systems use ^Y as a special job control character.

       u or ^U
	      Scroll  backward	N  lines, default one half of the screen size.
	      If N is specified, it becomes the new default for  subsequent  d
	      and u commands.

       J      Like j, but continues to scroll beyond the end of the file.

       K or Y Like  k,	but  continues	to  scroll beyond the beginning of the
	      file.

       ESC-) or RIGHTARROW
	      Scroll horizontally right N characters, default half the	screen
	      width  (see  the	-#  option).   If  a number N is specified, it
	      becomes the default for future  RIGHTARROW  and  LEFTARROW  com-
	      mands.   While  the  text  is scrolled, it acts as though the -S
	      option (chop lines) were in effect.

       ESC-( or LEFTARROW
	      Scroll horizontally left N characters, default half  the	screen
	      width  (see  the	-#  option).   If  a number N is specified, it
	      becomes the default for future  RIGHTARROW  and  LEFTARROW  com-
	      mands.

       ESC-} or ^RIGHTARROW
	      Scroll  horizontally  right  to show the end of the longest dis-
	      played line.

       ESC-{ or ^LEFTARROW
	      Scroll horizontally left back to the first column.

       r or ^R or ^L
	      Repaint the screen.

       R      Repaint the screen, discarding any buffered  input.   Useful  if
	      the file is changing while it is being viewed.

       F      Scroll  forward, and keep trying to read when the end of file is
	      reached.	Normally this command would be used  when  already  at
	      the  end of the file.  It is a way to monitor the tail of a file
	      which is growing while it is being  viewed.   (The  behavior  is
	      similar to the ""tail -f"" command.)

       ESC-F  Like  F,	but  as soon as a line is found which matches the last
	      search pattern, the terminal bell is rung and forward  scrolling
	      stops.

       g or < or ESC-<
	      Go to line N in the file, default 1 (beginning of file).	(Warn-
	      ing: this may be slow if N is large.)

       G or > or ESC->
	      Go to line N in the file, default the end of the	file.	(Warn-
	      ing:  this  may  be slow if N is large, or if N is not specified
	      and standard input, rather than a file, is being read.)

       ESC-G  Same as G, except if no number N is specified and the  input  is
	      standard	input,	goes  to  the  last  line  which  is currently
	      buffered.

       p or % Go to a position N percent into the file.  N should be between 0
	      and 100, and may contain a decimal point.

       P      Go to the line containing byte offset N in the file.

       {      If a left curly bracket appears in the top line displayed on the
	      screen, the { command  will  go  to  the	matching  right  curly
	      bracket.	 The matching right curly bracket is positioned on the
	      bottom line of the screen.  If there is more than one left curly
	      bracket  on  the top line, a number N may be used to specify the
	      N-th bracket on the line.

       }      If a right curly bracket appears in the bottom line displayed on
	      the  screen,  the  }  command will go to the matching left curly
	      bracket.	The matching left curly bracket is positioned  on  the
	      top  line  of the screen.  If there is more than one right curly
	      bracket on the top line, a number N may be used to  specify  the
	      N-th bracket on the line.

       (      Like {, but applies to parentheses rather than curly brackets.

       )      Like }, but applies to parentheses rather than curly brackets.

       [      Like  {, but applies to square brackets rather than curly brack-
	      ets.

       ]      Like }, but applies to square brackets rather than curly	brack-
	      ets.

       ESC-^F Followed	by two characters, acts like {, but uses the two char-
	      acters as open and close brackets, respectively.	 For  example,
	      ""ESC  ^F < >"" could be used to go forward to the > which matches
	      the < in the top displayed line.

       ESC-^B Followed by two characters, acts like }, but uses the two  char-
	      acters  as  open and close brackets, respectively.  For example,
	      ""ESC ^B < >"" could be used to go backward to the < which matches
	      the > in the bottom displayed line.

       m      Followed	by  any  lowercase  letter, marks the current position
	      with that letter.

       '      (Single quote.)  Followed by any lowercase  letter,  returns  to
	      the position which was previously marked with that letter.  Fol-
	      lowed by another single quote, returns to the position at  which
	      the last ""large"" movement command was executed.  Followed by a ^
	      or $, jumps to the beginning or end of  the  file  respectively.
	      Marks  are  preserved when a new file is examined, so the ' com-
	      mand can be used to switch between input files.

       ^X^X   Same as single quote.

       /pattern
	      Search forward in the file for the N-th line containing the pat-
	      tern.  N defaults to 1.  The pattern is a regular expression, as
	      recognized by the regular expression library  supplied  by  your
	      system.	The search starts at the first line displayed (but see
	      the -a and -j options, which change this).

	      Certain characters are special if entered at  the  beginning  of
	      the  pattern;  they modify the type of search rather than become
	      part of the pattern:

	      ^N or !
		     Search for lines which do NOT match the pattern.

	      ^E or *
		     Search multiple files.  That is, if  the  search  reaches
		     the  END of the current file without finding a match, the
		     search continues in the next file	in  the  command  line
		     list.

	      ^F or @
		     Begin  the  search at the first line of the FIRST file in
		     the command line list, regardless of  what  is  currently
		     displayed	on  the screen or the settings of the -a or -j
		     options.

	      ^K     Highlight any text which matches the pattern on the  cur-
		     rent screen, but don't move to the first match (KEEP cur-
		     rent position).

	      ^R     Don't interpret regular expression  metacharacters;  that
		     is, do a simple textual comparison.

       ?pattern
	      Search  backward	in  the  file for the N-th line containing the
	      pattern.	The search starts at the last line displayed (but  see
	      the -a and -j options, which change this).

	      Certain characters are special as in the / command:

	      ^N or !
		     Search for lines which do NOT match the pattern.

	      ^E or *
		     Search  multiple  files.	That is, if the search reaches
		     the beginning of  the  current  file  without  finding  a
		     match,  the  search continues in the previous file in the
		     command line list.

	      ^F or @
		     Begin the search at the last line of the last file in the
		     command  line  list, regardless of what is currently dis-
		     played on the screen or the settings  of  the  -a	or  -j
		     options.

	      ^K     As in forward searches.

	      ^R     As in forward searches.

       ESC-/pattern
	      Same as ""/*"".

       ESC-?pattern
	      Same as ""?*"".

       n      Repeat  previous	search, for N-th line containing the last pat-
	      tern.  If the previous search was modified by ^N, the search  is
	      made  for the N-th line NOT containing the pattern.  If the pre-
	      vious search was modified by ^E, the  search  continues  in  the
	      next  (or  previous)  file if not satisfied in the current file.
	      If the previous search was modified by ^R, the  search  is  done
	      without  using  regular  expressions.  There is no effect if the
	      previous search was modified by ^F or ^K.

       N      Repeat previous search, but in the reverse direction.

       ESC-n  Repeat previous  search,	but  crossing  file  boundaries.   The
	      effect is as if the previous search were modified by *.

       ESC-N  Repeat  previous search, but in the reverse direction and cross-
	      ing file boundaries.

       ESC-u  Undo search highlighting.   Turn	off  highlighting  of  strings
	      matching the current search pattern.  If highlighting is already
	      off because of a previous ESC-u command, turn highlighting  back
	      on.   Any  search  command  will also turn highlighting back on.
	      (Highlighting can also be disabled by toggling the -G option; in
	      that case search commands do not turn highlighting back on.)

       &pattern
	      Display  only  lines which match the pattern; lines which do not
	      match the pattern are not displayed.  If pattern	is  empty  (if
	      you  type  &  immediately  followed  by ENTER), any filtering is
	      turned off, and all lines are displayed.	While filtering is  in
	      effect,  an  ampersand  is  displayed  at  the  beginning of the
	      prompt, as a reminder that some lines in the file may be hidden.

	      Certain characters are special as in the / command:

	      ^N or !
		     Display only lines which do NOT match the pattern.

	      ^R     Don't  interpret  regular expression metacharacters; that
		     is, do a simple textual comparison.

       :e [filename]
	      Examine a new file.  If the filename is missing,	the  ""current""
	      file  (see  the :n and :p commands below) from the list of files
	      in the command line is re-examined.  A percent sign (%)  in  the
	      filename	is  replaced by the name of the current file.  A pound
	      sign (#) is replaced by the  name  of  the  previously  examined
	      file.    However,  two  consecutive  percent  signs  are	simply
	      replaced with a single percent sign.  This allows you to enter a
	      filename	that  contains a percent sign in the name.  Similarly,
	      two consecutive pound signs are replaced	with  a  single  pound
	      sign.   The  filename  is inserted into the command line list of
	      files so that it can be seen by subsequent :n and  :p  commands.
	      If the filename consists of several files, they are all inserted
	      into the list of files and the first one is  examined.   If  the
	      filename contains one or more spaces, the entire filename should
	      be enclosed in double quotes (also see the -"" option).

       ^X^V or E
	      Same as :e.  Warning: some systems use ^V as a special  literal-
	      ization  character.  On such systems, you may not be able to use
	      ^V.

       :n     Examine the next file (from the list of files given in the  com-
	      mand  line).   If a number N is specified, the N-th next file is
	      examined.

       :p     Examine the previous file in the command line list.  If a number
	      N is specified, the N-th previous file is examined.

       :x     Examine  the first file in the command line list.  If a number N
	      is specified, the N-th file in the list is examined.

       :d     Remove the current file from the list of files.

       t      Go to the next tag, if there were more than one matches for  the
	      current tag.  See the -t option for more details about tags.

       T      Go  to the previous tag, if there were more than one matches for
	      the current tag.

       = or ^G or :f
	      Prints some information about the file being  viewed,  including
	      its  name and the line number and byte offset of the bottom line
	      being displayed.	If possible, it also prints the length of  the
	      file,  the  number  of  lines in the file and the percent of the
	      file above the last displayed line.

       -      Followed by one of the command line option letters (see  OPTIONS
	      below),  this will change the setting of that option and print a
	      message describing the new setting.   If	a  ^P  (CONTROL-P)  is
	      entered immediately after the dash, the setting of the option is
	      changed but no message is printed.  If the option letter	has  a
	      numeric  value (such as -b or -h), or a string value (such as -P
	      or -t), a new value may be entered after the option letter.   If
	      no  new  value is entered, a message describing the current set-
	      ting is printed and nothing is changed.

       --     Like the - command, but takes a long option  name  (see  OPTIONS
	      below) rather than a single option letter.  You must press ENTER
	      or RETURN after typing the option name.  A ^P immediately  after
	      the  second dash suppresses printing of a message describing the
	      new setting, as in the - command.

       -+     Followed by one of the command line  option  letters  this  will
	      reset  the  option  to  its  default setting and print a message
	      describing the new setting.  (The ""-+X"" command  does  the  same
	      thing  as  ""-+X""	on  the command line.)	This does not work for
	      string-valued options.

       --+    Like the -+ command, but takes a long option name rather than  a
	      single option letter.

       -!     Followed	by  one  of the command line option letters, this will
	      reset the option to the ""opposite"" of its  default  setting  and
	      print  a message describing the new setting.  This does not work
	      for numeric or string-valued options.

       --!    Like the -! command, but takes a long option name rather than  a
	      single option letter.

       _      (Underscore.)   Followed	by one of the command line option let-
	      ters, this will print a message describing the  current  setting
	      of that option.  The setting of the option is not changed.

       __     (Double underscore.)  Like the _ (underscore) command, but takes
	      a long option name rather than a single option letter.  You must
	      press ENTER or RETURN after typing the option name.

       +cmd   Causes  the specified cmd to be executed each time a new file is
	      examined.  For example, +G causes less to initially display each
	      file starting at the end rather than the beginning.

       V      Prints the version number of less being run.

       q or Q or :q or :Q or ZZ
	      Exits less.

       The  following four commands may or may not be valid, depending on your
       particular installation.


       v      Invokes an editor to edit the current file  being  viewed.   The
	      editor is taken from the environment variable VISUAL if defined,
	      or EDITOR if VISUAL is not defined, or defaults to ""vi"" if  nei-
	      ther  VISUAL  nor EDITOR is defined.  See also the discussion of
	      LESSEDIT under the section on PROMPTS below.

       ! shell-command
	      Invokes a shell to run the shell-command given.  A percent  sign
	      (%)  in the command is replaced by the name of the current file.
	      A pound sign (#) is replaced by the name of the previously exam-
	      ined  file.   ""!!""  repeats the last shell command.  ""!"" with no
	      shell command simply invokes a  shell.   On  Unix  systems,  the
	      shell  is taken from the environment variable SHELL, or defaults
	      to ""sh"".	On MS-DOS and OS/2 systems, the shell  is  the	normal
	      command processor.

       | <m> shell-command
	      <m>  represents  any  mark letter.  Pipes a section of the input
	      file to the given shell command.	The section of the file to  be
	      piped  is  between  the first line on the current screen and the
	      position marked by the letter.  <m> may also be ^ or $ to  indi-
	      cate beginning or end of file respectively.  If <m> is . or new-
	      line, the current screen is piped.

       s filename
	      Save the input to a file.  This only works if  the  input  is  a
	      pipe, not an ordinary file.


OPTIONS
       Command	line options are described below.  Most options may be changed
       while less is running, via the ""-"" command.

       Most options may be given in one of two forms: either a	dash  followed
       by  a  single  letter, or two dashes followed by a long option name.  A
       long option name may be abbreviated as  long  as  the  abbreviation  is
       unambiguous.  For example, --quit-at-eof may be abbreviated --quit, but
       not --qui, since both --quit-at-eof and --quiet begin with --qui.  Some
       long  option names are in uppercase, such as --QUIT-AT-EOF, as distinct
       from --quit-at-eof.  Such option names need only have their first  let-
       ter  capitalized; the remainder of the name may be in either case.  For
       example, --Quit-at-eof is equivalent to --QUIT-AT-EOF.

       Options are also taken from the environment variable ""LESS"".  For exam-
       ple, to avoid typing ""less -options ..."" each time less is invoked, you
       might tell csh:

       setenv LESS ""-options""

       or if you use sh:

       LESS=""-options""; export LESS

       On MS-DOS, you don't need the quotes, but you should replace  any  per-
       cent signs in the options string by double percent signs.

       The  environment variable is parsed before the command line, so command
       line options override the LESS  environment  variable.	If  an	option
       appears	in  the LESS variable, it can be reset to its default value on
       the command line by beginning the command line option with ""-+"".

       Some options like -k or -D require a string to follow the  option  let-
       ter.   The  string  for	that option is considered to end when a dollar
       sign ($) is found.  For example, you can set two -D options  on	MS-DOS
       like this:

       LESS=""Dn9.1$Ds4.1""

       If  the	--use-backslash  option appears earlier in the options, then a
       dollar sign or backslash may be included literally in an option	string
       by preceding it with a backslash.  If the --use-backslash option is not
       in effect, then backslashes are not treated specially, and there is  no
       way to include a dollar sign in the option string.

       -? or --help
	      This  option displays a summary of the commands accepted by less
	      (the same as the h  command).   (Depending  on  how  your  shell
	      interprets  the  question mark, it may be necessary to quote the
	      question mark, thus: ""-\?"".)

       -a or --search-skip-screen
	      By default, forward searches start at the top of	the  displayed
	      screen  and  backwards  searches start at the bottom of the dis-
	      played screen (except for repeated searches invoked by the n  or
	      N  commands,  which  start  after  or  before  the ""target"" line
	      respectively; see the -j option for more about the target line).
	      The  -a  option  causes forward searches to instead start at the
	      bottom of the screen and backward searches to start at  the  top
	      of  the screen, thus skipping all lines displayed on the screen.

       -A or --SEARCH-SKIP-SCREEN
	      Causes all forward searches (not just non-repeated searches)  to
	      start  just  after the target line, and all backward searches to
	      start just before the target line.  Thus, forward searches  will
	      skip part of the displayed screen (from the first line up to and
	      including the target line).  Similarly backwards	searches  will
	      skip the displayed screen from the last line up to and including
	      the target line.	This was the default behavior in less versions
	      prior to 441.

       -bn or --buffers=n
	      Specifies  the  amount  of  buffer  space less will use for each
	      file, in units of kilobytes (1024 bytes).  By  default  64 K  of
	      buffer  space  is used for each file (unless the file is a pipe;
	      see the -B option).  The -b  option  specifies  instead  that  n
	      kilobytes of buffer space should be used for each file.  If n is
	      -1, buffer space is unlimited; that is, the entire file  can  be
	      read into memory.

       -B or --auto-buffers
	      By default, when data is read from a pipe, buffers are allocated
	      automatically as needed.	If a large amount of data is read from
	      the  pipe,  this	can cause a large amount of memory to be allo-
	      cated.  The -B option  disables  this  automatic	allocation  of
	      buffers  for  pipes,  so	that only 64 K (or the amount of space
	      specified by the -b option) is used for the pipe.  Warning:  use
	      of  -B  can  result  in  erroneous  display, since only the most
	      recently viewed part of the piped data is kept  in  memory;  any
	      earlier data is lost.

       -c or --clear-screen
	      Causes  full  screen  repaints  to  be painted from the top line
	      down.  By default, full screen repaints are  done  by  scrolling
	      from the bottom of the screen.

       -C or --CLEAR-SCREEN
	      Same as -c, for compatibility with older versions of less.

       -d or --dumb
	      The -d option suppresses the error message normally displayed if
	      the terminal is dumb; that is, lacks some important  capability,
	      such as the ability to clear the screen or scroll backward.  The
	      -d option does not otherwise change the behavior of  less  on  a
	      dumb terminal.

       -Dxcolor or --color=xcolor
	      [MS-DOS only] Sets the color of the text displayed.  x is a sin-
	      gle character which selects the type  of	text  whose  color  is
	      being  set: n=normal, s=standout, d=bold, u=underlined, k=blink.
	      color is a pair of numbers separated by  a  period.   The  first
	      number  selects  the foreground color and the second selects the
	      background color of the text.  A single number N is the same  as
	      N.M, where M is the normal background color.  x may also be a to
	      toggle strict ANSI sequence rendering (SGR mode).


       -e or --quit-at-eof
	      Causes less to automatically exit the  second  time  it  reaches
	      end-of-file.   By  default, the only way to exit less is via the
	      ""q"" command.

       -E or --QUIT-AT-EOF
	      Causes less to automatically exit the first time it reaches end-
	      of-file.

       -f or --force
	      Forces non-regular files to be opened.  (A non-regular file is a
	      directory or a device special file.)  Also suppresses the  warn-
	      ing message when a binary file is opened.  By default, less will
	      refuse to open non-regular files.  Note that some operating sys-
	      tems will not allow directories to be read, even if -f is set.

       -F or --quit-if-one-screen
	      Causes less to automatically exit if the entire file can be dis-
	      played on the first screen.

       -g or --hilite-search
	      Normally, less will highlight ALL strings which match  the  last
	      search  command.	 The  -g option changes this behavior to high-
	      light only the particular string which was  found  by  the  last
	      search command.  This can cause less to run somewhat faster than
	      the default.

       -G or --HILITE-SEARCH
	      The -G option suppresses all highlighting of  strings  found  by
	      search commands.

       -hn or --max-back-scroll=n
	      Specifies  a  maximum number of lines to scroll backward.  If it
	      is necessary to scroll backward more than n lines, the screen is
	      repainted in a forward direction instead.  (If the terminal does
	      not have the ability to scroll backward, -h0 is implied.)

       -i or --ignore-case
	      Causes searches to ignore case; that is, uppercase and lowercase
	      are  considered identical.  This option is ignored if any upper-
	      case letters appear in the search pattern; in other words, if  a
	      pattern  contains  uppercase  letters, then that search does not
	      ignore case.

       -I or --IGNORE-CASE
	      Like -i, but searches ignore case even if the  pattern  contains
	      uppercase letters.

       -jn or --jump-target=n
	      Specifies  a line on the screen where the ""target"" line is to be
	      positioned.  The target line is the line specified by  any  com-
	      mand  to	search for a pattern, jump to a line number, jump to a
	      file percentage or jump to a tag.  The screen line may be speci-
	      fied  by	a number: the top line on the screen is 1, the next is
	      2, and so on.  The number may be negative to specify a line rel-
	      ative to the bottom of the screen: the bottom line on the screen
	      is -1, the second to the bottom is -2, and so on.   Alternately,
	      the  screen line may be specified as a fraction of the height of
	      the screen, starting with a decimal point: .5 is in  the	middle
	      of  the screen, .3 is three tenths down from the first line, and
	      so on.  If the line is specified as a fraction, the actual  line
	      number  is  recalculated	if  the terminal window is resized, so
	      that the target line remains at the specified  fraction  of  the
	      screen  height.	If any form of the -j option is used, repeated
	      forward searches (invoked with ""n"" or ""N"")  begin  at  the  line
	      immediately   after  the	target	line,  and  repeated  backward
	      searches begin at the target line, unless changed by -a  or  -A.
	      For  example,  if  ""-j4""	is used, the target line is the fourth
	      line on the screen, so forward searches begin at the fifth  line
	      on  the  screen.	However nonrepeated searches (invoked with ""/""
	      or ""?"")  always begin at the start or end of the current	screen
	      respectively.

       -J or --status-column
	      Displays	a  status  column at the left edge of the screen.  The
	      status column shows the lines that matched the  current  search.
	      The  status  column  is  also  used if the -w or -W option is in
	      effect.

       -kfilename or --lesskey-file=filename
	      Causes less to open and interpret the named file	as  a  lesskey
	      (1) file.  Multiple -k options may be specified.	If the LESSKEY
	      or LESSKEY_SYSTEM environment variable is set, or if  a  lesskey
	      file is found in a standard place (see KEY BINDINGS), it is also
	      used as a lesskey file.

       -K or --quit-on-intr
	      Causes less to exit immediately (with status 2) when  an	inter-
	      rupt  character  (usually  ^C) is typed.	Normally, an interrupt
	      character causes less to stop whatever it is doing and return to
	      its  command  prompt.   Note  that  use  of this option makes it
	      impossible to return to the command prompt from the ""F"" command.

       -L or --no-lessopen
	      Ignore  the  LESSOPEN  environment  variable (see the INPUT PRE-
	      PROCESSOR section below).  This option can be  set  from	within
	      less,  but  it will apply only to files opened subsequently, not
	      to the file which is currently open.

       -m or --long-prompt
	      Causes less to prompt verbosely (like more),  with  the  percent
	      into the file.  By default, less prompts with a colon.

       -M or --LONG-PROMPT
	      Causes less to prompt even more verbosely than more.

       -n or --line-numbers
	      Suppresses  line numbers.  The default (to use line numbers) may
	      cause less to run more slowly in some cases, especially  with  a
	      very  large  input  file.   Suppressing line numbers with the -n
	      option will avoid this problem.  Using line numbers  means:  the
	      line number will be displayed in the verbose prompt and in the =
	      command, and the v command will pass the current line number  to
	      the  editor  (see  also  the  discussion	of LESSEDIT in PROMPTS
	      below).

       -N or --LINE-NUMBERS
	      Causes a line number to be displayed at the  beginning  of  each
	      line in the display.

       -ofilename or --log-file=filename
	      Causes  less  to copy its input to the named file as it is being
	      viewed.  This applies only when the input file is a pipe, not an
	      ordinary	file.	If  the file already exists, less will ask for
	      confirmation before overwriting it.

       -Ofilename or --LOG-FILE=filename
	      The -O option is like -o, but it will overwrite an existing file
	      without asking for confirmation.

	      If  no log file has been specified, the -o and -O options can be
	      used from within less to specify a log  file.   Without  a  file
	      name, they will simply report the name of the log file.  The ""s""
	      command is equivalent to specifying -o from within less.

       -ppattern or --pattern=pattern
	      The -p option on the command line is  equivalent	to  specifying
	      +/pattern;  that	is, it tells less to start at the first occur-
	      rence of pattern in the file.

       -Pprompt or --prompt=prompt
	      Provides a way to tailor the three prompt  styles  to  your  own
	      preference.  This option would normally be put in the LESS envi-
	      ronment variable, rather than being typed in with each less com-
	      mand.  Such an option must either be the last option in the LESS
	      variable, or be terminated by a dollar sign.
	       -Ps followed by a string changes the default (short) prompt  to
	      that string.
	       -Pm changes the medium (-m) prompt.
	       -PM changes the long (-M) prompt.
	       -Ph changes the prompt for the help screen.
	       -P= changes the message printed by the = command.
	       -Pw  changes the message printed while waiting for data (in the
	      F command).  All prompt strings consist of a sequence of letters
	      and  special  escape  sequences.	See the section on PROMPTS for
	      more details.

       -q or --quiet or --silent
	      Causes moderately ""quiet"" operation: the terminal  bell  is  not
	      rung if an attempt is made to scroll past the end of the file or
	      before the beginning of the file.  If the terminal has a ""visual
	      bell"",  it  is  used  instead.  The bell will be rung on certain
	      other errors, such as typing an invalid character.  The  default
	      is to ring the terminal bell in all such cases.

       -Q or --QUIET or --SILENT
	      Causes  totally  ""quiet""	operation:  the terminal bell is never
	      rung.

       -r or --raw-control-chars
	      Causes ""raw"" control characters to be displayed.	The default is
	      to  display  control  characters	using  the caret notation; for
	      example, a control-A (octal 001) is displayed as ""^A"".  Warning:
	      when the -r option is used, less cannot keep track of the actual
	      appearance of the screen (since this depends on how  the	screen
	      responds to each type of control character).  Thus, various dis-
	      play problems may result, such as long lines being split in  the
	      wrong place.

       -R or --RAW-CONTROL-CHARS
	      Like  -r,  but  only ANSI ""color"" escape sequences are output in
	      ""raw"" form.  Unlike -r, the screen appearance is maintained cor-
	      rectly  in  most	cases.	 ANSI  ""color""	escape	sequences  are
	      sequences of the form:

		   ESC [ ... m

	      where the ""..."" is zero or more color  specification  characters
	      For  the	purpose  of  keeping  track of screen appearance, ANSI
	      color escape sequences are assumed to not move the cursor.   You
	      can  make less think that characters other than ""m"" can end ANSI
	      color escape  sequences  by  setting  the  environment  variable
	      LESSANSIENDCHARS to the list of characters which can end a color
	      escape sequence.	And you can make less  think  that  characters
	      other  than the standard ones may appear between the ESC and the
	      m by setting the environment variable  LESSANSIMIDCHARS  to  the
	      list of characters which can appear.

       -s or --squeeze-blank-lines
	      Causes  consecutive  blank  lines  to  be squeezed into a single
	      blank line.  This is useful when viewing nroff output.

       -S or --chop-long-lines
	      Causes lines longer than the screen width to be  chopped	(trun-
	      cated) rather than wrapped.  That is, the portion of a long line
	      that does not fit in the screen width is not shown.  The default
	      is  to  wrap  long  lines; that is, display the remainder on the
	      next line.

       -ttag or --tag=tag
	      The -t option, followed immediately by a TAG, will edit the file
	      containing  that tag.  For this to work, tag information must be
	      available; for example, there may  be  a	file  in  the  current
	      directory called ""tags"", which was previously built by ctags (1)
	      or an equivalent command.  If the environment variable LESSGLOB-
	      ALTAGS  is set, it is taken to be the name of a command compati-
	      ble with global (1), and that command is executed  to  find  the
	      tag.  (See http://www.gnu.org/software/global/global.html).  The
	      -t option may also be specified from within less	(using	the  -
	      command)	as a way of examining a new file.  The command "":t"" is
	      equivalent to specifying -t from within less.

       -Ttagsfile or --tag-file=tagsfile
	      Specifies a tags file to be used instead of ""tags"".

       -u or --underline-special
	      Causes backspaces and carriage returns to be treated  as	print-
	      able  characters;  that  is,  they are sent to the terminal when
	      they appear in the input.

       -U or --UNDERLINE-SPECIAL
	      Causes backspaces, tabs and carriage returns to  be  treated  as
	      control  characters;  that  is, they are handled as specified by
	      the -r option.

	      By default, if neither -u nor  -U  is  given,  backspaces  which
	      appear  adjacent	to  an	underscore  character are treated spe-
	      cially: the underlined text is displayed	using  the  terminal's
	      hardware	underlining capability.  Also, backspaces which appear
	      between two identical  characters  are  treated  specially:  the
	      overstruck  text	is printed using the terminal's hardware bold-
	      face capability.	Other backspaces are deleted, along  with  the
	      preceding character.  Carriage returns immediately followed by a
	      newline are deleted.  Other  carriage  returns  are  handled  as
	      specified  by the -r option.  Text which is overstruck or under-
	      lined can be searched for if neither -u nor -U is in effect.

       -V or --version
	      Displays the version number of less.

       -w or --hilite-unread
	      Temporarily highlights the first	""new""  line  after  a  forward
	      movement of a full page.	The first ""new"" line is the line imme-
	      diately following the line  previously  at  the  bottom  of  the
	      screen.  Also highlights the target line after a g or p command.
	      The highlight is removed at the next command which causes  move-
	      ment.   The  entire line is highlighted, unless the -J option is
	      in effect, in which case only the status column is  highlighted.

       -W or --HILITE-UNREAD
	      Like -w, but temporarily highlights the first new line after any
	      forward movement command larger than one line.

       -xn,... or --tabs=n,...
	      Sets tab stops.  If only one n is specified, tab stops  are  set
	      at  multiples  of n.  If multiple values separated by commas are
	      specified, tab stops are set at those positions, and  then  con-
	      tinue  with  the	same  spacing  as  the last two.  For example,
	      -x9,17 will set tabs at positions  9,  17,  25,  33,  etc.   The
	      default for n is 8.

       -X or --no-init
	      Disables sending the termcap initialization and deinitialization
	      strings to the terminal.	This is  sometimes  desirable  if  the
	      deinitialization	string does something unnecessary, like clear-
	      ing the screen.

       -yn or --max-forw-scroll=n
	      Specifies a maximum number of lines to scroll forward.  If it is
	      necessary  to  scroll  forward  more than n lines, the screen is
	      repainted instead.  The -c or -C option may be used  to  repaint
	      from  the top of the screen if desired.  By default, any forward
	      movement causes scrolling.

       -[z]n or --window=n
	      Changes the default scrolling  window  size  to  n  lines.   The
	      default is one screenful.  The z and w commands can also be used
	      to change the window size.  The ""z"" may be omitted for  compati-
	      bility with some versions of more.  If the number n is negative,
	      it indicates n lines less than the  current  screen  size.   For
	      example, if the screen is 24 lines, -z-4 sets the scrolling win-
	      dow to 20 lines.	If the screen is  resized  to  40  lines,  the
	      scrolling window automatically changes to 36 lines.

       -""cc or --quotes=cc
	      Changes  the  filename quoting character.  This may be necessary
	      if you are trying to name a file which contains both spaces  and
	      quote  characters.  Followed by a single character, this changes
	      the quote character to that character.  Filenames  containing  a
	      space should then be surrounded by that character rather than by
	      double quotes.  Followed by two  characters,  changes  the  open
	      quote  to the first character, and the close quote to the second
	      character.  Filenames containing a space should then be preceded
	      by  the  open  quote  character  and followed by the close quote
	      character.  Note	that  even  after  the	quote  characters  are
	      changed,	this  option  remains  -"" (a dash followed by a double
	      quote).

       -~ or --tilde
	      Normally lines after end of file are displayed as a single tilde
	      (~).  This option causes lines after end of file to be displayed
	      as blank lines.

       -# or --shift
	      Specifies the default number of positions to scroll horizontally
	      in  the RIGHTARROW and LEFTARROW commands.  If the number speci-
	      fied is zero, it sets the default number	of  positions  to  one
	      half of the screen width.  Alternately, the number may be speci-
	      fied as a fraction of the width of the screen, starting  with  a
	      decimal  point:  .5  is  half  of  the screen width, .3 is three
	      tenths of the screen width, and so on.  If the number is	speci-
	      fied  as	a  fraction,  the actual number of scroll positions is
	      recalculated if the terminal window  is  resized,  so  that  the
	      actual  scroll  remains  at the specified fraction of the screen
	      width.

       --follow-name
	      Normally, if the input file is renamed while  an	F  command  is
	      executing,  less	will  continue	to display the contents of the
	      original file despite its  name  change.	 If  --follow-name  is
	      specified, during an F command less will periodically attempt to
	      reopen the file by name.	If the reopen succeeds and the file is
	      a  different file from the original (which means that a new file
	      has been created	with  the  same  name  as  the	original  (now
	      renamed) file), less will display the contents of that new file.

       --no-keypad
	      Disables sending the keypad initialization and  deinitialization
	      strings to the terminal.	This is sometimes useful if the keypad
	      strings make the numeric keypad behave in an undesirable manner.

       --use-backslash
	      This  option changes the interpretations of options which follow
	      this one.  After the --use-backslash option, any backslash in an
	      option  string  is  removed and the following character is taken
	      literally.  This allows a dollar sign to be included  in	option
	      strings.

       --     A  command  line	argument of ""--"" marks the end of option argu-
	      ments.  Any arguments following this are	interpreted  as  file-
	      names.  This can be useful when viewing a file whose name begins
	      with a ""-"" or ""+"".

       +      If a command line option begins with +, the  remainder  of  that
	      option  is taken to be an initial command to less.  For example,
	      +G tells less to start at the end of the file  rather  than  the
	      beginning,  and  +/xyz tells it to start at the first occurrence
	      of ""xyz"" in the file.  As a special case,  +<number>  acts  like
	      +<number>g; that is, it starts the display at the specified line
	      number (however, see the caveat under the  ""g""  command  above).
	      If  the  option  starts  with ++, the initial command applies to
	      every file being viewed, not just the first one.	The +  command
	      described previously may also be used to set (or change) an ini-
	      tial command for every file.


LINE EDITING
       When entering command line at the bottom of the screen (for example,  a
       filename for the :e command, or the pattern for a search command), cer-
       tain keys can be used to manipulate the command	line.	Most  commands
       have  an alternate form in [ brackets ] which can be used if a key does
       not exist on a particular keyboard.  (Note  that  the  forms  beginning
       with  ESC do not work in some MS-DOS and Windows systems because ESC is
       the line erase character.)  Any of these special keys  may  be  entered
       literally  by  preceding  it with the ""literal"" character, either ^V or
       ^A.  A backslash itself may also be entered literally by  entering  two
       backslashes.

       LEFTARROW [ ESC-h ]
	      Move the cursor one space to the left.

       RIGHTARROW [ ESC-l ]
	      Move the cursor one space to the right.

       ^LEFTARROW [ ESC-b or ESC-LEFTARROW ]
	      (That  is, CONTROL and LEFTARROW simultaneously.)  Move the cur-
	      sor one word to the left.

       ^RIGHTARROW [ ESC-w or ESC-RIGHTARROW ]
	      (That is, CONTROL and RIGHTARROW simultaneously.)  Move the cur-
	      sor one word to the right.

       HOME [ ESC-0 ]
	      Move the cursor to the beginning of the line.

       END [ ESC-$ ]
	      Move the cursor to the end of the line.

       BACKSPACE
	      Delete  the  character  to the left of the cursor, or cancel the
	      command if the command line is empty.

       DELETE or [ ESC-x ]
	      Delete the character under the cursor.

       ^BACKSPACE [ ESC-BACKSPACE ]
	      (That is, CONTROL and  BACKSPACE	simultaneously.)   Delete  the
	      word to the left of the cursor.

       ^DELETE [ ESC-X or ESC-DELETE ]
	      (That  is,  CONTROL and DELETE simultaneously.)  Delete the word
	      under the cursor.

       UPARROW [ ESC-k ]
	      Retrieve the previous command line.  If  you  first  enter  some
	      text  and then press UPARROW, it will retrieve the previous com-
	      mand which begins with that text.

       DOWNARROW [ ESC-j ]
	      Retrieve the next command line.  If you first  enter  some  text
	      and  then  press	DOWNARROW,  it	will retrieve the next command
	      which begins with that text.

       TAB    Complete the partial filename to the left of the cursor.	If  it
	      matches  more than one filename, the first match is entered into
	      the command line.  Repeated  TABs  will  cycle  thru  the  other
	      matching filenames.  If the completed filename is a directory, a
	      ""/"" is appended to the filename.	(On MS-DOS systems, a  ""\""  is
	      appended.)   The	environment variable LESSSEPARATOR can be used
	      to specify a different character to append to a directory  name.

       BACKTAB [ ESC-TAB ]
	      Like, TAB, but cycles in the reverse direction thru the matching
	      filenames.

       ^L     Complete the partial filename to the left of the cursor.	If  it
	      matches more than one filename, all matches are entered into the
	      command line (if they fit).

       ^U (Unix and OS/2) or ESC (MS-DOS)
	      Delete the entire command line, or cancel  the  command  if  the
	      command line is empty.  If you have changed your line-kill char-
	      acter in Unix to something other than ^U, that character is used
	      instead of ^U.

       ^G     Delete the entire command line and return to the main prompt.


KEY BINDINGS
       You  may define your own less commands by using the program lesskey (1)
       to create a lesskey file.  This file specifies a set  of  command  keys
       and  an	action	associated with each key.  You may also use lesskey to
       change the line-editing keys (see LINE EDITING), and to set environment
       variables.   If the environment variable LESSKEY is set, less uses that
       as the name of the lesskey file.  Otherwise, less looks in  a  standard
       place  for  the lesskey file: On Unix systems, less looks for a lesskey
       file called ""$HOME/.less"".  On MS-DOS and Windows systems,  less  looks
       for  a lesskey file called ""$HOME/_less"", and if it is not found there,
       then looks for a lesskey file called ""_less"" in any directory specified
       in  the	PATH  environment variable.  On OS/2 systems, less looks for a
       lesskey file called ""$HOME/less.ini"", and if  it  is  not  found,  then
       looks  for  a lesskey file called ""less.ini"" in any directory specified
       in the INIT environment variable, and if it not found there, then looks
       for  a lesskey file called ""less.ini"" in any directory specified in the
       PATH environment variable.   See  the  lesskey  manual  page  for  more
       details.

       A  system-wide lesskey file may also be set up to provide key bindings.
       If a key is defined in both a local lesskey file and in the system-wide
       file,  key bindings in the local file take precedence over those in the
       system-wide file.  If the environment variable LESSKEY_SYSTEM  is  set,
       less uses that as the name of the system-wide lesskey file.  Otherwise,
       less looks in a standard place for the  system-wide  lesskey  file:  On
       Unix  systems,  the system-wide lesskey file is /usr/local/etc/sysless.
       (However, if less was built with a  different  sysconf  directory  than
       /usr/local/etc, that directory is where the sysless file is found.)  On
       MS-DOS and Windows systems, the system-wide lesskey  file  is  c:\_sys-
       less.  On OS/2 systems, the system-wide lesskey file is c:\sysless.ini.


INPUT PREPROCESSOR
       You may define an ""input preprocessor"" for less.  Before less  opens  a
       file, it first gives your input preprocessor a chance to modify the way
       the contents of the file are displayed.	An input preprocessor is  sim-
       ply  an executable program (or shell script), which writes the contents
       of the file to a different file, called the replacement file.  The con-
       tents  of  the replacement file are then displayed in place of the con-
       tents of the original file.  However, it will appear to the user as  if
       the  original  file  is opened; that is, less will display the original
       filename as the name of the current file.

       An input preprocessor receives one command line argument, the  original
       filename,  as  entered  by  the user.  It should create the replacement
       file, and when finished, print the name of the replacement file to  its
       standard  output.  If the input preprocessor does not output a replace-
       ment filename, less uses the original file, as normal.  The input  pre-
       processor  is  not  called  when  viewing standard input.  To set up an
       input preprocessor, set the LESSOPEN environment variable to a  command
       line  which  will  invoke  your	input preprocessor.  This command line
       should include one  occurrence  of  the	string	""%s"",  which  will  be
       replaced  by  the  filename  when  the  input  preprocessor  command is
       invoked.

       When less closes a file opened in such a way, it will call another pro-
       gram,  called  the  input  postprocessor, which may perform any desired
       clean-up action (such as  deleting  the	replacement  file  created  by
       LESSOPEN).  This program receives two command line arguments, the orig-
       inal filename as entered by the user, and the name of  the  replacement
       file.   To set up an input postprocessor, set the LESSCLOSE environment
       variable to a command line which will invoke your input	postprocessor.
       It  may	include  two  occurrences  of  the  string  ""%s""; the first is
       replaced with the original name of the file and	the  second  with  the
       name of the replacement file, which was output by LESSOPEN.

       For  example, on many Unix systems, these two scripts will allow you to
       keep files in compressed format, but still let less view them directly:

       lessopen.sh:
	    #! /bin/sh
	    case ""$1"" in
	    *.Z) uncompress -c $1  >/tmp/less.$$  2>/dev/null
		 if [ -s /tmp/less.$$ ]; then
		      echo /tmp/less.$$
		 else
		      rm -f /tmp/less.$$
		 fi
		 ;;
	    esac

       lessclose.sh:
	    #! /bin/sh
	    rm $2

       To  use these scripts, put them both where they can be executed and set
       LESSOPEN=""lessopen.sh %s"",  and	LESSCLOSE=""lessclose.sh %s %s"".   More
       complex	LESSOPEN  and LESSCLOSE scripts may be written to accept other
       types of compressed files, and so on.

       It is also possible to set up an input preprocessor to  pipe  the  file
       data  directly to less, rather than putting the data into a replacement
       file.  This avoids the need to decompress the entire file before start-
       ing to view it.	An input preprocessor that works this way is called an
       input pipe.  An input pipe, instead of writing the name of  a  replace-
       ment  file  on  its  standard output, writes the entire contents of the
       replacement file on its standard output.  If the input  pipe  does  not
       write  any characters on its standard output, then there is no replace-
       ment file and less uses the original file, as normal.  To use an  input
       pipe,  make  the first character in the LESSOPEN environment variable a
       vertical bar (|) to signify that the input  preprocessor  is  an  input
       pipe.

       For  example, on many Unix systems, this script will work like the pre-
       vious example scripts:

       lesspipe.sh:
	    #! /bin/sh
	    case ""$1"" in
	    *.Z) uncompress -c $1  2>/dev/null
	    *)	 exit 1
		 ;;
	    esac
	    exit $?

       To  use	this  script,  put  it	where  it  can	be  executed  and  set
       LESSOPEN=""|lesspipe.sh %s"".

       Note  that  a  preprocessor  cannot output an empty file, since that is
       interpreted as meaning there is no replacement, and the	original  file
       is used.  To avoid this, if LESSOPEN starts with two vertical bars, the
       exit status of the script becomes meaningful.  If the  exit  status  is
       zero,  the  output  is  considered  to  be replacement text, even if it
       empty.  If the exit status is nonzero, any output is  ignored  and  the
       original  file  is  used.   For compatibility with previous versions of
       less, if LESSOPEN starts with only one vertical bar, the exit status of
       the preprocessor is ignored.

       When  an input pipe is used, a LESSCLOSE postprocessor can be used, but
       it is usually not necessary since there is no replacement file to clean
       up.   In  this  case, the replacement file name passed to the LESSCLOSE
       postprocessor is ""-"".

       For compatibility with previous versions of less, the input  preproces-
       sor or pipe is not used if less is viewing standard input.  However, if
       the first character of LESSOPEN is a dash (-), the  input  preprocessor
       is  used  on  standard input as well as other files.  In this case, the
       dash is not considered to be part  of  the  preprocessor  command.   If
       standard input is being viewed, the input preprocessor is passed a file
       name consisting of a single dash.  Similarly, if the first two  charac-
       ters  of  LESSOPEN  are vertical bar and dash (|-) or two vertical bars
       and a dash (||-), the input pipe is used on standard input as  well  as
       other files.  Again, in this case the dash is not considered to be part
       of the input pipe command.


NATIONAL CHARACTER SETS
       There are three types of characters in the input file:

       normal characters
	      can be displayed directly to the screen.

       control characters
	      should not be displayed directly, but are expected to  be  found
	      in ordinary text files (such as backspace and tab).

       binary characters
	      should  not  be  displayed  directly  and are not expected to be
	      found in text files.

       A ""character set"" is simply a description of which characters are to be
       considered  normal,  control,  and binary.  The LESSCHARSET environment
       variable may be used to select a character set.	 Possible  values  for
       LESSCHARSET are:

       ascii  BS,  TAB, NL, CR, and formfeed are control characters, all chars
	      with values between 32 and 126 are normal, and  all  others  are
	      binary.

       iso8859
	      Selects  an  ISO 8859 character set.  This is the same as ASCII,
	      except characters between 160 and  255  are  treated  as	normal
	      characters.

       latin1 Same as iso8859.

       latin9 Same as iso8859.

       dos    Selects a character set appropriate for MS-DOS.

       ebcdic Selects an EBCDIC character set.

       IBM-1047
	      Selects  an  EBCDIC  character set used by OS/390 Unix Services.
	      This is the EBCDIC analogue of latin1.  You get similar  results
	      by setting either LESSCHARSET=IBM-1047 or LC_CTYPE=en_US in your
	      environment.

       koi8-r Selects a Russian character set.

       next   Selects a character set appropriate for NeXT computers.

       utf-8  Selects the UTF-8 encoding  of  the  ISO	10646  character  set.
	      UTF-8  is  special  in that it supports multi-byte characters in
	      the input file.  It is the  only	character  set	that  supports
	      multi-byte characters.

       windows
	      Selects  a  character  set appropriate for Microsoft Windows (cp
	      1251).

       In rare cases, it may be desired to tailor less to use a character  set
       other  than the ones definable by LESSCHARSET.  In this case, the envi-
       ronment variable LESSCHARDEF can be used to define a character set.  It
       should be set to a string where each character in the string represents
       one character in the character set.  The character ""."" is  used	for  a
       normal  character, ""c"" for control, and ""b"" for binary.	A decimal num-
       ber may be used for repetition.	 For  example,	""bccc4b.""  would  mean
       character  0  is  binary,  1,  2  and  3 are control, 4, 5, 6 and 7 are
       binary, and 8 is normal.  All characters after the last are taken to be
       the  same  as  the  last,  so characters 9 through 255 would be normal.
       (This is an example, and does not necessarily represent any real  char-
       acter set.)

       This  table  shows the value of LESSCHARDEF which is equivalent to each
       of the possible values for LESSCHARSET:

	    ascii     8bcccbcc18b95.b
	    dos       8bcccbcc12bc5b95.b.
	    ebcdic    5bc6bcc7bcc41b.9b7.9b5.b..8b6.10b6.b9.7b
		      9.8b8.17b3.3b9.7b9.8b8.6b10.b.b.b.
	    IBM-1047  4cbcbc3b9cbccbccbb4c6bcc5b3cbbc4bc4bccbc
		      191.b
	    iso8859   8bcccbcc18b95.33b.
	    koi8-r    8bcccbcc18b95.b128.
	    latin1    8bcccbcc18b95.33b.
	    next      8bcccbcc18b95.bb125.bb

       If neither LESSCHARSET nor LESSCHARDEF is set, but any of  the  strings
       ""UTF-8"",  ""UTF8"", ""utf-8"" or ""utf8"" is found in the LC_ALL, LC_CTYPE or
       LANG environment variables, then the default character set is utf-8.

       If that string is not found, but your  system  supports	the  setlocale
       interface,  less  will  use  setlocale  to determine the character set.
       setlocale is controlled by setting the  LANG  or  LC_CTYPE  environment
       variables.

       Finally,  if the setlocale interface is also not available, the default
       character set is latin1.

       Control and  binary  characters	are  displayed	in  standout  (reverse
       video).	Each such character is displayed in caret notation if possible
       (e.g. ^A for control-A).  Caret notation is used only if inverting  the
       0100 bit results in a normal printable character.  Otherwise, the char-
       acter is displayed as a hex number in angle brackets.  This format  can
       be  changed by setting the LESSBINFMT environment variable.  LESSBINFMT
       may begin with a ""*"" and one character to select the display attribute:
       ""*k""  is  blinking, ""*d"" is bold, ""*u"" is underlined, ""*s"" is standout,
       and ""*n"" is normal.  If LESSBINFMT does not begin with  a  ""*"",	normal
       attribute  is  assumed.	 The remainder of LESSBINFMT is a string which
       may include one printf-style escape sequence (a % followed by x, X,  o,
       d,  etc.).   For  example, if LESSBINFMT is ""*u[%x]"", binary characters
       are displayed in underlined hexadecimal surrounded  by  brackets.   The
       default	if  no	LESSBINFMT  is	specified is ""*s<%02X>"".  Warning: the
       result of expanding the character via LESSBINFMT must be less  than  31
       characters.

       When the character set is utf-8, the LESSUTFBINFMT environment variable
       acts similarly to LESSBINFMT but it applies to Unicode code points that
       were  successfully  decoded but are unsuitable for display (e.g., unas-
       signed code points).  Its default  value  is  ""<U+%04lX>"".   Note  that
       LESSUTFBINFMT  and  LESSBINFMT  share  their  display attribute setting
       (""*x"") so specifying one will affect both; LESSUTFBINFMT is read  after
       LESSBINFMT  so  its  setting,  if any, will have priority.  Problematic
       octets in a UTF-8 file (octets of a truncated  sequence,  octets  of  a
       complete  but  non-shortest  form  sequence,  illegal octets, and stray
       trailing octets) are displayed individually using LESSBINFMT so	as  to
       facilitate diagnostic of how the UTF-8 file is ill-formed.


PROMPTS
       The  -P option allows you to tailor the prompt to your preference.  The
       string given to the -P option replaces  the  specified  prompt  string.
       Certain characters in the string are interpreted specially.  The prompt
       mechanism is rather complicated to provide flexibility, but  the  ordi-
       nary  user need not understand the details of constructing personalized
       prompt strings.

       A percent sign followed by a single character is expanded according  to
       what the following character is:

       %bX    Replaced	by the byte offset into the current input file.  The b
	      is followed by a single character (shown as X above) which spec-
	      ifies  the line whose byte offset is to be used.	If the charac-
	      ter is a ""t"", the byte offset of the top line in the display  is
	      used, an ""m"" means use the middle line, a ""b"" means use the bot-
	      tom line, a ""B"" means use the line just after the  bottom  line,
	      and  a  ""j""  means use the ""target"" line, as specified by the -j
	      option.

       %B     Replaced by the size of the current input file.

       %c     Replaced by the column number of the text appearing in the first
	      column of the screen.

       %dX    Replaced	by  the  page number of a line in the input file.  The
	      line to be used is determined by the X, as with the %b option.

       %D     Replaced by the number of pages in the input  file,  or  equiva-
	      lently, the page number of the last line in the input file.

       %E     Replaced	by the name of the editor (from the VISUAL environment
	      variable, or the EDITOR environment variable if  VISUAL  is  not
	      defined).  See the discussion of the LESSEDIT feature below.

       %f     Replaced by the name of the current input file.

       %F     Replaced	by the last component of the name of the current input
	      file.

       %i     Replaced by the index of the current file in the list  of  input
	      files.

       %lX    Replaced	by  the  line number of a line in the input file.  The
	      line to be used is determined by the X, as with the %b option.

       %L     Replaced by the line number of the last line in the input  file.

       %m     Replaced by the total number of input files.

       %pX    Replaced	by  the  percent into the current input file, based on
	      byte offsets.  The line used is determined by the X as with  the
	      %b option.

       %PX    Replaced	by  the  percent into the current input file, based on
	      line numbers.  The line used is determined by the X as with  the
	      %b option.

       %s     Same as %B.

       %t     Causes  any  trailing spaces to be removed.  Usually used at the
	      end of the string, but may appear anywhere.

       %T     Normally expands to the word ""file"".  However if	viewing  files
	      via  a  tags  list  using  the -t option, it expands to the word
	      ""tag"".

       %x     Replaced by the name of the next input file in the list.

       If any item is unknown (for example, the file size if input is a pipe),
       a question mark is printed instead.

       The  format  of	the  prompt string can be changed depending on certain
       conditions.  A question mark followed by a single character  acts  like
       an  ""IF"":  depending  on the following character, a condition is evalu-
       ated.  If the condition is true, any characters following the  question
       mark  and  condition  character,  up  to  a period, are included in the
       prompt.	If the condition is false, such characters are	not  included.
       A  colon appearing between the question mark and the period can be used
       to establish an ""ELSE"": any characters between the colon and the period
       are  included  in  the string if and only if the IF condition is false.
       Condition characters (which follow a question mark) may be:

       ?a     True if any characters have been included in the prompt so  far.

       ?bX    True if the byte offset of the specified line is known.

       ?B     True if the size of current input file is known.

       ?c     True if the text is horizontally shifted (%c is not zero).

       ?dX    True if the page number of the specified line is known.

       ?e     True if at end-of-file.

       ?f     True  if	there is an input filename (that is, if input is not a
	      pipe).

       ?lX    True if the line number of the specified line is known.

       ?L     True if the line number of the last line in the file is known.

       ?m     True if there is more than one input file.

       ?n     True if this is the first prompt in a new input file.

       ?pX    True if the percent into the current input file, based  on  byte
	      offsets, of the specified line is known.

       ?PX    True  if	the percent into the current input file, based on line
	      numbers, of the specified line is known.

       ?s     Same as ""?B"".

       ?x     True if there is a next input file  (that  is,  if  the  current
	      input file is not the last one).

       Any  characters	other  than  the  special  ones (question mark, colon,
       period, percent, and backslash) become literally part  of  the  prompt.
       Any  of	the special characters may be included in the prompt literally
       by preceding it with a backslash.

       Some examples:

       ?f%f:Standard input.

       This prompt prints the filename, if known; otherwise the string	""Stan-
       dard input"".

       ?f%f .?ltLine %lt:?pt%pt\%:?btByte %bt:-...

       This  prompt  would print the filename, if known.  The filename is fol-
       lowed by the line number, if known, otherwise  the  percent  if	known,
       otherwise  the  byte  offset  if  known.  Otherwise, a dash is printed.
       Notice how each question mark has a matching  period,  and  how	the  %
       after the %pt is included literally by escaping it with a backslash.

       ?n?f%f .?m(%T %i of %m) ..?e(END) ?x- Next\: %x..%t"";

       This  prints  the  filename if this is the first prompt in a file, fol-
       lowed by the ""file N of N"" message if there  is	more  than  one  input
       file.   Then,  if  we are at end-of-file, the string ""(END)"" is printed
       followed by the name of the next file, if there is one.	 Finally,  any
       trailing spaces are truncated.  This is the default prompt.  For refer-
       ence, here are the defaults for	the  other  two  prompts  (-m  and  -M
       respectively).	Each  is  broken  into	two lines here for readability
       only.

       ?n?f%f .?m(%T %i of %m) ..?e(END) ?x- Next\: %x.:
	    ?pB%pB\%:byte %bB?s/%s...%t

       ?f%f .?n?m(%T %i of %m) ..?ltlines %lt-%lb?L/%L. :
	    byte %bB?s/%s. .?e(END) ?x- Next\: %x.:?pB%pB\%..%t

       And here is the default message produced by the = command:

       ?f%f .?m(%T %i of %m) .?ltlines %lt-%lb?L/%L. .
	    byte %bB?s/%s. ?e(END) :?pB%pB\%..%t

       The prompt expansion features are also used for another purpose: if  an
       environment  variable LESSEDIT is defined, it is used as the command to
       be executed when the v command is  invoked.   The  LESSEDIT  string  is
       expanded  in the same way as the prompt strings.  The default value for
       LESSEDIT is:

	    %E ?lm+%lm. %f

       Note that this expands to the editor name, followed by a + and the line
       number,	followed by the file name.  If your editor does not accept the
       ""+linenumber"" syntax, or has other differences  in  invocation  syntax,
       the LESSEDIT variable can be changed to modify this default.


SECURITY
       When  the  environment  variable LESSSECURE is set to 1, less runs in a
       ""secure"" mode.  This means these features are disabled:

	      !      the shell command

	      |      the pipe command

	      :e     the examine command.

	      v      the editing command

	      s  -o  log files

	      -k     use of lesskey files

	      -t     use of tags files

		     metacharacters in filenames, such as *

		     filename completion (TAB, ^L)

       Less can also be compiled to be permanently in ""secure"" mode.


COMPATIBILITY WITH MORE
       If the environment variable LESS_IS_MORE is set to 1, or if the program
       is  invoked via a file link named ""more"", less behaves (mostly) in con-
       formance with the POSIX ""more"" command specification.   In  this  mode,
       less behaves differently in these ways:

       The  -e	option	works  differently.  If the -e option is not set, less
       behaves as if the -e option were set.  If the -e option	is  set,  less
       behaves as if the -E option were set.

       The  -m	option	works  differently.   If the -m option is not set, the
       medium prompt is used, and it is prefixed with the  string  ""--More--"".
       If the -m option is set, the short prompt is used.

       The  -n	option acts like the -z option.  The normal behavior of the -n
       option is unavailable in this mode.

       The parameter to the -p option is taken to be  a  less  command	rather
       than a search pattern.

       The  LESS  environment  variable  is  ignored, and the MORE environment
       variable is used in its place.


ENVIRONMENT VARIABLES
       Environment variables may be specified either in the system environment
       as  usual,  or  in  a  lesskey  (1) file.  If environment variables are
       defined in more than one place, variables defined in  a	local  lesskey
       file  take precedence over variables defined in the system environment,
       which take precedence over variables defined in the system-wide lesskey
       file.

       COLUMNS
	      Sets the number of columns on the screen.  Takes precedence over
	      the number of columns specified by the TERM variable.   (But  if
	      you  have  a  windowing  system  which  supports	TIOCGWINSZ  or
	      WIOCGETD, the window system's idea  of  the  screen  size  takes
	      precedence over the LINES and COLUMNS environment variables.)

       EDITOR The name of the editor (used for the v command).

       HOME   Name  of	the user's home directory (used to find a lesskey file
	      on Unix and OS/2 systems).

       HOMEDRIVE, HOMEPATH
	      Concatenation of the HOMEDRIVE and  HOMEPATH  environment  vari-
	      ables is the name of the user's home directory if the HOME vari-
	      able is not set (only in the Windows version).

       INIT   Name of the user's init directory (used to find a  lesskey  file
	      on OS/2 systems).

       LANG   Language for determining the character set.

       LC_CTYPE
	      Language for determining the character set.

       LESS   Options which are passed to less automatically.

       LESSANSIENDCHARS
	      Characters  which may end an ANSI color escape sequence (default
	      ""m"").

       LESSANSIMIDCHARS
	      Characters which may appear between the ESC  character  and  the
	      end   character  in  an  ANSI  color  escape  sequence  (default
	      ""0123456789:;[?!""'#%()*+ "".

       LESSBINFMT
	      Format for displaying non-printable, non-control characters.

       LESSCHARDEF
	      Defines a character set.

       LESSCHARSET
	      Selects a predefined character set.

       LESSCLOSE
	      Command line to invoke the (optional) input-postprocessor.

       LESSECHO
	      Name of the lessecho program (default ""lessecho"").  The lessecho
	      program  is needed to expand metacharacters, such as * and ?, in
	      filenames on Unix systems.

       LESSEDIT
	      Editor prototype string (used for the v command).   See  discus-
	      sion under PROMPTS.

       LESSGLOBALTAGS
	      Name  of	the command used by the -t option to find global tags.
	      Normally should be set to ""global"" if your system has the global
	      (1) command.  If not set, global tags are not used.

       LESSHISTFILE
	      Name  of	the  history file used to remember search commands and
	      shell commands between invocations of less.  If set  to  ""-""  or
	      ""/dev/null"",  a  history	file  is  not  used.   The  default is
	      ""$HOME/.lesshst"" on Unix systems, ""$HOME/_lesshst""  on  DOS  and
	      Windows  systems,  or ""$HOME/lesshst.ini"" or ""$INIT/lesshst.ini""
	      on OS/2 systems.

       LESSHISTSIZE
	      The maximum number of commands to save in the history file.  The
	      default is 100.

       LESSKEY
	      Name of the default lesskey(1) file.

       LESSKEY_SYSTEM
	      Name of the default system-wide lesskey(1) file.

       LESSMETACHARS
	      List  of characters which are considered ""metacharacters"" by the
	      shell.

       LESSMETAESCAPE
	      Prefix which less will add before each metacharacter in  a  com-
	      mand  sent  to the shell.  If LESSMETAESCAPE is an empty string,
	      commands containing metacharacters will not  be  passed  to  the
	      shell.

       LESSOPEN
	      Command line to invoke the (optional) input-preprocessor.

       LESSSECURE
	      Runs less in ""secure"" mode.  See discussion under SECURITY.

       LESSSEPARATOR
	      String  to  be  appended to a directory name in filename comple-
	      tion.

       LESSUTFBINFMT
	      Format for displaying non-printable Unicode code points.

       LESS_IS_MORE
	      Emulate the more (1) command.

       LINES  Sets the number of lines on the screen.  Takes  precedence  over
	      the number of lines specified by the TERM variable.  (But if you
	      have a windowing system which supports TIOCGWINSZ  or  WIOCGETD,
	      the  window  system's  idea  of the screen size takes precedence
	      over the LINES and COLUMNS environment variables.)

       MORE   Options which are passed to less automatically when  running  in
	      more compatible mode.

       PATH   User's  search  path  (used to find a lesskey file on MS-DOS and
	      OS/2 systems).

       SHELL  The shell used to execute the ! command, as well	as  to	expand
	      filenames.

       TERM   The type of terminal on which less is being run.

       VISUAL The name of the editor (used for the v command).


SEE ALSO
       lesskey(1)


COPYRIGHT
       Copyright (C) 1984-2016	Mark Nudelman

       less  is  part of the GNU project and is free software.	You can redis-
       tribute it and/or modify it under the terms of either (1) the GNU  Gen-
       eral  Public  License  as published by the Free Software Foundation; or
       (2) the Less License.  See the file README in the less distribution for
       more details regarding redistribution.  You should have received a copy
       of the GNU General Public License along with the source for  less;  see
       the  file  COPYING.   If not, write to the Free Software Foundation, 59
       Temple Place, Suite 330, Boston, MA  02111-1307, USA.  You should  also
       have received a copy of the Less License; see the file LICENSE.

       less is distributed in the hope that it will be useful, but WITHOUT ANY
       WARRANTY; without even the implied warranty of MERCHANTABILITY or  FIT-
       NESS  FOR A PARTICULAR PURPOSE.	See the GNU General Public License for
       more details.


AUTHOR
       Mark Nudelman
       Send bug reports or comments to <bug-less@gnu.org>
       See http://www.greenwoodsoftware.com/less/bugs.html for the latest list
       of known bugs in less.
       For more information, see the less homepage at
       http://www.greenwoodsoftware.com/less.



			   Version 487: 25 Oct 2016		       LESS(1)
","# more

> Display paginated output from `stdin` or a file.
> More information: <https://docs.microsoft.com/en-us/windows-server/administration/windows-commands/more>.

- Display paginated output from `stdin`:

`{{echo test}} | more`

- Display paginated output from one or more files:

`more {{path/to/file}}`

- Convert tabs to the specified number of spaces:

`more {{path/to/file}} /t{{spaces}}`

- Clear the screen before displaying the page:

`more {{path/to/file}} /c`

- Display the output starting at line 5:

`more {{path/to/file}} +{{5}}`

- Enable extended interactive mode (see help for usage):

`more {{path/to/file}} /e`

- Display full usage information:

`more /?`
"
explorer,,,"# explorer

> The Windows File Explorer.

- Open Windows Explorer:

`explorer`

- Open Windows Explorer in the current directory:

`explorer .`

- Open Windows Explorer in a specific directory:

`explorer {{path/to/directory}}`
"
cipher,,,"# cipher

> Encrypt or decrypt files on NTFS drives.

- Encrypt a file or directory:

`cipher /e:{{path/to/file_or_directory}}`

- Decrypt a file or directory:

`cipher /d:{{path/to/file_or_directory}}`

- Securely remove a file or directory:

`cipher /w:{{path/to/file_or_directory}}`
"
mkdir,https://docs.microsoft.com/en-us/windows-server/administration/windows-commands/mkdir,"
MKDIR(1)		  BSD General Commands Manual		      MKDIR(1)

NAME
     mkdir -- make directories

SYNOPSIS
     mkdir [-pv] [-m mode] directory_name ...

DESCRIPTION
     The mkdir utility creates the directories named as operands, in the order
     specified, using mode rwxrwxrwx (0777) as modified by the current
     umask(2).

     The options are as follows:

     -m mode
	     Set the file permission bits of the final created directory to
	     the specified mode.  The mode argument can be in any of the for-
	     mats specified to the chmod(1) command.  If a symbolic mode is
	     specified, the operation characters ``+'' and ``-'' are inter-
	     preted relative to an initial mode of ``a=rwx''.

     -p      Create intermediate directories as required.  If this option is
	     not specified, the full path prefix of each operand must already
	     exist.  On the other hand, with this option specified, no error
	     will be reported if a directory given as an operand already
	     exists.  Intermediate directories are created with permission
	     bits of rwxrwxrwx (0777) as modified by the current umask, plus
	     write and search permission for the owner.

     -v      Be verbose when creating directories, listing them as they are
	     created.

     The user must have write permission in the parent directory.

DIAGNOSTICS
     The mkdir utility exits 0 on success, and >0 if an error occurs.

SEE ALSO
     rmdir(1)

COMPATIBILITY
     The -v option is non-standard and its use in scripts is not recommended.

STANDARDS
     The mkdir utility is expected to be IEEE Std 1003.2 (``POSIX.2'') compat-
     ible.

HISTORY
     A mkdir command appeared in Version 1 AT&T UNIX.

BSD			       January 25, 1994 			   BSD
","# mkdir

> Creates a directory.
> More information: <https://docs.microsoft.com/en-us/windows-server/administration/windows-commands/mkdir>.

- Create a directory:

`mkdir {{directory_name}}`

- Recursively create a nested directory tree:

`mkdir {{path/to/sub_directory_name}}`
"
forfiles,https://docs.microsoft.com/en-us/windows-server/administration/windows-commands/forfiles,,"# forfiles

> Select one or more files to execute a specified command on.
> More information: <https://docs.microsoft.com/en-us/windows-server/administration/windows-commands/forfiles>.

- Search for files in the current directory:

`forfiles`

- Search for files in a specific directory:

`forfiles /p {{path/to/directory}}`

- Run the specified command for each file:

`forfiles /c ""{{command}}""`

- Search for files using a specific glob mask:

`forfiles /m {{glob_pattern}}`

- Search for files recursively:

`forfiles /s`

- Search for files older than 5 days:

`forfiles /d {{+5}}`
"
popd,https://docs.microsoft.com/en-us/windows-server/administration/windows-commands/popd,"
BUILTIN(1)		  BSD General Commands Manual		    BUILTIN(1)

NAME
     builtin, !, %, ., :, @, {, }, alias, alloc, bg, bind, bindkey, break,
     breaksw, builtins, case, cd, chdir, command, complete, continue, default,
     dirs, do, done, echo, echotc, elif, else, end, endif, endsw, esac, eval,
     exec, exit, export, false, fc, fg, filetest, fi, for, foreach, getopts,
     glob, goto, hash, hashstat, history, hup, if, jobid, jobs, kill, limit,
     local, log, login, logout, ls-F, nice, nohup, notify, onintr, popd,
     printenv, pushd, pwd, read, readonly, rehash, repeat, return, sched, set,
     setenv, settc, setty, setvar, shift, source, stop, suspend, switch,
     telltc, test, then, time, times, trap, true, type, ulimit, umask,
     unalias, uncomplete, unhash, unlimit, unset, unsetenv, until, wait,
     where, which, while -- shell built-in commands

SYNOPSIS
     builtin [-options] [args ...]

DESCRIPTION
     Shell builtin commands are commands that can be executed within the run-
     ning shell's process.  Note that, in the case of csh(1) builtin commands,
     the command is executed in a subshell if it occurs as any component of a
     pipeline except the last.

     If a command specified to the shell contains a slash ``/'', the shell
     will not execute a builtin command, even if the last component of the
     specified command matches the name of a builtin command.  Thus, while
     specifying ``echo'' causes a builtin command to be executed under shells
     that support the echo builtin command, specifying ``/bin/echo'' or
     ``./echo'' does not.

     While some builtin commands may exist in more than one shell, their oper-
     ation may be different under each shell which supports them.  Below is a
     table which lists shell builtin commands, the standard shells that sup-
     port them and whether they exist as standalone utilities.

     Only builtin commands for the csh(1) and sh(1) shells are listed here.
     Consult a shell's manual page for details on the operation of its builtin
     commands.	Beware that the sh(1) manual page, at least, calls some of
     these commands ``built-in commands'' and some of them ``reserved words''.
     Users of other shells may need to consult an info(1) page or other
     sources of documentation.

     Commands marked ``No**'' under External do exist externally, but are
     implemented as scripts using a builtin command of the same name.

	   Command	 External    csh(1)    sh(1)
	   !		 No	     No        Yes
	   %		 No	     Yes       No
	   .		 No	     No        Yes
	   :		 No	     Yes       Yes
	   @		 No	     Yes       Yes
	   {		 No	     No        Yes
	   }		 No	     No        Yes
	   alias	 No**	     Yes       Yes
	   alloc	 No	     Yes       No
	   bg		 No**	     Yes       Yes
	   bind 	 No	     No        Yes
	   bindkey	 No	     Yes       No
	   break	 No	     Yes       Yes
	   breaksw	 No	     Yes       No
	   builtin	 No	     No        Yes
	   builtins	 No	     Yes       No
	   case 	 No	     Yes       Yes
	   cd		 No**	     Yes       Yes
	   chdir	 No	     Yes       Yes
	   command	 No**	     No        Yes
	   complete	 No	     Yes       No
	   continue	 No	     Yes       Yes
	   default	 No	     Yes       No
	   dirs 	 No	     Yes       No
	   do		 No	     No        Yes
	   done 	 No	     No        Yes
	   echo 	 Yes	     Yes       Yes
	   echotc	 No	     Yes       No
	   elif 	 No	     No        Yes
	   else 	 No	     Yes       Yes
	   end		 No	     Yes       No
	   endif	 No	     Yes       No
	   endsw	 No	     Yes       No
	   esac 	 No	     No        Yes
	   eval 	 No	     Yes       Yes
	   exec 	 No	     Yes       Yes
	   exit 	 No	     Yes       Yes
	   export	 No	     No        Yes
	   false	 Yes	     No        Yes
	   fc		 No**	     No        Yes
	   fg		 No**	     Yes       Yes
	   filetest	 No	     Yes       No
	   fi		 No	     No        Yes
	   for		 No	     No        Yes
	   foreach	 No	     Yes       No
	   getopts	 No**	     No        Yes
	   glob 	 No	     Yes       No
	   goto 	 No	     Yes       No
	   hash 	 No	     No        Yes
	   hashstat	 No	     Yes       No
	   history	 No	     Yes       No
	   hup		 No	     Yes       No
	   if		 No	     Yes       Yes
	   jobid	 No	     No        Yes
	   jobs 	 No**	     Yes       Yes
	   kill 	 Yes	     Yes       No
	   limit	 No	     Yes       No
	   local	 No	     No        Yes
	   log		 No	     Yes       No
	   login	 Yes	     Yes       No
	   logout	 No	     Yes       No
	   ls-F 	 No	     Yes       No
	   nice 	 Yes	     Yes       No
	   nohup	 Yes	     Yes       No
	   notify	 No	     Yes       No
	   onintr	 No	     Yes       No
	   popd 	 No	     Yes       No
	   printenv	 Yes	     Yes       No
	   pushd	 No	     Yes       No
	   pwd		 Yes	     No        Yes
	   read 	 No**	     No        Yes
	   readonly	 No	     No        Yes
	   rehash	 No	     Yes       No
	   repeat	 No	     Yes       No
	   return	 No	     No        Yes
	   sched	 No	     Yes       No
	   set		 No	     Yes       Yes
	   setenv	 No	     Yes       No
	   settc	 No	     Yes       No
	   setty	 No	     Yes       No
	   setvar	 No	     No        Yes
	   shift	 No	     Yes       Yes
	   source	 No	     Yes       No
	   stop 	 No	     Yes       No
	   suspend	 No	     Yes       No
	   switch	 No	     Yes       No
	   telltc	 No	     Yes       No
	   test 	 Yes	     No        Yes
	   then 	 No	     No        Yes
	   time 	 Yes	     Yes       No
	   times	 No	     No        Yes
	   trap 	 No	     No        Yes
	   true 	 Yes	     No        Yes
	   type 	 No	     No        Yes
	   ulimit	 No	     No        Yes
	   umask	 No**	     Yes       Yes
	   unalias	 No**	     Yes       Yes
	   uncomplete	 No	     Yes       No
	   unhash	 No	     Yes       No
	   unlimit	 No	     Yes       No
	   unset	 No	     Yes       Yes
	   unsetenv	 No	     Yes       No
	   until	 No	     No        Yes
	   wait 	 No**	     Yes       Yes
	   where	 No	     Yes       No
	   which	 Yes	     Yes       No
	   while	 No	     Yes       Yes

SEE ALSO
     csh(1), echo(1), false(1), info(1), kill(1), login(1), nice(1), nohup(1),
     printenv(1), pwd(1), sh(1), test(1), time(1), true(1), which(1)

HISTORY
     The builtin manual page first appeared in FreeBSD 3.4.

AUTHORS
     This manual page was written by Sheldon Hearn <sheldonh@FreeBSD.org>.

BSD			       February 23, 2005			   BSD
","# popd

> Changes the current directory to the directory stored by the `pushd` command.
> More information: <https://docs.microsoft.com/en-us/windows-server/administration/windows-commands/popd>.

- Switch to directory at the top of the stack:

`popd`
"
pushd,https://docs.microsoft.com/en-us/windows-server/administration/windows-commands/pushd,"
BUILTIN(1)		  BSD General Commands Manual		    BUILTIN(1)

NAME
     builtin, !, %, ., :, @, {, }, alias, alloc, bg, bind, bindkey, break,
     breaksw, builtins, case, cd, chdir, command, complete, continue, default,
     dirs, do, done, echo, echotc, elif, else, end, endif, endsw, esac, eval,
     exec, exit, export, false, fc, fg, filetest, fi, for, foreach, getopts,
     glob, goto, hash, hashstat, history, hup, if, jobid, jobs, kill, limit,
     local, log, login, logout, ls-F, nice, nohup, notify, onintr, popd,
     printenv, pushd, pwd, read, readonly, rehash, repeat, return, sched, set,
     setenv, settc, setty, setvar, shift, source, stop, suspend, switch,
     telltc, test, then, time, times, trap, true, type, ulimit, umask,
     unalias, uncomplete, unhash, unlimit, unset, unsetenv, until, wait,
     where, which, while -- shell built-in commands

SYNOPSIS
     builtin [-options] [args ...]

DESCRIPTION
     Shell builtin commands are commands that can be executed within the run-
     ning shell's process.  Note that, in the case of csh(1) builtin commands,
     the command is executed in a subshell if it occurs as any component of a
     pipeline except the last.

     If a command specified to the shell contains a slash ``/'', the shell
     will not execute a builtin command, even if the last component of the
     specified command matches the name of a builtin command.  Thus, while
     specifying ``echo'' causes a builtin command to be executed under shells
     that support the echo builtin command, specifying ``/bin/echo'' or
     ``./echo'' does not.

     While some builtin commands may exist in more than one shell, their oper-
     ation may be different under each shell which supports them.  Below is a
     table which lists shell builtin commands, the standard shells that sup-
     port them and whether they exist as standalone utilities.

     Only builtin commands for the csh(1) and sh(1) shells are listed here.
     Consult a shell's manual page for details on the operation of its builtin
     commands.	Beware that the sh(1) manual page, at least, calls some of
     these commands ``built-in commands'' and some of them ``reserved words''.
     Users of other shells may need to consult an info(1) page or other
     sources of documentation.

     Commands marked ``No**'' under External do exist externally, but are
     implemented as scripts using a builtin command of the same name.

	   Command	 External    csh(1)    sh(1)
	   !		 No	     No        Yes
	   %		 No	     Yes       No
	   .		 No	     No        Yes
	   :		 No	     Yes       Yes
	   @		 No	     Yes       Yes
	   {		 No	     No        Yes
	   }		 No	     No        Yes
	   alias	 No**	     Yes       Yes
	   alloc	 No	     Yes       No
	   bg		 No**	     Yes       Yes
	   bind 	 No	     No        Yes
	   bindkey	 No	     Yes       No
	   break	 No	     Yes       Yes
	   breaksw	 No	     Yes       No
	   builtin	 No	     No        Yes
	   builtins	 No	     Yes       No
	   case 	 No	     Yes       Yes
	   cd		 No**	     Yes       Yes
	   chdir	 No	     Yes       Yes
	   command	 No**	     No        Yes
	   complete	 No	     Yes       No
	   continue	 No	     Yes       Yes
	   default	 No	     Yes       No
	   dirs 	 No	     Yes       No
	   do		 No	     No        Yes
	   done 	 No	     No        Yes
	   echo 	 Yes	     Yes       Yes
	   echotc	 No	     Yes       No
	   elif 	 No	     No        Yes
	   else 	 No	     Yes       Yes
	   end		 No	     Yes       No
	   endif	 No	     Yes       No
	   endsw	 No	     Yes       No
	   esac 	 No	     No        Yes
	   eval 	 No	     Yes       Yes
	   exec 	 No	     Yes       Yes
	   exit 	 No	     Yes       Yes
	   export	 No	     No        Yes
	   false	 Yes	     No        Yes
	   fc		 No**	     No        Yes
	   fg		 No**	     Yes       Yes
	   filetest	 No	     Yes       No
	   fi		 No	     No        Yes
	   for		 No	     No        Yes
	   foreach	 No	     Yes       No
	   getopts	 No**	     No        Yes
	   glob 	 No	     Yes       No
	   goto 	 No	     Yes       No
	   hash 	 No	     No        Yes
	   hashstat	 No	     Yes       No
	   history	 No	     Yes       No
	   hup		 No	     Yes       No
	   if		 No	     Yes       Yes
	   jobid	 No	     No        Yes
	   jobs 	 No**	     Yes       Yes
	   kill 	 Yes	     Yes       No
	   limit	 No	     Yes       No
	   local	 No	     No        Yes
	   log		 No	     Yes       No
	   login	 Yes	     Yes       No
	   logout	 No	     Yes       No
	   ls-F 	 No	     Yes       No
	   nice 	 Yes	     Yes       No
	   nohup	 Yes	     Yes       No
	   notify	 No	     Yes       No
	   onintr	 No	     Yes       No
	   popd 	 No	     Yes       No
	   printenv	 Yes	     Yes       No
	   pushd	 No	     Yes       No
	   pwd		 Yes	     No        Yes
	   read 	 No**	     No        Yes
	   readonly	 No	     No        Yes
	   rehash	 No	     Yes       No
	   repeat	 No	     Yes       No
	   return	 No	     No        Yes
	   sched	 No	     Yes       No
	   set		 No	     Yes       Yes
	   setenv	 No	     Yes       No
	   settc	 No	     Yes       No
	   setty	 No	     Yes       No
	   setvar	 No	     No        Yes
	   shift	 No	     Yes       Yes
	   source	 No	     Yes       No
	   stop 	 No	     Yes       No
	   suspend	 No	     Yes       No
	   switch	 No	     Yes       No
	   telltc	 No	     Yes       No
	   test 	 Yes	     No        Yes
	   then 	 No	     No        Yes
	   time 	 Yes	     Yes       No
	   times	 No	     No        Yes
	   trap 	 No	     No        Yes
	   true 	 Yes	     No        Yes
	   type 	 No	     No        Yes
	   ulimit	 No	     No        Yes
	   umask	 No**	     Yes       Yes
	   unalias	 No**	     Yes       Yes
	   uncomplete	 No	     Yes       No
	   unhash	 No	     Yes       No
	   unlimit	 No	     Yes       No
	   unset	 No	     Yes       Yes
	   unsetenv	 No	     Yes       No
	   until	 No	     No        Yes
	   wait 	 No**	     Yes       Yes
	   where	 No	     Yes       No
	   which	 Yes	     Yes       No
	   while	 No	     Yes       Yes

SEE ALSO
     csh(1), echo(1), false(1), info(1), kill(1), login(1), nice(1), nohup(1),
     printenv(1), pwd(1), sh(1), test(1), time(1), true(1), which(1)

HISTORY
     The builtin manual page first appeared in FreeBSD 3.4.

AUTHORS
     This manual page was written by Sheldon Hearn <sheldonh@FreeBSD.org>.

BSD			       February 23, 2005			   BSD
","# pushd

> Place a directory on a stack so it can be accessed later.
> See also `popd` to switch back to original directory.
> More information: <https://docs.microsoft.com/en-us/windows-server/administration/windows-commands/pushd>.

- Switch to directory and push it on the stack:

`pushd {{directory}}`
"
assoc,https://docs.microsoft.com/en-us/windows-server/administration/windows-commands/assoc,,"# assoc

> Display or modify file extension associations.
> More information: <https://docs.microsoft.com/en-us/windows-server/administration/windows-commands/assoc>.

- Display all associated filetypes:

`assoc`

- Display the associated filetype for a specific extension:

`assoc {{.txt}}`

- Modify the associated filetype for a specific extension:

`assoc {{.txt}}={{txtfile}}`
"
doskey,https://docs.microsoft.com/en-us/windows-server/administration/windows-commands/doskey,,"# doskey

> Manage macros, windows commands and command lines.
> More information: <https://docs.microsoft.com/en-us/windows-server/administration/windows-commands/doskey>.

- List available macros:

`doskey /macros`

- Create a new macro:

`doskey {{name}} = ""{{command}}""`

- Create a new macro for a specific executable:

`doskey /exename={{executable}} {{name}} = ""{{command}}""`

- Remove a macro:

`doskey {{name}} =`

- Display all commands that are stored in memory:

`doskey /history`

- Save macros to a file for portability:

`doskey /macros > {{macinit}}`

- Load macros from a file:

`doskey /macrofile = {{macinit}}`
"
reg-load,https://docs.microsoft.com/en-us/windows-server/administration/windows-commands/reg-load,,"# reg load

> Load saved sub keys into a different sub key in the registry.
> This is intended for troubleshooting and temporary keys.
> More information: <https://docs.microsoft.com/en-us/windows-server/administration/windows-commands/reg-load>.

- Load a backup file into the specified key:

`reg load {{key_name}} {{path/to/file}}`
"
choco-pack,https://chocolatey.org/docs/commands-pack,,"# choco pack

> Package a NuGet specification into a nupkg file.
> More information: <https://chocolatey.org/docs/commands-pack>.

- Package a NuGet specification to a nupkg file:

`choco pack {{path/to/specification}}`

- Package a NuGet specification specifying the version of the resulting file:

`choco pack {{path/to/specification}} --version {{version}}`

- Package a NuGet specification to a specific directory:

`choco pack {{path/to/specification}} --output-directory {{path/to/output_directory}}`
"
reg-delete,https://docs.microsoft.com/en-us/windows-server/administration/windows-commands/reg-delete,,"# reg delete

> Delete keys or their values from the registry.
> More information: <https://docs.microsoft.com/en-us/windows-server/administration/windows-commands/reg-delete>.

- Delete a specific registry key:

`reg delete {{key_name}}`

- Delete a value under a specific key:

`reg delete {{key_name}} /v {{value}}`

- Delete all values recursively under the specified key:

`reg delete {{key_name}} /va`

- Forcefully delete all values recursively under a key without a prompt:

`reg delete {{key_name}} /f /va`
"
virtualboxvm,https://www.virtualbox.org,,"# virtualboxvm

> The VirtualBox virtual machine management CLI.
> More information: <https://www.virtualbox.org>.

- Start a virtual machine:

`virtualboxvm --startvm {{name|uuid}}`

- Start a virtual machine in fullscreen mode:

`virtualboxvm --startvm {{name|uuid}} --fullscreen`

- Mount the specified DVD image file:

`virtualboxvm --startvm {{name|uuid}} --dvd {{path/to/image_file}}`

- Display a command line window with debug information:

`virtualboxvm --startvm {{name|uuid}} --debug-command-line`

- Start a virtual machine in a paused state:

`virtualboxvm --startvm {{name|uuid}} --start-paused`
"
reg,https://docs.microsoft.com/en-us/windows-server/administration/windows-commands/reg,,"# reg

> A command line interface for managing keys and their values in the Windows registry.
> See `reg-query`, `reg-add` and other pages for additional information.
> More information: <https://docs.microsoft.com/en-us/windows-server/administration/windows-commands/reg>.

- Execute registry commands:

`reg {{command}}`

- Display general information and list all available commands:

`reg /?`

- Call help on a specific command:

`reg {{command}} /?`
"
mklink,https://docs.microsoft.com/en-us/windows-server/administration/windows-commands/mklink,,"# mklink

> Create symbolic links.
> More information: <https://docs.microsoft.com/en-us/windows-server/administration/windows-commands/mklink>.

- Create a symbolic link to a file:

`mklink {{path/to/link}} {{path/to/source_file}}`

- Create a symbolic link to a directory:

`mklink /d {{path/to/link}} {{path/to/source_directory}}`

- Create a hard link to a file:

`mklink /h {{path/to/link}} {{path/to/source_file}}`

- Create a directory junction:

`mklink /j {{path/to/link}} {{path/to/source_file}}`
"
scoop,https://scoop.sh,,"# scoop

> A command-line installer for Windows.
> More information: <https://scoop.sh>.

- Install a package:

`scoop install {{package}}`

- Remove a package:

`scoop uninstall {{package}}`

- Update all installed packages:

`scoop update *`

- List installed packages:

`scoop list`

- Display information about a package:

`scoop info {{package}}`

- Search for a package:

`scoop search {{package}}`

- List all known buckets (a bucket is an application repository):

`scoop bucket known`

- Add a bucket by its alias or a Git repository URL:

`scoop bucket add {{bucket}}`
"
choco-new,https://chocolatey.org/docs/commands-new,,"# choco new

> Generate new package specification files with Chocolatey.
> More information: <https://chocolatey.org/docs/commands-new>.

- Create a new package skeleton:

`choco new {{package_name}}`

- Create a new package with a specific version:

`choco new {{package_name}} --version {{version}}`

- Create a new package with a specific maintainer name:

`choco new {{package_name}} --maintainer {{maintainer_name}}`

- Create a new package in a custom output directory:

`choco new {{package_name}} --output-directory {{path/to/directory}}`

- Create a new package with specific 32-bit and 64-bit installer urls:

`choco new {{package_name}} url=""{{url}}"" url64=""{{url}}""`
"
reg-import,https://docs.microsoft.com/en-us/windows-server/administration/windows-commands/reg-import,,"# reg import

> Import all available keys, subkeys, and values from a file.
> More information: <https://docs.microsoft.com/en-us/windows-server/administration/windows-commands/reg-import>.

- Import all keys, subkeys and values from a file:

`reg import {{path/to/file.reg}}`
"
reg-export,https://docs.microsoft.com/en-us/windows-server/administration/windows-commands/reg-export,,"# reg export

> Export the specified sub keys and values into a file.
> More information: <https://docs.microsoft.com/en-us/windows-server/administration/windows-commands/reg-export>.

- Export all sub keys and values of a specific key:

`reg export {{key_name}} {{path/to/file.reg}}`

- Force overwriting of an existing file without prompt:

`reg export {{key_name}} {{path/to/file.reg}} /y`
"
expand,https://docs.microsoft.com/en-us/windows-server/administration/windows-commands/expand,"
EXPAND(1)		  BSD General Commands Manual		     EXPAND(1)

NAME
     expand, unexpand -- expand tabs to spaces, and vice versa

SYNOPSIS
     expand [-t tab1,tab2,...,tabn] [file ...]
     unexpand [-a | -t tab1,tab2,...,tabn] [file ...]

DESCRIPTION
     The expand utility processes the named files or the standard input writ-
     ing the standard output with tabs changed into blanks.  Backspace charac-
     ters are preserved into the output and decrement the column count for tab
     calculations.  The expand utility is useful for pre-processing character
     files (before sorting, looking at specific columns, etc.) that contain
     tabs.

     The unexpand utility puts tabs back into the data from the standard input
     or the named files and writes the result on the standard output.

     The following options are available:

     -a      (unexpand only.)  By default, only leading blanks and tabs are
	     reconverted to maximal strings of tabs.  If the -a option is
	     given, then tabs are inserted whenever they would compress the
	     resultant file by replacing two or more characters.

     -t tab1,tab2,...,tabn
	     Set tab stops at column positions tab1, tab2, ..., tabn.  If only
	     a single number is given, tab stops are set that number of column
	     positions apart instead of the default number of 8.

ENVIRONMENT
     The LANG, LC_ALL and LC_CTYPE environment variables affect the execution
     of expand and unexpand as described in environ(7).

EXIT STATUS
     The expand and unexpand utilities exit 0 on success, and >0 if an error
     occurs.

STANDARDS
     The expand and unexpand utilities conform to IEEE Std 1003.1-2001
     (``POSIX.1'').

HISTORY
     The expand command appeared in 3.0BSD.

BSD			       October 13, 2006 			   BSD
","# expand

> Uncompress one or more Windows Cabinet files.
> More information: <https://docs.microsoft.com/en-us/windows-server/administration/windows-commands/expand>.

- Uncompress a single-file Cabinet file to the specified directory:

`expand {{path/to/file.cab}} {{path/to/directory}}`

- Display the list of files in a source Cabinet file:

`expand {{path/to/file.cab}} {{path/to/directory}} -d`

- Uncompress all files from the Cabinet file:

`expand {{path/to/file.cab}} {{path/to/directory}} -f:*`

- Uncompress a specific file from a Cabinet file:

`expand {{path/to/file.cab}} {{path/to/directory}} -f:{{file}}`

- Ignore the directory structure when uncompressing, and add them to a single directory:

`expand {{path/to/file.cab}} {{path/to/directory}} -i`
"
iscc,,,"# iscc

> Compiler for Inno Setup installers.
> It compiles an Inno Setup scripts into an Windows installer executable.

- Compile an Inno Setup script:

`iscc {{path/to/file.iss}}`

- Quietly compile an Inno Setup installer:

`iscc /Q {{path/to/file.iss}}`

- Compile a signed Inno Setup installer:

`iscc /S={{name}}={{command}} {{path/to/file.iss}}`
"
octo,https://octopus.com/docs/octopus-rest-api/octo.exe-command-line,,"# octo

> Command line tools for Octopus Deploy.
> More information: <https://octopus.com/docs/octopus-rest-api/octo.exe-command-line>.

- Create a package:

`octo pack --id={{package_name}}`

- Push a package to a repository on the Octopus server:

`octo push --package={{package_name}}`

- Create a release:

`octo create-release --project={{project_name}} --packageversion={{version}}`

- Deploy a release:

`octo deploy-release --project={{project_name}} --packageversion={{version}} --deployto={{environment_name}} --tenant={{deployment_target}}`
"
ftp,,"ftp(n)				  ftp client				ftp(n)



______________________________________________________________________________

NAME
       ftp - Client-side tcl implementation of the ftp protocol

SYNOPSIS
       package require Tcl  8.2

       package require ftp  ?2.4.9?

       ::ftp::Open server user passwd ?options?

       ::ftp::Close handle

       ::ftp::Cd handle directory

       ::ftp::Pwd handle

       ::ftp::Type handle ?ascii|binary|tenex?

       ::ftp::List handle ?pattern?

       ::ftp::NList handle ?directory?

       ::ftp::FileSize handle file

       ::ftp::ModTime handle file

       ::ftp::Delete handle file

       ::ftp::Rename handle from to

       ::ftp::Put handle (local | -data data | -channel chan) ?remote?

       ::ftp::Append handle (local | -data data | -channel chan) ?remote?

       ::ftp::Get  handle remote ?(local | -variable varname | -channel chan)?

       ::ftp::Reget handle remote ?local? ?from? ?to?

       ::ftp::Newer handle remote ?local?

       ::ftp::MkDir handle directory

       ::ftp::RmDir handle directory

       ::ftp::Quote handle arg1 arg2 ...

       ::ftp::DisplayMsg handle msg ?state?

_________________________________________________________________

DESCRIPTION
       The ftp package provides the client side of the ftp protocol as	speci-
       fied  in RFC 959 (http://www.rfc-editor.org/rfc/rfc959.txt).  The pack-
       age implements both active (default) and passive ftp sessions.

       A new ftp session is started with the ::ftp::Open command. To  shutdown
       an  existing  ftp  session  use	::ftp::Close.  All  other commands are
       restricted to usage in an an  open  ftp	session.  They	will  generate
       errors  if they are used out of context.  The ftp package includes file
       and directory manipulating commands for remote sites.  To  perform  the
       same  operations  on  the  local site use commands built into the core,
       like cd or file.

       The output of  the  package  is	controlled  by	two  state  variables,
       ::ftp::VERBOSE  and  ::ftp::DEBUG. Setting ::ftp::VERBOSE to ""1"" forces
       the package to show all responses from a  remote  server.  The  default
       value  is ""0"". Setting ::ftp::DEBUG to ""1"" enables debugging and forces
       the package to show all return codes, states, state changes and	""real""
       ftp commands. The default value is ""0"".

       The  command  ::ftp::DisplayMsg	is used to show the different messages
       from the ftp session. The setting of ::ftp::VERBOSE determines if  this
       command	is  called  or	not. The current implementation of the command
       uses the log package of tcllib to write the  messages  to  their  final
       destination.  This means that the behaviour of ::ftp::DisplayMsg can be
       customized  without  changing  its  implementation.  For  more  radical
       changes	overwriting its implementation by the application is of course
       still possible. Note that the default implementation honors the	option
       -output to ::ftp::Open for a session specific log command.

       Caution:  The default implementation logs error messages like all other
       messages. If this behaviour is changed to throwing an error instead all
       commands  in  the  API  will change their behaviour too. In such a case
       they will not return a failure code as described  below	but  pass  the
       thrown error to their caller.

API
       ::ftp::Open server user passwd ?options?
	      This  command  is  used to start a FTP session by establishing a
	      control connection to the FTP server. The defaults are used  for
	      any option not specified by the caller.

	      The  command  takes  a  host name server, a user name user and a
	      password password as its parameters and returns a session handle
	      that  is	an integer number greater than or equal to ""0"", if the
	      connection is successfully  established.	Otherwise  it  returns
	      ""-1"".  The server parameter must be the name or internet address
	      (in dotted decimal notation) of the ftp server  to  connect  to.
	      The  user  and  passwd parameters must contain a valid user name
	      and password to complete the login process.

	      The options overwrite some default values or set special	abili-
	      ties:

	      -blocksize size
		     The  blocksize is used during data transfer. At most size
		     bytes are transfered at once. The default value for  this
		     option  is 4096.  The package will evaluate the -progress
		     callback for the  session	after  the  transfer  of  each
		     block.

	      -timeout seconds
		     If  seconds is non-zero, then ::ftp::Open sets up a time-
		     out which will occur after the specified number  of  sec-
		     onds. The default value is 600.

	      -port number
		     The  port	number specifies an alternative remote port on
		     the ftp server on which the ftp service resides. Most ftp
		     services  listen  for  connection requests on the default
		     port 21. Sometimes, usually for  security	reasons,  port
		     numbers other than 21 are used for ftp connections.

	      -mode mode
		     The  transfer  mode  option determines if a file transfer
		     occurs in active or passive mode.	In  passive  mode  the
		     client  will  ask the ftp server to listen on a data port
		     and wait for the connection rather than to  initiate  the
		     process  by itself when a data transfer request comes in.
		     Passive mode is normally  a  requirement  when  accessing
		     sites via a firewall. The default mode is active.

	      -progress callback
		     This  callback  is evaluated whenever a block of data was
		     transfered. See the option -blocksize for how to  specify
		     the size of the transfered blocks.

		     When  evaluating the callback one argument is appended to
		     the callback script, the current  accumulated  number  of
		     bytes transferred so far.

	      -command callback
		     Specifying  this  option places the connection into asyn-
		     chronous mode. The callback is evaluated after  the  com-
		     pletion of any operation. When an operation is running no
		     further operations must be started until a  callback  has
		     been received for the currently executing operation.

		     When   evaluating	the  callback  several	arguments  are
		     appended to the callback script, namely  the  keyword  of
		     the operation that has completed and any additional argu-
		     ments specific to the operation.  If  an  error  occurred
		     during  the  execution  of  the operation the callback is
		     given the keyword error.

	      -output callback
		     This option has no default. If  it  is  set  the  default
		     implementation of ::ftp::DisplayMsg will use its value as
		     command prefix to log all internal messages. The callback
		     will  have  three arguments appended to it before evalua-
		     tion, the id of the session, the message itself, and  the
		     connection state, in this order.

       ::ftp::Close handle
	      This  command  terminates  the specified ftp session. If no file
	      transfer is in progress, the server will close the control  con-
	      nection  immediately. If a file transfer is in progress however,
	      the control connection will remain open until the transfers com-
	      pletes.  When  that  happens  the  server  will write the result
	      response for the transfer to it and close the connection	after-
	      ward.

       ::ftp::Cd handle directory
	      This  command  changes  the current working directory on the ftp
	      server to a specified target directory.  The command  returns  1
	      if the current working directory was successfully changed to the
	      specified directory or 0 if it fails.  The target directory  can
	      be

	      o      a subdirectory of the current directory,

	      o      Two  dots,  ..  (as an indicator for the parent directory
		     of the current directory)

	      o      or a fully qualified path to a new working directory.

       ::ftp::Pwd handle
	      This command returns the complete path of  the  current  working
	      directory  on  the  ftp server, or an empty string in case of an
	      error.

       ::ftp::Type handle ?ascii|binary|tenex?
	      This command sets the ftp file transfer type  to	either	ascii,
	      binary,  or  tenex. The command always returns the currently set
	      type. If called without type no change is made.

	      Currently only ascii and binary types are  supported.  There  is
	      some  early  (alpha)  support  for Tenex mode. The type ascii is
	      normally used to convert text files into a format  suitable  for
	      text  editors  on  the platform of the destination machine. This
	      mainly affects end-of-line markers. The type binary on the other
	      hand  allows the undisturbed transfer of non-text files, such as
	      compressed files, images and executables.

       ::ftp::List handle ?pattern?
	      This command returns a human-readable list of  files.   Wildcard
	      expressions such as ""*.tcl"" are allowed.	If pattern refers to a
	      specific directory, then the  contents  of  that	directory  are
	      returned.   If  the  pattern is not a fully-qualified path name,
	      the command lists entries relative to the current remote	direc-
	      tory.   If  no pattern is specified, the contents of the current
	      remote directory is returned.

	      The listing includes any system-dependent information  that  the
	      server chooses to include. For example most UNIX systems produce
	      output from the command ls -l. The command returns the retrieved
	      information  as  a tcl list with one item per entry. Empty lines
	      and UNIX's ""total"" lines are ignored and	not  included  in  the
	      result as reported by this command.

	      If the command fails an empty list is returned.

       ::ftp::NList handle ?directory?
	      This  command  has the same behavior as the ::ftp::List command,
	      except that it only retrieves an abbreviated listing. This means
	      only file names are returned in a sorted list.

       ::ftp::FileSize handle file
	      This  command  returns the size of the specified file on the ftp
	      server. If the command fails an empty string is returned.

	      ATTENTION! It will not work properly when in ascii mode  and  is
	      not supported by all ftp server implementations.

       ::ftp::ModTime handle file
	      This  command retrieves the time of the last modification of the
	      file on the ftp server as a system dependent  integer  value  in
	      seconds  or an empty string if an error occurred. Use the built-
	      in command clock to convert the retrieves value into other  for-
	      mats.

       ::ftp::Delete handle file
	      This  command  deletes the specified file on the ftp server. The
	      command returns 1 if the specified file was successfully deleted
	      or 0 if it failed.

       ::ftp::Rename handle from to
	      This  command  renames the file from in the current directory of
	      the ftp server to the specified new file name to. This new  file
	      name  must  not be the same as any existing subdirectory or file
	      name.  The command returns 1 if the specified file was  success-
	      fully renamed or 0 if it failed.

       ::ftp::Put handle (local | -data data | -channel chan) ?remote?
	      This  command  transfers	a  local  file	local to a remote file
	      remote on the ftp server. If the file parameters passed  to  the
	      command  do  not fully qualified path names the command will use
	      the current directory on local and remote host.  If  the	remote
	      file  name  is  unspecified, the server will use the name of the
	      local file as the name of the remote file. The command returns 1
	      to  indicate  a successful transfer and 0 in the case of a fail-
	      ure.

	      If -data data is specified instead of a local file,  the	system
	      will  not  transfer a file, but the data passed into it. In this
	      case the name of the remote file has to be specified.

	      If -channel chan is specified instead of a local file, the  sys-
	      tem will not transfer a file, but read the contents of the chan-
	      nel chan and write this to the remote file.  In  this  case  the
	      name  of the remote file has to be specified. After the transfer
	      chan will be closed.

       ::ftp::Append handle (local | -data data | -channel chan) ?remote?
	      This command behaves like ::ftp::Puts, but  appends  the	trans-
	      fered  information to the remote file. If the file did not exist
	      on the server it will be created.

       ::ftp::Get handle remote ?(local | -variable varname | -channel	chan)?
	      This command retrieves a remote file remote on  the  ftp	server
	      and  stores  its contents into the local file local. If the file
	      parameters passed to the command are not	fully  qualified  path
	      names  the  command  will use the current directory on local and
	      remote host. If the local file name is unspecified,  the	server
	      will  use  the  name of the remote file as the name of the local
	      file. The command returns 1 to indicate  a  successful  transfer
	      and  0 in the case of a failure. The command will throw an error
	      if the directory the file local is to  be  placed  in  does  not
	      exist.

	      If  -variable  varname  is  specified, the system will store the
	      retrieved data into the variable varname instead of a file.

	      If -channel  chan  is  specified,  the  system  will  write  the
	      retrieved data into the channel chan instead of a file. The sys-
	      tem will not close chan after the transfer, this is the  respon-
	      sibility of the caller to ::ftp::Get.

       ::ftp::Reget handle remote ?local? ?from? ?to?
	      This  command behaves like ::ftp::Get, except that if local file
	      local exists and is smaller than remote file remote,  the  local
	      file  is	presumed  to  be  a  partially transferred copy of the
	      remote file and the transfer  is	continued  from  the  apparent
	      point of failure.  The command will throw an error if the direc-
	      tory the file local is to be placed in does not exist. This com-
	      mand  is useful when transferring very large files over networks
	      that tend to drop connections.

	      Specifying the additional byte offsets from and  to  will  cause
	      the  command to change its behaviour and to download exactly the
	      specified slice of the remote file. This mode is	possible  only
	      if  a  local  destination is explicitly provided. Omission of to
	      leads to downloading till the end of the file.

       ::ftp::Newer handle remote ?local?
	      This command behaves like ::ftp::Get, except that  it  retrieves
	      the remote file only if the modification time of the remote file
	      is more recent than the file on the local system.  If  the  file
	      does  not  exist on the local system, the remote file is consid-
	      ered newer. The command will throw an error if the directory the
	      file local is to be placed in does not exist.

       ::ftp::MkDir handle directory
	      This  command creates the specified directory on the ftp server.
	      If the specified path is relative the new directory will be cre-
	      ated  as	a  subdirectory of the current working directory. Else
	      the created directory will have the  specified  path  name.  The
	      command  returns	1  to  indicate  a  successful creation of the
	      directory and 0 in the case of a failure.

       ::ftp::RmDir handle directory
	      This command removes the specified directory on the ftp  server.
	      The  remote  directory has to be empty or the command will fail.
	      The command returns 1 to indicate a successful  removal  of  the
	      directory and 0 in the case of a failure.

       ::ftp::Quote handle arg1 arg2 ...
	      This  command  is  used  to send an arbitrary ftp command to the
	      server. It cannot be used to obtain a directory listing  or  for
	      transferring  files.  It	is included to allow an application to
	      execute commands on the ftp server which	are  not  provided  by
	      this package.  The arguments are sent verbatim, i.e. as is, with
	      no changes.

	      In contrast to the other commands in this package  this  command
	      will  not  parse	the  response  it  got from the ftp server but
	      return it verbatim to the caller.

       ::ftp::DisplayMsg handle msg ?state?
	      This command is used by the package itself to show the different
	      messages from the ftp sessions. The package itself declares this
	      command  very  simple,  writing  the  messages  to  stdout   (if
	      ::ftp::VERBOSE  was  set, see below) and throwing tcl errors for
	      error messages. It is the responsibility of the  application  to
	      overwrite  it  as  needed. A state variable for different states
	      assigned to different colors is recommended by the  author.  The
	      package log is useful for this.

       ::ftp::VERBOSE
	      A  state variable controlling the output of the package. Setting
	      ::ftp::VERBOSE to ""1"" forces the package to show	all  responses
	      from a remote server. The default value is ""0"".

       ::ftp::DEBUG
	      A   state  variable  controlling	the  output  of  ftp.  Setting
	      ::ftp::DEBUG to ""1"" enables debugging and forces the package  to
	      show all return codes, states, state changes and ""real"" ftp com-
	      mands. The default value is ""0"".


BUGS
       The correct execution of many commands depends upon the proper behavior
       by the remote server, network and router configuration.

       An  update  command  placed  in the procedure ::ftp::DisplayMsg may run
       into persistent errors or infinite loops. The solution to this  problem
       is to use update idletasks instead of update.

BUGS, IDEAS, FEEDBACK
       This  document,	and the package it describes, will undoubtedly contain
       bugs and other problems.  Please report such in the category ftp of the
       Tcllib  SF  Trackers  [http://sourceforge.net/tracker/?group_id=12883].
       Please also report any ideas for enhancements you may have  for	either
       package and/or documentation.

SEE ALSO
       ftpd, mime, pop3, smtp

KEYWORDS
       ftp, internet, net, rfc 959

CATEGORY
       Networking



ftp				     2.4.9				ftp(n)
","# ftp

> Interactively transfer files between a local and remote FTP server.

- Connect to a remote FTP server interactively:

`ftp {{host}}`

- Log in as an anonymous user:

`ftp -A {{host}}`

- Disable automatic login upon initial connection:

`ftp -n {{host}}`

- Run a file containing a list of FTP commands:

`ftp -s:{{path/to/file}} {{host}}`

- Download multiple files (glob expression):

`mget {{*.png}}`

- Upload multiple files (glob expression):

`mput {{*.zip}}`

- Delete multiple files on the remote server:

`mdelete {{*.txt}}`

- Display detailed help:

`ftp --help`
"
path,https://docs.microsoft.com/en-us/windows-server/administration/windows-commands/path,,"# path

> Display or set the search path for executable files.
> More information: <https://docs.microsoft.com/en-us/windows-server/administration/windows-commands/path>.

- Display the current path:

`path`

- Set the path to one or more semicolon-separated directories:

`path {{path/to/directory(s)}}`

- Append a new directory to the original path:

`path {{path/to/directory}};%path%`

- Set command prompt to only search the current directory for executables:

`path ;`
"
tskill,https://docs.microsoft.com/en-us/windows-server/administration/windows-commands/tskill,,"# tskill

> Ends a process running in a session on a Remote Desktop Session Host.
> More information: <https://docs.microsoft.com/en-us/windows-server/administration/windows-commands/tskill>.

- Terminate a process by its process identifier:

`tskill {{process_id}}`

- Terminate a process by its name:

`tskill {{process_name}}`
"
finger,https://docs.microsoft.com/en-us/windows-server/administration/windows-commands/finger,"
FINGER(1)		  BSD General Commands Manual		     FINGER(1)

NAME
     finger -- user information lookup program

SYNOPSIS
     finger [-46gklmpsho] [user ...] [user@host ...]

DESCRIPTION
     The finger utility displays information about the system users.

     Options are:

     -4      Forces finger to use IPv4 addresses only.

     -6      Forces finger to use IPv6 addresses only.

     -g      This option restricts the gecos output to only the users' real
	     name.  It also has the side-effect of restricting the output of
	     the remote host when used in conjunction with the -h option.

     -h      When used in conjunction with the -s option, the name of the
	     remote host is displayed instead of the office location and
	     office phone.

     -k      Disable all use of utmpx(5).

     -l      Produce a multi-line format displaying all of the information
	     described for the -s option as well as the user's home directory,
	     home phone number, login shell, mail status, and the contents of
	     the files .forward, .plan, .project and .pubkey from the user's
	     home directory.

	     If idle time is at least a minute and less than a day, it is pre-
	     sented in the form ``hh:mm''.  Idle times greater than a day are
	     presented as ``d day[s]hh:mm''.

	     Phone numbers specified as eleven digits are printed as ``+N-NNN-
	     NNN-NNNN''.  Numbers specified as ten or seven digits are printed
	     as the appropriate subset of that string.	Numbers specified as
	     five digits are printed as ``xN-NNNN''.  Numbers specified as
	     four digits are printed as ``xNNNN''.

	     If write permission is denied to the device, the phrase ``(mes-
	     sages off)'' is appended to the line containing the device name.
	     One entry per user is displayed with the -l option; if a user is
	     logged on multiple times, terminal information is repeated once
	     per login.

	     Mail status is shown as ``No Mail.'' if there is no mail at all,
	     ``Mail last read DDD MMM ## HH:MM YYYY (TZ)'' if the person has
	     looked at their mailbox since new mail arriving, or ``New mail
	     received ...'', ``Unread since ...'' if they have new mail.

     -m      Prevent matching of user names.  User is usually a login name;
	     however, matching will also be done on the users' real names,
	     unless the -m option is supplied.	All name matching performed by
	     finger is case insensitive.

     -o      When used in conjunction with the -s option, the office location
	     and office phone information is displayed instead of the name of
	     the remote host.

     -p      Prevent the -l option of finger from displaying the contents of
	     the .forward, .plan, .project and .pubkey files.

     -s      Display the user's login name, real name, terminal name and write
	     status (as a ``*'' before the terminal name if write permission
	     is denied), idle time, login time, and either office location and
	     office phone number, or the remote host.  If -o is given, the
	     office location and office phone number is printed (the default).
	     If -h is given, the remote host is printed instead.

	     Idle time is in minutes if it is a single integer, hours and min-
	     utes if a ``:'' is present, or days if a ``d'' is present.  If it
	     is an ``*'', the login time indicates the time of last login.
	     Login time is displayed as the day name if less than 6 days, else
	     month, day; hours and minutes, unless more than six months ago,
	     in which case the year is displayed rather than the hours and
	     minutes.

	     Unknown devices as well as nonexistent idle and login times are
	     displayed as single asterisks.

     If no options are specified, finger defaults to the -l style output if
     operands are provided, otherwise to the -s style.	Note that some fields
     may be missing, in either format, if information is not available for
     them.

     If no arguments are specified, finger will print an entry for each user
     currently logged into the system.

     The finger utility may be used to look up users on a remote machine.  The
     format is to specify a user as ``user@host'', or ``@host'', where the
     default output format for the former is the -l style, and the default
     output format for the latter is the -s style.  The -l option is the only
     option that may be passed to a remote machine.

     If the file .nofinger exists in the user's home directory, and the pro-
     gram is not run with superuser privileges, finger behaves as if the user
     in question does not exist.

     The optional finger.conf(5) configuration file can be used to specify
     aliases.  Since finger is invoked by fingerd(8), aliases will work for
     both local and network queries.

ENVIRONMENT
     The finger utility utilizes the following environment variable, if it
     exists:

     FINGER	 This variable may be set with favored options to finger.

FILES
     /etc/finger.conf  alias definition data base
     /var/log/lastlog  last login data base

SEE ALSO
     chpass(1), w(1), who(1), finger.conf(5), fingerd(8)

     D. Zimmerman, The Finger User Information Protocol, RFC 1288, December,
     1991.

HISTORY
     The finger command appeared in 3.0BSD.

BUGS
     The current FINGER protocol RFC requires that the client keep the connec-
     tion fully open until the server closes.  This prevents the use of the
     optimal three-packet T/TCP exchange.  (Servers which depend on this
     requirement are bogus but have nonetheless been observed in the Internet
     at large.)

     The finger utility does not recognize multibyte characters.

BSD				 July 17, 2004				   BSD
","# finger

> Return information about one or more users on a specified system.
> The remote system must be running the Finger service.
> More information: <https://docs.microsoft.com/en-us/windows-server/administration/windows-commands/finger>.

- Display information about a specific user:

`finger {{user}}@{{host}}`

- Display information about all users on the specified host:

`finger @{{host}}`

- Display information in a longer format:

`finger {{user}}@{{host}} -l`

- Display help information:

`finger /?`
"
cd,https://docs.microsoft.com/en-us/windows-server/administration/windows-commands/cd,"
BUILTIN(1)		  BSD General Commands Manual		    BUILTIN(1)

NAME
     builtin, !, %, ., :, @, {, }, alias, alloc, bg, bind, bindkey, break,
     breaksw, builtins, case, cd, chdir, command, complete, continue, default,
     dirs, do, done, echo, echotc, elif, else, end, endif, endsw, esac, eval,
     exec, exit, export, false, fc, fg, filetest, fi, for, foreach, getopts,
     glob, goto, hash, hashstat, history, hup, if, jobid, jobs, kill, limit,
     local, log, login, logout, ls-F, nice, nohup, notify, onintr, popd,
     printenv, pushd, pwd, read, readonly, rehash, repeat, return, sched, set,
     setenv, settc, setty, setvar, shift, source, stop, suspend, switch,
     telltc, test, then, time, times, trap, true, type, ulimit, umask,
     unalias, uncomplete, unhash, unlimit, unset, unsetenv, until, wait,
     where, which, while -- shell built-in commands

SYNOPSIS
     builtin [-options] [args ...]

DESCRIPTION
     Shell builtin commands are commands that can be executed within the run-
     ning shell's process.  Note that, in the case of csh(1) builtin commands,
     the command is executed in a subshell if it occurs as any component of a
     pipeline except the last.

     If a command specified to the shell contains a slash ``/'', the shell
     will not execute a builtin command, even if the last component of the
     specified command matches the name of a builtin command.  Thus, while
     specifying ``echo'' causes a builtin command to be executed under shells
     that support the echo builtin command, specifying ``/bin/echo'' or
     ``./echo'' does not.

     While some builtin commands may exist in more than one shell, their oper-
     ation may be different under each shell which supports them.  Below is a
     table which lists shell builtin commands, the standard shells that sup-
     port them and whether they exist as standalone utilities.

     Only builtin commands for the csh(1) and sh(1) shells are listed here.
     Consult a shell's manual page for details on the operation of its builtin
     commands.	Beware that the sh(1) manual page, at least, calls some of
     these commands ``built-in commands'' and some of them ``reserved words''.
     Users of other shells may need to consult an info(1) page or other
     sources of documentation.

     Commands marked ``No**'' under External do exist externally, but are
     implemented as scripts using a builtin command of the same name.

	   Command	 External    csh(1)    sh(1)
	   !		 No	     No        Yes
	   %		 No	     Yes       No
	   .		 No	     No        Yes
	   :		 No	     Yes       Yes
	   @		 No	     Yes       Yes
	   {		 No	     No        Yes
	   }		 No	     No        Yes
	   alias	 No**	     Yes       Yes
	   alloc	 No	     Yes       No
	   bg		 No**	     Yes       Yes
	   bind 	 No	     No        Yes
	   bindkey	 No	     Yes       No
	   break	 No	     Yes       Yes
	   breaksw	 No	     Yes       No
	   builtin	 No	     No        Yes
	   builtins	 No	     Yes       No
	   case 	 No	     Yes       Yes
	   cd		 No**	     Yes       Yes
	   chdir	 No	     Yes       Yes
	   command	 No**	     No        Yes
	   complete	 No	     Yes       No
	   continue	 No	     Yes       Yes
	   default	 No	     Yes       No
	   dirs 	 No	     Yes       No
	   do		 No	     No        Yes
	   done 	 No	     No        Yes
	   echo 	 Yes	     Yes       Yes
	   echotc	 No	     Yes       No
	   elif 	 No	     No        Yes
	   else 	 No	     Yes       Yes
	   end		 No	     Yes       No
	   endif	 No	     Yes       No
	   endsw	 No	     Yes       No
	   esac 	 No	     No        Yes
	   eval 	 No	     Yes       Yes
	   exec 	 No	     Yes       Yes
	   exit 	 No	     Yes       Yes
	   export	 No	     No        Yes
	   false	 Yes	     No        Yes
	   fc		 No**	     No        Yes
	   fg		 No**	     Yes       Yes
	   filetest	 No	     Yes       No
	   fi		 No	     No        Yes
	   for		 No	     No        Yes
	   foreach	 No	     Yes       No
	   getopts	 No**	     No        Yes
	   glob 	 No	     Yes       No
	   goto 	 No	     Yes       No
	   hash 	 No	     No        Yes
	   hashstat	 No	     Yes       No
	   history	 No	     Yes       No
	   hup		 No	     Yes       No
	   if		 No	     Yes       Yes
	   jobid	 No	     No        Yes
	   jobs 	 No**	     Yes       Yes
	   kill 	 Yes	     Yes       No
	   limit	 No	     Yes       No
	   local	 No	     No        Yes
	   log		 No	     Yes       No
	   login	 Yes	     Yes       No
	   logout	 No	     Yes       No
	   ls-F 	 No	     Yes       No
	   nice 	 Yes	     Yes       No
	   nohup	 Yes	     Yes       No
	   notify	 No	     Yes       No
	   onintr	 No	     Yes       No
	   popd 	 No	     Yes       No
	   printenv	 Yes	     Yes       No
	   pushd	 No	     Yes       No
	   pwd		 Yes	     No        Yes
	   read 	 No**	     No        Yes
	   readonly	 No	     No        Yes
	   rehash	 No	     Yes       No
	   repeat	 No	     Yes       No
	   return	 No	     No        Yes
	   sched	 No	     Yes       No
	   set		 No	     Yes       Yes
	   setenv	 No	     Yes       No
	   settc	 No	     Yes       No
	   setty	 No	     Yes       No
	   setvar	 No	     No        Yes
	   shift	 No	     Yes       Yes
	   source	 No	     Yes       No
	   stop 	 No	     Yes       No
	   suspend	 No	     Yes       No
	   switch	 No	     Yes       No
	   telltc	 No	     Yes       No
	   test 	 Yes	     No        Yes
	   then 	 No	     No        Yes
	   time 	 Yes	     Yes       No
	   times	 No	     No        Yes
	   trap 	 No	     No        Yes
	   true 	 Yes	     No        Yes
	   type 	 No	     No        Yes
	   ulimit	 No	     No        Yes
	   umask	 No**	     Yes       Yes
	   unalias	 No**	     Yes       Yes
	   uncomplete	 No	     Yes       No
	   unhash	 No	     Yes       No
	   unlimit	 No	     Yes       No
	   unset	 No	     Yes       Yes
	   unsetenv	 No	     Yes       No
	   until	 No	     No        Yes
	   wait 	 No**	     Yes       Yes
	   where	 No	     Yes       No
	   which	 Yes	     Yes       No
	   while	 No	     Yes       Yes

SEE ALSO
     csh(1), echo(1), false(1), info(1), kill(1), login(1), nice(1), nohup(1),
     printenv(1), pwd(1), sh(1), test(1), time(1), true(1), which(1)

HISTORY
     The builtin manual page first appeared in FreeBSD 3.4.

AUTHORS
     This manual page was written by Sheldon Hearn <sheldonh@FreeBSD.org>.

BSD			       February 23, 2005			   BSD
","# cd

> Displays the name of or changes the current working directory.
> More information: <https://docs.microsoft.com/en-us/windows-server/administration/windows-commands/cd>.

- Go to a directory in the same drive:

`cd {{path/to/directory}}`

- Display the name of the current directory:

`cd`

- Go up to the parent of the current directory:

`cd ..`

- Go to a directory in a different drive:

`cd {{path/to/directory}} /d`
"
reg-unload,https://docs.microsoft.com/en-us/windows-server/administration/windows-commands/reg-unload,,"# reg unload

> Remove data from the registry that was loaded using the `reg load` command.
> More information: <https://docs.microsoft.com/en-us/windows-server/administration/windows-commands/reg-unload>.

- Remove data from the registry for a specified key:

`reg unload {{key_name}}`
"
title,https://docs.microsoft.com/en-us/windows-server/administration/windows-commands/title,,"# title

> Set the title of the command prompt window.
> More information: <https://docs.microsoft.com/en-us/windows-server/administration/windows-commands/title>.

- Set the title of the current command prompt window:

`title {{new_title}}`
"
choco-uninstall,https://chocolatey.org/docs/commands-uninstall,,"# choco uninstall

> Uninstall one or more packages with Chocolatey.
> More information: <https://chocolatey.org/docs/commands-uninstall>.

- Uninstall one or more space-separated packages:

`choco uninstall {{package(s)}}`

- Uninstall a specific version of a package:

`choco uninstall {{package}} --version {{version}}`

- Confirm all prompts automatically:

`choco uninstall {{package}} --yes`

- Remove all dependencies when uninstalling:

`choco uninstall {{package}} --remove-dependencies`

- Uninstall all packages:

`choco uninstall all`
"
pathping,https://docs.microsoft.com/en-us/windows-server/administration/windows-commands/pathping,,"# pathping

> A trace route tool combining features of `ping` and `tracert`.
> More information: <https://docs.microsoft.com/en-us/windows-server/administration/windows-commands/pathping>.

- Ping and trace the route to a host:

`pathping {{hostname}}`

- Do not perform reverse lookup of ip-address to hostname:

`pathping {{hostname}} -n`

- Specify the maximum number of hops to search for the target (the default is 30):

`pathping {{hostname}} -h {{max_hops}}`

- Specify the milliseconds to wait between pings (the default is 240):

`pathping {{hostname}} -p {{time}}`

- Specify the number of queries per hop (the default is 100):

`pathping {{hostname}} -q {{queries}}`

- Force IPV4 usage:

`pathping {{hostname}} -4`

- Force IPV6 usage:

`pathping {{hostname}} -6`

- Display detailed usage information:

`pathping /?`
"
tzutil,https://docs.microsoft.com/en-us/windows-server/administration/windows-commands/tzutil,,"# tzutil

> A tool for displaying or configuring the system time zone.
> More information: <https://docs.microsoft.com/en-us/windows-server/administration/windows-commands/tzutil>.

- Get the current time zone:

`tzutil /g`

- Display a list of available time zones:

`tzutil /l`

- Set the system time zone to the specific value:

`tzutil /s {{timezone_id}}`
"
rpcinfo,https://docs.microsoft.com/windows-server/administration/windows-commands/rpcinfo,"
RPCINFO(8)		  BSD System Manager's Manual		    RPCINFO(8)

NAME
     rpcinfo -- report RPC information

SYNOPSIS
     rpcinfo [--rpcbvers version] [-m | -s] [host]
     rpcinfo [--rpcbvers version] -T netid host program [version]
     rpcinfo [--rpcbvers version] -a server address -T netid program [version]
     rpcinfo [--rpcbvers version] -b [-T netid] program version
     rpcinfo [--rpcbvers version] -d [-T netid] program version
     rpcinfo -l [-T netid] [host] program version
     rpcinfo [--rpcbvers version] --getaddr [-T netid] [host] program version
     rpcinfo --getversaddr [-T netid] [host] program version
     rpcinfo --indirect [-T netid] [host] program version
     rpcinfo [--rpcbvers version] --time [-T netid] [host]
     rpcinfo {--help | -h}
     rpcinfo -p [host]
     rpcinfo [-n portnum] -u host program [version]
     rpcinfo [-n portnum] -t host program [version]

DESCRIPTION
     rpcinfo makes an RPC call to an RPC server and reports what it finds.
     Unless otherwise specified or noted below the default rpcbind protocol
     version is 3.  With no or only generic options, call the rpcbind dump
     procedure on the specified host or ``localhost'' if host is not specified
     and display the results.  For versions 3 and 4 display the program num-
     ber, the version, the ``netid'', the universal address that the services
     is listening on, symbolic name of the program if known, and then the
     owner that registered the <program, version, netid, address> tuple.  For
     version 2 of the protocol list the program, version, protocol, port, and
     symbolic program name.  See the --summary option below for a typically
     more useful output. rpcbind defaults the netid to ``tcp'' for the dump
     procedure.

     The program argument can be either a name or a number.

     If a version is specified, rpcinfo attempts to call that version of the
     specified program.  Otherwise, if the version is optional rpcinfo
     attempts to find all the registered version numbers for the specified
     program by calling version 0 (which is presumed not to exist; if it does
     exist, rpcinfo attempts to obtain this information by calling an
     extremely high version number instead) and attempts to call each regis-
     tered version.

     A required transport option is needed for the second and third lines of
     the synopsis which is used to ping, i.e., call the null procedure of the
     specified program and version. The results will be displayed on stdout.
     If version is not specified each valid version found as described above
     will be called.  The third synopsis will use the supplied universal
     address over the transport specified by netid to call the null procedure
     of the specified program in the same manner as above. In addition the
     last two lines of the synopsis can ``ping'' the server as described in
     the Legacy Options section below.

GENERIC OPTIONS
     --rpcbvers version
	     Attempt to use the supplied rpcbind version. Note some options
	     below are version specific and this option may be ignored. If
	     specifying version 2 (portmapper), netid below must be one of
	     ``udp'' or ``tcp''.

     -T netid
	     Specify the netid to use. Supported netids are ``udp'', ``tcp'',
	     ``udp6'', and ``tcp6''.

     --timeout seconds
	     Timeout used in creating client handles and the client calls to
	     rpcbind. Current default is 12 seconds.

     Generic options may be supplied with any of the rpcinfo options below,
     though some options will override their values.

LEGACY OPTIONS
     The options below imply version 2 (portmapper) rpcbind calls. They are
     compatible with older versions of rpcinfo.

     {-p | --portmap} [-T netid] [host]
	     Probe the portmapper on host, and print a list of all registered
	     RPC programs.  If host is not specified, it defaults to the value
	     ``localhost''.

     {-u | --udpping} host program [version]
	     Make an RPC call to the NULL procedure of program on the speci-
	     fied host using UDP, and report whether a response was received.

     {-t | --tcpping} host program [version]
	     Make an RPC call to the NULL procedure of program on the speci-
	     fied host using TCP, and report whether a response was received.

     {-n | --portnum} portnum
	     Use portnum as the port number for the -t and -u options instead
	     of the port number given by the portmapper.

OPTIONS
     {-b | --broadcast} program version
	     Make an RPC multicast over INET6 to the RPCB_MULTICAST_ADDR,
	     ``FF02::202'', and broadcast over INET using UDP to procedure 0
	     of the specified program and version and report all hosts that
	     respond.  rpcifno will first use RPCBIND version 3 and then call
	     the broadcast procedure of the portmapper protocol to collect
	     older hosts. There is a reply cache kept so duplicates will not
	     be returned unless the cache fills.

	     Note that the -b option by its self is compatible with the older
	     portmapper.  However, specifying --rpcbvers 2 will short circuit
	     the rpcbind version 3 calls and only call the portmapper.

     {-d | --delete} [-T netid] program version
	     Delete registration for the RPC service of the specified program
	     and version.  If the netid is specified, only unregister the
	     program and version over that transport.  This option can be
	     exercised only by the super-user or the user who registered the
	     the RPC service.

     --getaddr [-T netid] [host] program version
	     Get the universal address that the client can use to contact the
	     program and version from host over netid.	If host is not speci-
	     fied localhost is assumed. If netid is not specified ``udp'' is
	     assumed. If the specified version is not available but some other
	     version is, return the universal address for one of those ver-
	     sions of the program.

     --getversaddr [-T netid] [host] program version
	     Get the universal address that the client can use to contact the
	     program and version from host over netid.	If host is not speci-
	     fied localhost is assumed. If netid is not specified ``udp'' is
	     assumed. If the version is not available then that will be indi-
	     cated. This requires the remote rpcbind support version 4.

     -h      Print out the synopsis of this program.

     --help  Print out the synopsis and an explanation of the options.

     --indirect [-T netid] [host] program version
	     Send a indirect call to the null procedure of program and version
	     on the specified host or localhost.  This requires the remote
	     rpcbind to support version 4.

     {-l | --list} [-T netid] [host] program version
	     List the transports available over the transport family specified
	     by the netid for the given program and version on the optional
	     host or localhost if not specified.  Requires the remote rpcbind
	     to support version 4.  The default transport family is INET.

     {-m | --metrics}
	     Print the metrics of rpcbind daemon for the specified host or
	     localhost if not specified.  Requires support for rpcbind ver-
	     sion 4 on the remote.

     {-s | --summary}
	     Print a summary of programs registered on host or ``localhost''
	     if host is not specified.	For each program registered list any
	     versions followed by any transports supported by that program.
	     Try to list the symbolic name of the transport and the owner that
	     registered the program.

     --time [host]
	     Return rpcbind's version of time on the specified host.

EXAMPLES
     To show all of the RPC services registered on the local machine use:

	   example% rpcinfo

     To show all of the RPC services registered on the machine named klaxon
     use:

	   example% rpcinfo klaxon

     More usefully to show the services registered on klaxon use:

	   example% rpcinfo -s klaxon

     To show all of the RPC services from an older host only running version 2
     of rpcbind on a host named horn use:

	   example% rpcinfo -p horn

     To show all machines on the local net that are running the NFS File ser-
     vice use:

	   example% rpcinfo -b nfs 'version'

     where 'version' is one of the current nfs versions of interest.

     To delete the registration for version 1 of the rquotad service use:

	   example% rpcinfo -d rquotad 1

SEE ALSO
     rpc(5), rpcbind(8)

     RPC Programming Guide.

     RFC 1833 Binding Protocols for ONC RPC Version 2.

     RFC 5665 IANA Considerations for Remote Procedure Call (RPC) Network
     Identifiers and Universal Address Formats.

BUGS
     In summary mode the maximum number of versions and transports is 16. The
     first 16 versions and the first 16 transports received from the server
     are displayed and the rest is silently ignored.

     In the second synopsis line, for a host that is specified as a link-local
     INET6 address will always return ``no route to host''.

     In releases prior to SunOS 3.0, the Network File System (NFS) did not
     register itself with the portmapper; rpcinfo cannot be used to make RPC
     calls to the NFS server on hosts running such releases.

BSD			       November 14, 2012			   BSD
","# rpcinfo

> List programs via RPC on remote computers.
> More information: <https://docs.microsoft.com/windows-server/administration/windows-commands/rpcinfo>.

- List all programs registered on the local computer:

`rpcinfo`

- List all programs registered on a remote computer:

`rpcinfo /p {{computer_name}}`

- Call a specific program on a remote computer using TCP:

`rpcinfo /t {{computer_name}} {{program_name}}`

- Call a specific program on a remote computer using UDP:

`rpcinfo /u {{computer_name}} {{program_name}}`
"
mount,https://docs.microsoft.com/windows-server/administration/windows-commands/mount,"
MOUNT(8)		  BSD System Manager's Manual		      MOUNT(8)

NAME
     mount -- mount file systems

SYNOPSIS
     mount [-adfruvw] [-t lfs | external_type]
     mount [-dfruvw] special | mount_point
     mount [-dfruvw] [-o options] [-t lfs | external_type] special mount_point

DESCRIPTION
     The mount command calls the mount(2) system call to prepare and graft a
     special device or the remote node (rhost:path) on to the file system tree
     at the point mount_point, which must be a directory.  If either special
     or mount_point are not provided, the appropriate information is obtained
     via the getfsent(3) library routines.

     The system maintains a list of currently mounted file systems.  If no
     arguments are given to mount, this list is printed.

     The options are as follows:

     -a      All the filesystems listed via getfsent(3) are mounted.  Excep-
	     tions are those marked as ``noauto;'' excluded by the -t flag
	     (see below); entries that are neither ``ro,'' ``rw,'' or ``rq;''
	     ``nfs'' entries that also have ``net'' as an option; and already-
	     mounted ``nfs'' entries.

     -d      Causes everything to be done except for the actual system call.
	     This option is useful in conjunction with the -v flag to deter-
	     mine what the mount command is trying to do.

     -f      Forces the revocation of write access when trying to downgrade a
	     filesystem mount status from read-write to read-only.

     -o      Options are specified with a -o flag followed by a comma sepa-
	     rated string of options.  The following options are available:

	     async   All I/O to the file system should be done asynchronously.
		     This can be somewhat dangerous with respect to losing
		     data when faced with system crashes and power outages.
		     This is also the default.	It can be avoided with the
		     noasync option.

	     force   The same as -f; forces the revocation of write access
		     when trying to downgrade a filesystem mount status from
		     read-write to read-only.

	     noasync
		     This filesystem should not force all I/O to be written
		     asynchronously.

	     noauto  This filesystem should be skipped when mount is run with
		     the -a flag.

	     nodev   Do not interpret character or block special devices on
		     the file system.  This option is useful for a server that
		     has file systems containing special devices for architec-
		     tures other than its own.

	     noexec  Do not allow execution of any binaries on the mounted
		     file system.  This option is useful for a server that has
		     file systems containing binaries for architectures other
		     than its own.

	     noowners
		     Ignore the ownership field for the entire volume.	This
		     causes all objects to appear as owned by user ID 99 and
		     group ID 99.  User ID 99 is interpreted as the current
		     effective user ID, while group ID 99 is used directly and
		     translates to ``unknown''.

	     nosuid  Do not allow set-user-identifier or set-group-identifier
		     bits to take effect.

	     rdonly  The same as -r; mount the file system read-only (even the
		     super-user may not write it).

	     sync    All I/O to the file system should be done synchronously.

	     update  The same as -u; indicate that the status of an already
		     mounted file system should be changed.

	     union   Causes the namespace to appear as the union of directo-
		     ries of the mounted filesystem with corresponding direc-
		     tories in the underlying filesystem.  Lookups will be
		     done in the mounted filesystem first.  If those opera-
		     tions fail due to a non-existent file the underlying
		     directory is then accessed.

	     noatime
		     Do not update the file access time when reading from a
		     file.  This option is useful on file systems where there
		     are large numbers of files and performance is more criti-
		     cal than updating the file access time (which is rarely
		     ever important).

	     nobrowse
		     This option indicates that the mount point should not be
		     visible via the GUI (i.e., appear on the Desktop as a
		     separate volume).

	     Any additional options specific to a filesystem type that is not
	     one of the internally known types (see the -t option) may be
	     passed as a comma separated list; these options are distinguished
	     by a leading ``-'' (dash).  Options that take a value are speci-
	     fied using the syntax -option=value.  For example, the mount com-
	     mand:

		   mount -t hfs -o nosuid,-w,-m=755 /dev/disk2s9 /tmp

	     causes mount to execute the equivalent of:

		   /sbin/mount_hfs -o nosuid -w -m 755 /dev/disk2s9 /tmp

     -r      Mount the file system read-only (even the super-user may not
	     write it).  The same as the ``rdonly'' argument to the -o option.

     -t lfs | external type
	     The argument following the -t is used to indicate the file system
	     type.  There is no default local file system for use with mount.
	     A type must be specified in order to mount a non-NFS filesystem.
	     The -t option can be used to indicate that the actions should
	     only be taken on filesystems of the specified type.  More than
	     one type may be specified in a comma separated list.  The list of
	     filesystem types can be prefixed with ``no'' to specify the
	     filesystem types for which action should not be taken.  For exam-
	     ple, the mount command:

		   mount -a -t nonfs,hfs

	     mounts all filesystems except those of type NFS and HFS.

	     If the type is not one of the internally known types, mount will
	     attempt to execute a program in /sbin/mount_XXX where XXX is
	     replaced by the type name.  For example, nfs filesystems are
	     mounted by the program /sbin/mount_nfs.

     -u      The -u flag indicates that the status of an already mounted file
	     system should be changed.	Any of the options discussed above
	     (the -o option) may be changed; also a file system can be changed
	     from read-only to read-write or vice versa.  An attempt to change
	     from read-write to read-only will fail if any files on the
	     filesystem are currently open for writing unless the -f flag is
	     also specified.  The set of options is determined by first
	     extracting the options for the file system from the filesystem
	     table (see getfsent(3)) then applying any options specified by
	     the -o argument, and finally applying the -r or -w option.

     -v      Verbose mode.

     -w      Mount the file system read-write.

	     The options specific to NFS filesystems are described in the
	     mount_nfs(8) manual page.

SEE ALSO
     mount(2), getfsent(3), mount_afp(8), mount_cd9660(8), mount_cddafs(8),
     mount_fdesc(8), mount_hfs(8), mount_apfs(8), mount_msdos(8),
     mount_nfs(8), mount_smbfs(8), mount_udf(8), mount_webdav(8), umount(8)

BUGS
     It is possible for a corrupted file system to cause a crash.

HISTORY
     A mount command appeared in Version 6 AT&T UNIX.

4th Berkeley Distribution	 June 16, 1994	     4th Berkeley Distribution
","# mount

> Mount Network File System (NFS) network shares.
> More information: <https://docs.microsoft.com/windows-server/administration/windows-commands/mount>.

- Mount a share to the ""Z"" drive letter:

`mount \\{{computer_name}}\{{share_name}} {{Z:}}`

- Mount a share to the next available drive letter:

`mount \\{{computer_name}}\{{share_name}} *`

- Mount a share with a read timeout in seconds (defaults to 0.8, can be 0.9 or 1 to 60):

`mount -o timeout={{seconds}} \\{{computer_name}}\{{share_name}} {{Z:}}`

- Mount a share and retry up to 10 times if it fails:

`mount -o retry={{retries}} \\{{computer_name}}\{{share_name}} {{Z:}}`

- Mount a share with forced case sensitivity:

`mount -o casesensitive \\{{computer_name}}\{{share_name}} {{Z:}}`

- Mount a share as an anonymous user:

`mount -o anon \\{{computer_name}}\{{share_name}} {{Z:}}`

- Mount a share using a specific mount type:

`mount -o mtype={{soft|hard}} \\{{computer_name}}\{{share_name}} {{Z:}}`
"
msg,https://docs.microsoft.com/en-us/windows-server/administration/windows-commands/msg,,"# msg

> Send a message to a specific user or session.
> More information: <https://docs.microsoft.com/en-us/windows-server/administration/windows-commands/msg>.

- Send a message to a specified user or session:

`msg {{username|session_name|session_id}} {{message}}`

- Send a message from `stdin`:

`echo ""{{message}}"" | msg {{username|session_name|session_id}}`

- Send a message to a specific server:

`msg /server:{{server_name}} {{username|session_name|session_id}}`

- Send a message to all users of the current machine:

`msg *`

- Set a delay in seconds for a message:

`msg /time:{{seconds}}`
"
takeown,https://docs.microsoft.com/en-us/windows-server/administration/windows-commands/takeown,,"# takeown

> Take ownership of a file or directory.
> More information: <https://docs.microsoft.com/en-us/windows-server/administration/windows-commands/takeown>.

- Take ownership of the specified file:

`takeown /f {{path/to/file}}`

- Take ownership of the specified directory:

`takeown /d {{path/to/directory}}`

- Take ownership of the specified directory and all subdirectories:

`takeown /r /d {{path/to/directory}}`

- Change ownership to the Administrator group instead of the current user:

`takeown /a /f {{path/to/file}}`
"
set,https://docs.microsoft.com/en-us/windows-server/administration/windows-commands/set,"
BUILTIN(1)		  BSD General Commands Manual		    BUILTIN(1)

NAME
     builtin, !, %, ., :, @, {, }, alias, alloc, bg, bind, bindkey, break,
     breaksw, builtins, case, cd, chdir, command, complete, continue, default,
     dirs, do, done, echo, echotc, elif, else, end, endif, endsw, esac, eval,
     exec, exit, export, false, fc, fg, filetest, fi, for, foreach, getopts,
     glob, goto, hash, hashstat, history, hup, if, jobid, jobs, kill, limit,
     local, log, login, logout, ls-F, nice, nohup, notify, onintr, popd,
     printenv, pushd, pwd, read, readonly, rehash, repeat, return, sched, set,
     setenv, settc, setty, setvar, shift, source, stop, suspend, switch,
     telltc, test, then, time, times, trap, true, type, ulimit, umask,
     unalias, uncomplete, unhash, unlimit, unset, unsetenv, until, wait,
     where, which, while -- shell built-in commands

SYNOPSIS
     builtin [-options] [args ...]

DESCRIPTION
     Shell builtin commands are commands that can be executed within the run-
     ning shell's process.  Note that, in the case of csh(1) builtin commands,
     the command is executed in a subshell if it occurs as any component of a
     pipeline except the last.

     If a command specified to the shell contains a slash ``/'', the shell
     will not execute a builtin command, even if the last component of the
     specified command matches the name of a builtin command.  Thus, while
     specifying ``echo'' causes a builtin command to be executed under shells
     that support the echo builtin command, specifying ``/bin/echo'' or
     ``./echo'' does not.

     While some builtin commands may exist in more than one shell, their oper-
     ation may be different under each shell which supports them.  Below is a
     table which lists shell builtin commands, the standard shells that sup-
     port them and whether they exist as standalone utilities.

     Only builtin commands for the csh(1) and sh(1) shells are listed here.
     Consult a shell's manual page for details on the operation of its builtin
     commands.	Beware that the sh(1) manual page, at least, calls some of
     these commands ``built-in commands'' and some of them ``reserved words''.
     Users of other shells may need to consult an info(1) page or other
     sources of documentation.

     Commands marked ``No**'' under External do exist externally, but are
     implemented as scripts using a builtin command of the same name.

	   Command	 External    csh(1)    sh(1)
	   !		 No	     No        Yes
	   %		 No	     Yes       No
	   .		 No	     No        Yes
	   :		 No	     Yes       Yes
	   @		 No	     Yes       Yes
	   {		 No	     No        Yes
	   }		 No	     No        Yes
	   alias	 No**	     Yes       Yes
	   alloc	 No	     Yes       No
	   bg		 No**	     Yes       Yes
	   bind 	 No	     No        Yes
	   bindkey	 No	     Yes       No
	   break	 No	     Yes       Yes
	   breaksw	 No	     Yes       No
	   builtin	 No	     No        Yes
	   builtins	 No	     Yes       No
	   case 	 No	     Yes       Yes
	   cd		 No**	     Yes       Yes
	   chdir	 No	     Yes       Yes
	   command	 No**	     No        Yes
	   complete	 No	     Yes       No
	   continue	 No	     Yes       Yes
	   default	 No	     Yes       No
	   dirs 	 No	     Yes       No
	   do		 No	     No        Yes
	   done 	 No	     No        Yes
	   echo 	 Yes	     Yes       Yes
	   echotc	 No	     Yes       No
	   elif 	 No	     No        Yes
	   else 	 No	     Yes       Yes
	   end		 No	     Yes       No
	   endif	 No	     Yes       No
	   endsw	 No	     Yes       No
	   esac 	 No	     No        Yes
	   eval 	 No	     Yes       Yes
	   exec 	 No	     Yes       Yes
	   exit 	 No	     Yes       Yes
	   export	 No	     No        Yes
	   false	 Yes	     No        Yes
	   fc		 No**	     No        Yes
	   fg		 No**	     Yes       Yes
	   filetest	 No	     Yes       No
	   fi		 No	     No        Yes
	   for		 No	     No        Yes
	   foreach	 No	     Yes       No
	   getopts	 No**	     No        Yes
	   glob 	 No	     Yes       No
	   goto 	 No	     Yes       No
	   hash 	 No	     No        Yes
	   hashstat	 No	     Yes       No
	   history	 No	     Yes       No
	   hup		 No	     Yes       No
	   if		 No	     Yes       Yes
	   jobid	 No	     No        Yes
	   jobs 	 No**	     Yes       Yes
	   kill 	 Yes	     Yes       No
	   limit	 No	     Yes       No
	   local	 No	     No        Yes
	   log		 No	     Yes       No
	   login	 Yes	     Yes       No
	   logout	 No	     Yes       No
	   ls-F 	 No	     Yes       No
	   nice 	 Yes	     Yes       No
	   nohup	 Yes	     Yes       No
	   notify	 No	     Yes       No
	   onintr	 No	     Yes       No
	   popd 	 No	     Yes       No
	   printenv	 Yes	     Yes       No
	   pushd	 No	     Yes       No
	   pwd		 Yes	     No        Yes
	   read 	 No**	     No        Yes
	   readonly	 No	     No        Yes
	   rehash	 No	     Yes       No
	   repeat	 No	     Yes       No
	   return	 No	     No        Yes
	   sched	 No	     Yes       No
	   set		 No	     Yes       Yes
	   setenv	 No	     Yes       No
	   settc	 No	     Yes       No
	   setty	 No	     Yes       No
	   setvar	 No	     No        Yes
	   shift	 No	     Yes       Yes
	   source	 No	     Yes       No
	   stop 	 No	     Yes       No
	   suspend	 No	     Yes       No
	   switch	 No	     Yes       No
	   telltc	 No	     Yes       No
	   test 	 Yes	     No        Yes
	   then 	 No	     No        Yes
	   time 	 Yes	     Yes       No
	   times	 No	     No        Yes
	   trap 	 No	     No        Yes
	   true 	 Yes	     No        Yes
	   type 	 No	     No        Yes
	   ulimit	 No	     No        Yes
	   umask	 No**	     Yes       Yes
	   unalias	 No**	     Yes       Yes
	   uncomplete	 No	     Yes       No
	   unhash	 No	     Yes       No
	   unlimit	 No	     Yes       No
	   unset	 No	     Yes       Yes
	   unsetenv	 No	     Yes       No
	   until	 No	     No        Yes
	   wait 	 No**	     Yes       Yes
	   where	 No	     Yes       No
	   which	 Yes	     Yes       No
	   while	 No	     Yes       Yes

SEE ALSO
     csh(1), echo(1), false(1), info(1), kill(1), login(1), nice(1), nohup(1),
     printenv(1), pwd(1), sh(1), test(1), time(1), true(1), which(1)

HISTORY
     The builtin manual page first appeared in FreeBSD 3.4.

AUTHORS
     This manual page was written by Sheldon Hearn <sheldonh@FreeBSD.org>.

BSD			       February 23, 2005			   BSD
","# set

> Display or set environment variables for the current instance of CMD.
> More information: <https://docs.microsoft.com/en-us/windows-server/administration/windows-commands/set>.

- List all current environment variables:

`set`

- Set an environment variable to a specific value:

`set {{name}}={{value}}`

- List environment variables starting with the specified string:

`set {{name}}`

- Prompt the user for a value for the specified variable:

`set /p {{name}}={{prompt_string}}`
"
eventcreate,https://docs.microsoft.com/en-us/windows-server/administration/windows-commands/eventcreate,,"# eventcreate

> Create custom entries in the event log.
> Event IDs can be any number between 1 and 1000.
> More information: <https://docs.microsoft.com/en-us/windows-server/administration/windows-commands/eventcreate>.

- Create a new event with a given id (1-1000) in the log:

`eventcreate /t {{success|error|warning|information}} /id {{id}} /d ""{{message}}""`

- Create an event in a specific event log:

`eventcreate /l {{log_name}} /t {{type}} /id {{id}} /d ""{{message}}""`

- Create an event with a specific source:

`eventcreate /so {{source_name}} /t {{type}} /id {{id}} /d ""{{message}}""`

- Create an event in a remote machine's event log:

`eventcreate /s {{hostname}} /u {{username}} /p {{password}} /t {{type}} /id {{id}} /d ""{{message""}}`
"
clip,https://docs.microsoft.com/en-us/windows-server/administration/windows-commands/clip,,"# clip

> Copy input content to the Windows clipboard.
> More information: <https://docs.microsoft.com/en-us/windows-server/administration/windows-commands/clip>.

- Pipe command line output to the Windows clipboard:

`{{dir}} | clip`

- Copy the contents of a file to the Windows clipboard:

`clip < {{path/to/file.ext}}`

- Copy text with a trailing newline to the Windows clipboard:

`echo {{some text}} | clip`

- Copy text without a trailing newline to the Windows clipboard:

`echo | set /p=""some text"" | clip`
"
subst,https://docs.microsoft.com/en-us/windows-server/administration/windows-commands/subst,"subst(n)		     Tcl Built-In Commands		      subst(n)



______________________________________________________________________________

NAME
       subst - Perform backslash, command, and variable substitutions

SYNOPSIS
       subst ?-nobackslashes? ?-nocommands? ?-novariables? string
_________________________________________________________________

DESCRIPTION
       This  command  performs	variable substitutions, command substitutions,
       and backslash substitutions on its  string  argument  and  returns  the
       fully-substituted  result.   The substitutions are performed in exactly
       the same way as for Tcl commands.  As a result, the string argument  is
       actually substituted twice, once by the Tcl parser in the usual fashion
       for Tcl commands, and again by the subst command.

       If any of the -nobackslashes, -nocommands, or -novariables  are	speci-
       fied,  then  the  corresponding	substitutions  are not performed.  For
       example, if -nocommands is specified, command substitution is not  per-
       formed:	 open  and  close  brackets are treated as ordinary characters
       with no special interpretation.

       Note that the substitution of one  kind	can  include  substitution  of
       other  kinds.  For example, even when the -novariables option is speci-
       fied, command substitution  is  performed  without  restriction.   This
       means  that any variable substitution necessary to complete the command
       substitution will still take place.  Likewise, any command substitution
       necessary  to  complete	a  variable substitution will take place, even
       when -nocommands is specified.  See the EXAMPLES below.

       If an error occurs during substitution, then  subst  will  return  that
       error.	If a break exception occurs during command or variable substi-
       tution, the result of the whole substitution will  be  the  string  (as
       substituted) up to the start of the substitution that raised the excep-
       tion.  If a continue exception occurs during the evaluation of  a  com-
       mand  or variable substitution, an empty string will be substituted for
       that entire command or variable substitution (as long as  it  is  well-
       formed Tcl.)  If a return exception occurs, or any other return code is
       returned during command or variable  substitution,  then  the  returned
       value  is  substituted  for that substitution.  See the EXAMPLES below.
       In this way, all exceptional return codes are ""caught"" by  subst.   The
       subst command itself will either return an error, or will complete suc-
       cessfully.

EXAMPLES
       When it performs its substitutions, subst does  not  give  any  special
       treatment  to double quotes or curly braces (except within command sub-
       stitutions) so the script
	      set a 44
	      subst {xyz {$a}}
       returns ""xyz {44}"", not ""xyz {$a}"" and the script
	      set a ""p\} q \{r""
	      subst {xyz {$a}}
       returns ""xyz {p} q {r}"", not ""xyz {p\} q \{r}"".

       When command substitution is performed, it includes any	variable  sub-
       stitution necessary to evaluate the script.
	      set a 44
	      subst -novariables {$a [format $a]}
       returns ""$a 44"", not ""$a $a"".  Similarly, when variable substitution is
       performed, it includes any command substitution necessary  to  retrieve
       the value of the variable.
	      proc b {} {return c}
	      array set a {c c [b] tricky}
	      subst -nocommands {[b] $a([b])}
       returns ""[b] c"", not ""[b] tricky"".

       The  continue  and break exceptions allow command substitutions to pre-
       vent substitution of the rest of the command substitution and the  rest
       of  string  respectively,  giving script authors more options when pro-
       cessing text using subst.  For example, the script
	      subst {abc,[break],def}
       returns ""abc,"", not ""abc,,def"" and the script
	      subst {abc,[continue;expr {1+2}],def}
       returns ""abc,,def"", not ""abc,3,def"".

       Other exceptional return codes substitute the returned value
	      subst {abc,[return foo;expr {1+2}],def}
       returns ""abc,foo,def"", not ""abc,3,def"" and
	      subst {abc,[return -code 10 foo;expr {1+2}],def}
       also returns ""abc,foo,def"", not ""abc,3,def"".

SEE ALSO
       Tcl(n), eval(n), break(n), continue(n)

KEYWORDS
       backslash substitution, command substitution, variable substitution



Tcl				      7.4			      subst(n)
","# subst

> Associates a path with a virtual drive letter.
> More information: <https://docs.microsoft.com/en-us/windows-server/administration/windows-commands/subst>.

- List active associations:

`subst`

- Add an association:

`subst {{Z:}} {{C:\Python2.7}}`

- Remove an association:

`subst {{Z:}} /d`
"
exit,https://docs.microsoft.com/en-us/windows-server/administration/windows-commands/exit,"
BUILTIN(1)		  BSD General Commands Manual		    BUILTIN(1)

NAME
     builtin, !, %, ., :, @, {, }, alias, alloc, bg, bind, bindkey, break,
     breaksw, builtins, case, cd, chdir, command, complete, continue, default,
     dirs, do, done, echo, echotc, elif, else, end, endif, endsw, esac, eval,
     exec, exit, export, false, fc, fg, filetest, fi, for, foreach, getopts,
     glob, goto, hash, hashstat, history, hup, if, jobid, jobs, kill, limit,
     local, log, login, logout, ls-F, nice, nohup, notify, onintr, popd,
     printenv, pushd, pwd, read, readonly, rehash, repeat, return, sched, set,
     setenv, settc, setty, setvar, shift, source, stop, suspend, switch,
     telltc, test, then, time, times, trap, true, type, ulimit, umask,
     unalias, uncomplete, unhash, unlimit, unset, unsetenv, until, wait,
     where, which, while -- shell built-in commands

SYNOPSIS
     builtin [-options] [args ...]

DESCRIPTION
     Shell builtin commands are commands that can be executed within the run-
     ning shell's process.  Note that, in the case of csh(1) builtin commands,
     the command is executed in a subshell if it occurs as any component of a
     pipeline except the last.

     If a command specified to the shell contains a slash ``/'', the shell
     will not execute a builtin command, even if the last component of the
     specified command matches the name of a builtin command.  Thus, while
     specifying ``echo'' causes a builtin command to be executed under shells
     that support the echo builtin command, specifying ``/bin/echo'' or
     ``./echo'' does not.

     While some builtin commands may exist in more than one shell, their oper-
     ation may be different under each shell which supports them.  Below is a
     table which lists shell builtin commands, the standard shells that sup-
     port them and whether they exist as standalone utilities.

     Only builtin commands for the csh(1) and sh(1) shells are listed here.
     Consult a shell's manual page for details on the operation of its builtin
     commands.	Beware that the sh(1) manual page, at least, calls some of
     these commands ``built-in commands'' and some of them ``reserved words''.
     Users of other shells may need to consult an info(1) page or other
     sources of documentation.

     Commands marked ``No**'' under External do exist externally, but are
     implemented as scripts using a builtin command of the same name.

	   Command	 External    csh(1)    sh(1)
	   !		 No	     No        Yes
	   %		 No	     Yes       No
	   .		 No	     No        Yes
	   :		 No	     Yes       Yes
	   @		 No	     Yes       Yes
	   {		 No	     No        Yes
	   }		 No	     No        Yes
	   alias	 No**	     Yes       Yes
	   alloc	 No	     Yes       No
	   bg		 No**	     Yes       Yes
	   bind 	 No	     No        Yes
	   bindkey	 No	     Yes       No
	   break	 No	     Yes       Yes
	   breaksw	 No	     Yes       No
	   builtin	 No	     No        Yes
	   builtins	 No	     Yes       No
	   case 	 No	     Yes       Yes
	   cd		 No**	     Yes       Yes
	   chdir	 No	     Yes       Yes
	   command	 No**	     No        Yes
	   complete	 No	     Yes       No
	   continue	 No	     Yes       Yes
	   default	 No	     Yes       No
	   dirs 	 No	     Yes       No
	   do		 No	     No        Yes
	   done 	 No	     No        Yes
	   echo 	 Yes	     Yes       Yes
	   echotc	 No	     Yes       No
	   elif 	 No	     No        Yes
	   else 	 No	     Yes       Yes
	   end		 No	     Yes       No
	   endif	 No	     Yes       No
	   endsw	 No	     Yes       No
	   esac 	 No	     No        Yes
	   eval 	 No	     Yes       Yes
	   exec 	 No	     Yes       Yes
	   exit 	 No	     Yes       Yes
	   export	 No	     No        Yes
	   false	 Yes	     No        Yes
	   fc		 No**	     No        Yes
	   fg		 No**	     Yes       Yes
	   filetest	 No	     Yes       No
	   fi		 No	     No        Yes
	   for		 No	     No        Yes
	   foreach	 No	     Yes       No
	   getopts	 No**	     No        Yes
	   glob 	 No	     Yes       No
	   goto 	 No	     Yes       No
	   hash 	 No	     No        Yes
	   hashstat	 No	     Yes       No
	   history	 No	     Yes       No
	   hup		 No	     Yes       No
	   if		 No	     Yes       Yes
	   jobid	 No	     No        Yes
	   jobs 	 No**	     Yes       Yes
	   kill 	 Yes	     Yes       No
	   limit	 No	     Yes       No
	   local	 No	     No        Yes
	   log		 No	     Yes       No
	   login	 Yes	     Yes       No
	   logout	 No	     Yes       No
	   ls-F 	 No	     Yes       No
	   nice 	 Yes	     Yes       No
	   nohup	 Yes	     Yes       No
	   notify	 No	     Yes       No
	   onintr	 No	     Yes       No
	   popd 	 No	     Yes       No
	   printenv	 Yes	     Yes       No
	   pushd	 No	     Yes       No
	   pwd		 Yes	     No        Yes
	   read 	 No**	     No        Yes
	   readonly	 No	     No        Yes
	   rehash	 No	     Yes       No
	   repeat	 No	     Yes       No
	   return	 No	     No        Yes
	   sched	 No	     Yes       No
	   set		 No	     Yes       Yes
	   setenv	 No	     Yes       No
	   settc	 No	     Yes       No
	   setty	 No	     Yes       No
	   setvar	 No	     No        Yes
	   shift	 No	     Yes       Yes
	   source	 No	     Yes       No
	   stop 	 No	     Yes       No
	   suspend	 No	     Yes       No
	   switch	 No	     Yes       No
	   telltc	 No	     Yes       No
	   test 	 Yes	     No        Yes
	   then 	 No	     No        Yes
	   time 	 Yes	     Yes       No
	   times	 No	     No        Yes
	   trap 	 No	     No        Yes
	   true 	 Yes	     No        Yes
	   type 	 No	     No        Yes
	   ulimit	 No	     No        Yes
	   umask	 No**	     Yes       Yes
	   unalias	 No**	     Yes       Yes
	   uncomplete	 No	     Yes       No
	   unhash	 No	     Yes       No
	   unlimit	 No	     Yes       No
	   unset	 No	     Yes       Yes
	   unsetenv	 No	     Yes       No
	   until	 No	     No        Yes
	   wait 	 No**	     Yes       Yes
	   where	 No	     Yes       No
	   which	 Yes	     Yes       No
	   while	 No	     Yes       Yes

SEE ALSO
     csh(1), echo(1), false(1), info(1), kill(1), login(1), nice(1), nohup(1),
     printenv(1), pwd(1), sh(1), test(1), time(1), true(1), which(1)

HISTORY
     The builtin manual page first appeared in FreeBSD 3.4.

AUTHORS
     This manual page was written by Sheldon Hearn <sheldonh@FreeBSD.org>.

BSD			       February 23, 2005			   BSD
","# exit

> Quit the current CMD instance or the current batch file.
> More information: <https://docs.microsoft.com/en-us/windows-server/administration/windows-commands/exit>.

- Quit the current CMD instance:

`exit`

- Quit the current batch script:

`exit /b`

- Quit using a specific exit code:

`exit {{exit_code}}`
"
reg-add,https://docs.microsoft.com/en-us/windows-server/administration/windows-commands/reg-add,,"# reg add

> Add new keys and their values to the registry.
> More information: <https://docs.microsoft.com/en-us/windows-server/administration/windows-commands/reg-add>.

- Add a new registry key:

`reg add {{key_name}}`

- Add a new value under a specific key:

`reg add {{key_name}} /v {{value}}`

- Add a new value with specific data:

`reg add {{key_name}} /d {{data}}`

- Add a new value to a key with a specific data type:

`reg add {{key_name}} /t {{type}}`

- Forcefully overwrite the existing registry value without a prompt:

`reg add {{key_name}} /f`
"
choco-outdated,https://chocolatey.org/docs/commands-outdated,,"# choco outdated

> Check for outdated packages with Chocolatey.
> More information: <https://chocolatey.org/docs/commands-outdated>.

- Display a list of outdated packages in table format:

`choco outdated`

- Ignore pinned packages in the output:

`choco outdated --ignore-pinned`

- Specify a custom source to check packages from:

`choco outdated --source {{source_url|alias}}`

- Provide a username and password for authentication:

`choco outdated --user {{username}} --password {{password}}`
"
dir,https://docs.microsoft.com/en-us/windows-server/administration/windows-commands/dir,"
DIR(5)			    BSD File Formats Manual			DIR(5)

NAME
     dir, dirent -- directory file format

SYNOPSIS
     #include <sys/types.h>
     #include <sys/dir.h>

DESCRIPTION
     Directories provide a convenient hierarchical method of grouping files
     while obscuring the underlying details of the storage medium.  A direc-
     tory file is differentiated from a plain file by a flag in its inode(5)
     entry.  It consists of records (directory entries) each of which contains
     information about a file and a pointer to the file itself.  Directory
     entries may contain other directories as well as plain files; such nested
     directories are refered to as subdirectories.  A hierarchy of directories
     and files is formed in this manner and is called a file system (or
     referred to as a file system tree).

     Each directory file contains two special directory entries; one is a
     pointer to the directory itself called dot `.' and the other a pointer to
     its parent directory called dot-dot `..'.	Dot and dot-dot are valid
     pathnames, however, the system root directory `/', has no parent and dot-
     dot points to itself like dot.

     File system nodes are ordinary directory files on which has been grafted
     a file system object, such as a physical disk or a partitioned area of
     such a disk.  (See mount(1) and mount(8).)

     The directory entry format is defined in the file <sys/dirent.h> and fur-
     ther in the file <dirent.h>.  When the macro _DARWIN_FEATURE_64_BIT_INODE
     is not defined (see stat(2) for more information on this macro), the
     dirent structure is defined as:

     /*** Excerpt from <sys/dirent.h> ***/
     /*
      * The dirent structure defines the format of directory entries.
      *
      * A directory entry has a struct dirent at the front of it, containing its
      * inode number, the length of the entry, and the length of the name
      * contained in the entry.  These are followed by the name padded to a 4
      * byte boundary with null bytes.	All names are guaranteed null terminated.
      * The maximum length of a name in a directory is 255.
      */

     struct dirent { /* when _DARWIN_FEATURE_64_BIT_INODE is NOT defined */
	     ino_t	d_ino;		      /* file number of entry */
	     __uint16_t d_reclen;	      /* length of this record */
	     __uint8_t	d_type; 	      /* file type, see below */
	     __uint8_t	d_namlen;	      /* length of string in d_name */
	     char    d_name[255 + 1];	/* name must be no longer than this */
     };

     However, when the macro _DARWIN_FEATURE_64_BIT_INODE is defined, the
     dirent structure is defined as:

     /*
      * The dirent structure defines the format of directory entries.
      *
      * A directory entry has a struct dirent at the front of it, containing its
      * inode number, the length of the entry, and the length of the name
      * contained in the entry.  These are followed by the name padded to a 4
      * byte boundary with null bytes.	All names are guaranteed null terminated.
      * The maximum length of a name in a directory is 1023.
      */

     struct dirent { /* when _DARWIN_FEATURE_64_BIT_INODE is defined */
	     ino_t	d_fileno;     /* file number of entry */
	     __uint64_t d_seekoff;    /* seek offset (optional, used by servers) */
	     __uint16_t d_reclen;     /* length of this record */
	     __uint16_t d_namlen;     /* length of string in d_name */
	     __uint8_t	d_type;       /* file type, see below */
	     char    d_name[1024];    /* name must be no longer than this */
     };

     In addition:

     /*
      * File types
      */
     #define DT_UNKNOWN       0
     #define DT_FIFO	      1
     #define DT_CHR	      2
     #define DT_DIR	      4
     #define DT_BLK	      6
     #define DT_REG	      8
     #define DT_LNK	     10
     #define DT_SOCK	     12
     #define DT_WHT	     14

     -----------------------------------------

     /*** Excerpt from <dirent.h> ***/

     #define d_fileno	     d_ino	  /* backward compatibility */

     /* definitions for library routines operating on directories. */
     #define DIRBLKSIZ	     1024

     struct _telldir;		     /* see telldir.h */

     /* structure describing an open directory. */
     typedef struct _dirdesc {
	     int     __dd_fd;	   /* file descriptor associated with directory */
	     long    __dd_loc;	   /* offset in current buffer */
	     long    __dd_size;    /* amount of data returned by getdirentries */
	     char    *__dd_buf;    /* data buffer */
	     int     __dd_len;	   /* size of data buffer */
	     long    __dd_seek;    /* magic cookie returned by getdirentries */
	     long    __dd_rewind;  /* magic cookie for rewinding */
	     int     __dd_flags;   /* flags for readdir */
	     pthread_mutex_t __dd_lock; /* for thread locking */
	     struct _telldir *__dd_td; /* telldir position recording */
     } DIR;

     #define dirfd(dirp)     ((dirp)->dd_fd)

     /* flags for opendir2 */
     #define DTF_HIDEW	     0x0001  /* hide whiteout entries */
     #define DTF_NODUP	     0x0002  /* don't return duplicate names */
     #define DTF_REWIND      0x0004  /* rewind after reading union stack */
     #define __DTF_READALL   0x0008  /* everything has been read */

SEE ALSO
     fs(5), inode(5)

HISTORY
     A dir file format appeared in Version 7 AT&T UNIX.

4.2 Berkeley Distribution	April 19, 1994	     4.2 Berkeley Distribution
","# dir

> List directory contents.
> More information: <https://docs.microsoft.com/en-us/windows-server/administration/windows-commands/dir>.

- Show the contents of the current directory:

`dir`

- Show the contents of a given directory:

`dir {{path/to/directory}}`

- Show the contents of the current directory, including hidden ones:

`dir /A`

- Show the contents of a given directory, including hidden ones:

`dir {{path/to/directory}} /A`
"
units,,"
UNITS(1)		  BSD General Commands Manual		      UNITS(1)

NAME
     units -- conversion program

SYNOPSIS
     units [-f filename] [-qv] [from-unit to-unit]

OPTIONS
     The following options are available:

     -f filename
	     Specify the name of the units data file to load.

     -q      Suppress prompting of the user for units and the display of sta-
	     tistics about the number of units loaded.

     -v      Print the version number.

     from-unit to-unit
	     Allow a single unit conversion to be done directly from the com-
	     mand line.  The program will not print prompts.  It will print
	     out the result of the single specified conversion.

DESCRIPTION
     The units program converts quantities expressed in various scales to
     their equivalents in other scales.  The units program can only handle
     multiplicative scale changes.  It cannot convert Celsius to Fahrenheit,
     for example.  It works interactively by prompting the user for input:

	 You have: meters
	 You want: feet
		 * 3.2808399
		 / 0.3048

	 You have: cm^3
	 You want: gallons
		 * 0.00026417205
		 / 3785.4118

	 You have: meters/s
	 You want: furlongs/fortnight
		 * 6012.8848
		 / 0.00016630952

	 You have: 1|2 inch
	 You want: cm
		 * 1.27
		 / 0.78740157

     Powers of units can be specified using the '^' character as shown in the
     example, or by simple concatenation: 'cm3' is equivalent to 'cm^3'.  Mul-
     tiplication of units can be specified by using spaces, a dash or an
     asterisk.	Division of units is indicated by the slash ('/').  Note that
     multiplication has a higher precedence than division, so 'm/s/s' is the
     same as 'm/s^2' or 'm/s s'.  Division of numbers must be indicated using
     the vertical bar ('|').  To convert half a meter, you would write '1|2
     meter'.  If you write '1/2 meter' then the units program would interpret
     that as equivalent to '0.5/meter'.  If you enter incompatible unit types,
     the units program will print a message indicating that the units are not
     conformable and it will display the reduced form for each unit:

	 You have: ergs/hour
	 You want: fathoms kg^2 / day
	 conformability error
		 2.7777778e-11 kg m^2 / sec^3
		 2.1166667e-05 kg^2 m / sec

     The conversion information is read from a units data file.  The default
     file includes definitions for most familiar units, abbreviations and met-
     ric prefixes.  Some constants of nature included are:

	   pi	      ratio of circumference to diameter
	   c	      speed of light
	   e	      charge on an electron
	   g	      acceleration of gravity
	   force      same as g
	   mole       Avogadro's number
	   water      pressure per unit height of water
	   mercury    pressure per unit height of mercury
	   au	      astronomical unit

     The unit 'pound' is a unit of mass.  Compound names are run together so
     'pound force' is a unit of force.	The unit 'ounce' is also a unit of
     mass.  The fluid ounce is 'floz'.	British units that differ from their
     US counterparts are prefixed with 'br', and currency is prefixed with its
     country name: 'belgiumfranc', 'britainpound'.  When searching for a unit,
     if the specified string does not appear exactly as a unit name, then
     units will try to remove a trailing 's' or a trailing 'es' and check
     again for a match.

     To find out what units are available read the standard units file.  If
     you want to add your own units you can supply your own file.  A unit is
     specified on a single line by giving its name and an equivalence.	Be
     careful to define new units in terms of old ones so that a reduction
     leads to the primitive units which are marked with '!' characters.  The
     units program will not detect infinite loops that could be caused by
     careless unit definitions.  Comments in the unit definition file begin
     with a '/' character at the beginning of a line.

     Prefixes are defined in the same was as standard units, but with a trail-
     ing dash at the end of the prefix name.  If a unit is not found even
     after removing trailing 's' or 'es', then it will be checked against the
     list of prefixes.	Prefixes will be removed until a legal base unit is
     identified.

     Here is an example of a short units file that defines some basic units.

	   m	     !a!
	   sec	     !b!
	   micro-    1e-6
	   minute    60 sec
	   hour      60 min
	   inch      0.0254 m
	   ft	     12 inches
	   mile      5280 ft

FILES
     /usr/share/misc/units.lib	the standard units library

AUTHORS
     Adrian Mariano <adrian@cam.cornell.edu>

BUGS
     The effect of including a '/' in a prefix is surprising.

     Exponents entered by the user can be only one digit.  You can work around
     this by multiplying several terms.

     The user must use | to indicate division of numbers and / to indicate
     division of symbols.  This distinction should not be necessary.

     The program contains various arbitrary limits on the length of the units
     converted and on the length of the data file.

     The program should use a hash table to store units so that it does not
     take so long to load the units list and check for duplication.

BSD				 July 14, 1993				   BSD
","# units

> Provide the conversion between two units of measure.

- Run in interactive mode:

`units`

- Show the conversion between two simple units:

`units {{quarts}} {{tablespoons}}`

- Convert between units with quantities:

`units {{15 pounds}} {{kilograms}}`

- Show the conversion between two compound units:

`units {{""meters / second""}} {{""inches / hour""}}`

- Show the conversion between units with different dimensions:

`units {{""acres""}} {{""ft^2""}}`
"
choco-pin,https://chocolatey.org/docs/commands-pin,,"# choco pin

> Pin a package at a specific version with Chocolatey.
> Pinned packages are skipped automatically when upgrading.
> More information: <https://chocolatey.org/docs/commands-pin>.

- Display a list of pinned packages and their versions:

`choco pin list`

- Pin a package at its current version:

`choco pin add --name {{package}}`

- Pin a package at a specific version:

`choco pin add --name {{package}} --version {{version}}`

- Remove a pin for a specific package:

`choco pin remove --name {{package}}`
"
reg-copy,https://docs.microsoft.com/en-us/windows-server/administration/windows-commands/reg-copy,,"# reg copy

> Copy keys and their values in the registry.
> More information: <https://docs.microsoft.com/en-us/windows-server/administration/windows-commands/reg-copy>.

- Copy a registry key to a new registry location:

`reg copy {{old_key_name}} {{new_key_name}}`

- Copy a registry key recursively to a new registry location:

`reg copy {{old_key_name}} {{new_key_name}} /s`

- Forcefully copy a registry key without a prompt:

`reg copy {{old_key_name}} {{new_key_name}} /f`
"
color,https://docs.microsoft.com/en-us/windows-server/administration/windows-commands/color,,"# color

> Set the console foreground and background colors.
> More information: <https://docs.microsoft.com/en-us/windows-server/administration/windows-commands/color>.

- Set the console colors to the default values:

`color`

- List available color values and detailed information:

`color /?`

- Set the console foreground and background to a specific color:

`color {{foreground_code}}{{background_code}}`
"
cmd,https://docs.microsoft.com/en-us/windows-server/administration/windows-commands/cmd,,"# cmd

> The Windows command interpreter.
> More information: <https://docs.microsoft.com/en-us/windows-server/administration/windows-commands/cmd>.

- Start a new instance of the command interpreter:

`cmd`

- Run the specified command and then exit:

`cmd /c ""{{command}}""`

- Run the specified command and then enter an interactive shell:

`cmd /k ""{{command}}""`

- Disable the usage of `echo` in command output:

`cmd /q`

- Enable or disable command extensions:

`cmd /e:{{on|off}}`

- Enable or disable file or directory autocompletion:

`cmd /f:{{on|off}}`

- Enable or disable environment variable expansion:

`cmd /v:{{on|off}}`

- Force output to use unicode encoding:

`cmd /u`
"
fc,https://docs.microsoft.com/en-us/windows-server/administration/windows-commands/fc,"
BUILTIN(1)		  BSD General Commands Manual		    BUILTIN(1)

NAME
     builtin, !, %, ., :, @, {, }, alias, alloc, bg, bind, bindkey, break,
     breaksw, builtins, case, cd, chdir, command, complete, continue, default,
     dirs, do, done, echo, echotc, elif, else, end, endif, endsw, esac, eval,
     exec, exit, export, false, fc, fg, filetest, fi, for, foreach, getopts,
     glob, goto, hash, hashstat, history, hup, if, jobid, jobs, kill, limit,
     local, log, login, logout, ls-F, nice, nohup, notify, onintr, popd,
     printenv, pushd, pwd, read, readonly, rehash, repeat, return, sched, set,
     setenv, settc, setty, setvar, shift, source, stop, suspend, switch,
     telltc, test, then, time, times, trap, true, type, ulimit, umask,
     unalias, uncomplete, unhash, unlimit, unset, unsetenv, until, wait,
     where, which, while -- shell built-in commands

SYNOPSIS
     builtin [-options] [args ...]

DESCRIPTION
     Shell builtin commands are commands that can be executed within the run-
     ning shell's process.  Note that, in the case of csh(1) builtin commands,
     the command is executed in a subshell if it occurs as any component of a
     pipeline except the last.

     If a command specified to the shell contains a slash ``/'', the shell
     will not execute a builtin command, even if the last component of the
     specified command matches the name of a builtin command.  Thus, while
     specifying ``echo'' causes a builtin command to be executed under shells
     that support the echo builtin command, specifying ``/bin/echo'' or
     ``./echo'' does not.

     While some builtin commands may exist in more than one shell, their oper-
     ation may be different under each shell which supports them.  Below is a
     table which lists shell builtin commands, the standard shells that sup-
     port them and whether they exist as standalone utilities.

     Only builtin commands for the csh(1) and sh(1) shells are listed here.
     Consult a shell's manual page for details on the operation of its builtin
     commands.	Beware that the sh(1) manual page, at least, calls some of
     these commands ``built-in commands'' and some of them ``reserved words''.
     Users of other shells may need to consult an info(1) page or other
     sources of documentation.

     Commands marked ``No**'' under External do exist externally, but are
     implemented as scripts using a builtin command of the same name.

	   Command	 External    csh(1)    sh(1)
	   !		 No	     No        Yes
	   %		 No	     Yes       No
	   .		 No	     No        Yes
	   :		 No	     Yes       Yes
	   @		 No	     Yes       Yes
	   {		 No	     No        Yes
	   }		 No	     No        Yes
	   alias	 No**	     Yes       Yes
	   alloc	 No	     Yes       No
	   bg		 No**	     Yes       Yes
	   bind 	 No	     No        Yes
	   bindkey	 No	     Yes       No
	   break	 No	     Yes       Yes
	   breaksw	 No	     Yes       No
	   builtin	 No	     No        Yes
	   builtins	 No	     Yes       No
	   case 	 No	     Yes       Yes
	   cd		 No**	     Yes       Yes
	   chdir	 No	     Yes       Yes
	   command	 No**	     No        Yes
	   complete	 No	     Yes       No
	   continue	 No	     Yes       Yes
	   default	 No	     Yes       No
	   dirs 	 No	     Yes       No
	   do		 No	     No        Yes
	   done 	 No	     No        Yes
	   echo 	 Yes	     Yes       Yes
	   echotc	 No	     Yes       No
	   elif 	 No	     No        Yes
	   else 	 No	     Yes       Yes
	   end		 No	     Yes       No
	   endif	 No	     Yes       No
	   endsw	 No	     Yes       No
	   esac 	 No	     No        Yes
	   eval 	 No	     Yes       Yes
	   exec 	 No	     Yes       Yes
	   exit 	 No	     Yes       Yes
	   export	 No	     No        Yes
	   false	 Yes	     No        Yes
	   fc		 No**	     No        Yes
	   fg		 No**	     Yes       Yes
	   filetest	 No	     Yes       No
	   fi		 No	     No        Yes
	   for		 No	     No        Yes
	   foreach	 No	     Yes       No
	   getopts	 No**	     No        Yes
	   glob 	 No	     Yes       No
	   goto 	 No	     Yes       No
	   hash 	 No	     No        Yes
	   hashstat	 No	     Yes       No
	   history	 No	     Yes       No
	   hup		 No	     Yes       No
	   if		 No	     Yes       Yes
	   jobid	 No	     No        Yes
	   jobs 	 No**	     Yes       Yes
	   kill 	 Yes	     Yes       No
	   limit	 No	     Yes       No
	   local	 No	     No        Yes
	   log		 No	     Yes       No
	   login	 Yes	     Yes       No
	   logout	 No	     Yes       No
	   ls-F 	 No	     Yes       No
	   nice 	 Yes	     Yes       No
	   nohup	 Yes	     Yes       No
	   notify	 No	     Yes       No
	   onintr	 No	     Yes       No
	   popd 	 No	     Yes       No
	   printenv	 Yes	     Yes       No
	   pushd	 No	     Yes       No
	   pwd		 Yes	     No        Yes
	   read 	 No**	     No        Yes
	   readonly	 No	     No        Yes
	   rehash	 No	     Yes       No
	   repeat	 No	     Yes       No
	   return	 No	     No        Yes
	   sched	 No	     Yes       No
	   set		 No	     Yes       Yes
	   setenv	 No	     Yes       No
	   settc	 No	     Yes       No
	   setty	 No	     Yes       No
	   setvar	 No	     No        Yes
	   shift	 No	     Yes       Yes
	   source	 No	     Yes       No
	   stop 	 No	     Yes       No
	   suspend	 No	     Yes       No
	   switch	 No	     Yes       No
	   telltc	 No	     Yes       No
	   test 	 Yes	     No        Yes
	   then 	 No	     No        Yes
	   time 	 Yes	     Yes       No
	   times	 No	     No        Yes
	   trap 	 No	     No        Yes
	   true 	 Yes	     No        Yes
	   type 	 No	     No        Yes
	   ulimit	 No	     No        Yes
	   umask	 No**	     Yes       Yes
	   unalias	 No**	     Yes       Yes
	   uncomplete	 No	     Yes       No
	   unhash	 No	     Yes       No
	   unlimit	 No	     Yes       No
	   unset	 No	     Yes       Yes
	   unsetenv	 No	     Yes       No
	   until	 No	     No        Yes
	   wait 	 No**	     Yes       Yes
	   where	 No	     Yes       No
	   which	 Yes	     Yes       No
	   while	 No	     Yes       Yes

SEE ALSO
     csh(1), echo(1), false(1), info(1), kill(1), login(1), nice(1), nohup(1),
     printenv(1), pwd(1), sh(1), test(1), time(1), true(1), which(1)

HISTORY
     The builtin manual page first appeared in FreeBSD 3.4.

AUTHORS
     This manual page was written by Sheldon Hearn <sheldonh@FreeBSD.org>.

BSD			       February 23, 2005			   BSD
","# fc

> Compare the differences between two files or sets of files.
> Use wildcards (*) to compare sets of files.
> More information: <https://docs.microsoft.com/en-us/windows-server/administration/windows-commands/fc>.

- Compare 2 specified files:

`fc {{path/to/file_1}} {{path/to/file_2}}`

- Perform a case-insensitive comparison:

`fc /c {{path/to/file_1}} {{path/to/file_2}}`

- Compare files as Unicode text:

`fc /u {{path/to/file_1}} {{path/to/file_2}}`

- Compare files as ASCII text:

`fc /l {{path/to/file_1}} {{path/to/file_2}}`

- Compare files as binary:

`fc /b {{path/to/file_1}} {{path/to/file_2}}`

- Disable tab-to-space expansion:

`fc /t {{path/to/file_1}} {{path/to/file_2}}`

- Compress whitespace (tabs and spaces) for comparisons:

`fc /w {{path/to/file_1}} {{path/to/file_2}}`
"
reg-restore,https://docs.microsoft.com/en-us/windows-server/administration/windows-commands/reg-restore,,"# reg restore

> Restore a key and its values from a backup file.
> See `reg-save` for more information.
> More information: <https://docs.microsoft.com/en-us/windows-server/administration/windows-commands/reg-restore>.

- Overwrite a specified key with data from a backup file:

`reg restore {{key_name}} {{path/to/file}}`
"
xcopy,,,"# xcopy

> Copy files and directory trees.

- Copy the file(s) to the specified destination:

`xcopy {{path/to/file_or_directory}} {{path/to/destination}}`

- List files that will be copied before copying:

`xcopy {{path/to/file_or_directory}} {{path/to/destination}} /p`

- Copy the directory structure only, excluding files:

`xcopy {{path/to/file_or_directory}} {{path/to/destination}} /t`

- Include empty directories when copying:

`xcopy {{path/to/file_or_directory}} {{path/to/destination}} /e`

- Keep the source ACL in the destination:

`xcopy {{path/to/file_or_directory}} {{path/to/destination}} /o`

- Allow resuming when network connection is lost:

`xcopy {{path/to/file_or_directory}} {{path/to/destination}} /z`

- Disable the prompt when the file exists in the destination:

`xcopy {{path/to/file_or_directory}} {{path/to/destination}} /y`

- Display detailed usage information:

`xcopy /?`
"
reg-compare,https://docs.microsoft.com/en-us/windows-server/administration/windows-commands/reg-compare,,"# reg compare

> Compare keys and their values in the registry.
> More information: <https://docs.microsoft.com/en-us/windows-server/administration/windows-commands/reg-compare>.

- Compare all values under a specific key with a second key:

`reg compare {{first_key_name}} {{second_key_name}}`

- Compare a specific value under two keys:

`reg compare {{first_key_name}} {{second_key_name}} /v {{value}}`

- Compare all sub keys and values for two keys:

`reg compare {{first_key_name}} {{second_key_name}} /s`

- Only output the matches between the specified keys:

`reg compare {{first_key_name}} {{second_key_name}} /os`

- Output the differences and matches between the specified keys:

`reg compare {{first_key_name}} {{second_key_name}} /oa`
"
choco-search,https://chocolatey.org/docs/commands-search,,"# choco search

> Search for a local or remote package with Chocolatey.
> More information: <https://chocolatey.org/docs/commands-search>.

- Search for a package:

`choco search {{query}}`

- Search for a package locally:

`choco search {{query}} --local-only`

- Only include exact matches in the results:

`choco search {{query}} --exact`

- Confirm all prompts automatically:

`choco search {{query}} --yes`

- Specify a custom source to search for packages in:

`choco search {{query}} --source {{source_url|alias}}`

- Provide a username and password for authentication:

`choco search {{query}} --user {{username}} --password {{password}}`
"
rdpsign,https://docs.microsoft.com/en-us/windows-server/administration/windows-commands/rdpsign,,"# rdpsign

> A tool for signing Remote Desktop Protocol (RDP) files.
> More information: <https://docs.microsoft.com/en-us/windows-server/administration/windows-commands/rdpsign>.

- Sign an RDP file:

`rdpsign {{path/to/file.rdp}}`

- Sign an RDP file using a specific sha256 hash:

`rdpsign {{path/to/file.rdp}} /sha265 {{hash}}`

- Enable quiet output:

`rdpsign {{path/to/file.rdp}} /q`

- Display verbose warnings, messages and statuses:

`rdpsign {{path/to/file.rdp}} /v`

- Test the signing by displaying the output to `stdout` without updating the file:

`rdpsign {{path/to/file.rdp}} /l`
"
reg-query,https://docs.microsoft.com/en-us/windows-server/administration/windows-commands/reg-query,,"# reg query

> Display the values of keys and sub keys in the registry.
> More information: <https://docs.microsoft.com/en-us/windows-server/administration/windows-commands/reg-query>.

- Display all values of a key:

`reg query {{key_name}}`

- Display a specific value of a key:

`reg query {{key_name}} /v {{value}}`

- Display all values of a key and its sub keys:

`reg query {{key_name}} /s`

- Search for keys and values matching a specific pattern:

`reg query {{key_name}} /f ""{{query_pattern}}""`

- Display a value of a key matching a specified data type:

`reg query {{key_name}} /t {{type}}`
"
nfsstat,https://docs.microsoft.com/windows-server/administration/windows-commands/nfsstat,"
NFSSTAT(1)		  BSD General Commands Manual		    NFSSTAT(1)

NAME
     nfsstat -- display NFS statistics

SYNOPSIS
     nfsstat [-cseuv] [-w wait] [-n net|user] [-m [mountpath]]

DESCRIPTION
     nfsstat displays statistics kept about NFS client and server activity,
     active user activity, exported directories, and mount information.  In
     the absence of any options, nfsstat displays NFS client and server sta-
     tistics.

     The options are as follows:

     -c      Show NFS client statistics.

     -e      Show NFS server exported directory statistics.

     -m [mountpath]
	     Show NFS mount information.

     -s      Show NFS server statistics.

     -u      Show NFS server active user statistics.

     -w wait
	     Display a shorter summary at wait second intervals.

     -n net|user
	     Show network addresses as numbers, or show users as uid numbers.
	     This option can appear multiple times.

     -v      Show additional information (if available).

OUTPUT
     The data fields that nfsstat displays for each set of statistics are:

     Client Information:
	 Statistics for NFS file system mounts.

	 RPC Counts
	     Counts of the RPC calls made to each of the NFS protocol proce-
	     dures.

	 RPC Info
	     Statistics for NFS RPC calls:

	     TimedOut
		  RPC calls that timed out, perhaps to a slow or dead server.

	     Invalid
		  Invalid RPC replies.

	     X Replies
		  RPC replies received that did not have calls pending.

	     Retries
		  RPC calls that were retried.

	     Requests
		  Total number of RPC calls made.

	 Cache Info
	     Statistics on NFS client-side cache performance:

	     Attr Hits/Misses
		  Performance of the NFS file attribute cache.

	     Lkup Hits/Misses
		  Performance of the directory name lookup cache.

	     BioR Hits/Misses
		  Performance of block cache for reads.

	     BioW Hits/Misses
		  Performance of block cache for writes.

	     BioRL Hits/Misses
		  Performance of symbolic link cache.

	     BioD Hits/Misses
		  Performance of directory cache.

	     DirE Hits/Misses
		  Performance of directory offset cache.

     Server Information:
	 Statistics for the NFS server.

	 RPC Counts
	     Counts of RPC calls on each of the NFS server's procedures are
	     recorded here.

	 Server Ret-Failed
	     RPC errors returned by the server.

	 Server Faults
	     Errors in the NFS server.

	 Server Cache Stats
	     Statistics from the NFS server's RPC duplicate request cache:

	     Inprog
		  Calls already in progress.

	     Idem
		  Cache hits for idempotent procedures.

	     Non-idem
		  Cache hits for non-idempotent procedures.

	     Misses
		  Cache Misses.

	 Server Write Gathering
	     These statistics describe the efficiency of the NFS server's
	     write gathering feature.

	     WriteOps
		  Write operations to disk.

	     WriteRPC
		  Write operations received by the server.

	     Opsaved
		  Write operations that were gathered (WriteRPC - WriteOps)

     NFS Server Exported Directory Information:
	 Statistics for each exported directory on the NFS server.

	 NFS Requests
	      Count of NFS requests processed by an exported directory.

	 Bytes Read
	      Count of bytes read from an exported directory.

	 Bytes Written
	      Count of bytes written to an exported directory.

     NFS Server Active User Information:
	 List of active NFS users and statistics on the NFS server.

	 NFS Requests
	      Count of NFS requests received from an active user.

	 Bytes Read
	      Count of bytes read by an active user.

	 Bytes Written
	      Count of bytes written by an active user.

	 Idle
	      Amount of time an active user has been idle.

	 User
	      Name (or uid if -n user was given) of active user.

	 IP Address
	      Host name (or network address if -n net was given) of client
	      machine.

     NFS Mount Information:
	 Information about the given NFS mount (or all NFS mounts).

	 The path mounted on and the server:/path that is mounted.

	 Mount arguments originally passed in to the mount.

	 Current mount parameter values and status information.

SEE ALSO
     netstat(1), iostat(8), mount_nfs(8), nfsd(8)

HISTORY
     The nfsstat command appears in 4.4BSD.

4.4BSD			       January 11, 2011 			4.4BSD
","# nfsstat

> Display or reset the number of calls made to the NFS server.
> More information: <https://docs.microsoft.com/windows-server/administration/windows-commands/nfsstat>.

- Display the recorded number of calls made to the NFS server:

`nfsstat`

- Reset the recorded number of calls made to the NFS server:

`nfsstat -z`
"
choco-feature,https://chocolatey.org/docs/commands-feature,,"# choco feature

> Interact with features with Chocolatey.
> More information: <https://chocolatey.org/docs/commands-feature>.

- Display a list of available features:

`choco feature list`

- Enable a feature:

`choco feature enable --name {{name}}`

- Disable a feature:

`choco feature disable --name {{name}}`
"
taskkill,https://docs.microsoft.com/en-us/windows-server/administration/windows-commands/taskkill,,"# taskkill

> Terminate a process by its process id or name.
> More information: <https://docs.microsoft.com/en-us/windows-server/administration/windows-commands/taskkill>.

- Terminate a process by its id:

`taskkill /pid {{process_id}}`

- Terminate a process by its name:

`taskkill /im {{process_name}}`

- Forcefully terminate a specified process:

`taskkill /pid {{process_id}} /f`

- Terminate a process and its child processes:

`taskkill /im {{process_name}} /t`

- Terminate a process on a remote machine:

`taskkill /pid {{process_id}} /s {{remote_name}}`

- Display information about the usage of the command:

`taskkill /?`
"
choco-upgrade,https://chocolatey.org/docs/commands-upgrade,,"# choco upgrade

> Upgrade one or more packages with Chocolatey.
> More information: <https://chocolatey.org/docs/commands-upgrade>.

- Upgrade one or more space-separated packages:

`choco upgrade {{package(s)}}`

- Upgrade to a specific version of a package:

`choco upgrade {{package}} --version {{version}}`

- Upgrade all packages:

`choco upgrade all`

- Upgrade all except specified comma-separated packages:

`choco upgrade all --except ""{{package(s)}}""`

- Confirm all prompts automatically:

`choco upgrade {{package}} --yes`

- Specify a custom source to receive packages from:

`choco upgrade {{package}} --source {{source_url|alias}}`

- Provide a username and password for authentication:

`choco upgrade {{package}} --user {{username}} --password {{password}}`
"
repair-bde,https://docs.microsoft.com/en-us/windows-server/administration/windows-commands/repair-bde,,"# repair-bde

> Attempt to repair or decrypt a damaged BitLocker-encrypted volume.
> More information: <https://docs.microsoft.com/en-us/windows-server/administration/windows-commands/repair-bde>.

- Attempt to repair a specified volume:

`repair-bde {{C:}}`

- Attempt to repair a specified volume and output to another volume:

`repair-bde {{C:}} {{D:}}`

- Attempt to repair a specified volume using the provided recovery key file:

`repair-bde {{C:}} -RecoveryKey {{path/to/file.bek}}`

- Attempt to repair a specified volume using the provided numerical recovery password:

`repair-bde {{C:}} -RecoveryPassword {{password}}`

- Attempt to repair a specified volume using the provided password:

`repair-bde {{C:}} -Password {{password}}`

- Attempt to repair a specified volume using the provided key package:

`repair-bde {{C:}} -KeyPackage {{path/to/directory}}`

- Log all output to a specific file:

`repair-bde {{C:}} -LogFile {{path/to/file}}`

- Display all available options:

`repair-bde /?`
"
comp,https://docs.microsoft.com/en-us/windows-server/administration/windows-commands/comp,,"# comp

> Compare the contents of two files or sets of files.
> Use wildcards (*) to compare sets of files.
> More information: <https://docs.microsoft.com/en-us/windows-server/administration/windows-commands/comp>.

- Compare files interactively:

`comp`

- Compare two specified files:

`comp {{path/to/file_1}} {{path/to/file_2}}`

- Compare two sets of files:

`comp {{path/to/directory_1/*}} {{path/to/directory_2/*}}`

- Display differences in decimal format:

`comp /d {{path/to/file_1}} {{path/to/file_2}}`

- Display differences in ASCII format:

`comp /a {{path/to/file_1}} {{path/to/file_2}}`

- Display line numbers for differences:

`comp /l {{path/to/file_1}} {{path/to/file_2}}`

- Compare files case-insensitively:

`comp /c {{path/to/file_1}} {{path/to/file_2}}`

- Compare only the first 5 lines of each file:

`comp /n={{5}} {{path/to/file_1}} {{path/to/file_2}}`
"
del,https://docs.microsoft.com/en-us/windows-server/administration/windows-commands/del,,"# del

> Delete one or more files.
> More information: <https://docs.microsoft.com/en-us/windows-server/administration/windows-commands/del>.

- Delete one or more space-separated files or patterns:

`del {{file_pattern}}`

- Prompt for confirmation before deleting each file:

`del {{file_pattern}} /p`

- Force the deletion of read-only files:

`del {{file_pattern}} /f`

- Recursively delete file(s) from all subdirectories:

`del {{file_pattern}} /s`

- Do not prompt when deleting files based on a global wildcard:

`del {{file_pattern}} /q`

- Display the help and list available attributes:

`del /?`

- Delete files based on specified attributes:

`del {{file_pattern}} /a {{attribute}}`
"
fondue,https://docs.microsoft.com/en-us/windows-server/administration/windows-commands/fondue,,"# fondue

> A command line installer for optional Windows features.
> More information: <https://docs.microsoft.com/en-us/windows-server/administration/windows-commands/fondue>.

- Enable a specific Windows feature:

`fondue /enable-feature:{{feature}}`

- Hide all output messages to the user:

`fondue /enable-feature:{{feature}} /hide-ux:all`

- Specify a caller process name for error reporting:

`fondue /enable-feature:{{feature}} /caller-name:{{name}}`
"
tree,https://docs.microsoft.com/en-us/windows-server/administration/windows-commands/tree,"TREE(1) 							       TREE(1)



NAME
       tree - list contents of directories in a tree-like format.

SYNOPSIS
       tree  [-acdfghilnpqrstuvxACDFQNSUX]  [-L  level [-R]] [-H baseHREF] [-T
       title] [-o filename] [--nolinks] [-P pattern] [-I  pattern]  [--inodes]
       [--device] [--noreport] [--dirsfirst] [--version] [--help] [--filelimit
       #] [--si] [--prune] [--du] [--timefmt  format]  [--matchdirs]  [--from-
       file] [--] [directory ...]


DESCRIPTION
       Tree  is  a  recursive  directory listing program that produces a depth
       indented listing of files, which is  colorized  ala  dircolors  if  the
       LS_COLORS  environment  variable  is set and output is to tty.  With no
       arguments, tree lists the files in the current directory.  When	direc-
       tory  arguments	are given, tree lists all the files and/or directories
       found in the given directories each in turn.  Upon completion of  list-
       ing all files/directories found, tree returns the total number of files
       and/or directories listed.

       By default, when a symbolic link is encountered, the path that the sym-
       bolic  link refers to is printed after the name of the link in the for-
       mat:

	   name -> real-path

       If the `-l' option is given and the symbolic link refers to  an	actual
       directory, then tree will follow the path of the symbolic link as if it
       were a real directory.


OPTIONS
       Tree understands the following command line switches:


LISTING OPTIONS
       -a     All files are printed.  By default tree does  not  print	hidden
	      files  (those  beginning with a dot `.').  In no event does tree
	      print the file system constructs	`.'  (current  directory)  and
	      `..' (previous directory).


       -d     List directories only.


       -l     Follows  symbolic links if they point to directories, as if they
	      were directories. Symbolic links that will result  in  recursion
	      are avoided when detected.


       -f     Prints the full path prefix for each file.


       -x     Stay on the current file-system only.  Ala find -xdev.


       -L level
	      Max display depth of the directory tree.


       -R     Recursively  cross  down the tree each level directories (see -L
	      option), and at each of  them  execute  tree  again  adding  `-o
	      00Tree.html' as a new option.


       -P pattern
	      List  only  those files that match the wild-card pattern.  Note:
	      you must use the -a option to also consider those  files	begin-
	      ning with a dot `.'  for matching.  Valid wildcard operators are
	      `*' (any zero or more characters), `?' (any  single  character),
	      `[...]'  (any single character listed between brackets (optional
	      - (dash) for character  range  may  be  used:  ex:  [A-Z]),  and
	      `[^...]'	(any  single character not listed in brackets) and `|'
	      separates alternate patterns.


       -I pattern
	      Do not list those files that match the wild-card pattern.


       --ignore-case
	      If a match pattern is specified by the -P  or  -I  option,  this
	      will  cause  the pattern to match without regards to the case of
	      each letter.


       --matchdirs
	      If a match pattern is specified by  the  -P  option,  this  will
	      cause  the pattern to be applied to directory names (in addition
	      to filenames).  In the event of a match on the  directory  name,
	      matching	is  disabled  for  the	directory's  contents.	If the
	      --prune option is used, empty folders  that  match  the  pattern
	      will not be pruned.


       --prune
	      Makes  tree prune empty directories from the output, useful when
	      used in conjunction with -P or -I.  See BUGS AND NOTES below for
	      more information on this option.


       --noreport
	      Omits  printing  of  the file and directory report at the end of
	      the tree listing.


       --charset charset
	      Set the character set to use when outputting HTML and  for  line
	      drawing.


       --filelimit #
	      Do not descend directories that contain more than # entries.


       --timefmt format
	      Prints (implies -D) and formats the date according to the format
	      string which uses the strftime(3) syntax.


       -o filename
	      Send output to filename.



FILE OPTIONS
       -q     Print non-printable characters in filenames  as  question  marks
	      instead of the default.


       -N     Print non-printable characters as is instead of as escaped octal
	      numbers.


       -Q     Quote the names of files in double quotes.


       -p     Print the file type and permissions for each  file  (as  per  ls
	      -l).


       -u     Print the username, or UID # if no username is available, of the
	      file.


       -g     Print the group name, or GID # if no group name is available, of
	      the file.


       -s     Print the size of each file in bytes along with the name.


       -h     Print  the  size	of each file but in a more human readable way,
	      e.g. appending a size letter for kilobytes (K),  megabytes  (M),
	      gigabytes (G), terabytes (T), petabytes (P) and exabytes (E).


       --si   Like -h but use SI units (powers of 1000) instead.


       --du   For  each directory report its size as the accumulation of sizes
	      of all its files and sub-directories (and their  files,  and  so
	      on).   The total amount of used space is also given in the final
	      report (like the 'du -c' command.) This option requires tree  to
	      read  the entire directory tree before emitting it, see BUGS AND
	      NOTES below.  Implies -s.


       -D     Print the date of the last modification time or if -c  is  used,
	      the last status change time for the file listed.


       -F     Append  a `/' for directories, a `=' for socket files, a `*' for
	      executable files, a `>'  for  doors  (Solaris)  and  a  `|'  for
	      FIFO's, as per ls -F


       --inodes
	      Prints the inode number of the file or directory


       --device
	      Prints the device number to which the file or directory belongs



SORTING OPTIONS
       -v     Sort the output by version.


       -t     Sort  the output by last modification time instead of alphabeti-
	      cally.


       -c     Sort the output by last status change instead of alphabetically.
	      Modifies the -D option (if used) to print the last status change
	      instead of modification time.


       -U     Do not sort.  Lists files in directory order.  Disables  --dirs-
	      first.


       -r     Sort  the  output  in  reverse  order.  This is a meta-sort that
	      alter the above sorts.  This option is disabled when -U is used.


       --dirsfirst
	      List  directories  before files. This is a meta-sort that alters
	      the above sorts.	This option is disabled when -U is used.


       --sort[=]type
	      Sort the output by type instead of name.	Possible  values  are:
	      ctime (-c), mtime (-t), size, or version (-v).


GRAPHICS OPTIONS
       -i     Makes  tree not print the indentation lines, useful when used in
	      conjunction with the -f option.  Also removes as much whitespace
	      as possible when used with the -J or -x options.


       -A     Turn  on	ANSI  line graphics hack when printing the indentation
	      lines.


       -S     Turn on CP437 line graphics (useful  when  using	Linux  console
	      mode fonts). This option is now equivalent to `--charset=IBM437'
	      and may eventually be depreciated.


       -n     Turn colorization off always, over-ridden by the -C option.


       -C     Turn colorization on always, using built-in  color  defaults  if
	      the  LS_COLORS or TREE_COLORS environment variables are not set.
	      Useful to colorize output to a pipe.



XML/JSON/HTML OPTIONS
       -X     Turn on XML output. Outputs the directory tree as an XML format-
	      ted file.


       -J     Turn  on JSON output. Outputs the directory tree as an JSON for-
	      matted array.


       -H baseHREF
	      Turn on HTML output, including HTTP references. Useful  for  ftp
	      sites.   baseHREF  gives	the  base ftp location when using HTML
	      output. That is, the local directory  may  be  `/local/ftp/pub',
	      but   it	 must	be   referenced  as  `ftp://hostname.organiza-
	      tion.domain/pub' (baseHREF should  be  `ftp://hostname.organiza-
	      tion.domain').  Hint: don't use ANSI lines with this option, and
	      don't give more than one directory in the directory list. If you
	      wish  to	use  colors  via CSS style-sheet, use the -C option in
	      addition to this option to force color output.


       -T title
	      Sets the title and H1 header string in HTML output mode.


       --nolinks
	      Turns off hyperlinks in HTML output.



INPUT OPTIONS
       --fromfile Reads a directory listing from a file rather than the  file-
       system.	 Paths	provided  on  the  command line are files to read from
       rather than directories to search.  The	dot  (.)  directory  indicates
       that tree should read paths from standard input.


MISC OPTIONS
       --help Outputs a verbose usage listing.


       --version
	      Outputs the version of tree.


       --     Option  processing  terminator.  No further options will be pro-
	      cessed after this.



FILES
       /etc/DIR_COLORS		System color database.
       ~/.dircolors	   Users color database.


ENVIRONMENT
       LS_COLORS      Color information created by dircolors
       TREE_COLORS    Uses this for color information over LS_COLORS if it  is
       set.
       TREE_CHARSET   Character set for tree to use in HTML mode.
       CLICOLOR       Enables colorization even if TREE_COLORS or LS_COLORS is
       not set.
       CLICOLOR_FORCE Always enables colorization (effectively -C)
       LC_CTYPE       Locale for filename output.
       LC_TIME	      Locale for timefmt output, see strftime(3).
       TZ	 Timezone for timefmt output, see strftime(3).


AUTHOR
       Steve Baker (ice@mama.indstate.edu)
       HTML output hacked by Francesc Rocher (rocher@econ.udg.es)
       Charsets and OS/2 support by Kyosuke Tokoro (NBG01720@nifty.ne.jp)


BUGS AND NOTES
       Tree does not prune ""empty"" directories when the -P and -I options  are
       used by default. Use the --prune option.

       The -h and --si options round to the nearest whole number unlike the ls
       implementations which rounds up always.

       Pruning files and directories with the -I, -P and  --filelimit  options
       will lead to incorrect file/directory count reports.

       The  --prune  and --du options cause tree to accumulate the entire tree
       in memory before emitting it. For large directory trees this can  cause
       a significant delay in output and the use of large amounts of memory.

       The  timefmt  expansion	buffer	is limited to a ridiculously large 255
       characters.  Output of time strings longer than this will be undefined,
       but are guaranteed to not exceed 255 characters.

       XML/JSON trees are not colored, which is a bit of a shame.

       Probably more.


SEE ALSO
       dircolors(1), ls(1), find(1), du(1), strftime(3)



Tree 1.8.0							       TREE(1)
","# tree

> Display a graphical tree of the directory structure for a path.
> More information: <https://docs.microsoft.com/en-us/windows-server/administration/windows-commands/tree>.

- Display the tree for the current directory:

`tree`

- Display the tree for a specific directory:

`tree {{path/to/directory}}`

- Display the tree for a directory including files:

`tree {{path/to/directory}} /f`

- Display the tree using ASCII characters instead of extended characters:

`tree {{path/to/directory}} /a`
"
choco-source,https://chocolatey.org/docs/commands-source,,"# choco source

> Manage sources for packages with Chocolatey.
> More information: <https://chocolatey.org/docs/commands-source>.

- List currently available sources:

`choco source list`

- Add a new package source:

`choco source add --name {{name}} --source {{url}}`

- Add a new package source with credentials:

`choco source add --name {{name}} --source {{url}} --user {{username}} --password {{password}}`

- Add a new package source with a client certificate:

`choco source add --name {{name}} --source {{url}} --cert {{path/to/certificate}}`

- Enable a package source:

`choco source enable --name {{name}}`

- Disable a package source:

`choco source disable --name {{name}}`

- Remove a package source:

`choco source remove --name {{name}}`
"
systeminfo,https://docs.microsoft.com/en-us/windows-server/administration/windows-commands/systeminfo,,"# systeminfo

> Display operating system configuration for a local or remote machine.
> More information: <https://docs.microsoft.com/en-us/windows-server/administration/windows-commands/systeminfo>.

- Display system configuration for the local machine:

`systeminfo`

- Display system configuration in a specified output format:

`systeminfo /fo {{table|list|csv}}`

- Display system configuration for a remote machine:

`systeminfo /s {{remote_name}} /u {{username}} /p {{password}}`

- Display detailed usage information:

`systeminfo /?`
"
rmdir,https://docs.microsoft.com/en-us/windows-server/administration/windows-commands/rmdir,"
RMDIR(1)		  BSD General Commands Manual		      RMDIR(1)

NAME
     rmdir -- remove directories

SYNOPSIS
     rmdir [-p] directory ...

DESCRIPTION
     The rmdir utility removes the directory entry specified by each directory
     argument, provided it is empty.

     Arguments are processed in the order given.  In order to remove both a
     parent directory and a subdirectory of that parent, the subdirectory must
     be specified first so the parent directory is empty when rmdir tries to
     remove it.

     The following option is available:

     -p      Each directory argument is treated as a pathname of which all
	     components will be removed, if they are empty, starting with the
	     last most component.  (See rm(1) for fully non-discriminant
	     recursive removal.)

     The rmdir utility exits with one of the following values:

     0	     Each directory entry specified by a dir operand referred to an
	     empty directory and was removed successfully.

     >0      An error occurred.

SEE ALSO
     rm(1)

STANDARDS
     The rmdir command is expected to be IEEE Std 1003.2 (``POSIX.2'') compat-
     ible.

HISTORY
     A rmdir command appeared in Version 1 AT&T UNIX.

BSD				 May 31, 1993				   BSD
","# rmdir

> Remove a directory and its contents.
> More information: <https://docs.microsoft.com/en-us/windows-server/administration/windows-commands/rmdir>.

- Remove an empty directory:

`rmdir {{path/to/directory}}`

- Remove a directory and its contents recursively:

`rmdir {{path/to/directory}} /s`

- Remove a directory and its contents recursively without prompting:

`rmdir {{path/to/directory}} /s /q`
"
choco-apikey,https://chocolatey.org/docs/commands-apikey,,"# choco-apikey

> Manage API keys for Chocolatey sources.
> More information: <https://chocolatey.org/docs/commands-apikey>.

- Display a list of sources and their API keys:

`choco apikey`

- Display a specific source and its API key:

`choco apikey --source ""{{source_url}}""`

- Set an API key for a source:

`choco apikey --source ""{{source_url}}"" --key ""{{api_key}}""`

- Remove an API key for a source:

`choco apikey --source ""{{source_url}}"" --remove`
"
shutdown,https://docs.microsoft.com/en-us/windows-server/administration/windows-commands/shutdown,"
SHUTDOWN(8)		  BSD System Manager's Manual		   SHUTDOWN(8)

NAME
     shutdown -- close down the system at a given time

SYNOPSIS
     shutdown [-] [-h [-u] | -r | -s | -k] [-o [-n]] time
	      [warning-message ...]

DESCRIPTION
     The shutdown utility provides an automated shutdown procedure for super-
     users to nicely notify users when the system is shutting down, saving
     them from system administrators, hackers, and gurus, who would otherwise
     not bother with such niceties.

     The following options are available:

     -h      The system is halted at the specified time.

     -k      Kick everybody off.  The -k option does not actually halt the
	     system, but leaves the system multi-user with logins disabled
	     (for all but super-user).

     -n      If the -o is specified, prevent the file system cache from being
	     flushed by passing -n option to halt(8) or reboot(8).  This
	     option should probably not be used.

     -o      If -h or -r is specified, shutdown will execute halt(8) or
	     reboot(8) instead of sending a signal to launchd(8).

     -r      The system is rebooted at the specified time.

     -s      The system is put to sleep at the specified time.

     -u      The system is halted up until the point of removing system power,
	     but waits before removing power for 5 minutes so that an external
	     UPS (uninterruptible power supply) can forcibly remove power.
	     This simulates a dirty shutdown to permit a later automatic power
	     on. OS X uses this mode automatically with supported UPSs in
	     emergency shutdowns.

     time    Time is the time at which shutdown will bring the system down and
	     may be the word now (indicating an immediate shutdown) or specify
	     a future time in one of two formats: +number, or yymmddhhmm,
	     where the year, month, and day may be defaulted to the current
	     system values.  The first form brings the system down in number
	     minutes and the second at the absolute time specified.

     warning-message
	     Any other arguments comprise the warning message that is broad-
	     cast to users currently logged into the system.

     -	     If `-' is supplied as an option, the warning message is read from
	     the standard input.

     At intervals, becoming more frequent as apocalypse approaches and start-
     ing at ten hours before shutdown, warning messages are displayed on the
     terminals of all users logged in.

     At shutdown time a message is written to the system log, containing the
     time of shutdown, the person who initiated the shutdown and the reason.
     Corresponding signal is then sent to launchd(8) to respectively halt,
     reboot or bring the system down to single-user state (depending on the
     above options).

     A scheduled shutdown can be canceled by killing the shutdown process (a
     SIGTERM should suffice).

SIGTERM TO SIGKILL INTERVAL
     Upon shutdown, all running processes are sent a SIGTERM followed by a
     SIGKILL.  The SIGKILL will follow the SIGTERM by an intentionally inde-
     terminate period of time.	Programs are expected to take only enough time
     to flush all dirty data and exit.	Developers are encouraged to file a
     bug with the OS vendor, should they encounter an issue with this func-
     tionality.

SEE ALSO
     kill(1), login(1), wall(1), halt(8), launchd(8), reboot(8)

BACKWARD COMPATIBILITY
     The hours and minutes in the second time format may be separated by a
     colon (``:'') for backward compatibility.

HISTORY
     The shutdown utility appeared in 4.0BSD.

BSD			       December 11, 1998			   BSD
","# shutdown

> A tool for shutting down, restarting or logging off a machine.
> More information: <https://docs.microsoft.com/en-us/windows-server/administration/windows-commands/shutdown>.

- Shutdown the current machine:

`shutdown /s`

- Shutdown the current machine force-closing all apps:

`shutdown /s /f`

- Restart the current machine:

`shutdown /r`

- Hibernate the current machine:

`shutdown /h`

- Log off the current machine:

`shutdown /l`

- Specify a timeout in seconds to wait before shutting down:

`shutdown /s /t {{seconds}}`

- Specify a comment for the shutdown reason:

`shutdown /s /c ""{{reason}}""`

- Abort a shutdown sequence whose timeout is yet to expire:

`shutdown /a`

- Shutdown a remote machine:

`shutdown /m {{\\hostname}}`
"
driverquery,https://docs.microsoft.com/en-us/windows-server/administration/windows-commands/driverquery,,"# driverquery

> Display information about installed device drivers.
> More information: <https://docs.microsoft.com/en-us/windows-server/administration/windows-commands/driverquery>.

- Display a list of all installed device drivers:

`driverquery`

- Display a list of drivers in the specified format:

`driverquery /fo {{table|list|csv}}`

- Display a list of drivers with a column to indicate if they are signed:

`driverquery /si`

- Exclude the header in the output list:

`driverquery /nh`

- Display a list of drivers for a remote machine:

`driverquery /s {{hostname}} /u {{username}} /p {{password}}`

- Display a list of drivers with verbose information:

`driverquery /v`

- Display detailed usage information:

`driverquery /?`
"
logoff,https://docs.microsoft.com/en-us/windows-server/administration/windows-commands/logoff,,"# logoff

> Terminate a login session.
> More information: <https://docs.microsoft.com/en-us/windows-server/administration/windows-commands/logoff>.

- Terminate the current session:

`logoff`

- Terminate a session by its name or id:

`logoff {{session_name|session_id}}`

- Terminate a session on a specific server connected through RDP:

`logoff {{session_name|session_id}} /server:{{servername}}`
"
ftype,https://docs.microsoft.com/en-us/windows-server/administration/windows-commands/ftype,,"# ftype

> Display or modify file types used for file extension association.
> More information: <https://docs.microsoft.com/en-us/windows-server/administration/windows-commands/ftype>.

- Display a list of all file types:

`ftype`

- Display the associated program for a specific file type:

`ftype {{file_type}}`

- Set the associated program for a specific file type:

`ftype {{file_type}}=""{{path/to/executable_command}}""`
"
choco,https://chocolatey.org,,"# choco

> A command line interface for the Chocolatey package manager.
> See `choco install`, `choco upgrade` and other pages for additional information.
> More information: <https://chocolatey.org>.

- Execute Chocolatey command:

`choco {{command}}`

- Call general help:

`choco -?`

- Call help on a specific command:

`choco {{command}} -?`

- Check the Chocolatey version:

`choco --version`
"
reg-flags,https://docs.microsoft.com/en-us/windows-server/administration/windows-commands/reg-flags,,"# reg flags

> Display or set flags on registry keys.
> More information: <https://docs.microsoft.com/en-us/windows-server/administration/windows-commands/reg-flags>.

- Display current flags for a specific key:

`reg flags {{key_name}} query`

- Display help and available flag types:

`reg flags /?`

- Set specified space-separated flags, and unset unmentioned flags, for a specific key:

`reg flags {{key_name}} set {{flag_names}}`

- Set specified flags for a specific key and its sub keys:

`reg flags {{key_name}} set {{flag_names}} /s`
"
type,https://docs.microsoft.com/en-us/windows-server/administration/windows-commands/type,"
BUILTIN(1)		  BSD General Commands Manual		    BUILTIN(1)

NAME
     builtin, !, %, ., :, @, {, }, alias, alloc, bg, bind, bindkey, break,
     breaksw, builtins, case, cd, chdir, command, complete, continue, default,
     dirs, do, done, echo, echotc, elif, else, end, endif, endsw, esac, eval,
     exec, exit, export, false, fc, fg, filetest, fi, for, foreach, getopts,
     glob, goto, hash, hashstat, history, hup, if, jobid, jobs, kill, limit,
     local, log, login, logout, ls-F, nice, nohup, notify, onintr, popd,
     printenv, pushd, pwd, read, readonly, rehash, repeat, return, sched, set,
     setenv, settc, setty, setvar, shift, source, stop, suspend, switch,
     telltc, test, then, time, times, trap, true, type, ulimit, umask,
     unalias, uncomplete, unhash, unlimit, unset, unsetenv, until, wait,
     where, which, while -- shell built-in commands

SYNOPSIS
     builtin [-options] [args ...]

DESCRIPTION
     Shell builtin commands are commands that can be executed within the run-
     ning shell's process.  Note that, in the case of csh(1) builtin commands,
     the command is executed in a subshell if it occurs as any component of a
     pipeline except the last.

     If a command specified to the shell contains a slash ``/'', the shell
     will not execute a builtin command, even if the last component of the
     specified command matches the name of a builtin command.  Thus, while
     specifying ``echo'' causes a builtin command to be executed under shells
     that support the echo builtin command, specifying ``/bin/echo'' or
     ``./echo'' does not.

     While some builtin commands may exist in more than one shell, their oper-
     ation may be different under each shell which supports them.  Below is a
     table which lists shell builtin commands, the standard shells that sup-
     port them and whether they exist as standalone utilities.

     Only builtin commands for the csh(1) and sh(1) shells are listed here.
     Consult a shell's manual page for details on the operation of its builtin
     commands.	Beware that the sh(1) manual page, at least, calls some of
     these commands ``built-in commands'' and some of them ``reserved words''.
     Users of other shells may need to consult an info(1) page or other
     sources of documentation.

     Commands marked ``No**'' under External do exist externally, but are
     implemented as scripts using a builtin command of the same name.

	   Command	 External    csh(1)    sh(1)
	   !		 No	     No        Yes
	   %		 No	     Yes       No
	   .		 No	     No        Yes
	   :		 No	     Yes       Yes
	   @		 No	     Yes       Yes
	   {		 No	     No        Yes
	   }		 No	     No        Yes
	   alias	 No**	     Yes       Yes
	   alloc	 No	     Yes       No
	   bg		 No**	     Yes       Yes
	   bind 	 No	     No        Yes
	   bindkey	 No	     Yes       No
	   break	 No	     Yes       Yes
	   breaksw	 No	     Yes       No
	   builtin	 No	     No        Yes
	   builtins	 No	     Yes       No
	   case 	 No	     Yes       Yes
	   cd		 No**	     Yes       Yes
	   chdir	 No	     Yes       Yes
	   command	 No**	     No        Yes
	   complete	 No	     Yes       No
	   continue	 No	     Yes       Yes
	   default	 No	     Yes       No
	   dirs 	 No	     Yes       No
	   do		 No	     No        Yes
	   done 	 No	     No        Yes
	   echo 	 Yes	     Yes       Yes
	   echotc	 No	     Yes       No
	   elif 	 No	     No        Yes
	   else 	 No	     Yes       Yes
	   end		 No	     Yes       No
	   endif	 No	     Yes       No
	   endsw	 No	     Yes       No
	   esac 	 No	     No        Yes
	   eval 	 No	     Yes       Yes
	   exec 	 No	     Yes       Yes
	   exit 	 No	     Yes       Yes
	   export	 No	     No        Yes
	   false	 Yes	     No        Yes
	   fc		 No**	     No        Yes
	   fg		 No**	     Yes       Yes
	   filetest	 No	     Yes       No
	   fi		 No	     No        Yes
	   for		 No	     No        Yes
	   foreach	 No	     Yes       No
	   getopts	 No**	     No        Yes
	   glob 	 No	     Yes       No
	   goto 	 No	     Yes       No
	   hash 	 No	     No        Yes
	   hashstat	 No	     Yes       No
	   history	 No	     Yes       No
	   hup		 No	     Yes       No
	   if		 No	     Yes       Yes
	   jobid	 No	     No        Yes
	   jobs 	 No**	     Yes       Yes
	   kill 	 Yes	     Yes       No
	   limit	 No	     Yes       No
	   local	 No	     No        Yes
	   log		 No	     Yes       No
	   login	 Yes	     Yes       No
	   logout	 No	     Yes       No
	   ls-F 	 No	     Yes       No
	   nice 	 Yes	     Yes       No
	   nohup	 Yes	     Yes       No
	   notify	 No	     Yes       No
	   onintr	 No	     Yes       No
	   popd 	 No	     Yes       No
	   printenv	 Yes	     Yes       No
	   pushd	 No	     Yes       No
	   pwd		 Yes	     No        Yes
	   read 	 No**	     No        Yes
	   readonly	 No	     No        Yes
	   rehash	 No	     Yes       No
	   repeat	 No	     Yes       No
	   return	 No	     No        Yes
	   sched	 No	     Yes       No
	   set		 No	     Yes       Yes
	   setenv	 No	     Yes       No
	   settc	 No	     Yes       No
	   setty	 No	     Yes       No
	   setvar	 No	     No        Yes
	   shift	 No	     Yes       Yes
	   source	 No	     Yes       No
	   stop 	 No	     Yes       No
	   suspend	 No	     Yes       No
	   switch	 No	     Yes       No
	   telltc	 No	     Yes       No
	   test 	 Yes	     No        Yes
	   then 	 No	     No        Yes
	   time 	 Yes	     Yes       No
	   times	 No	     No        Yes
	   trap 	 No	     No        Yes
	   true 	 Yes	     No        Yes
	   type 	 No	     No        Yes
	   ulimit	 No	     No        Yes
	   umask	 No**	     Yes       Yes
	   unalias	 No**	     Yes       Yes
	   uncomplete	 No	     Yes       No
	   unhash	 No	     Yes       No
	   unlimit	 No	     Yes       No
	   unset	 No	     Yes       Yes
	   unsetenv	 No	     Yes       No
	   until	 No	     No        Yes
	   wait 	 No**	     Yes       Yes
	   where	 No	     Yes       No
	   which	 Yes	     Yes       No
	   while	 No	     Yes       Yes

SEE ALSO
     csh(1), echo(1), false(1), info(1), kill(1), login(1), nice(1), nohup(1),
     printenv(1), pwd(1), sh(1), test(1), time(1), true(1), which(1)

HISTORY
     The builtin manual page first appeared in FreeBSD 3.4.

AUTHORS
     This manual page was written by Sheldon Hearn <sheldonh@FreeBSD.org>.

BSD			       February 23, 2005			   BSD
","# type

> Display the contents of a file.
> More information: <https://docs.microsoft.com/en-us/windows-server/administration/windows-commands/type>.

- Display the contents of a specific file:

`type {{path/to/file}}`
"
getmac,https://docs.microsoft.com/en-us/windows-server/administration/windows-commands/getmac,,"# getmac

> Display the MAC addresses of a system.
> More information: <https://docs.microsoft.com/en-us/windows-server/administration/windows-commands/getmac>.

- Display the MAC addresses for the current system:

`getmac`

- Display the details in a specific format:

`getmac /fo {{table|list|csv}}`

- Exclude the header in the output list:

`getmac /nh`

- Display the MAC addresses for a remote machine:

`getmac /s {{hostname}} /u {{username}} /p {{password}}`

- Display the MAC addresses with verbose information:

`getmac /v`

- Display detailed usage information:

`getmac /?`
"
reg-save,https://docs.microsoft.com/en-us/windows-server/administration/windows-commands/reg-save,,"# reg save

> Save a registry key, its sub keys and values to a file.
> More information: <https://docs.microsoft.com/en-us/windows-server/administration/windows-commands/reg-save>.

- Save a registry key, its sub keys and values to a specific file:

`reg save {{key_name}} {{path/to/file}}`

- Forcefully overwrite an existing file without a prompt:

`reg save {{key_name}} {{path/to/file}} /y`
"
sigverif,,,"# sigverif

> A GUI signature verification tool for checking system files.

- Open the File Signature Verification interface:

`sigverif`
"
wsl,https://docs.microsoft.com/en-us/windows/wsl/reference,,"# wsl

> Manage the Windows Subsystem for Linux from the command line.
> More information: <https://docs.microsoft.com/en-us/windows/wsl/reference>.

- Start a Linux shell (in the default distribution):

`wsl {{shell_command}}`

- Run a Linux command without using a shell:

`wsl --exec {{command}} {{command_arguments}}`

- Specify a particular distribution:

`wsl --distribution {{distribution}} {{shell_command}}`

- List available distributions:

`wsl --list`

- Export a distribution to a .tar file:

`wsl --export {{distribution}} {{path/to/distro_fs.tar}}`

- Import a distribution from a .tar file:

`wsl --import {{distribution}} {{path/to/install_location}} {{path/to/distro_fs.tar}}`

- Shut down Windows Subsystem for Linux:

`wsl --shutdown`
"
cls,https://docs.microsoft.com/en-us/windows-server/administration/windows-commands/cls,,"# cls

> Clears the screen.
> More information: <https://docs.microsoft.com/en-us/windows-server/administration/windows-commands/cls>.

- Clear the screen:

`cls`
"
choco-info,https://chocolatey.org/docs/commands-info,,"# choco info

> Display detailed information about a package with Chocolatey.
> More information: <https://chocolatey.org/docs/commands-info>.

- Display information on a specific package:

`choco info {{package}}`

- Display information for a local package only:

`choco info {{package}} --local-only`

- Specify a custom source to receive packages information from:

`choco info {{package}} --source {{source_url|alias}}`

- Provide a username and password for authentication:

`choco info {{package}} --user {{username}} --password {{password}}`
"
pwlauncher,https://docs.microsoft.com/en-us/windows-server/administration/windows-commands/pwlauncher,,"# pwlauncher

> A command line tool for managing the Windows To Go startup options.
> More information: <https://docs.microsoft.com/en-us/windows-server/administration/windows-commands/pwlauncher>.

- Display the current Windows To Go status:

`pwlauncher`

- Enable or disable the Windows To Go startup options:

`pwlauncher /{{enable|disable}}`
"
where,https://docs.microsoft.com/en-us/windows-server/administration/windows-commands/where,"
BUILTIN(1)		  BSD General Commands Manual		    BUILTIN(1)

NAME
     builtin, !, %, ., :, @, {, }, alias, alloc, bg, bind, bindkey, break,
     breaksw, builtins, case, cd, chdir, command, complete, continue, default,
     dirs, do, done, echo, echotc, elif, else, end, endif, endsw, esac, eval,
     exec, exit, export, false, fc, fg, filetest, fi, for, foreach, getopts,
     glob, goto, hash, hashstat, history, hup, if, jobid, jobs, kill, limit,
     local, log, login, logout, ls-F, nice, nohup, notify, onintr, popd,
     printenv, pushd, pwd, read, readonly, rehash, repeat, return, sched, set,
     setenv, settc, setty, setvar, shift, source, stop, suspend, switch,
     telltc, test, then, time, times, trap, true, type, ulimit, umask,
     unalias, uncomplete, unhash, unlimit, unset, unsetenv, until, wait,
     where, which, while -- shell built-in commands

SYNOPSIS
     builtin [-options] [args ...]

DESCRIPTION
     Shell builtin commands are commands that can be executed within the run-
     ning shell's process.  Note that, in the case of csh(1) builtin commands,
     the command is executed in a subshell if it occurs as any component of a
     pipeline except the last.

     If a command specified to the shell contains a slash ``/'', the shell
     will not execute a builtin command, even if the last component of the
     specified command matches the name of a builtin command.  Thus, while
     specifying ``echo'' causes a builtin command to be executed under shells
     that support the echo builtin command, specifying ``/bin/echo'' or
     ``./echo'' does not.

     While some builtin commands may exist in more than one shell, their oper-
     ation may be different under each shell which supports them.  Below is a
     table which lists shell builtin commands, the standard shells that sup-
     port them and whether they exist as standalone utilities.

     Only builtin commands for the csh(1) and sh(1) shells are listed here.
     Consult a shell's manual page for details on the operation of its builtin
     commands.	Beware that the sh(1) manual page, at least, calls some of
     these commands ``built-in commands'' and some of them ``reserved words''.
     Users of other shells may need to consult an info(1) page or other
     sources of documentation.

     Commands marked ``No**'' under External do exist externally, but are
     implemented as scripts using a builtin command of the same name.

	   Command	 External    csh(1)    sh(1)
	   !		 No	     No        Yes
	   %		 No	     Yes       No
	   .		 No	     No        Yes
	   :		 No	     Yes       Yes
	   @		 No	     Yes       Yes
	   {		 No	     No        Yes
	   }		 No	     No        Yes
	   alias	 No**	     Yes       Yes
	   alloc	 No	     Yes       No
	   bg		 No**	     Yes       Yes
	   bind 	 No	     No        Yes
	   bindkey	 No	     Yes       No
	   break	 No	     Yes       Yes
	   breaksw	 No	     Yes       No
	   builtin	 No	     No        Yes
	   builtins	 No	     Yes       No
	   case 	 No	     Yes       Yes
	   cd		 No**	     Yes       Yes
	   chdir	 No	     Yes       Yes
	   command	 No**	     No        Yes
	   complete	 No	     Yes       No
	   continue	 No	     Yes       Yes
	   default	 No	     Yes       No
	   dirs 	 No	     Yes       No
	   do		 No	     No        Yes
	   done 	 No	     No        Yes
	   echo 	 Yes	     Yes       Yes
	   echotc	 No	     Yes       No
	   elif 	 No	     No        Yes
	   else 	 No	     Yes       Yes
	   end		 No	     Yes       No
	   endif	 No	     Yes       No
	   endsw	 No	     Yes       No
	   esac 	 No	     No        Yes
	   eval 	 No	     Yes       Yes
	   exec 	 No	     Yes       Yes
	   exit 	 No	     Yes       Yes
	   export	 No	     No        Yes
	   false	 Yes	     No        Yes
	   fc		 No**	     No        Yes
	   fg		 No**	     Yes       Yes
	   filetest	 No	     Yes       No
	   fi		 No	     No        Yes
	   for		 No	     No        Yes
	   foreach	 No	     Yes       No
	   getopts	 No**	     No        Yes
	   glob 	 No	     Yes       No
	   goto 	 No	     Yes       No
	   hash 	 No	     No        Yes
	   hashstat	 No	     Yes       No
	   history	 No	     Yes       No
	   hup		 No	     Yes       No
	   if		 No	     Yes       Yes
	   jobid	 No	     No        Yes
	   jobs 	 No**	     Yes       Yes
	   kill 	 Yes	     Yes       No
	   limit	 No	     Yes       No
	   local	 No	     No        Yes
	   log		 No	     Yes       No
	   login	 Yes	     Yes       No
	   logout	 No	     Yes       No
	   ls-F 	 No	     Yes       No
	   nice 	 Yes	     Yes       No
	   nohup	 Yes	     Yes       No
	   notify	 No	     Yes       No
	   onintr	 No	     Yes       No
	   popd 	 No	     Yes       No
	   printenv	 Yes	     Yes       No
	   pushd	 No	     Yes       No
	   pwd		 Yes	     No        Yes
	   read 	 No**	     No        Yes
	   readonly	 No	     No        Yes
	   rehash	 No	     Yes       No
	   repeat	 No	     Yes       No
	   return	 No	     No        Yes
	   sched	 No	     Yes       No
	   set		 No	     Yes       Yes
	   setenv	 No	     Yes       No
	   settc	 No	     Yes       No
	   setty	 No	     Yes       No
	   setvar	 No	     No        Yes
	   shift	 No	     Yes       Yes
	   source	 No	     Yes       No
	   stop 	 No	     Yes       No
	   suspend	 No	     Yes       No
	   switch	 No	     Yes       No
	   telltc	 No	     Yes       No
	   test 	 Yes	     No        Yes
	   then 	 No	     No        Yes
	   time 	 Yes	     Yes       No
	   times	 No	     No        Yes
	   trap 	 No	     No        Yes
	   true 	 Yes	     No        Yes
	   type 	 No	     No        Yes
	   ulimit	 No	     No        Yes
	   umask	 No**	     Yes       Yes
	   unalias	 No**	     Yes       Yes
	   uncomplete	 No	     Yes       No
	   unhash	 No	     Yes       No
	   unlimit	 No	     Yes       No
	   unset	 No	     Yes       Yes
	   unsetenv	 No	     Yes       No
	   until	 No	     No        Yes
	   wait 	 No**	     Yes       Yes
	   where	 No	     Yes       No
	   which	 Yes	     Yes       No
	   while	 No	     Yes       Yes

SEE ALSO
     csh(1), echo(1), false(1), info(1), kill(1), login(1), nice(1), nohup(1),
     printenv(1), pwd(1), sh(1), test(1), time(1), true(1), which(1)

HISTORY
     The builtin manual page first appeared in FreeBSD 3.4.

AUTHORS
     This manual page was written by Sheldon Hearn <sheldonh@FreeBSD.org>.

BSD			       February 23, 2005			   BSD
","# where

> Display the location of files that match the search pattern.
> Defaults to current work directory and paths in the PATH environment variable.
> More information: <https://docs.microsoft.com/en-us/windows-server/administration/windows-commands/where>.

- Display the location of file pattern:

`where {{file_pattern}}`

- Display the location of file pattern including file size and date:

`where /T {{file_pattern}}`

- Recursively search for file pattern at specified path:

`where /R {{path/to/directory}} {{file_pattern}}`

- Display only the error code for the location of file pattern:

`where /Q {{file_pattern}}`
"
ipconfig,https://docs.microsoft.com/en-us/windows-server/administration/windows-commands/ipconfig,"
IPCONFIG(8)		  BSD System Manager's Manual		   IPCONFIG(8)

NAME
     ipconfig -- view and control IP configuration state

SYNOPSIS
     ipconfig waitall
     ipconfig getifaddr interface-name
     ipconfig ifcount
     ipconfig getoption interface-name (option-name | option-code)
     ipconfig getpacket interface-name
     ipconfig getv6packet interface-name
     ipconfig setverbose level
     ipconfig set interface-name NONE
     ipconfig set interface-name (DHCP | BOOTP)
     ipconfig set interface-name (MANUAL | INFORM) ip-address subnet-mask
     ipconfig set interface-name NONE-V6
     ipconfig set interface-name AUTOMATIC-V6
     ipconfig set interface-name MANUAL-V6 ipv6-address prefix-length
     ipconfig set interface-name 6TO4

DESCRIPTION
     ipconfig is a utility that communicates with the IPConfiguration agent to
     retrieve and set IP configuration parameters.  It should only be used in
     a test and debug context.	Using it for any other purpose is strongly
     discouraged.  Public API's in the SystemConfiguration framework are cur-
     rently the only supported way to access and control the state of IPCon-
     figuration.

     The IPConfiguration agent is responsible for configuring and managing the
     IP addresses on direct, connectionless interfaces such as IEEE 802.3 Eth-
     ernet and IEEE 1394 FireWire.  The IPConfiguration agent is a program
     bundle that is loaded and executed by the configd(8) process.

     The IPConfiguration agent implements the client side of the DHCP and
     BOOTP protocols described in RFC951, RFC1542, RFC2131, and RFC2132.  It
     also assigns and maintains static IP addresses.  It may also allocate and
     assign a link-local IP address if DHCP fails to acquire an IP address.

     In all cases, the IPConfiguration agent performs IP address conflict
     detection before assigning an IP address to an interface.

COMMANDS
     The ipconfig utility provides several commands:

     waitall	 Blocks until all network services have completed configuring,
		 or have timed out in the process of configuring.  This is
		 only useful for initial system start-up time synchronization
		 for legacy network services that are incapable of dealing
		 with dynamic network configuration changes.

     getifaddr interface-name
		 Prints to standard output the IP address for the first net-
		 work service associated with the given interface.  The output
		 will be empty if no service is currently configured or active
		 on the interface.

     ifcount	 Prints the number of interfaces that IPConfiguration is capa-
		 ble of configuring.  The value that's printed will not change
		 unless relevant network interfaces are either added to or
		 removed from the system.

     getoption interface-name (option-name | option-code)
		 Prints the BOOTP/DHCP option with the given name or option
		 code integer value.  See bootpd(8) for option code names.  If
		 an option has multiple values e.g. domain_name_server, only
		 the first value is printed.

     getpacket interface-name
		 Prints to standard output the DHCP/BOOTP packet that the
		 client accepted from the DHCP/BOOTP server.  This command is
		 useful to check what the server provided, and whether the
		 values are sensible.  This command outputs nothing if
		 DHCP/BOOTP is not active on the interface, or the attempt to
		 acquire an IP address was unsuccessful.

     getv6packet interface-name
		 Prints to standard output the latest DHCPv6 packet that the
		 client accepted from the DHCPv6 server.  In the case of
		 stateful DHCPv6, it corresponds to the last packet from the
		 server that contained addressing information.	This command
		 is useful to check what the server provided, and whether the
		 values are sensible.  This command outputs nothing if DHCPv6
		 is not active on the interface.

     set interface-name NONE
     set interface-name (DHCP | BOOTP)
     set interface-name (MANUAL | INFORM) ip-address subnet-mask
     set interface-name NONE-V6
     set interface-name AUTOMATIC-V6
     set interface-name MANUAL-V6 ipv6-address prefix-length
     set interface-name 6TO4
		 Sets the interface to have a new temporary network service of
		 the given type.  Any existing services on the interface for
		 the particular protocol (IPv4 or IPv6) are first de-config-
		 ured before the new service is instantiated.

		 If NONE is specified, all existing IPv4 services are de-con-
		 figured.  If NONE-V6 is specified, all existing IPv6 services
		 are de-configured.

		 DHCP and BOOTP require no additional arguments. The IP
		 address, subnet mask, router, and DNS information are
		 retrieved automatically.

		 Both MANUAL and INFORM require the specification of an IP
		 address ip-address and a subnet mask subnet-mask.

		 The INFORM service configures the IP address statically like
		 MANUAL, but then broadcasts DHCP INFORM packets to retrieve
		 DHCP option information. If the DHCP server responds and sup-
		 plies a subnet mask, that subnet mask is used instead of the
		 specified subnet-mask.

		 AUTOMATIC-V6 requires no additional arguments.  The IPv6
		 address, prefix length and router are retrieved automati-
		 cally.

		 MANUAL-V6 requires the specification of the IPv6 address
		 ipv6-address and a prefix length prefix-length.

		 6TO4 only works on Six To Four (IFT_STF) interfaces e.g.
		 stf0.	If it is specified on a non-IFT_STF interface, it has
		 the same effect as specifying NONE-V6.

		 The set command requires root privileges.

		 Note: The set command is very useful for debugging, but it
		 can't be used to configure a persistent service.  The tempo-
		 rary services that are created only remain until the next
		 network configuration change occurs. See scselect(8).

     setverbose level
		 Enables or disables verbose mode logging in the IPConfigura-
		 tion agent. Specify a level value of 0 to disable verbose
		 logging, the default.	Specify a value of 1 to enable verbose
		 logging. This setting is persistent across boots of the oper-
		 ating system.

		 When enabled, verbose log files are generated in the direc-
		 tory /Library/Logs/CrashReporter.  The filenames follow the
		 naming convention com.apple.networking.IPConfigura-
		 tion.log.<timestamp>.

		 The setverbose command requires root privileges.

EXAMPLES
     # ipconfig getpacket en0
     op = BOOTREPLY
     htype = 1
     dp_flags = 0
     hlen = 6
     hops = 0
     xid = 1956115059
     secs = 0
     ciaddr = 0.0.0.0
     yiaddr = 192.168.4.10
     siaddr = 192.168.4.1
     giaddr = 0.0.0.0
     chaddr = 0:3:93:7a:d7:5c
     sname = dhcp.mycompany.net
     file =
     options:
     Options count is 10
     dhcp_message_type (uint8): ACK 0x5
     server_identifier (ip): 192.168.4.1
     lease_time (uint32): 0x164a
     subnet_mask (ip): 255.255.255.0
     router (ip_mult): {192.168.4.1}
     domain_name_server (ip_mult): {192.168.4.1}
     domain_name (string): mycompany.net
     end (none):

     # ipconfig getoption en0 router
     192.168.4.1

SEE ALSO
     configd(8), bootpd(8), scselect(8)

HISTORY
     The ipconfig command first appeared in Mac OS X Version 10.0 Public Beta.

Mac OS X			March 27, 2013			      Mac OS X
","# ipconfig

> Display and manage the network configuration of Windows.
> More information: <https://docs.microsoft.com/en-us/windows-server/administration/windows-commands/ipconfig>.

- Show a list of network adapters:

`ipconfig`

- Show a detailed list of network adapters:

`ipconfig /all`

- Renew the IP addresses for a network adapter:

`ipconfig /renew {{adapter}}`

- Free up the IP addresses for a network adapter:

`ipconfig /release {{adapter}}`

- Remove all data from the DNS cache:

`ipconfig /flushdns`
"
cmstp,https://docs.microsoft.com/en-us/windows-server/administration/windows-commands/cmstp,,"# cmstp

> A command line tool for managing connection service profiles.
> More information: <https://docs.microsoft.com/en-us/windows-server/administration/windows-commands/cmstp>.

- Install a specific profile:

`cmstp ""{{path/to/profile}}""`

- Install without creating a desktop shortcut:

`cmstp /ns ""{{path/to/profile}}""`

- Install without checking for dependencies:

`cmstp /nf ""{{path/to/profile}}""`

- Only install for the current user:

`cmstp /su ""{{path/to/profile}}""`

- Install for all users (requires administrator privileges):

`cmstp /au ""{{path/to/profile}}""`

- Install silently without any prompts:

`cmstp /s ""{{path/to/profile}}""`

- Uninstall a specific profile:

`cmstp /u ""{{path/to/profile}}""`

- Uninstall silently without a confirmation prompt:

`cmstp /u /s ""{{path/to/profile}}""`
"
