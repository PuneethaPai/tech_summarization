command,doc_url,man_entry,tldr_summary
utmpdump,,,"# utmpdump

> Dump and load btmp, utmp and wtmp accounting files.

- Dump the `/var/log/wtmp` file to the standard output as plain text:

`utmpdump {{/var/log/wtmp}}`

- Load a previously dumped file into `/var/log/wtmp`:

`utmpdump -r {{dumpfile}} > {{/var/log/wtmp}}`
"
cpufreq-info,,,"# cpufreq-info

> A tool to show CPU frequency information.

- Show CPU frequency information for all CPUs:

`cpufreq-info`

- Show CPU frequency information for the specified CPU:

`cpufreq-info -c {{cpu_number}}`

- Show the allowed minimum and maximum CPU frequency:

`cpufreq-info -l`

- Show the current minimum and maximum CPU frequency and policy in table format:

`cpufreq-info -o`

- Show available CPU frequency policies:

`cpufreq-info -g`

- Show current CPU work frequency in a human-readable format, according to the cpufreq kernel module:

`cpufreq-info -f -m`

- Show current CPU work frequency in a human-readable format, by reading it from hardware (only available to root):

`sudo cpufreq-info -w -m`
"
pihole,https://pi-hole.net,,"# pihole

> Terminal interface for the Pi-Hole ad-blocking DNS server.
> More information: <https://pi-hole.net>.

- Check the Pi-hole daemon's status:

`pihole status`

- Monitor detailed system status:

`pihole chronometer`

- Start or stop the daemon:

`pihole {{enable|disable}}`

- Restart the daemon (not the server itself):

`pihole restartdns`

- Whitelist or blacklist a domain:

`pihole {{whitelist|blacklist}} {{example.com}}`

- Search the lists for a domain:

`pihole query {{example.com}}`
"
journalctl,,,"# journalctl

> Query the systemd journal.

- Show all messages from this boot:

`journalctl -b`

- Show all messages from last boot:

`journalctl -b -1`

- Follow new messages (like `tail -f` for traditional syslog):

`journalctl -f`

- Show all messages by a specific unit:

`journalctl -u {{unit}}`

- Filter messages within a time range (either timestamp or placeholders like ""yesterday""):

`journalctl --since {{now|today|yesterday|tomorrow}} --until {{YYYY-MM-DD HH:MM:SS}}`

- Show all messages by a specific process:

`journalctl _PID={{pid}}`

- Show all messages by a specific executable:

`journalctl {{path/to/executable}}`
"
reboot,,"
REBOOT(8)		  BSD System Manager's Manual		     REBOOT(8)

NAME
     halt, reboot -- stopping and restarting the system

SYNOPSIS
     halt [-lnqu]
     reboot [-lnq]

DESCRIPTION
     The halt and reboot utilities flush the file system cache to disk, send
     all running processes a SIGTERM (and subsequently a SIGKILL) and, respec-
     tively, halt or restart the system.  The action is logged, including
     entering a shutdown record into the wtmp(5) file.

     When the system is halted with the halt command, the system is powered
     off.

     The options are as follows:

     -l      The halt or reboot is not recorded in the system log.  This
	     option is intended for applications such as shutdown(8), that
	     call reboot or halt and log this themselves.

     -n      The file system cache is not flushed.  This option should proba-
	     bly not be used.

     -q      The system is halted or restarted quickly and ungracefully, and
	     only the flushing of the file system cache is performed (if the
	     -n option is not specified).  This option should probably not be
	     used.

     -u      The system is halted up until the point of removing system power,
	     but waits before removing power for 5 minutes so that an external
	     UPS (uninterruptible power supply) can forcibly remove power.
	     This simulates a dirty shutdown to permit a later automatic power
	     on. OS X uses this mode automatically with supported UPSs in
	     emergency shutdowns.

     Normally, the shutdown(8) utility is used when the system needs to be
     halted or restarted, giving users advance warning of their impending doom
     and cleanly terminating specific programs.

SIGTERM TO SIGKILL INTERVAL
     The SIGKILL will follow the SIGTERM by an intentionally indeterminate
     period of time.  Programs are expected to take only enough time to flush
     all dirty data and exit.  Developers are encouraged to file a bug with
     the OS vendor, should they encounter an issue with this functionality.

SEE ALSO
     wtmp(5), shutdown(8), sync(8)

HISTORY
     A reboot utility appeared in Version 6 AT&T UNIX.

BSD				 June 9, 1993				   BSD
","# reboot

> Reboot the system.

- Reboot immediately:

`reboot`

- Reboot immediately without gracefully shutting down:

`reboot -f`
"
systemctl,https://www.freedesktop.org/software/systemd/man/systemctl.html,,"# systemctl

> Control the systemd system and service manager.
> More information: <https://www.freedesktop.org/software/systemd/man/systemctl.html>.

- List failed units:

`systemctl --failed`

- Start/Stop/Restart/Reload a service:

`systemctl start/stop/restart/reload {{unit}}`

- Show the status of a unit:

`systemctl status {{unit}}`

- Enable/Disable a unit to be started on bootup:

`systemctl enable/disable {{unit}}`

- Mask/Unmask a unit, prevent it to be started on bootup:

`systemctl mask/unmask {{unit}}`

- Reload systemd, scanning for new or changed units:

`systemctl daemon-reload`

- Check if a unit is active:

`systemctl is-active {{unit}}`

- Check if a unit is enabled:

`systemctl is-enabled {{unit}}`
"
tomb,,,"# tomb

> Manage encrypted storage directories that can be safely transported and hidden in a filesystem.

- Create a new tomb with an initial size of 100MB:

`tomb dig -s {{100}} {{encrypted_directory.tomb}}`

- Create a new key file that can be used to lock a tomb; user will be prompted for a password for the key:

`tomb forge {{encrypted_directory.tomb.key}}`

- Initialize and lock an empty tomb using a key made with `forge`:

`tomb lock {{encrypted_directory.tomb}} -k {{encrypted_directory.tomb.key}}`

- Mount a tomb (by default in /media) using its key, making it usable as a regular filesystem directory:

`tomb open {{encrypted_directory.tomb}} -k {{encrypted_directory.tomb.key}}`

- Close a tomb (fails if the tomb is being used by a process):

`tomb close {{encrypted_directory.tomb}}`

- Forcefully close all open tombs, killing any applications using them:

`tomb slam all`

- List all open tombs:

`tomb list`
"
nmon,,,"# nmon

> A system administrator, tuner, and benchmark tool.

- Start nmon:

`nmon`

- Save records to file (""-s 300 -c 288"" by default):

`nmon -f`

- Save records to file with a total of 240 measurements, by taking 30 seconds between each measurement:

`nmon -f -s {{30}} -c {{240}}`
"
rspamc,,,"# rspamc

> Command line client for rspamd servers.

- Train the bayesian filter to recognise an email as spam:

`rspamc learn_spam {{path/to/email_file}}`

- Train the bayesian filter to recognise an email as ham:

`rspamc learn_ham {{path/to/email_file}}`

- Generate a manual report on an email:

`rspamc symbols {{path/to/email_file}}`

- Show server statistics:

`rspamc stat`
"
gs,,,"# gs

> GhostScript is a PDF and PostScript interpreter.

- To view a file:

`gs -dQUIET -dBATCH {{file.pdf}}`

- Reduce PDF file size to 150 dpi images for reading on a ebook device:

`gs -dNOPAUSE -dQUIET -dBATCH -sDEVICE=pdfwrite -dPDFSETTINGS=/ebook -sOutputFile={{output.pdf}} {{input.pdf}}`

- Convert PDF file (pages 1 through 3) to an image with 150 dpi resolution:

`gs -dQUIET -dBATCH -dNOPAUSE -sDEVICE=jpeg -r150 -dFirstPage={{1}} -dLastPage={{3}} -sOutputFile={{output_%d.jpg}} {{input.pdf}}`

- Extract pages from a PDF file:

`gs -dQUIET -dBATCH -dNOPAUSE -sDEVICE=pdfwrite -sOutputFile={{output.pdf}} {{input.pdf}}`

- Merge PDF files:

`gs -dQUIET -dBATCH -dNOPAUSE -sDEVICE=pdfwrite -sOutputFile={{output.pdf}} {{input1.pdf}} {{input2.pdf}}`

- Convert from PostScript file to PDF file:

`gs -dQUIET -dBATCH -dNOPAUSE -sDEVICE=pdfwrite -sOutputFile={{output.pdf}} {{input.ps}}`
"
pwdx,,,"# pwdx

> Print working directory of a process.

- Print current working directory of a process:

`pwdx {{process_id}}`
"
flatpak,,,"# flatpak

> Build, install and run flatpak applications and runtimes.

- Run an installed application:

`flatpak run {{name}}`

- Install an application from a remote source:

`flatpak install {{remote}} {{name}}`

- List all installed applications and runtimes:

`flatpak list`

- Update all installed applications and runtimes:

`flatpak update`

- Add a remote source:

`flatpak remote-add --if-not-exists {{remote_name}} {{remote_url}}`

- List all configured remote sources:

`flatpak remote-list`
"
inotify-wait,,,"# inotifywait

> Waits for changes to one or more files.

- Run a command when a file changes:

`while inotifywait {{path/to/file}}; do {{command}}; done`

- Be quiet about watching for changes:

`while inotifywait --quiet {{path/to/file}}; do {{command}}; done`

- Watch a directory recursively for changes:

`while inotifywait --recursive {{path/to/directory}}; do {{command}}; done`

- Exclude files matching a regular expression:

`while inotifywait --recursive {{path/to/directory}} --exlude '{{regex}}'; do {{command}}; done`

- Wait at most 30 seconds:

`while inotifywait --timeout {{30}} {{path/to/file}}; do {{command}}; done`

- Only watch for file modification events:

`while inotifywait --event {{modify}} {{path/to/file}}; do {{command}}; done`
"
tcptraceroute,https://github.com/mct/tcptraceroute,,"# tcptraceroute

> A traceroute implementation using TCP packets.
> More information: <https://github.com/mct/tcptraceroute>.

- Trace the route to a host:

`tcptraceroute {{host}}`

- Specify the destination port and packet length in bytes:

`tcptraceroute {{host}} {{destination_port}} {{packet_length}}`

- Specify the local source port and source address:

`tcptraceroute {{host}} -p {{source_port}} -s {{source_address}}`

- Set the first and maximum TTL:

`tcptraceroute {{host}} -f {{first_ttl} -m {{max_ttl}}`

- Specify the wait time and number of queries per hop:

`tcptraceroute {{host}} -w {{wait_time}} -q {{number_of_queries}}`

- Specify the interface:

`tcptraceroute {{host}} -i {{interface}}`
"
fc-match,,"FC-MATCH(1)							   FC-MATCH(1)



NAME
       fc-match - match available fonts

SYNOPSIS
       fc-match [ -asvVh ]  [ --all ]  [ --sort ]  [ --verbose ]  [  [ -f for-
       mat ]  [ --format format ]  ]  [ --version ]  [ --help ]

	[ pattern  [ element... ]   ]

DESCRIPTION
       fc-match matches pattern (empty pattern by default)  using  the	normal
       fontconfig matching rules to find the best font available. If --sort is
       given, the sorted list of best matching fonts is displayed.  The  --all
       option  works like --sort except that no pruning is done on the list of
       fonts.

       If any elements are specified, only those are printed.  Otherwise short
       file  name,  family,  and  style  are printed, unless verbose output is
       requested.

OPTIONS
       This program follows the usual  GNU  command  line  syntax,  with  long
       options	starting  with	two  dashes  (`-').  A	summary  of options is
       included below.

       -a     Displays sorted list of best matching fonts, but do not  do  any
	      pruning on the list.

       -s     Displays sorted list of best matching fonts.

       -v     Print  verbose  output of the whole font pattern for each match,
	      or elements if any is provided.

       -f     Format output according to the format specifier format.

       -V     Show version of the program and exit.

       -h     Show summary of options.

       pattern
	      Displays fonts matching pattern (uses empty pattern by default).

       element
	      If set, the element property is displayed for matching fonts.

SEE ALSO
       fc-list(1)  FcFontMatch(3)  FcFontSort(3)  FcPatternFormat(3) fc-cat(1)
       fc-cache(1) fc-pattern(1) fc-query(1) fc-scan(1)

       The fontconfig user's guide, in	HTML  format:  /usr/share/doc/fontcon-
       fig/fontconfig-user.html.

AUTHOR
       This manual page was updated by Patrick Lam <plam@csail.mit.edu>.



				 Aug 13, 2008			   FC-MATCH(1)
","# fc-match

> Match available fonts.

- Return a sorted list of best matching fonts:

`fc-match -s '{{DejaVu Serif}}'`
"
conky,https://github.com/brndnmtthws/conky,,"# conky

> Light-weight system monitor for X.
> More information: <https://github.com/brndnmtthws/conky>.

- Launch with default, built-in config:

`conky`

- Create a new default config:

`conky -C > ~/.conkyrc`

- Launch conky with a given config file:

`conky -c {{path/to/config}}`

- Start in the background (daemonize):

`conky -d`

- Align conky on the desktop:

`conky -a {{{top,bottom,middle}_{left,right,middle}}}`

- Pause for 5 seconds at startup before launching:

`conky -p {{5}}`
"
wpa_cli,,,"# wpa_cli

> Add and configure wlan interfaces.

- Scan for available networks:

`wpa_cli scan`

- Show scan results:

`wpa_cli scan_results`

- Add a network:

`wpa_cli add_network {{number}}`

- Set a network's SSID:

`wpa_cli set_network {{number}} ssid ""{{SSID}}""`

- Enable network:

`wpa_cli enable_network {{number}}`

- Save config:

`wpa_cli save_config`
"
mycli,,,"# mycli

> A CLI for MySQL, MariaDB, and Percona with auto-completion and syntax highlighting.

- Connect to a database with the currently logged in user:

`mycli {{database_name}}`

- Connect to a database with the specified user:

`mycli -u {{user}} {{database_name}}`

- Connect to a database on the specified host with the specified user:

`mycli -u {{user}} -h {{host}} {{database_name}}`
"
apt,,"apt(1)									apt(1)



NAME
       apt - annotation processing tool

SYNOPSIS
       apt  [ -classpath classpath ] [ -sourcepath sourcepath ] [ -d directory
       ] [ -s directory ] [ -factorypath path ] [ -factory class ] [ -print  ]
       [  -nocompile  ] [ -A [ key [ =val ] ] ] [ javac option ] sourcefiles [
       @files ]

DESCRIPTION
       The tool apt, annotation processing tool, includes a set of new reflec-
       tive APIs and supporting infrastructure to process program annotations.
       The apt reflective APIs provide a build-time,  source-based,  read-only
       view  of  program  structure.  These  reflective  APIs  are designed to
       cleanly model the JavaTM programming language's type system  after  the
       addition  of  generics.	First, apt runs annotation processors that can
       produce new source code and other files. Next, apt can  cause  compila-
       tion  of  both original and generated source files, easing development.
       The reflective APIs and other APIs used to interact with the  tool  are
       subpackages of com.sun.mirror.

       A  fuller  discussion  of how the tool operates as well as instructions
       for  developing	with  apt  are	in  Getting  Started   with   apt   at
       http://java.sun.com/j2se/1.5.0/docs/guide/apt/GettingStarted.html.

PARAMETERS
       Options may be in any order. For a discussion of parameters which apply
       to a specific option, see OPTIONS below.

       sourcefiles    Zero or more source files to be processed.

       @files	      One or more  files  that	list  source  files  or  other
		      options.

OPTIONS
   apt specific options
       -s dir	      Specify  the directory root under which processor-gener-
		      ated source files will be placed; files  are  placed  in
		      subdirectories based on package namespace.

       -nocompile     Do not compile sources files to class files.

       -print	      Print  out  textual  representation  of specified types;
		      perform no annotation processing or compilation.

       -A[key[=val]]  Options to pass to annotation processors	--  these  are
		      not  interpreted by apt directly, but are made available
		      for use by individual processors

       -factorypath path
		      Specify where to find annotation processor factories; if
		      this  option  is used, the classpath is not searched for
		      factories.

       -factory classname
		      Name of annotation processor factory  to	use;  bypasses
		      default discovery process

   Options shared with javac
       -d dir	      Specify  where  to  place  processor and javac generated
		      class files

       -cp path       or
       -classpath path
		      Specify where to find user class	files  and  annotation
		      processor  factories.  If  -factorypath  is  given,  the
		      classpath is not searched for factories.

       Consult the javac(1) man page for information on javac options.

NOTES
       The apt tool and its associated APIs may be changed  or	superseded  in
       future j2se releases.

SEE ALSO
       javac(1) java(1)



				 13 June 2004				apt(1)
","# apt

> Package management utility for Debian based distributions.
> Recommended replacement for apt-get when used interactively in Ubuntu versions 16.04 and later.

- Update the list of available packages and versions (it's recommended to run this before other `apt` commands):

`sudo apt update`

- Search for a given package:

`apt search {{package}}`

- Show information for a package:

`apt show {{package}}`

- Install a package, or update it to the latest available version:

`sudo apt install {{package}}`

- Remove a package (using `purge` instead also removes its configuration files):

`sudo apt remove {{package}}`

- Upgrade all installed packages to their newest available versions:

`sudo apt upgrade`

- List all packages:

`apt list`

- List installed packages:

`apt list --installed`
"
runit,,,"# runit

> 3-stage init system.

- Start runit's 3-stage init scheme:

`runit`

- Shut down runit:

`kill --CONT {{runit_pid}}`
"
http_load,http://www.acme.com/software/http_load/,,"# http_load

> A HTTP benchmarking tool.
> Runs multiple HTTP fetches in parallel to test the throughput of a web server.
> More information: <http://www.acme.com/software/http_load/>.

- Emulate 20 requests based on a given URL list file per second for 60 seconds:

`http_load -rate {{20}} -seconds {{60}} {{path/to/urls.txt}}`

- Emulate 5 concurrent requests based on a given URL list file for 60 seconds:

`http_load -parallel {{5}} -seconds {{60}} {{path/to/urls.txt}}`

- Emulate 1000 requests at 20 requests per second, based on a given URL list file:

`http_load -rate {{20}} -fetches {{1000}} {{path/to/urls.txt}}`

- Emulate 1000 requests at 5 concurrent requests at a time, based on a given URL list file:

`http_load -parallel {{5}} -fetches {{1000}} {{path/to/urls.txt}}`
"
pstree,,,"# pstree

> A convenient tool to show running processes as a tree.

- Display a tree of processes:

`pstree`

- Display a tree of processes with PIDs:

`pstree -p`

- Display all process trees rooted at processes owned by specified user:

`pstree {{user}}`
"
nm,,"NM(1)									 NM(1)



NAME
       nm - display name list (symbol table)

SYNOPSIS
       llvm-nm [ -agnoprumxjlPA ] [ - ] [ -t format ] [[ -arch arch_flag ]...]
       [ file ... ] [ -s segname sectname ]

       nm-classic [ -agnoprumxjlfPA [ s segname sectname ]] [ - ] [ -t	format
       ] [[ -arch arch_flag ]...] [ file ... ]

DESCRIPTION
       As  of  Xcode  8.0  the default nm(1) tool is llvm-nm(1).  They for the
       most part have the same options except for -f and -s which the  differ-
       ences are noted below.  More help on options for llvm-nm(1) is provided
       when running it with the --help option.

       Nm displays the name list (symbol table of nlist  structures)  of  each
       object  file  in  the  argument list.  In some cases, as with an object
       that has had strip(1) with its -T option used on the object,  that  can
       be different than the dyld information.	For that information use dyld-
       info(1).

       If an argument is an archive, a listing for each object file in the ar-
       chive  will be produced.  File can be of the form libx.a(x.o), in which
       case only symbols from that member of the object file are listed.  (The
       parentheses  have  to  be  quoted  to get by the shell.)  If no file is
       given, the symbols in a.out are listed.

       Each symbol name is  preceded  by  its  value  (blanks  if  undefined).
       Unless the -m option is specified, this value is followed by one of the
       following characters, representing the symbol type:  U  (undefined),  A
       (absolute),  T  (text  section symbol), D (data section symbol), B (bss
       section symbol), C  (common  symbol),  -  (for  debugger  symbol  table
       entries; see -a below), S (symbol in a section other than those above),
       or I (indirect symbol).	If the symbol  is  local  (non-external),  the
       symbol's  type  is  instead  represented by the corresponding lowercase
       letter.	A lower case u in a dynamic shared library indicates  a  unde-
       fined  reference  to  a	private external in another module in the same
       library.

       If  the	symbol	is  a  Objective  C  method,  the   symbol   name   is
       +-[Class_name(category_name)  method:name:],  where  `+'  is  for class
       methods, `-' is for instance methods, and  (category_name)  is  present
       only when the method is in a category.

       The output is sorted alphabetically by default.

       Options are:

       -a     Display  all  symbol table entries, including those inserted for
	      use by debuggers.

       -g     Display only global (external) symbols.

       -n     Sort numerically rather than alphabetically.

       -o     Prepend file or archive element name to each output line, rather
	      than only once.

       -p     Don't sort; display in symbol-table order.

       -r     Sort in reverse order.

       -u     Display only undefined symbols.

       -U     Don't display undefined symbols.

       -m     Display  the  N_SECT  type  symbols  (Mach-O  symbols)  as (seg-
	      ment_name, section_name) followed by  either  external  or  non-
	      external	and then the symbol name.  Undefined, common, absolute
	      and indirect symbols get	displayed  as  (undefined),  (common),
	      (absolute), and (indirect), respectively.

       -x     Display  the  symbol  table entry's fields in hexadecimal, along
	      with the name as a string.

       -j     Just display the symbol names (no value or type).

       -s segname sectname
	      List only those symbols in the section (segname,sectname).   For
	      llvm-nm(1)  this	option	must  be last on the command line, and
	      after the files.

       -l     List a pseudo symbol .section_start if  no  symbol  has  as  its
	      value  the  starting address of the section.  (This is used with
	      the -s option above.)

       -arch arch_type
	      Specifies the architecture, arch_type, of the file for nm(1)  to
	      operate  on  when  the file is a universal file (see arch(3) for
	      the currently known arch_types).	The arch_type can be ""all""  to
	      operate  on  all	architectures  in the file.  The default is to
	      display the symbols from only the host architecture, if the file
	      contains	it;  otherwise,  symbols  for all architectures in the
	      file are displayed.

       -f  format
	      For llvm-nm(1) this specifies the output format.	 Where	format
	      can be bsd, sysv, posix or darwin.

       -f     For  nm-classic(1)  this	displays the symbol table of a dynamic
	      library flat (as one file not separate modules).	This is  obso-
	      lete and not supported with llvm-nm(1).

       -A     Write the pathname or library name of an object on each line.

       -P     Write information in a portable output format.

       -t format
	      For the -P output, write the numeric value in the specified for-
	      mat. The format shall be dependent on the single character  used
	      as the format option-argument:

       d      The value shall be written in decimal (default).

       o      The value shall be written in octal.

       x      The value shall be written in hexadecimal.

       -L     Display  the  symbols in the bitcode files in the (__LLVM,__bun-
	      dle) section if present instead of the  object's	symbol	table.
	      This  is the default if the object has no symbol table and there
	      is an (__LLVM,__bundle) section.

SEE ALSO
       ar(1), ar(5), Mach-O(5), stab(5), nlist(3), dyldinfo(1)

BUGS
       Displaying Mach-O symbols with -m is too verbose.  Without the -m, sym-
       bols in the Objective C sections get displayed as an `s'.



Apple, Inc.			 May 23, 2017				 NM(1)
","# nm

> List symbol names in object files.

- List global (extern) functions in a file (prefixed with T):

`nm -g {{file.o}}`

- List only undefined symbols in a file:

`nm -u {{file.o}}`

- List all symbols, even debugging symbols:

`nm -a {{file.o}}`

- Demangle C++ symbols (make them readable):

`nm --demangle {{file.o}}`
"
xinput,,,"# xinput

> List available input devices, query information about a device and change input device settings.

- List all input devices:

`xinput list`

- Disable an input:

`xinput disable {{id}}`

- Enable an input:

`xinput enable {{id}}`

- Disconnect an input from its master:

`xinput float {{id}}`

- Reattach an input as slave to a master:

`xinput reattach {{id}} {{master_id}}`
"
viewnior,,,"# viewnior

> Simple and elegant image viewer.

- View an image:

`viewnior {{path/to/image.ext}}`

- View in fullscreen mode:

`viewnior --fullscreen {{path/to/image.ext}}`

- View fullscreen in slideshow mode:

`viewnior --slideshow {{path/to/image.ext}}`
"
cpulimit,http://cpulimit.sourceforge.net/,,"# cpulimit

> A tool to throttle the CPU usage of other processes.
> More information: <http://cpulimit.sourceforge.net/>.

- Limit an existing process with PID 1234 to only use 25% of the CPU:

`cpulimit --pid {{1234}} --limit {{25%}}`

- Limit an existing program by its executable name:

`cpulimit --exe {{program}} --limit {{25}}`

- Launch a given program and limit it to only use 50% of the CPU:

`cpulimit --limit {{50}} -- {{program arg1 arg2 ...}}`

- Launch a program, limit its CPU usage to 50% and run cpulimit in the background:

`cpulimit --limit {{50}} --background -- {{program}}`

- Kill its process if the program's CPU usage goes over 50%:

`cpulimit --limit 50 --kill -- {{program}}`

- Throttle both it and its child processes so that none go about 25% CPU:

`cpulimit --limit {{25}} --monitor-forks -- {{program}}`
"
ip,,"
IP(4)			 BSD Kernel Interfaces Manual			 IP(4)

NAME
     ip -- Internet Protocol

SYNOPSIS
     #include <sys/socket.h>
     #include <netinet/in.h>

     int
     socket(AF_INET, SOCK_RAW, proto);

DESCRIPTION
     IP is the transport layer protocol used by the Internet protocol family.
     Options may be set at the IP level when using higher-level protocols that
     are based on IP (such as TCP and UDP).  It may also be accessed through a
     ``raw socket'' when developing new protocols, or special-purpose applica-
     tions.

     There are several IP-level setsockopt(2) /getsockopt(2) options.
     IP_OPTIONS may be used to provide IP options to be transmitted in the IP
     header of each outgoing packet or to examine the header options on incom-
     ing packets.  IP options may be used with any socket type in the Internet
     family.  The format of IP options to be sent is that specified by the IP
     protocol specification (RFC-791), with one exception: the list of
     addresses for Source Route options must include the first-hop gateway at
     the beginning of the list of gateways.  The first-hop gateway address
     will be extracted from the option list and the size adjusted accordingly
     before use.  To disable previously specified options, use a zero-length
     buffer:

     setsockopt(s, IPPROTO_IP, IP_OPTIONS, NULL, 0);

     IP_TOS and IP_TTL may be used to set the type-of-service and time-to-live
     fields in the IP header for SOCK_STREAM and SOCK_DGRAM sockets. For exam-
     ple,

     int tos = IPTOS_LOWDELAY;	     /* see <netinet/in.h> */
     setsockopt(s, IPPROTO_IP, IP_TOS, &tos, sizeof(tos));

     int ttl = 60;		     /* max = 255 */
     setsockopt(s, IPPROTO_IP, IP_TTL, &ttl, sizeof(ttl));

     If the IP_RECVDSTADDR option is enabled on a SOCK_DGRAM socket, the
     recvmsg call will return the destination IP address for a UDP datagram.
     The msg_control field in the msghdr structure points to a buffer that
     contains a cmsghdr structure followed by the IP address.  The cmsghdr
     fields have the following values:

     cmsg_len = CMSG_LEN(sizeof(struct in_addr))
     cmsg_level = IPPROTO_IP
     cmsg_type = IP_RECVDSTADDR

     If the IP_RECVTOS option is enabled on a SOCK_DGRAM or SOCK_RAW socket,
     the recvmsg call will return the TOS (type of service) field of the IP
     header.  The msg_control field in the msghdr structure points to a buffer
     that contains a cmsghdr structure followed by the TOS.  The cmsghdr
     fields have the following values:

     cmsg_len = CMSG_LEN(sizeof(u_char))
     cmsg_level = IPPROTO_IP
     cmsg_type = IP_RECVTOS

   Multicast Options
     IP multicasting is supported only on AF_INET sockets of type SOCK_DGRAM
     and SOCK_RAW, and only on networks where the interface driver supports
     multicasting.

     The IP_MULTICAST_TTL option changes the time-to-live (TTL) for outgoing
     multicast datagrams in order to control the scope of the multicasts:

     u_char ttl;     /* range: 0 to 255, default = 1 */
     setsockopt(s, IPPROTO_IP, IP_MULTICAST_TTL, &ttl, sizeof(ttl));

     Datagrams with a TTL of 1 are not forwarded beyond the local network.
     Multicast datagrams with a TTL of 0 will not be transmitted on any net-
     work, but may be delivered locally if the sending host belongs to the
     destination group and if multicast loopback has not been disabled on the
     sending socket (see below).  Multicast datagrams with TTL greater than 1
     may be forwarded to other networks if a multicast router is attached to
     the local network.

     For hosts with multiple interfaces, each multicast transmission is sent
     from the primary network interface.  The IP_MULTICAST_IF option overrides
     the default for subsequent transmissions from a given socket:

     struct in_addr addr;
     setsockopt(s, IPPROTO_IP, IP_MULTICAST_IF, &addr, sizeof(addr));

     where ""addr"" is the local IP address of the desired interface or
     INADDR_ANY to specify the default interface.  An interface's local IP
     address and multicast capability can be obtained via the SIOCGIFCONF and
     SIOCGIFFLAGS ioctls.  Normal applications should not need to use this
     option.

     If a multicast datagram is sent to a group to which the sending host
     itself belongs (on the outgoing interface), a copy of the datagram is, by
     default, looped back by the IP layer for local delivery.  The
     IP_MULTICAST_LOOP option gives the sender explicit control over whether
     or not subsequent datagrams are looped back:

     u_char loop;    /* 0 = disable, 1 = enable (default) */
     setsockopt(s, IPPROTO_IP, IP_MULTICAST_LOOP, &loop, sizeof(loop));

     This option improves performance for applications that may have no more
     than one instance on a single host (such as a router demon), by eliminat-
     ing the overhead of receiving their own transmissions.  It should gener-
     ally not be used by applications for which there may be more than one
     instance on a single host (such as a conferencing program) or for which
     the sender does not belong to the destination group (such as a time
     querying program).

     A multicast datagram sent with an initial TTL greater than 1 may be
     delivered to the sending host on a different interface from that on which
     it was sent, if the host belongs to the destination group on that other
     interface.  The loopback control option has no effect on such delivery.

     A host must become a member of a multicast group before it can receive
     datagrams sent to the group.  To join a multicast group, use the
     IP_ADD_MEMBERSHIP option:

     struct ip_mreq mreq;
     setsockopt(s, IPPROTO_IP, IP_ADD_MEMBERSHIP, &mreq, sizeof(mreq));

     where mreq is the following structure:

     struct ip_mreq {
	 struct in_addr imr_multiaddr; /* multicast group to join */
	 struct in_addr imr_interface; /* interface to join on */
     }

     imr_interface should be INADDR_ANY to choose the default multicast inter-
     face, or the IP address of a particular multicast-capable interface if
     the host is multihomed.  Membership is associated with a single inter-
     face; programs running on multihomed hosts may need to join the same
     group on more than one interface.	Up to IP_MAX_MEMBERSHIPS (currently
     20) memberships may be added on a single socket.

     To drop a membership, use:

     struct ip_mreq mreq;
     setsockopt(s, IPPROTO_IP, IP_DROP_MEMBERSHIP, &mreq, sizeof(mreq));

     where mreq contains the same values as used to add the membership.  Mem-
     berships are dropped when the socket is closed or the process exits.

   Raw IP Sockets
     Raw IP sockets are connectionless, and are normally used with the sendto
     and recvfrom calls, though the connect(2) call may also be used to fix
     the destination for future packets (in which case the read(2) or recv(2)
     and write(2) or send(2) system calls may be used).

     If proto is 0, the default protocol IPPROTO_RAW is used for outgoing
     packets, and only incoming packets destined for that protocol are
     received.	If proto is non-zero, that protocol number will be used on
     outgoing packets and to filter incoming packets.

     Outgoing packets automatically have an IP header prepended to them (based
     on the destination address and the protocol number the socket is created
     with), unless the IP_HDRINCL option has been set.	Incoming packets are
     received with IP header and options intact.

     IP_HDRINCL indicates the complete IP header is included with the data and
     may be used only with the SOCK_RAW type.

     #include <netinet/ip.h>

     int hincl = 1;		     /* 1 = on, 0 = off */
     setsockopt(s, IPPROTO_IP, IP_HDRINCL, &hincl, sizeof(hincl));

     Unlike previous BSD releases, the program must set all the fields of the
     IP header, including the following:

     ip->ip_v = IPVERSION;
     ip->ip_hl = hlen >> 2;
     ip->ip_id = 0;  /* 0 means kernel set appropriate value */
     ip->ip_off = offset;
     ip->ip_len = len;

     Note that the ip_off and ip_len fields are in host byte order.

     If the header source address is set to INADDR_ANY, the kernel will choose
     an appropriate address.

DIAGNOSTICS
     A socket operation may fail with one of the following errors returned:

     [EISCONN]	      when trying to establish a connection on a socket which
		      already has one, or when trying to send a datagram with
		      the destination address specified and the socket is
		      already connected;

     [ENOTCONN]       when trying to send a datagram, but no destination
		      address is specified, and the socket hasn't been con-
		      nected;

     [ENOBUFS]	      when the system runs out of memory for an internal data
		      structure;

     [EADDRNOTAVAIL]  when an attempt is made to create a socket with a net-
		      work address for which no network interface exists.

     [EACESS]	      when an attempt is made to create a raw IP socket by a
		      non-privileged process.

     The following errors specific to IP may occur when setting or getting IP
     options:

     [EINVAL]	      An unknown socket option name was given.

     [EINVAL]	      The IP option field was improperly formed; an option
		      field was shorter than the minimum value or longer than
		      the option buffer provided.

SEE ALSO
     getsockopt(2), recv(2), send(2), icmp(4), inet(4), intro(4)

HISTORY
     The ip protocol appeared in 4.2BSD.

4.2 Berkeley Distribution      November 30, 1993     4.2 Berkeley Distribution
","# ip

> Show / manipulate routing, devices, policy routing and tunnels.

- List interfaces with detailed info:

`ip a`

- Display the routing table:

`ip r`

- Show neighbors (ARP table):

`ip n`

- Make an interface up/down:

`ip link set {{interface}} up/down`

- Add/Delete an ip address to an interface:

`ip addr add/del {{ip}}/{{mask}} dev {{interface}}`

- Add a default route:

`ip route add default via {{ip}} dev {{interface}}`
"
vncserver,,,"# vncserver

> Launches a VNC (Virtual Network Computing) desktop.

- Launch a VNC Server on next available display:

`vncserver`

- Launch a VNC Server with specific screen geometry:

`vncserver --geometry {{width}}x{{height}}`

- Kill an instance of VNC Server running on a specific display:

`vncserver --kill :{{display_number}}`
"
lrzip,,,"# lrzip

> A large file compression program.
> See also `lrunzip`, `lrztar`, `lrzuntar`.

- Compress a file with LZMA - slow compression, fast decompression:

`lrzip {{filename}}`

- Compress a file with BZIP2 - good middle ground for compression/speed:

`lrzip -b {{filename}}`

- Compress with ZPAQ - extreme compression, but very slow:

`lrzip -z {{filename}}`

- Compress with LZO - light compression, extremely fast decompression:

`lrzip -l {{filename}}`

- Compress a file and password protect/encrypt it:

`lrzip -e {{filename}}`

- Override the number of processor threads to use:

`lrzip -p {{8}} {{filename}}`
"
print,,,"# print

> An alias to a `run-mailcap`'s action print.
> Originally `run-mailcap` is used to process mime-type/file.

- Print action can be used to print any file on default run-mailcap tool:

`print {{filename}}`

- With `run-mailcap`:

`run-mailcap --action=print {{filename}}`
"
vgcreate,,,"# vgcreate

> Create volume groups combining multiple mass-storage devices.

- Create a new volume group called vg1 using the `/dev/sda1` device:

`vgcreate {{vg1}} {{/dev/sda1}}`

- Create a new volume group called vg1 using multiple devices:

`vgcreate {{vg1}} {{/dev/sda1}} {{/dev/sdb1}} {{/dev/sdc1}}`
"
lsusb,,,"# lsusb

> Display information about USB buses and devices connected to them.

- List all the USB devices available:

`lsusb`

- List the USB hierarchy as a tree:

`lsusb -t`

- List verbose information about USB devices:

`lsusb --verbose`

- List detailed information about a USB device:

`lsusb -D {{device}}`

- List devices with a specified vendor and product id only:

`lsusb -d {{vendor}}:{{product}}`
"
authconfig,,,"# authconfig

> A CLI interface for configuring system authentication resources.

- Display the current configuration (or dry run):

`authconfig --test`

- Configure the server to use a different password hashing algorithm:

`authconfig --update --passalgo={{algorithm}}`

- Enable LDAP authentication:

`authconfig --update --enableldapauth`

- Disable LDAP authentication:

`authconfig --update --disableldapauth`

- Enable Network Information Service (NIS):

`authconfig --update --enablenis`

- Enable Kerberos:

`authconfig --update --enablekrb5`

- Enable Winbind (Active Directory) authentication:

`authconfig --update --enablewinbindauth`

- Enable local authorization:

`authconfig --update --enablelocauthorize`
"
mkfs.ntfs,,,"# mkfs.ntfs

> Creates a NTFS filesystem inside a partition.

- Create a NTFS filesystem inside partition 1 on device b (`sdb1`):

`mkfs.ntfs {{/dev/sdb1}}`

- Create filesystem with a volume-label:

`mkfs.ntfs -L {{volume_label}} {{/dev/sdb1}}`

- Create filesystem with specific UUID:

`mkfs.ntfs -U {{UUID}} {{/dev/sdb1}}`
"
nmcli,,,"# nmcli

> A command line tool for controlling NetworkManager.

- Check the nmcli version:

`nmcli --version`

- Call general help:

`nmcli --help`

- Call help on a command:

`nmcli {{command}} --help`

- Execute an `nmcli` command:

`nmcli {{command}}`
"
adduser,,,"# adduser

> User addition utility.

- Create a new user with a default home directory and prompt the user to set a password:

`adduser {{username}}`

- Create a new user without a home directory:

`adduser --no-create-home {{username}}`

- Create a new user with a home directory at the specified path:

`adduser --home {{path/to/home}} {{username}}`

- Create a new user with the specified shell set as the login shell:

`adduser --shell {{path/to/shell}} {{username}}`

- Create a new user belonging to the specified group:

`adduser --ingroup {{group}} {{username}}`

- Add an existing user to the specified group:

`adduser {{username}} {{group}}`
"
wpa_passphrase,,,"# wpa_passphrase

> Generate a WPA-PSK key from an ASCII passphrase for a given SSID.

- Compute and display the WPA-PSK key for a given SSID reading the passphrase from stdin:

`wpa_passphrase {{SSID}}`

- Compute and display WPA-PSK key for a given SSID specifying the passphrase as an argument:

`wpa_passphrase {{SSID}} {{passphrase}}`
"
mknod,,"
MKNOD(8)		  BSD System Manager's Manual		      MKNOD(8)

NAME
     mknod -- make device special file

SYNOPSIS
     mknod [-F format] name [c | b] major minor
     mknod [-F format] name [c | b] major unit subunit
     mknod name [c | b] number
     mknod name w

DESCRIPTION
     The mknod command creates device special files.

     To make nodes manually, the required arguments are:

     name    Device name, for example ``sd'' for a SCSI disk on an HP300 or a
	     ``pty'' for pseudo-devices.

     b | c | w
	     Type of device. If the device is a block type device such as a
	     tape or disk drive which needs both cooked and raw special files,
	     the type is b.  Whiteout nodes are type w.  All other devices are
	     character type devices, such as terminal and pseudo devices, and
	     are type c.

     major   The major device number is an integer number which tells the ker-
	     nel which device driver entry point to use.

     minor   The minor device number tells the kernel which one of several
	     similar devices the node corresponds to; for example, it may be a
	     specific serial port or pty.

     unit and subunit
	     The unit and subunit numbers select a subset of a device; for
	     example, the unit may specify a particular SCSI disk, and the
	     subunit a partition on that disk.	(Currently this form of speci-
	     fication is only supported by the bsdos format, for compatibility
	     with the BSD/OS mknod(8).)

     Device numbers for different operating systems may be packed in a differ-
     ent format.  To create device nodes that may be used by such an operating
     system (e.g. in an exported file system used for netbooting), the -F
     option is used.  The following formats are recognized: native, 386bsd,
     4bsd, bsdos, freebsd, hpux, isc, linux, netbsd, osf1, sco, solaris,
     sunos, svr3, svr4 and ultrix.

     Alternatively, a single opaque device number may be specified.

SEE ALSO
     mkfifo(1), mkfifo(2), mknod(2)

HISTORY
     A mknod command appeared in Version 6 AT&T UNIX.  The -F option appeared
     in NetBSD 1.4.

NetBSD 1.4		      September 11, 1998		    NetBSD 1.4
","# mknod

> Create block or character device special files.

- Create a block device:

`sudo mknod {{path/to/device_file}} b {{major_device_number}} {{minor_device_number}}`

- Create a character device:

`sudo mknod {{path/to/device_file}} c {{major_device_number}} {{minor_device_number}}`

- Create a FIFO (queue) device:

`sudo mknod {{path/to/device_file}} p`

- Create a device file with default SELinux security context:

`sudo mknod -Z {{path/to/device_file}} {{type}} {{major_device_number}} {{minor_device_number}}`
"
runsvchdir,,,"# runsvchdir

> Change the directory `runsvdir` uses by default.

- Switch `runsvdir` directories:

`sudo runsvchdir {{/path/to/directory}}`
"
gnome-terminal,,,"# gnome-terminal

> The GNOME Terminal emulator.

- Open a new GNOME terminal window:

`gnome-terminal`

- Run a specific command in a new terminal window:

`gnome-terminal -- {{command}}`

- Open a new tab in the last opened window instead:

`gnome-terminal --tab`

- Set the title of the new tab:

`gnome-terminal --tab --title ""{{title}}""`
"
i3lock,https://i3wm.org/i3lock,,"# i3lock

> Simple screen locker built for the i3 window manager.
> More information: <https://i3wm.org/i3lock>.

- Lock screen with a simple color background (rrggbb format):

`i3lock -c {{0000ff}}`

- Lock screen to a PNG background:

`i3lock -i {{path/to/picture.png}}`

- Disable the unlock indicator (removes feedback on keypress):

`i3lock -u`

- Display mouse pointer instead of hiding it ('default' for default pointer, 'win' for a MS Windows pointer):

`i3lock -p {{default|win}}`

- Lock screen to a PNG background displayed in multiple monitors, with enabled mouse pointer:

`i3lock -i {{path/to/picture.png}} -p {{default|win}} -t`
"
ss,,,"# ss

> Utility to investigate sockets.

- Show all TCP/UDP/RAW/UNIX sockets:

`ss -a {{-t|-u|-w|-x}}`

- Filter TCP sockets by states, only/exclude:

`ss {{state/exclude}} {{bucket/big/connected/synchronized/...}}`

- Show all TCP sockets connected to the local HTTPS port (443):

`ss -t src :{{443}}`

- Show all TCP sockets listening on the local 8080 port:

`ss -lt src :{{8080}}`

- Show all TCP sockets along with processes connected to a remote ssh port:

`ss -pt dst :{{ssh}}`

- Show all UDP sockets connected on specific source and destination ports:

`ss -u 'sport == :{{source_port}} and dport == :{{destination_port}}'`

- Show all TCP IPv4 sockets locally connected on the subnet 192.168.0.0/16:

`ss -4t src {{192.168/16}}`
"
aptitude,,,"# aptitude

> Debian and Ubuntu package management utility.

- Synchronize list of packages and versions available. This should be run first, before running subsequent aptitude commands:

`aptitude update`

- Install a new package and its dependencies:

`aptitude install {{package}}`

- Search for a package:

`aptitude search {{package}}`

- Search for an installed package (`?installed` is an aptitude search term):

`aptitude search '?installed({{package}})'`

- Remove a package and all packages depending on it:

`aptitude remove {{package}}`

- Upgrade installed packages to newest available versions:

`aptitude upgrade`

- Upgrade installed packages (like `aptitude upgrade`) including removing obsolete packages and installing additional packages to meet new package dependencies:

`aptitude full-upgrade`

- Put an installed package on hold to prevent it from being automatically upgraded:

`aptitude hold '?installed({{package}})'`
"
cewl,https://digi.ninja/projects/cewl.php,,"# cewl

> URL spidering tool for making a cracking wordlist from web content.
> More information: <https://digi.ninja/projects/cewl.php>.

- Create a wordlist file from the given URL up to 2 links depth:

`cewl --depth {{2}} --write {{path/to/wordlist.txt}} {{url}}`

- Output an alpha-numeric wordlist from the given URL with words of minimum 5 characters:

`cewl --with-numbers --min_word_length {{5}} {{url}}`

- Output a wordlist from the given URL in debug mode including email addresses:

`cewl --debug --email {{url}}`

- Output a wordlist from the given URL using HTTP Basic or Digest authentication:

`cewl --auth_type {{basic|digest}} --auth_user {{username}} --auth_pass {{password}} {{url}}`

- Output a wordlist from the given URL through a proxy:

`cewl --proxy_host {{host}} --proxy_port {{port}} {{url}}`
"
mullvad,https://mullvad.net/,,"# mullvad

> CLI client for Mullvad VPN.
> More information: <https://mullvad.net/>.

- Link your mullvad account with the specified account number:

`mullvad account set {{account_number}}`

- Enable LAN access while VPN is on:

`mullvad lan set allow`

- Establish the VPN tunnel:

`mullvad connect`

- Check status of VPN tunnel:

`mullvad status`
"
konsole,https://konsole.kde.org,,"# konsole

> Konsole: The KDE terminal emulator.
> More information: <https://konsole.kde.org>.

- Open a new Konsole in a specific directory:

`konsole --workdir {{path/to/directory}}`

- Run a specific command and do not close the window after it exits:

`konsole --noclose -e {{command}}`

- Open a new tab:

`konsole --new-tab`

- Open a Konsole in the background and bring to the front when Ctrl+Shift+F12 (by default) is pressed:

`konsole --background-mode`

- Open a Konsole with the emergency FALLBACK profile:

`konsole --fallback-profile`
"
lvextend,,,"# lvextend

> Increase the size of a logical volume.

- Increase a volume's size to 120GB:

`lvextend --size {{120G}} {{logical_volume}}`

- Increase a volume's size by 40GB as well as the underlying filesystem:

`lvextend --size +{{40G}} -r {{logical_volume}}`

- Increase a volume's size to 100% of the free phyiscal volume space:

`lvextend --size {{100}}%FREE {{logical_volume}}`
"
dunstify,,,"# dunstify

> A notification tool that is an extension of notify-send, but has more features based around dunst.
> Works with all options that work for notify-send.

- Show a notification with a given title and message:

`dunstify {{""Title""}} {{""Message""}}`

- Show a notification with specified urgency:

`dunstify {{""Title""}} {{""Message}}"" -u {{low|normal|critical}}`

- Specify a message ID (overwrites any previous messages with the same ID):

`dunstify {{""Title""}} {{""Message""}} -r {{123}}`

- To see other possible options:

`notify-send --help`
"
xeyes,,,"# xeyes

> Display eyes on the screen that follow the mouse cursor.

- Launch xeyes on the local machine's default display:

`xeyes`

- Launch xeyes on a remote machine's display 0, screen 0:

`xeyes -display {{remote_host}}:{{0}}.{{0}}`
"
dmenu,,,"# dmenu

> Dynamic menu.
> Creates a menu from a text input with each item on a new line.

- Display a menu of the output of the `ls` command:

`{{ls}} | dmenu`

- Display a menu with custom items separated by a new line (`\n`):

`echo -e ""{{red}}\n{{green}}\n{{blue}}"" | dmenu`

- Let the user choose between multiple items and save the selected one to a file:

`echo -e ""{{red}}\n{{green}}\n{{blue}}"" | dmenu > {{color.txt}}`

- Launch dmenu on a specific monitor:

`ls | dmenu -m {{1}}`

- Display dmenu at the bottom of the screen:

`ls | dmenu -b`
"
wipefs,,,"# wipefs

> Wipe filesystem, raid, or partition-table signatures from a device.

- Display signatures for specified device:

`sudo wipefs {{/dev/sda}}`

- Wipe all available signatures for specified device:

`sudo wipefs --all {{/dev/sda}}`

- Perform dry run:

`sudo wipefs --all --no-act {{/dev/sda}}`

- Force wipe, even if the filesystem is mounted:

`sudo wipefs --all --force {{/dev/sda}}`
"
efibootbgr,https://linux.die.net/man/8/efibootmgr,,"# efibootmgr

> Manipulate the UEFI Boot Manager (the Bootoptions).
> More information: https://linux.die.net/man/8/efibootmgr.

- List the current settings / bootnums:

`efibootmgr`

- List the filepaths:

`efibootmgr -v`

- Add UEFI Shell v2 as a boot option:

`sudo efibootmgr -c -d {{/dev/sda1}} -l {{\EFI\tools\Shell.efi}} -L ""{{UEFI Shell}}""`

- Change the current boot order:

`sudo efibootmgr -o {{0002,0008,0001,0005}}`

- Delete a boot option:

`sudo efibootmgr -b {{0008}} --delete-bootnum`
"
makepkg,https://wiki.archlinux.org/index.php/Makepkg,,"# makepkg

> Creates a package installable with the `pacman` package manager.
> Runs the commands from a PKGBUILD file to build the package.
> More information: <https://wiki.archlinux.org/index.php/Makepkg>.

- Make a package (run in the same directory as a PKGBUILD):

`makepkg`

- Make a package and install its dependencies:

`makepkg --syncdeps`

- Same as above, but install the package with `pacman` when done:

`makepkg --syncdeps --install`

- Make a package, but skip source checksums:

`makepkg --skipchecksums`
"
calc,,,"# calc

> An interactive arbitrary-precision calculator on the terminal.

- Start calc in interactive mode:

`calc`

- Perform a calculation in non-interactive mode:

`calc -p '{{85 * (36 / 4)}}'`
"
chcpu,,,"# chcpu

> Enable/disable a system's CPUs.

- Disable CPUs via a list of CPU ID numbers:

`chcpu -d {{1,3}}`

- Enable a set of CPUs via a range of CPU ID numbers:

`chcpu -e {{1-10}}`
"
xclip,,,"# xclip

> X11 clipboard manipulation tool, similar to `xsel`.
> Handles the X primary and secondary selections, plus the system clipboard (`Ctrl + C`/`Ctrl + V`).

- Copy the output from a command to the X11 primary selection area (clipboard):

`echo 123 | xclip`

- Copy the output from a command to a given X11 selection area:

`echo 123 | xclip -selection {{primary|secondary|clipboard}}`

- Copy the contents of a file to the system clipboard, using short notation:

`echo 123 | xclip -sel clip`

- Copy the contents of a file into the system clipboard:

`xclip -sel clip {{input_file.txt}}`

- Copy the contents of a PNG image into the system clipboard (can be pasted in other programs correctly):

`xclip -sel clip -t image/png {{input_file.png}}`

- Paste the contents of the X11 primary selection area to the console:

`xclip -o`

- Paste the contents of the system clipboard to the console:

`xclip -o -sel clip`

- Paste the contents of the system clipboard into a file:

`xclip -o -sel clip > {{output_file.txt}}`
"
update-alternatives,,,"# update-alternatives

> A convenient tool for maintaining symbolic links to determine default commands.

- Add a symbolic link:

`sudo update-alternatives --install {{path/to/symlink}} {{command_name}} {{path/to/command_binary}} {{priority}}`

- Configure a symbolic link for ""java"":

`sudo update-alternatives --config {{java}}`

- Remove a symbolic link:

`sudo update-alternatives --remove {{java}} {{/opt/java/jdk1.8.0_102/bin/java}}`

- Display information about a specified command:

`update-alternatives --display {{java}}`

- Display all commands and their current selection:

`update-alternatives --get-selections`
"
pkgmk,,,"# pkgmk

> Make a binary package for use with pkgadd on CRUX.

- Make and download a package:

`pkgmk -d`

- Install the package after making it:

`pkgmk -d -i`

- Upgrade the package after making it:

`pkgmk -d -u`

- Ignore the footprint when making a package:

`pkgmk -d -if`

- Ignore the MD5 sum when making a package:

`pkgmk -d -im`

- Update the package's footprint:

`pkgmk -uf`
"
dnf,https://dnf.readthedocs.io/,,"# dnf

> Package management utility for RHEL, Fedora, and CentOS (replaces yum).
> More information: <https://dnf.readthedocs.io/>.

- Upgrade installed packages to the newest available versions:

`sudo dnf upgrade`

- Search packages via keywords:

`dnf search {{keywords}}`

- Display details about a package:

`dnf info {{package}}`

- Install a new package:

`sudo dnf install {{package}}`

- Install a new package and assume yes to all questions:

`sudo dnf -y install {{package}}`

- Remove a package:

`sudo dnf remove {{package}}`

- List installed packages:

`dnf list --installed`

- Find which packages provide a given file:

`dnf provides {{file}}`
"
http-prompt,http://example.com,,"# http-prompt

> An interactive command-line HTTP client featuring autocomplete and syntax highlighting.

- Launch a session targeting the default url of http://localhost:8000 or the previous session:

`http-prompt`

- Launch a session with a given url:

`http-prompt {{http://example.com}}`

- Launch a session with some initial options:

`http-prompt {{localhost:8000/api}} --auth {{username:password}}`
"
trash,https://github.com/andreafrancia/trash-cli,,"# trash

> A CLI for managing your trashcan / recycling bin.
> More information: <https://github.com/andreafrancia/trash-cli>.

- Delete a file (send to trash):

`trash {{path/to/file}}`

- List files in trash:

`trash-list`

- Restore file from trash:

`trash-restore`

- Empty trash:

`trash-empty`

- Empty trash, keeping files trashed less than {{10}} days ago:

`trash-empty {{10}}`

- Remove all files named 'foo' from the trash:

`trash-rm foo`

- Remove all files with a given original location:

`trash-rm {{/absolute/path/to/file_or_directory}}`
"
ptx,,,"# ptx

> Generate a permuted index of words from one or more text files.

- Generate a permuted index where the first field of each line is an index reference:

`ptx --references {{path/to/file}}`

- Generate a permuted index with automatically generated index references:

`ptx --auto-reference {{path/to/file}}`

- Generate a permuted index with a fixed width:

`ptx --width={{width_in_columns}} {{path/to/file}}`

- Generate a permuted index with a list of filtered words:

`ptx --only-file={{path/to/filter}} {{path/to/file}}`

- Generate a permuted index with SYSV-style behaviors:

`ptx --traditional {{path/to/file}}`
"
pkg-config,https://www.freedesktop.org/wiki/Software/pkg-config/,"pkg-config(1)							 pkg-config(1)



NAME
       pkg-config - Return metainformation about installed libraries

SYNOPSIS
       pkg-config  [--modversion]  [--version]	[--help] [--atleast-pkgconfig-
       version=VERSION] [--print-errors]  [--short-errors]  [--silence-errors]
       [--errors-to-stdout]   [--debug]  [--cflags]  [--libs]  [--libs-only-L]
       [--libs-only-l] [--cflags-only-I]  [--libs-only-other]  [--cflags-only-
       other]  [--variable=VARIABLENAME] [--define-variable=VARIABLENAME=VARI-
       ABLEVALUE] [--print-variables] [--uninstalled]  [--exists]  [--atleast-
       version=VERSION]    [--exact-version=VERSION]   [--max-version=VERSION]
       [--validate]   [--list-all]    [--print-provides]    [--print-requires]
       [--print-requires-private] [LIBRARIES...]

DESCRIPTION
       The  pkg-config program is used to retrieve information about installed
       libraries in the system.  It is typically  used	to  compile  and  link
       against	one  or more libraries.  Here is a typical usage scenario in a
       Makefile:

       program: program.c
	    cc program.c `pkg-config --cflags --libs gnomeui`

       pkg-config retrieves information about packages from  special  metadata
       files.  These  files  are named after the package, and has a .pc exten-
       sion.   On  most  systems,  pkg-config  looks  in   /usr/lib/pkgconfig,
       /usr/share/pkgconfig,		/usr/local/lib/pkgconfig	   and
       /usr/local/share/pkgconfig for these files.  It will additionally  look
       in the colon-separated (on Windows, semicolon-separated) list of direc-
       tories specified by the PKG_CONFIG_PATH environment variable.

       The package name specified on the pkg-config command line is defined to
       be the name of the metadata file, minus the .pc extension. If a library
       can install multiple versions simultaneously, it must give each version
       its  own  name (for example, GTK 1.2 might have the package name ""gtk+""
       while GTK 2.0 has ""gtk+-2.0"").

       In addition to specifying a package name on the command line, the  full
       path  to  a  given .pc file may be given instead. This allows a user to
       directly query a particular .pc file.

OPTIONS
       The following options are supported:

       --modversion
	      Requests that the version information of the libraries specified
	      on  the  command	line be displayed.  If pkg-config can find all
	      the libraries on the command line, each library's version string
	      is  printed  to  stdout, one version per line. In this case pkg-
	      config exits successfully. If one or more libraries is  unknown,
	      pkg-config exits with a nonzero code, and the contents of stdout
	      are undefined.

       --version
	      Displays the version of pkg-config and terminates.

       --atleast-pkgconfig-version=VERSION
	      Requires at least the given version of pkg-config.

       --help Displays a help message and terminates.

       --print-errors
	      If one or more of the modules on	the  command  line,  or  their
	      dependencies,  are not found, or if an error occurs in parsing a
	      .pc file, then this option  will	cause  errors  explaining  the
	      problem	to  be	printed.  With	""predicate""  options  such  as
	      ""--exists"" pkg-config runs silently  by  default,  because  it's
	      usually used in scripts that want to control what's output. This
	      option can be used  alone  (to  just  print  errors  encountered
	      locating modules on the command line) or with other options. The
	      PKG_CONFIG_DEBUG_SPEW  environment   variable   overrides   this
	      option.

       --short-errors
	      Print short error messages.

       --silence-errors
	      If  one  or  more  of  the modules on the command line, or their
	      dependencies, are not found, or if an error occurs in parsing  a
	      a  .pc  file,  then  this option will keep errors explaining the
	      problem from being printed. With	""predicate""  options  such  as
	      ""--exists""  pkg-config  runs  silently  by default, because it's
	      usually used in scripts that want to control what's  output.  So
	      this  option  is	only useful with options such as ""--cflags"" or
	      ""--modversion""  that  print  errors  by  default.  The  PKG_CON-
	      FIG_DEBUG_SPEW environment variable overrides this option.

       --errors-to-stdout
	      If printing errors, print them to stdout rather than the default
	      stderr

       --debug
	      Print debugging information. This is slightly different than the
	      PKG_CONFIG_DEBUG_SPEW  environment  variable,  which also enable
	      ""--print-errors"".


       The following options are used to compile and link programs:

       --cflags
	      This prints pre-processor and compile flags required to  compile
	      the  packages on the command line, including flags for all their
	      dependencies. Flags are ""compressed"" so that each identical flag
	      appears  only  once.  pkg-config exits with a nonzero code if it
	      can't find metadata for one or more of the packages on the  com-
	      mand line.

       --cflags-only-I
	      This  prints  the -I part of ""--cflags"". That is, it defines the
	      header search path but doesn't specify anything else.

       --cflags-only-other
	      This prints parts of ""--cflags"" not covered  by  ""--cflags-only-
	      I"".

       --libs This  option is identical to ""--cflags"", only it prints the link
	      flags. As with ""--cflags"", duplicate flags are merged (maintain-
	      ing proper ordering), and flags for dependencies are included in
	      the output.

       --libs-only-L
	      This prints the -L/-R part of ""--libs"". That is, it defines  the
	      library  search path but doesn't specify which libraries to link
	      with.

       --libs-only-l
	      This prints the -l part of ""--libs"" for the libraries  specified
	      on  the command line. Note that the union of ""--libs-only-l"" and
	      ""--libs-only-L"" may be smaller than ""--libs"", due to flags  such
	      as -rdynamic.

       --libs-only-other
	      This prints the parts of ""--libs"" not covered by ""--libs-only-L""
	      and ""--libs-only-l"", such as ""--pthread"".

       --variable=VARIABLENAME
	      This returns the value of a variable defined in a package's  .pc
	      file.  Most  packages define the variable ""prefix"", for example,
	      so you can say:
		$ pkg-config --variable=prefix glib-2.0
		/usr/

       --define-variable=VARIABLENAME=VARIABLEVALUE
	      This sets a global value for a variable, overriding the value in
	      any  .pc	files. Most packages define the variable ""prefix"", for
	      example, so you can say:
		$ pkg-config --print-errors --define-variable=prefix=/foo \
			     --variable=prefix glib-2.0
		/foo

       --print-variables
	      Returns a list of all variables defined in the package.


       --uninstalled
	      Normally if you request the package ""foo"" and the package  ""foo-
	      uninstalled""  exists,  pkg-config will prefer the ""-uninstalled""
	      variant. This  allows  compilation/linking  against  uninstalled
	      packages.  If you specify the ""--uninstalled"" option, pkg-config
	      will return successfully	if  any  ""-uninstalled""  packages  are
	      being used, and return failure (false) otherwise.  (The PKG_CON-
	      FIG_DISABLE_UNINSTALLED environment  variable  keeps  pkg-config
	      from  implicitly	choosing  ""-uninstalled""  packages, so if that
	      variable is set, they will only have been used  if  you  pass  a
	      name like ""foo-uninstalled"" on the command line explicitly.)

       --exists

       --atleast-version=VERSION

       --exact-version=VERSION

       --max-version=VERSION
	      These  options  test  whether the package or list of packages on
	      the command line are known to pkg-config, and optionally whether
	      the  version  number of a package meets certain constraints.  If
	      all packages exist and meet the specified  version  constraints,
	      pkg-config  exits  successfully.	Otherwise  it exits unsuccess-
	      fully. Only the first VERSION comparing option will be  honored.
	      Subsequent options of this type will be ignored.

	      Rather  than using the version-test options, you can simply give
	      a version constraint after each package name, for example:
		$ pkg-config --exists 'glib-2.0 >= 1.3.4 libxml = 1.8.3'
	      Remember to use --print-errors if you want error messages.  When
	      no  output  options  are	supplied  to  pkg-config,  --exists is
	      implied.

       --validate
	      Checks the syntax of a package's .pc file for validity. This  is
	      the  same as --exists except that dependencies are not verified.
	      This can be useful for package developers to test their .pc file
	      prior to release:
		$ pkg-config --validate ./my-package.pc

       --msvc-syntax
	      This  option  is available only on Windows. It causes pkg-config
	      to output -l  and  -L  flags  in	the  form  recognized  by  the
	      Microsoft  Visual  C++  command-line compiler, cl. Specifically,
	      instead of -Lx:/some/path it  prints  /libpath:x/some/path,  and
	      instead  of -lfoo it prints foo.lib. Note that the --libs output
	      consists of flags for the linker, and should be placed on the cl
	      command line after a /link switch.

       --define-prefix
	      --dont-define-prefix  These  options  control whether pkg-config
	      overrides the value of the variable prefix  in  each  .pc  file.
	      With  --define-prefix, pkg-config uses the installed location of
	      the .pc file to determine the prefix. --dont-define-prefix  pre-
	      vents this behavior. The default is usually --define-prefix.

	      When this feature is enabled and a .pc file is found in a direc-
	      tory named pkgconfig, the prefix for that package is assumed  to
	      be  the  grandparent  of the directory where the file was found,
	      and the prefix variable is overridden for that file accordingly.

	      If  the value of a variable in a .pc file begins with the origi-
	      nal, non-overridden, value of  the  prefix  variable,  then  the
	      overridden value of prefix is used instead. This allows the fea-
	      ture to work even when the variables have been expanded  in  the
	      .pc file.

       --prefix-variable=PREFIX
	      Set  the	name of the variable that pkg-config overrides instead
	      of prefix when using the --define-prefix feature.

       --static
	      Output  libraries  suitable  for	static	linking.   That  means
	      including  any  private libraries in the output.	This relies on
	      proper tagging in the .pc files, else  a	too  large  number  of
	      libraries will ordinarily be output.

       --list-all
	      List all modules found in the pkg-config path.

       --print-provides
	      List all modules the given packages provides.

       --print-requires
	      List all modules the given packages requires.

       --print-requires-private
	      List  all modules the given packages requires for static linking
	      (see --static).

ENVIRONMENT VARIABLES
       PKG_CONFIG_PATH
	      A colon-separated  (on  Windows,	semicolon-separated)  list  of
	      directories to search for .pc files.  The default directory will
	      always be searched after searching  the  path;  the  default  is
	      libdir/pkgconfig:datadir/pkgconfig  where  libdir  is the libdir
	      for pkg-config and datadir is the datadir for pkg-config when it
	      was installed.

       PKG_CONFIG_DEBUG_SPEW
	      If set, causes pkg-config to print all kinds of debugging infor-
	      mation and report all errors.

       PKG_CONFIG_TOP_BUILD_DIR
	      A value to set for the magic variable pc_top_builddir which  may
	      appear in .pc files. If the environment variable is not set, the
	      default value '$(top_builddir)'  will  be  used.	This  variable
	      should  refer to the top builddir of the Makefile where the com-
	      pile/link flags reported by pkg-config will be used.  This  only
	      matters when compiling/linking against a package that hasn't yet
	      been installed.

       PKG_CONFIG_DISABLE_UNINSTALLED
	      Normally if you request the package ""foo"" and the package  ""foo-
	      uninstalled""  exists,  pkg-config will prefer the ""-uninstalled""
	      variant. This  allows  compilation/linking  against  uninstalled
	      packages.  If this environment variable is set, it disables said
	      behavior.

       PKG_CONFIG_SYSTEM_INCLUDE_PATH
	      A path variable containing system directories  searched  by  the
	      compiler.  This is normally /usr/include.

       CPATH  C_INCLUDE_PATH  CPLUS_INCLUDE_PATH Additional paths to append to
	      PKG_CONFIG_SYSTEM_INCLUDE_PATH.  These correspond to environment
	      variables  used  by  many  compilers to affect the header search
	      path. These are ignored on Windows builds when --msvc-syntax  is
	      in use.

       INCLUDE
	      Additional  paths to append to PKG_CONFIG_SYSTEM_INCLUDE_PATH on
	      Windows builds when --msvc-syntax is in use. This corresponds to
	      the  environment variable used by MSVC to add directories to the
	      include file search path.

       PKG_CONFIG_ALLOW_SYSTEM_CFLAGS
	      Don't strip system paths	out  of  Cflags.  See  PKG_CONFIG_SYS-
	      TEM_INCLUDE_PATH for the definition of system paths.

       PKG_CONFIG_SYSTEM_LIBRARY_PATH
	      A  path  variable  containing system directories searched by the
	      linker.  This is normally /usr/lib:/lib but is dependent on  the
	      pkg-config  build  and  can  contain  other  directories such as
	      /usr/lib64.

       PKG_CONFIG_ALLOW_SYSTEM_LIBS
	      Don't strip  system  paths  out  of  Libs.  See  PKG_CONFIG_SYS-
	      TEM_LIBRARY_PATH for the definition of system paths.

       PKG_CONFIG_SYSROOT_DIR
	      Modify  -I  and -L to use the directories located in target sys-
	      root.  this option is useful when cross-compiling packages  that
	      use  pkg-config  to  determine CFLAGS and LDFLAGS. -I and -L are
	      modified to point to the new system  root.  this	means  that  a
	      -I/usr/include/libfoo will become -I/var/target/usr/include/lib-
	      foo with a PKG_CONFIG_SYSROOT_DIR  equal	to  /var/target  (same
	      rule apply to -L)

       PKG_CONFIG_LIBDIR
	      Replaces	 the  default  pkg-config  search  directory,  usually
	      /usr/lib/pkgconfig:/usr/share/pkgconfig.

       PKG_CONFIG_$PACKAGE_$VARIABLE
	      Overrides the variable VARIABLE  in  the	package  PACKAGE.  The
	      environment  variable  should  have the package name and package
	      variable upper cased with non-alphanumeric characters  converted
	      to underscores. For example, setting PKG_CONFIG_GLADEUI_2_0_CAT-
	      ALOGDIR  will  override  the  variable   ""catalogdir""   in   the
	      ""gladeui-2.0"" package.

PKG-CONFIG DERIVED VARIABLES
       pkg-config  sets a few metadata variables that can be used in .pc files
       or queried at runtime.

       pc_path
	      The default search path used by pkg-config  when	searching  for
	      .pc files. This can be used in a query for the pkg-config module
	      itself itself:
		$ pkg-config --variable pc_path pkg-config

       pcfiledir
	      The installed location of the .pc file.  This  can  be  used  to
	      query  the location of the .pc file for a particular module, but
	      it can also be used to make .pc files relocatable. For instance:
	      prefix=${pcfiledir}/../..
	      exec_prefix=${prefix}
	      libdir=${exec_prefix}/lib
	      includedir=${prefix}/include

       pc_sysrootdir
	      The  sysroot  directory set by the user. When the sysroot direc-
	      tory has not been set, this value is /.  See the PKG_CONFIG_SYS-
	      ROOT_DIR environment variable for more details.

       pc_top_builddir
	      Location of the user's top build directory when calling pkg-con-
	      fig.  This is useful to dynamically set paths in uninstalled .pc
	      files. See the PKG_CONFIG_TOP_BUILD_DIR environment variable for
	      more details.

WINDOWS SPECIALITIES
       The pkg-config default search path is ignored on Windows. Instead,  the
       search path is constructed by using the installed directory of pkg-con-
       fig and then appending lib\pkgconfig and share\pkgconfig.  This can  be
       augmented   or	replaced  using  the  standard	environment  variables
       described above.

AUTOCONF MACROS
       PKG_CHECK_MODULES(VARIABLE-PREFIX, MODULES [,ACTION-IF-FOUND  [,ACTION-
       IF-NOT-FOUND]])

	      The macro PKG_CHECK_MODULES can be used in configure.ac to check
	      whether modules exist. A typical usage would be:
	       PKG_CHECK_MODULES([MYSTUFF], [gtk+-2.0 >= 1.3.5 libxml = 1.8.4])

	      This  would  result in MYSTUFF_LIBS and MYSTUFF_CFLAGS substitu-
	      tion variables, set to the libs and cflags for the given	module
	      list.   If  a  module  is  missing  or has the wrong version, by
	      default configure will abort with  a  message.  To  replace  the
	      default	   action,     specify	   an	  ACTION-IF-NOT-FOUND.
	      PKG_CHECK_MODULES will not print any error messages if you spec-
	      ify  your  own  ACTION-IF-NOT-FOUND.   However,  it will set the
	      variable MYSTUFF_PKG_ERRORS, which you can use to  display  what
	      went wrong.

	      Note   that  if  there  is  a  possibility  the  first  call  to
	      PKG_CHECK_MODULES might  not  happen,  you  should  be  sure  to
	      include  an explicit call to PKG_PROG_PKG_CONFIG in your config-
	      ure.ac.

	      Also note that repeated usage of VARIABLE-PREFIX is  not	recom-
	      mended.  After the first successful usage, subsequent calls with
	      the same VARIABLE-PREFIX will simply use the _LIBS  and  _CFLAGS
	      variables set from the previous usage without calling pkg-config
	      again.

       PKG_PREREQ(MIN-VERSION)
	      Checks that the version of the pkg-config autoconf macros in use
	      is at least MIN-VERSION. This can be used to ensure a particular
	      pkg-config macro will be available.

       PKG_PROG_PKG_CONFIG([MIN-VERSION])

	      Defines the PKG_CONFIG variable to the  best  pkg-config	avail-
	      able,  useful  if  you  need  pkg-config	but  don't want to use
	      PKG_CHECK_MODULES.

	      If the first call to PKG_PROG_PKG_CONFIG is conditional, then it
	      will  not  work  correctly in all cases. Since many of the other
	      macros such as PKG_CHECK_MODULES require PKG_PROG_PKG_CONFIG  to
	      know which pkg-config program to run, PKG_PROG_PKG_CONFIG may be
	      run for the first time from a  conditional  from	one  of  these
	      macros.  Therefore, if any of the pkg-config macros will be used
	      under a conditional, it's best to run PKG_PROG_PKG_CONFIG before
	      any of the other macros are used.


       PKG_CHECK_MODULES_STATIC(VARIABLE-PREFIX,   MODULES   [,ACTION-IF-FOUND
       [,ACTION-IF-NOT-FOUND]])
	      Enables	static	linking  through  --static  prior  to  calling
	      PKG_CHECK_MODULES.

       PKG_CHECK_EXISTS(MODULES, [ACTION-IF-FOUND], [ACTION-IF-NOT-FOUND])

	      Check to see whether a particular set of modules exists.	 Simi-
	      lar  to PKG_CHECK_MODULES(), but does not set variables or print
	      errors.

	      Similar to PKG_CHECK_MODULES, make sure that the first  instance
	      of  this	or  PKG_CHECK_MODULES  is called, or make sure to call
	      PKG_PROG_PKGCONFIG manually.


       PKG_INSTALLDIR(DIRECTORY)

	      Substitutes the variable pkgconfigdir as the  location  where  a
	      module  should  install  pkg-config  .pc	files.	By default the
	      directory is $libdir/pkgconfig, but the default can  be  changed
	      by passing DIRECTORY.  The user can override through the --with-
	      pkgconfigdir parameter.

       PKG_NOARCH_INSTALLDIR(DIRECTORY)

	      Substitutes the variable	noarch_pkgconfigdir  as  the  location
	      where  a	module	should install arch-independent pkg-config .pc
	      files. By default the directory is $datadir/pkgconfig,  but  the
	      default  can be changed by passing DIRECTORY. The user can over-
	      ride through the --with-noarch-pkgconfigdir parameter.

       PKG_CHECK_VAR(VARIABLE,	MODULE,  CONFIG-VARIABLE,   [ACTION-IF-FOUND],
       [ACTION-IF-NOT-FOUND])

	      Retrieves the value of the pkg-config  variable  CONFIG-VARIABLE
	      from  MODULE and stores it in VARIABLE. Note that repeated usage
	      of VARIABLE is not recommended as the check will be  skipped  if
	      the variable is already set.


METADATA FILE SYNTAX
       To  add a library to the set of packages pkg-config knows about, simply
       install a .pc file. You should install this file to libdir/pkgconfig.

       Here is an example file:
       # This is a comment
       prefix=/home/hp/unst   # this defines a variable
       exec_prefix=${prefix}  # defining another variable in terms of the first
       libdir=${exec_prefix}/lib
       includedir=${prefix}/include

       Name: GObject				# human-readable name
       Description: Object/type system for GLib # human-readable description
       Version: 1.3.1
       URL: http://www.gtk.org
       Requires: glib-2.0 = 1.3.1
       Conflicts: foobar <= 4.5
       Libs: -L${libdir} -lgobject-1.3
       Libs.private: -lm
       Cflags: -I${includedir}/glib-2.0 -I${libdir}/glib/include

       You would normally generate the file using configure, so that the  pre-
       fix, etc. are set to the proper values.	The GNU Autoconf manual recom-
       mends generating files like .pc files at build time rather than config-
       ure time, so when you build the .pc file is a matter of taste and pref-
       erence.

       Files have two kinds of line: keyword lines start with a keyword plus a
       colon,  and variable definitions start with an alphanumeric string plus
       an equals sign. Keywords are defined in advance and have special  mean-
       ing  to	pkg-config;  variables do not, you can have any variables that
       you wish (however, users may expect to  retrieve  the  usual  directory
       name variables).

       Note that variable references are written ""${foo}""; you can escape lit-
       eral ""${"" as ""$${"".

       Name:  This field should be a human-readable name for the package. Note
	      that it is not the name passed as an argument to pkg-config.

       Description:
	      This should be a brief description of the package

       URL:   An  URL where people can get more information about and download
	      the package

       Version:
	      This  should  be	the  most-specific-possible  package   version
	      string.

       Requires:
	      This  is a comma-separated list of packages that are required by
	      your package. Flags from dependent packages will be merged in to
	      the flags reported for your package. Optionally, you can specify
	      the version of the required package (using the operators	=,  <,
	      >,  >=,  <=);  specifying a version allows pkg-config to perform
	      extra sanity checks. You may only mention the same  package  one
	      time  on	the  Requires:	line.  If  the version of a package is
	      unspecified, any version will be used with no checking.

       Requires.private:
	      A list of packages required by this package. The difference from
	      Requires	is that the packages listed under Requires.private are
	      not taken into account when a flag list is computed for  dynami-
	      cally linked executable (i.e., when --static was not specified).
	      In the situation where each .pc file corresponds to  a  library,
	      Requires.private shall be used exclusively to specify the depen-
	      dencies between the libraries.

       Conflicts:
	      This optional line allows pkg-config to perform additional  san-
	      ity  checks, primarily to detect broken user installations.  The
	      syntax is the same as Requires: except that  you	can  list  the
	      same  package  more than once here, for example ""foobar = 1.2.3,
	      foobar = 1.2.5, foobar >= 1.3"", if you have reason to do so.  If
	      a  version isn't specified, then your package conflicts with all
	      versions of the mentioned package.  If a user tries to use  your
	      package  and  a  conflicting package at the same time, then pkg-
	      config will complain.

       Libs:  This line should give the link flags specific to	your  package.
	      Don't  add  any flags for required packages; pkg-config will add
	      those automatically.

       Libs.private:
	      This line should list any private  libraries  in	use.   Private
	      libraries  are  libraries  which	are  not  exposed through your
	      library, but are needed in the case of static linking. This dif-
	      fers  from Requires.private in that it references libraries that
	      do not have package files installed.

       Cflags:
	      This line should list the compile flags specific to  your  pack-
	      age.  Don't add any flags for required packages; pkg-config will
	      add those automatically.

AUTHOR
       pkg-config was written by James Henstridge, rewritten  by  Martijn  van
       Beers, and rewritten again by Havoc Pennington. Tim Janik, Owen Taylor,
       and Raja Harinath submitted suggestions and  some  code.   gnome-config
       was  written  by  Miguel de Icaza, Raja Harinath and various hackers in
       the GNOME team.	It was inspired by Owen Taylor's gtk-config program.

BUGS
       pkg-config does not handle mixing of  parameters  with  and  without  =
       well.  Stick with one.

       Bugs can be reported at http://bugs.freedesktop.org/ under the pkg-con-
       fig component.



								 pkg-config(1)
","# pkg-config

> Provide the details of installed libraries for compiling applications.
> More information: <https://www.freedesktop.org/wiki/Software/pkg-config/>.

- Get the list of libraries and their dependencies:

`pkg-config --libs {{library1 library2 ...}}`

- Get the list of libraries, their dependencies, and proper cflags for gcc:

`pkg-config --cflags --libs {{library1 library2 ...}}`

- Compile your code with libgtk-3, libwebkit2gtk-4.0 and all their dependencies:

`c++ example.cpp $(pkg-config --cflags --libs gtk+-3.0 webkit2gtk-4.0) -o example`
"
as,,"AS(1)									 AS(1)



NAME
       as - Mac OS X Mach-O GNU-based assemblers

SYNOPSIS
       as [ option ...	] [ file ...  ]

DESCRIPTION
       The  as	command  translates assembly code in the named files to object
       code.  If no files are specified, as reads from stdin.	All  undefined
       symbols	in  the  assembly  are	treated  as global.  The output of the
       assembly is left in the file a.out by default.

       The program /usr/bin/as is actually a driver that  executes  assemblers
       for specific target architectures.  If no target architecture is speci-
       fied, it defaults to the architecture of the host it is running on.

OPTIONS
       -o name
	      Name the output file name instead of a.out.

       -arch arch_type
	      Specifies the target architecture, arch_type, of	the  assembler
	      to be executed.  The target assemblers for each architecture are
	      in	    /usr/libexec/gcc/darwin/arch_type/as	    or
	      /usr/local/libexec/gcc/darwin/arch_type/as.   There  is only one
	      assembler for an architecture family.  If the  specified	target
	      architecture is a machine-specific implementation, the assembler
	      for   that    architecture    family    is    executed	(e.g.,
	      /usr/libexec/gcc/darwin/ppc/as  for -arch ppc604e).  See arch(3)
	      for the currently known arch_types.

       -arch_multiple
	      Precede any displayed messages with a line stating  the  program
	      name  (as) and the architecture (from the -arch arch_type flag),
	      to distinguish which architecture the error messages  refer  to.
	      When  the cc(1) driver program is run with multiple -arch flags,
	      it invokes as with the -arch_multiple option.

       -force_cpusubtype_ALL
	      By default, the assembler will produce the CPU subtype  ALL  for
	      the  object file it is assembling if it finds no implementation-
	      specific instructions.  Also  by	default,  the  assembler  will
	      allow  implementation-specific instructions and will combine the
	      CPU subtype for those specific implementations.	The  combining
	      of  specific  implementations is architecture-dependent; if some
	      combination of instructions is not allowed, an error  is	gener-
	      ated.    With   the  optional  -force_cpusubtype_ALL  flag,  all
	      instructions are allowed and the object file's CPU subtype  will
	      be  the  ALL subtype.  If the target architecture specified is a
	      machine-specific	implementation	(e.g.,	-arch  ppc603,	 -arch
	      i486),  the  assembler will flag as errors instructions that are
	      not supported on that  architecture,  and  it  will  produce  an
	      object  file  with the CPU subtype for that specific implementa-
	      tion (even if no implementation-specific instructions are used).
	      The  -force_cpusubtype_ALL  flag	is the default for all x86 and
	      x86_64 architectures.

       -dynamic
	      Enables dynamic linking features.  This is the default.

       -static
	      Causes the assembler to treat  as  an  error  any  features  for
	      dynamic linking.	Also causes the .text directive to not include
	      the pure_instructions section attribute.

       --     Use stdin for the assembly source input.

       -n     Instructs the assembler not to assume  that  the	assembly  file
	      starts  with  a .text directive.	Use this option when an output
	      file is not to contain a (__TEXT,__text) section or this section
	      is not to be first one in the output file.

       -f     Fast;  no  need  for  the assembler preprocessor (``app'').  The
	      assembler preprocessor can also be turned off  by  starting  the
	      assembly	file  with  ""#NO_APP\n"".   This is intended for use by
	      compilers which produce assembly code in a strict ""clean"" format
	      that  specifies  exactly where whitespace can go.  The assembler
	      preprocessor needs to be	run  on  hand-written  assembly  files
	      and/or  files  that have been preprocessed by the C preprocessor
	      cpp.  This is typically needed when assembler files  are	assem-
	      bled  through  the use of the cc(1) command, which automatically
	      runs the C preprocessor on assembly source files.  The assembler
	      preprocessor strips out excess spaces, turns single-quoted char-
	      acters into a decimal constants, and turns # <number> <filename>
	      <level>  into  .line <number>;.file <filename>  pairs.  When the
	      assembler preprocessor has been turned off by a  ""#NO_APP\n""  at
	      the start of a file, it can be turned back on and off again with
	      pairs of ""#APP\n"" and ""#NO_APP\n"" at the	beginnings  of	lines.
	      This  is	used  by the compiler to wrap assembly statements pro-
	      duced from asm() statements.

       -g     Produce debugging information for the symbolic  debugger	gdb(1)
	      so  that	the assembly source can be debugged symbolically.  The
	      debugger depends on correct use of the C preprocessor's #include
	      directive  or  the  assembler's .include directive:  Any include
	      file that produces instructions in the  (__TEXT,__text)  section
	      must be included while a .text directive is in effect.  In other
	      words, there must be a .text directive before the  include,  and
	      the  .text  directive  must still be in effect at the end of the
	      include file.  Otherwise, the debugger will get confused when in
	      that assembly file.

       -v     Display  the version of the assembler (both the Mac OS X version
	      and the GNU version it is based on).

       -V     Print the path and the command line of the assembler the	assem-
	      bler driver is using.

       -Idir  Add  the	directory dir to the list of directories to search for
	      files included with the .include directive.  The	default  place
	      to search is the current directory.

       -W     Suppress warnings.

       -L     Save  non-global	defined  labels  beginning  with an 'L'; these
	      labels are normally discarded to save  space  in	the  resultant
	      symbol table.  The compiler generates such temporary labels.

       -q     Use  the	clang(1) integrated assembler instead of the GNU based
	      system assembler.  This is the  default  for  the  x86  and  arm
	      architectures.

       -Q     Use the GNU based system assembler.

Assembler options for the PowerPC processors
       -static_branch_prediction_Y_bit
	      Treat  a	single trailing '+' or '-' after a conditional PowerPC
	      branch instruction as a static branch prediction that  sets  the
	      Y-bit  in the opcode.  Pairs of trailing ""++"" or ""--"" always set
	      the AT-bits. This is the default for Mac OS X.

       -static_branch_prediction_AT_bits
	      Treat a single trailing '+' or '-' after a  conditional  PowerPC
	      branch  instruction  as a static branch prediction that sets the
	      AT-bits in the opcode. Pairs of trailing ""++"" or ""--"" always set
	      the  AT-bits  but  with  this option a warning is issued if this
	      syntax is used.  With this flag the assembler behaves  like  the
	      IBM tools.

       -no_ppc601
	      Treat any PowerPC 601 instructions as an error.

FILES
       a.out	 output file

SEE ALSO
       The  Mac  OS  X	Assembler Reference in the Xcode documentation viewer:
       Perform a title search for ""assembler"" in Apple > Developer Tools  Ref-
       erence Library.
       The assembler source in the cctools module of the Darwin sources.
       cc(1), ld(1), nm(1), otool(1), arch(3), Mach-O(5)



Apple Inc.		       February 12, 2015			 AS(1)
","# as

> Portable GNU assembler.
> Primarily intended to assemble output from `gcc` to be used by `ld`.

- Assemble a file, writing the output to a.out:

`as {{file.s}}`

- Assemble the output to a given file:

`as {{file.s}} -o {{out.o}}`

- Generate output faster by skipping whitespace and comment preprocessing. (Should only be used for trusted compilers):

`as -f {{file.s}}`

- Include a given path to the list of directories to search for files specified in .include directives:

`as -I {{path/to/directory}} {{file.s}}`
"
genkernel,,,"# genkernel

> Gentoo Linux utility to compile and install kernels.

- Automatically compile and install a generic kernel:

`sudo genkernel all`

- Build and install the bzImage|initramfs|kernel|ramdisk only:

`sudo genkernel {{bzImage|initramfs|kernel|ramdisk}}`

- Apply changes to the kernel configuration before compiling and installing:

`sudo genkernel --menuconfig all`

- Generate a kernel with a custom name:

`sudo genkernel --kernname={{custom_name}} all`

- Use a kernel source outside of the default directory /usr/src/linux:

`sudo genkernel --kerneldir={{path/to/directory}} all`
"
ipcrm,,"
ipcrm(1)		  BSD General Commands Manual		      ipcrm(1)

NAME
     ipcrm -- remove the specified message queues, semaphore sets, and shared
     memory segments

SYNOPSIS
     ipcrm [-M shmkey] [-m shmid] [-Q msgkey] [-q msqid] [-S semkey]
	   [-s semid] ...

DESCRIPTION
     Ipcrm removes the specified message queues, semaphores and shared memory
     segments.	These System V IPC objects can be specified by their creation
     id or any associated key.

     The following options are used to specify which IPC objects will be
     removed.  Any number and combination of these options can be used:

     -M shmkey
	     Mark the shared memory segment associated with key shmkey for
	     removal.  This marked segment will be destroyed after the last
	     detach.

     -m shmid
	     Mark the shared memory segment associated with id shmid for
	     removal.  This marked segment will be destroyed after the last
	     detach.

     -Q msgkey
	     Remove the message queue associated with key msgkey from the sys-
	     tem.

     -q msqid
	     Remove the message queue associated with the id msqid from the
	     system.

     -S semkey
	     Remove the semaphore set associated with key semkey from the sys-
	     tem.

     -s semid
	     Removes the semaphore set associated with id semid from the sys-
	     tem.

     The identifiers and keys associated with these System V IPC objects can
     be determined by using ipcs(1)

SEE ALSO
     ipcs(1)

BSD				August 8, 1994				   BSD
","# ipcrm

> Delete IPC (Inter-process Communication) resources.

- Delete a shared memory segment by ID:

`ipcrm --shmem-id {{shmem_id}}`

- Delete a shared memory segment by key:

`ipcrm --shmem-key {{shmem_key}}`

- Delete an IPC queue by ID:

`ipcrm --queue-id {{ipc_queue_id}}`

- Delete an IPC queue by key:

`ipcrm --queue-key {{ipc_queue_key}}`

- Delete a semaphore by ID:

`ipcrm --semaphore-id {{semaphore_id}}`

- Delete a semaphore by key:

`ipcrm --semaphore-key {{semaphore_key}}`

- Delete all IPC resources:

`ipcrm --all`
"
larasail,https://github.com/thedevdojo/larasail,,"# larasail

> A CLI tool for managing Laravel on Digital Ocean servers.
> More information: <https://github.com/thedevdojo/larasail>.

- Set up the server with Laravel dependencies using the default PHP version:

`larasail setup`

- Set up the server with Laravel dependencies using a specific PHP version:

`larasail setup {{php71}}`

- Add a new Laravel site:

`larasail host {{domain}} {{path/to/site_directory}}`

- Retrieve the Larasail user password:

`larasail pass`

- Retrieve the Larasail MySQL password:

`larasail mysqlpass`
"
yum,,,"# yum

> Package management utility for RHEL, Fedora, and CentOS (for older versions).

- Synchronize list of packages and versions available. This should be run first, before running subsequent yum commands:

`yum update`

- Install a new package:

`yum install {{package}}`

- Install a new package and assume yes to all questions (also works with update, great for automated updates):

`yum -y install {{package}}`

- Find the package that provides a particular command:

`yum provides {{command}}`

- Remove a package:

`yum remove {{package}}`

- Upgrade installed packages to newest available versions:

`yum upgrade`
"
tcpkill,,,"# tcpkill

> Kills specified in-progress TCP connections.

- Kill in-progress connections at a specified interface, host and port:

`tcpkill -i {{eth1}} host {{192.95.4.27}} and port {{2266}}`
"
jobs,,"
BUILTIN(1)		  BSD General Commands Manual		    BUILTIN(1)

NAME
     builtin, !, %, ., :, @, {, }, alias, alloc, bg, bind, bindkey, break,
     breaksw, builtins, case, cd, chdir, command, complete, continue, default,
     dirs, do, done, echo, echotc, elif, else, end, endif, endsw, esac, eval,
     exec, exit, export, false, fc, fg, filetest, fi, for, foreach, getopts,
     glob, goto, hash, hashstat, history, hup, if, jobid, jobs, kill, limit,
     local, log, login, logout, ls-F, nice, nohup, notify, onintr, popd,
     printenv, pushd, pwd, read, readonly, rehash, repeat, return, sched, set,
     setenv, settc, setty, setvar, shift, source, stop, suspend, switch,
     telltc, test, then, time, times, trap, true, type, ulimit, umask,
     unalias, uncomplete, unhash, unlimit, unset, unsetenv, until, wait,
     where, which, while -- shell built-in commands

SYNOPSIS
     builtin [-options] [args ...]

DESCRIPTION
     Shell builtin commands are commands that can be executed within the run-
     ning shell's process.  Note that, in the case of csh(1) builtin commands,
     the command is executed in a subshell if it occurs as any component of a
     pipeline except the last.

     If a command specified to the shell contains a slash ``/'', the shell
     will not execute a builtin command, even if the last component of the
     specified command matches the name of a builtin command.  Thus, while
     specifying ``echo'' causes a builtin command to be executed under shells
     that support the echo builtin command, specifying ``/bin/echo'' or
     ``./echo'' does not.

     While some builtin commands may exist in more than one shell, their oper-
     ation may be different under each shell which supports them.  Below is a
     table which lists shell builtin commands, the standard shells that sup-
     port them and whether they exist as standalone utilities.

     Only builtin commands for the csh(1) and sh(1) shells are listed here.
     Consult a shell's manual page for details on the operation of its builtin
     commands.	Beware that the sh(1) manual page, at least, calls some of
     these commands ``built-in commands'' and some of them ``reserved words''.
     Users of other shells may need to consult an info(1) page or other
     sources of documentation.

     Commands marked ``No**'' under External do exist externally, but are
     implemented as scripts using a builtin command of the same name.

	   Command	 External    csh(1)    sh(1)
	   !		 No	     No        Yes
	   %		 No	     Yes       No
	   .		 No	     No        Yes
	   :		 No	     Yes       Yes
	   @		 No	     Yes       Yes
	   {		 No	     No        Yes
	   }		 No	     No        Yes
	   alias	 No**	     Yes       Yes
	   alloc	 No	     Yes       No
	   bg		 No**	     Yes       Yes
	   bind 	 No	     No        Yes
	   bindkey	 No	     Yes       No
	   break	 No	     Yes       Yes
	   breaksw	 No	     Yes       No
	   builtin	 No	     No        Yes
	   builtins	 No	     Yes       No
	   case 	 No	     Yes       Yes
	   cd		 No**	     Yes       Yes
	   chdir	 No	     Yes       Yes
	   command	 No**	     No        Yes
	   complete	 No	     Yes       No
	   continue	 No	     Yes       Yes
	   default	 No	     Yes       No
	   dirs 	 No	     Yes       No
	   do		 No	     No        Yes
	   done 	 No	     No        Yes
	   echo 	 Yes	     Yes       Yes
	   echotc	 No	     Yes       No
	   elif 	 No	     No        Yes
	   else 	 No	     Yes       Yes
	   end		 No	     Yes       No
	   endif	 No	     Yes       No
	   endsw	 No	     Yes       No
	   esac 	 No	     No        Yes
	   eval 	 No	     Yes       Yes
	   exec 	 No	     Yes       Yes
	   exit 	 No	     Yes       Yes
	   export	 No	     No        Yes
	   false	 Yes	     No        Yes
	   fc		 No**	     No        Yes
	   fg		 No**	     Yes       Yes
	   filetest	 No	     Yes       No
	   fi		 No	     No        Yes
	   for		 No	     No        Yes
	   foreach	 No	     Yes       No
	   getopts	 No**	     No        Yes
	   glob 	 No	     Yes       No
	   goto 	 No	     Yes       No
	   hash 	 No	     No        Yes
	   hashstat	 No	     Yes       No
	   history	 No	     Yes       No
	   hup		 No	     Yes       No
	   if		 No	     Yes       Yes
	   jobid	 No	     No        Yes
	   jobs 	 No**	     Yes       Yes
	   kill 	 Yes	     Yes       No
	   limit	 No	     Yes       No
	   local	 No	     No        Yes
	   log		 No	     Yes       No
	   login	 Yes	     Yes       No
	   logout	 No	     Yes       No
	   ls-F 	 No	     Yes       No
	   nice 	 Yes	     Yes       No
	   nohup	 Yes	     Yes       No
	   notify	 No	     Yes       No
	   onintr	 No	     Yes       No
	   popd 	 No	     Yes       No
	   printenv	 Yes	     Yes       No
	   pushd	 No	     Yes       No
	   pwd		 Yes	     No        Yes
	   read 	 No**	     No        Yes
	   readonly	 No	     No        Yes
	   rehash	 No	     Yes       No
	   repeat	 No	     Yes       No
	   return	 No	     No        Yes
	   sched	 No	     Yes       No
	   set		 No	     Yes       Yes
	   setenv	 No	     Yes       No
	   settc	 No	     Yes       No
	   setty	 No	     Yes       No
	   setvar	 No	     No        Yes
	   shift	 No	     Yes       Yes
	   source	 No	     Yes       No
	   stop 	 No	     Yes       No
	   suspend	 No	     Yes       No
	   switch	 No	     Yes       No
	   telltc	 No	     Yes       No
	   test 	 Yes	     No        Yes
	   then 	 No	     No        Yes
	   time 	 Yes	     Yes       No
	   times	 No	     No        Yes
	   trap 	 No	     No        Yes
	   true 	 Yes	     No        Yes
	   type 	 No	     No        Yes
	   ulimit	 No	     No        Yes
	   umask	 No**	     Yes       Yes
	   unalias	 No**	     Yes       Yes
	   uncomplete	 No	     Yes       No
	   unhash	 No	     Yes       No
	   unlimit	 No	     Yes       No
	   unset	 No	     Yes       Yes
	   unsetenv	 No	     Yes       No
	   until	 No	     No        Yes
	   wait 	 No**	     Yes       Yes
	   where	 No	     Yes       No
	   which	 Yes	     Yes       No
	   while	 No	     Yes       Yes

SEE ALSO
     csh(1), echo(1), false(1), info(1), kill(1), login(1), nice(1), nohup(1),
     printenv(1), pwd(1), sh(1), test(1), time(1), true(1), which(1)

HISTORY
     The builtin manual page first appeared in FreeBSD 3.4.

AUTHORS
     This manual page was written by Sheldon Hearn <sheldonh@FreeBSD.org>.

BSD			       February 23, 2005			   BSD
","# jobs

> BASH builtin for viewing information about processes spawned by the current shell.

- View jobs spawned by the current shell:

`jobs`

- List jobs and their process ids:

`jobs -l`

- Display information about jobs with changed status:

`jobs -n`

- Display process id of process group leader:

`jobs -p`

- Display running processes:

`jobs -r`

- Display stopped processes:

`jobs -s`
"
mssh,,,"# mssh

> GTK+ based SSH client for interacting with multiple SSH servers at once.

- Open a new window and connect to multiple SSH servers:

`mssh {{user@host1}} {{user@host2}} {{...}}`

- Open a new window and connect to a group of servers predefined in `~/.mssh_clusters`:

`mssh --alias {{alias_name}}`
"
runsv,,,"# runsv

> Start and manage a runit service.

- Start a runit service as the current user:

`runsv {{path/to/service}}`

- Start a runit service as root:

`sudo runsv {{path/to/service}}`
"
popd,,"
BUILTIN(1)		  BSD General Commands Manual		    BUILTIN(1)

NAME
     builtin, !, %, ., :, @, {, }, alias, alloc, bg, bind, bindkey, break,
     breaksw, builtins, case, cd, chdir, command, complete, continue, default,
     dirs, do, done, echo, echotc, elif, else, end, endif, endsw, esac, eval,
     exec, exit, export, false, fc, fg, filetest, fi, for, foreach, getopts,
     glob, goto, hash, hashstat, history, hup, if, jobid, jobs, kill, limit,
     local, log, login, logout, ls-F, nice, nohup, notify, onintr, popd,
     printenv, pushd, pwd, read, readonly, rehash, repeat, return, sched, set,
     setenv, settc, setty, setvar, shift, source, stop, suspend, switch,
     telltc, test, then, time, times, trap, true, type, ulimit, umask,
     unalias, uncomplete, unhash, unlimit, unset, unsetenv, until, wait,
     where, which, while -- shell built-in commands

SYNOPSIS
     builtin [-options] [args ...]

DESCRIPTION
     Shell builtin commands are commands that can be executed within the run-
     ning shell's process.  Note that, in the case of csh(1) builtin commands,
     the command is executed in a subshell if it occurs as any component of a
     pipeline except the last.

     If a command specified to the shell contains a slash ``/'', the shell
     will not execute a builtin command, even if the last component of the
     specified command matches the name of a builtin command.  Thus, while
     specifying ``echo'' causes a builtin command to be executed under shells
     that support the echo builtin command, specifying ``/bin/echo'' or
     ``./echo'' does not.

     While some builtin commands may exist in more than one shell, their oper-
     ation may be different under each shell which supports them.  Below is a
     table which lists shell builtin commands, the standard shells that sup-
     port them and whether they exist as standalone utilities.

     Only builtin commands for the csh(1) and sh(1) shells are listed here.
     Consult a shell's manual page for details on the operation of its builtin
     commands.	Beware that the sh(1) manual page, at least, calls some of
     these commands ``built-in commands'' and some of them ``reserved words''.
     Users of other shells may need to consult an info(1) page or other
     sources of documentation.

     Commands marked ``No**'' under External do exist externally, but are
     implemented as scripts using a builtin command of the same name.

	   Command	 External    csh(1)    sh(1)
	   !		 No	     No        Yes
	   %		 No	     Yes       No
	   .		 No	     No        Yes
	   :		 No	     Yes       Yes
	   @		 No	     Yes       Yes
	   {		 No	     No        Yes
	   }		 No	     No        Yes
	   alias	 No**	     Yes       Yes
	   alloc	 No	     Yes       No
	   bg		 No**	     Yes       Yes
	   bind 	 No	     No        Yes
	   bindkey	 No	     Yes       No
	   break	 No	     Yes       Yes
	   breaksw	 No	     Yes       No
	   builtin	 No	     No        Yes
	   builtins	 No	     Yes       No
	   case 	 No	     Yes       Yes
	   cd		 No**	     Yes       Yes
	   chdir	 No	     Yes       Yes
	   command	 No**	     No        Yes
	   complete	 No	     Yes       No
	   continue	 No	     Yes       Yes
	   default	 No	     Yes       No
	   dirs 	 No	     Yes       No
	   do		 No	     No        Yes
	   done 	 No	     No        Yes
	   echo 	 Yes	     Yes       Yes
	   echotc	 No	     Yes       No
	   elif 	 No	     No        Yes
	   else 	 No	     Yes       Yes
	   end		 No	     Yes       No
	   endif	 No	     Yes       No
	   endsw	 No	     Yes       No
	   esac 	 No	     No        Yes
	   eval 	 No	     Yes       Yes
	   exec 	 No	     Yes       Yes
	   exit 	 No	     Yes       Yes
	   export	 No	     No        Yes
	   false	 Yes	     No        Yes
	   fc		 No**	     No        Yes
	   fg		 No**	     Yes       Yes
	   filetest	 No	     Yes       No
	   fi		 No	     No        Yes
	   for		 No	     No        Yes
	   foreach	 No	     Yes       No
	   getopts	 No**	     No        Yes
	   glob 	 No	     Yes       No
	   goto 	 No	     Yes       No
	   hash 	 No	     No        Yes
	   hashstat	 No	     Yes       No
	   history	 No	     Yes       No
	   hup		 No	     Yes       No
	   if		 No	     Yes       Yes
	   jobid	 No	     No        Yes
	   jobs 	 No**	     Yes       Yes
	   kill 	 Yes	     Yes       No
	   limit	 No	     Yes       No
	   local	 No	     No        Yes
	   log		 No	     Yes       No
	   login	 Yes	     Yes       No
	   logout	 No	     Yes       No
	   ls-F 	 No	     Yes       No
	   nice 	 Yes	     Yes       No
	   nohup	 Yes	     Yes       No
	   notify	 No	     Yes       No
	   onintr	 No	     Yes       No
	   popd 	 No	     Yes       No
	   printenv	 Yes	     Yes       No
	   pushd	 No	     Yes       No
	   pwd		 Yes	     No        Yes
	   read 	 No**	     No        Yes
	   readonly	 No	     No        Yes
	   rehash	 No	     Yes       No
	   repeat	 No	     Yes       No
	   return	 No	     No        Yes
	   sched	 No	     Yes       No
	   set		 No	     Yes       Yes
	   setenv	 No	     Yes       No
	   settc	 No	     Yes       No
	   setty	 No	     Yes       No
	   setvar	 No	     No        Yes
	   shift	 No	     Yes       Yes
	   source	 No	     Yes       No
	   stop 	 No	     Yes       No
	   suspend	 No	     Yes       No
	   switch	 No	     Yes       No
	   telltc	 No	     Yes       No
	   test 	 Yes	     No        Yes
	   then 	 No	     No        Yes
	   time 	 Yes	     Yes       No
	   times	 No	     No        Yes
	   trap 	 No	     No        Yes
	   true 	 Yes	     No        Yes
	   type 	 No	     No        Yes
	   ulimit	 No	     No        Yes
	   umask	 No**	     Yes       Yes
	   unalias	 No**	     Yes       Yes
	   uncomplete	 No	     Yes       No
	   unhash	 No	     Yes       No
	   unlimit	 No	     Yes       No
	   unset	 No	     Yes       Yes
	   unsetenv	 No	     Yes       No
	   until	 No	     No        Yes
	   wait 	 No**	     Yes       Yes
	   where	 No	     Yes       No
	   which	 Yes	     Yes       No
	   while	 No	     Yes       Yes

SEE ALSO
     csh(1), echo(1), false(1), info(1), kill(1), login(1), nice(1), nohup(1),
     printenv(1), pwd(1), sh(1), test(1), time(1), true(1), which(1)

HISTORY
     The builtin manual page first appeared in FreeBSD 3.4.

AUTHORS
     This manual page was written by Sheldon Hearn <sheldonh@FreeBSD.org>.

BSD			       February 23, 2005			   BSD
","# popd

> Remove a directory placed on the directory stack by the `pushd` command.

- Remove the top directory from the stack and cd to it:

`popd`

- Remove the Nth directory (starting from zero to the left from the list printed with `dirs`):

`popd +N`

- Remove the Nth directory (starting from zero to the right from the list printed with `dirs`):

`popd -N`
"
ipcmk,,,"# ipcmk

> Create IPC (Inter-process Communication) resources.

- Create a shared memory segment:

`ipcmk --shmem {{segment_size_in_bytes}}`

- Create a semaphore:

`ipcmk --semaphore {{element_size}}`

- Create a message queue:

`ipcmk --queue`

- Create a shared memory segment with specific permissions (default is 0644):

`ipcmk --shmem {{segment_size_in_bytes}} {{octal_permissons}}`
"
pushd,,"
BUILTIN(1)		  BSD General Commands Manual		    BUILTIN(1)

NAME
     builtin, !, %, ., :, @, {, }, alias, alloc, bg, bind, bindkey, break,
     breaksw, builtins, case, cd, chdir, command, complete, continue, default,
     dirs, do, done, echo, echotc, elif, else, end, endif, endsw, esac, eval,
     exec, exit, export, false, fc, fg, filetest, fi, for, foreach, getopts,
     glob, goto, hash, hashstat, history, hup, if, jobid, jobs, kill, limit,
     local, log, login, logout, ls-F, nice, nohup, notify, onintr, popd,
     printenv, pushd, pwd, read, readonly, rehash, repeat, return, sched, set,
     setenv, settc, setty, setvar, shift, source, stop, suspend, switch,
     telltc, test, then, time, times, trap, true, type, ulimit, umask,
     unalias, uncomplete, unhash, unlimit, unset, unsetenv, until, wait,
     where, which, while -- shell built-in commands

SYNOPSIS
     builtin [-options] [args ...]

DESCRIPTION
     Shell builtin commands are commands that can be executed within the run-
     ning shell's process.  Note that, in the case of csh(1) builtin commands,
     the command is executed in a subshell if it occurs as any component of a
     pipeline except the last.

     If a command specified to the shell contains a slash ``/'', the shell
     will not execute a builtin command, even if the last component of the
     specified command matches the name of a builtin command.  Thus, while
     specifying ``echo'' causes a builtin command to be executed under shells
     that support the echo builtin command, specifying ``/bin/echo'' or
     ``./echo'' does not.

     While some builtin commands may exist in more than one shell, their oper-
     ation may be different under each shell which supports them.  Below is a
     table which lists shell builtin commands, the standard shells that sup-
     port them and whether they exist as standalone utilities.

     Only builtin commands for the csh(1) and sh(1) shells are listed here.
     Consult a shell's manual page for details on the operation of its builtin
     commands.	Beware that the sh(1) manual page, at least, calls some of
     these commands ``built-in commands'' and some of them ``reserved words''.
     Users of other shells may need to consult an info(1) page or other
     sources of documentation.

     Commands marked ``No**'' under External do exist externally, but are
     implemented as scripts using a builtin command of the same name.

	   Command	 External    csh(1)    sh(1)
	   !		 No	     No        Yes
	   %		 No	     Yes       No
	   .		 No	     No        Yes
	   :		 No	     Yes       Yes
	   @		 No	     Yes       Yes
	   {		 No	     No        Yes
	   }		 No	     No        Yes
	   alias	 No**	     Yes       Yes
	   alloc	 No	     Yes       No
	   bg		 No**	     Yes       Yes
	   bind 	 No	     No        Yes
	   bindkey	 No	     Yes       No
	   break	 No	     Yes       Yes
	   breaksw	 No	     Yes       No
	   builtin	 No	     No        Yes
	   builtins	 No	     Yes       No
	   case 	 No	     Yes       Yes
	   cd		 No**	     Yes       Yes
	   chdir	 No	     Yes       Yes
	   command	 No**	     No        Yes
	   complete	 No	     Yes       No
	   continue	 No	     Yes       Yes
	   default	 No	     Yes       No
	   dirs 	 No	     Yes       No
	   do		 No	     No        Yes
	   done 	 No	     No        Yes
	   echo 	 Yes	     Yes       Yes
	   echotc	 No	     Yes       No
	   elif 	 No	     No        Yes
	   else 	 No	     Yes       Yes
	   end		 No	     Yes       No
	   endif	 No	     Yes       No
	   endsw	 No	     Yes       No
	   esac 	 No	     No        Yes
	   eval 	 No	     Yes       Yes
	   exec 	 No	     Yes       Yes
	   exit 	 No	     Yes       Yes
	   export	 No	     No        Yes
	   false	 Yes	     No        Yes
	   fc		 No**	     No        Yes
	   fg		 No**	     Yes       Yes
	   filetest	 No	     Yes       No
	   fi		 No	     No        Yes
	   for		 No	     No        Yes
	   foreach	 No	     Yes       No
	   getopts	 No**	     No        Yes
	   glob 	 No	     Yes       No
	   goto 	 No	     Yes       No
	   hash 	 No	     No        Yes
	   hashstat	 No	     Yes       No
	   history	 No	     Yes       No
	   hup		 No	     Yes       No
	   if		 No	     Yes       Yes
	   jobid	 No	     No        Yes
	   jobs 	 No**	     Yes       Yes
	   kill 	 Yes	     Yes       No
	   limit	 No	     Yes       No
	   local	 No	     No        Yes
	   log		 No	     Yes       No
	   login	 Yes	     Yes       No
	   logout	 No	     Yes       No
	   ls-F 	 No	     Yes       No
	   nice 	 Yes	     Yes       No
	   nohup	 Yes	     Yes       No
	   notify	 No	     Yes       No
	   onintr	 No	     Yes       No
	   popd 	 No	     Yes       No
	   printenv	 Yes	     Yes       No
	   pushd	 No	     Yes       No
	   pwd		 Yes	     No        Yes
	   read 	 No**	     No        Yes
	   readonly	 No	     No        Yes
	   rehash	 No	     Yes       No
	   repeat	 No	     Yes       No
	   return	 No	     No        Yes
	   sched	 No	     Yes       No
	   set		 No	     Yes       Yes
	   setenv	 No	     Yes       No
	   settc	 No	     Yes       No
	   setty	 No	     Yes       No
	   setvar	 No	     No        Yes
	   shift	 No	     Yes       Yes
	   source	 No	     Yes       No
	   stop 	 No	     Yes       No
	   suspend	 No	     Yes       No
	   switch	 No	     Yes       No
	   telltc	 No	     Yes       No
	   test 	 Yes	     No        Yes
	   then 	 No	     No        Yes
	   time 	 Yes	     Yes       No
	   times	 No	     No        Yes
	   trap 	 No	     No        Yes
	   true 	 Yes	     No        Yes
	   type 	 No	     No        Yes
	   ulimit	 No	     No        Yes
	   umask	 No**	     Yes       Yes
	   unalias	 No**	     Yes       Yes
	   uncomplete	 No	     Yes       No
	   unhash	 No	     Yes       No
	   unlimit	 No	     Yes       No
	   unset	 No	     Yes       Yes
	   unsetenv	 No	     Yes       No
	   until	 No	     No        Yes
	   wait 	 No**	     Yes       Yes
	   where	 No	     Yes       No
	   which	 Yes	     Yes       No
	   while	 No	     Yes       Yes

SEE ALSO
     csh(1), echo(1), false(1), info(1), kill(1), login(1), nice(1), nohup(1),
     printenv(1), pwd(1), sh(1), test(1), time(1), true(1), which(1)

HISTORY
     The builtin manual page first appeared in FreeBSD 3.4.

AUTHORS
     This manual page was written by Sheldon Hearn <sheldonh@FreeBSD.org>.

BSD			       February 23, 2005			   BSD
","# pushd

> Place a directory on a stack so it can be accessed later.
> See also `popd` to switch back to original directory.

- Switch to directory and push it on the stack:

`pushd < {{directory}}`

- Switch first and second directories on the stack:

`pushd`

- Rotate stack by making the 5th element the top of the stack:

`pushd +4`
"
ceph,https://ceph.io,,"# ceph

> A unified storage system.
> More information: <https://ceph.io>.

- Check cluster health status:

`ceph status`

- Check cluster usage stats:

`ceph df`

- Get the statistics for the placement groups in a cluster:

`ceph pg dump --format {{plain}}`

- Create a storage pool:

`ceph osd pool create {{pool_name}} {{page_number}}`

- Delete a storage pool:

`ceph osd pool delete {{pool_name}}`

- Rename a storage pool:

`ceph osd pool rename {{current_name}} {{new_name}}`

- Self-repair pool storage:

`ceph pg repair {{pool_name}}`
"
pkgrm,,,"# pkgrm

> Remove a package from a CRUX system.

- Remove an installed package:

`pkgrm {{package_name}}`
"
stress,,,"# stress

> A tool to stress test CPU, memory, and IO on a Linux system.

- Spawn 4 workers to stress test CPU:

`stress -c {{4}}`

- Spawn 2 workers to stress test IO and timeout after 5 seconds:

`stress -i {{2}} -t {{5}}`

- Spawn 2 workers to stress test memory (each worker allocates 256M bytes):

`stress -m {{2}} --vm-bytes {{256M}}`

- Spawn 2 workers spinning on write()/unlink() (each worker writes 1G bytes):

`stress -d {{2}} --hdd-bytes {{1GB}}`
"
mkfs.ext4,,,"# mkfs.ext4

> Creates an ext4 filesystem inside a partition.

- Create an ext4 filesystem inside partition 1 on device b (`sdb1`):

`sudo mkfs.ext4 {{/dev/sdb1}}`

- Create an ext4 filesystem with a volume-label:

`sudo mkfs.ext4 -L {{volume_label}} {{/dev/sdb1}}`
"
free,,"
MALLOC(3)		 BSD Library Functions Manual		     MALLOC(3)

NAME
     calloc, free, malloc, realloc, reallocf, valloc -- memory allocation

SYNOPSIS
     #include <stdlib.h>

     void *
     calloc(size_t count, size_t size);

     void
     free(void *ptr);

     void *
     malloc(size_t size);

     void *
     realloc(void *ptr, size_t size);

     void *
     reallocf(void *ptr, size_t size);

     void *
     valloc(size_t size);

DESCRIPTION
     The malloc(), calloc(), valloc(), realloc(), and reallocf() functions
     allocate memory.  The allocated memory is aligned such that it can be
     used for any data type, including AltiVec- and SSE-related types.	The
     free() function frees allocations that were created via the preceding
     allocation functions.

     The malloc() function allocates size bytes of memory and returns a
     pointer to the allocated memory.

     The calloc() function contiguously allocates enough space for count
     objects that are size bytes of memory each and returns a pointer to the
     allocated memory.	The allocated memory is filled with bytes of value
     zero.

     The valloc() function allocates size bytes of memory and returns a
     pointer to the allocated memory.  The allocated memory is aligned on a
     page boundary.

     The realloc() function tries to change the size of the allocation pointed
     to by ptr to size, and returns ptr.  If there is not enough room to
     enlarge the memory allocation pointed to by ptr, realloc() creates a new
     allocation, copies as much of the old data pointed to by ptr as will fit
     to the new allocation, frees the old allocation, and returns a pointer to
     the allocated memory.  If ptr is NULL, realloc() is identical to a call
     to malloc() for size bytes.  If size is zero and ptr is not NULL, a new,
     minimum sized object is allocated and the original object is freed.  When
     extending a region allocated with calloc(3), realloc(3) does not guaran-
     tee that the additional memory is also zero-filled.

     The reallocf() function is identical to the realloc() function, except
     that it will free the passed pointer when the requested memory cannot be
     allocated.  This is a FreeBSD specific API designed to ease the problems
     with traditional coding styles for realloc causing memory leaks in
     libraries.

     The free() function deallocates the memory allocation pointed to by ptr.
     If ptr is a NULL pointer, no operation is performed.

RETURN VALUES
     If successful, calloc(), malloc(), realloc(), reallocf(), and valloc()
     functions return a pointer to allocated memory.  If there is an error,
     they return a NULL pointer and set errno to ENOMEM.

     For realloc(), the input pointer is still valid if reallocation failed.
     For reallocf(), the input pointer will have been freed if reallocation
     failed.

     The free() function does not return a value.

DEBUGGING ALLOCATION ERRORS
     A number of facilities are provided to aid in debugging allocation errors
     in applications.  These facilities are primarily controlled via environ-
     ment variables.  The recognized environment variables and their meanings
     are documented below.

ENVIRONMENT
     The following environment variables change the behavior of the alloca-
     tion-related functions.

     MallocDebugReport		  If set, specifies where messages are writ-
				  ten. Set to ""stderr"" to write messages to
				  the standard error stream, ""none"" to discard
				  all messages and ""crash"" to write messages
				  to standard error only for a condition that
				  is about to cause a crash. When not set,
				  message are written to the standard error
				  stream if it appears to be a terminal (that
				  is, if isatty(STDERR_FILENO) returns a non-
				  zero value) and are otherwise discarded.

     MallocGuardEdges		  If set, add a guard page before and after
				  each large block.

     MallocDoNotProtectPrelude	  If set, do not add a guard page before large
				  blocks, even if the MallocGuardEdges envi-
				  ronment variable is set.

     MallocDoNotProtectPostlude   If set, do not add a guard page after large
				  blocks, even if the MallocGuardEdges envi-
				  ronment variable is set.

     MallocStackLogging 	  The default behavior if this is set is to
				  record all allocation and deallocation
				  events to an on-disk log, along with stacks,
				  so that tools like leaks(1) and
				  malloc_history(1) can be used.

				  Set to ""vm"" to record only allocation of
				  virtual memory regions allocated by system
				  calls and mach traps, such as by mmap(1)

				  Set to ""malloc"" to record only allocations
				  via malloc(3) and related interfaces, not
				  virtual memory regions.

				  Set to ""lite"" to record current allocations
				  only, not history.   These are recorded by
				  in-memory data structures, instead of an on-
				  disk log.

     MallocStackLoggingNoCompact  If set, record all stacks in a manner that
				  is compatible with the malloc_history pro-
				  gram.

     MallocStackLoggingDirectory  If set, records stack logs to the directory
				  specified instead of saving them to the
				  default location (/tmp).

     MallocScribble		  If set, fill memory that has been allocated
				  with 0xaa bytes.  This increases the likeli-
				  hood that a program making assumptions about
				  the contents of freshly allocated memory
				  will fail.  Also if set, fill memory that
				  has been deallocated with 0x55 bytes.  This
				  increases the likelihood that a program will
				  fail due to accessing memory that is no
				  longer allocated. Note that due to the way
				  in which freed memory is managed internally,
				  the 0x55 pattern may not appear in some
				  parts of a deallocated memory block.

     MallocCheckHeapStart <s>	  If set, specifies the number of allocations
				  <s> to wait before begining periodic heap
				  checks every <n> as specified by
				  MallocCheckHeapEach.	If
				  MallocCheckHeapStart is set but
				  MallocCheckHeapEach is not specified, the
				  default check repetition is 1000.

     MallocCheckHeapEach <n>	  If set, run a consistency check on the heap
				  every <n> operations.  MallocCheckHeapEach
				  is only meaningful if MallocCheckHeapStart
				  is also set.

     MallocCheckHeapSleep <t>	  Sets the number of seconds to sleep (waiting
				  for a debugger to attach) when
				  MallocCheckHeapStart is set and a heap cor-
				  ruption is detected.	The default is 100
				  seconds.  Setting this to zero means not to
				  sleep at all.  Setting this to a negative
				  number means to sleep (for the positive num-
				  ber of seconds) only the very first time a
				  heap corruption is detected.

     MallocCheckHeapAbort <b>	  When MallocCheckHeapStart is set and this is
				  set to a non-zero value, causes abort(3) to
				  be called if a heap corruption is detected,
				  instead of any sleeping.

     MallocErrorAbort		  If set, causes abort(3) to be called if an
				  error was encountered in malloc(3) or
				  free(3) , such as a calling free(3) on a
				  pointer previously freed.

     MallocCorruptionAbort	  Similar to MallocErrorAbort but will not
				  abort in out of memory conditions, making it
				  more useful to catch only those errors which
				  will cause memory corruption.  MallocCorrup-
				  tionAbort is always set on 64-bit processes.

     MallocHelp 		  If set, print a list of environment vari-
				  ables that are paid heed to by the alloca-
				  tion-related functions, along with short
				  descriptions.  The list should correspond to
				  this documentation.

DIAGNOSTIC MESSAGES
SEE ALSO
     leaks(1), malloc_history(1), abort(3), malloc_size(3),
     malloc_zone_malloc(3), posix_memalign(3), libgmalloc(3)

BSD				 Aug 13, 2008				   BSD
","# free

> Display amount of free and used memory in the system.

- Display system memory:

`free`

- Display memory in Bytes/KB/MB/GB:

`free -{{b|k|m|g}}`

- Display memory in human readable units:

`free -h`

- Refresh the output every 2 seconds:

`free -s {{2}}`
"
httpie,https://example.com,,"# httpie

> A user friendly command line HTTP tool.

- Send a GET request (default method with no request data):

`http {{https://example.com}}`

- Send a POST request (default method with request data):

`http {{https://example.com}} {{hello=World}}`

- Send a POST request with redirected input:

`http {{https://example.com}} < {{file.json}}`

- Send a PUT request with a given json body:

`http PUT {{https://example.com/todos/7}} {{hello=world}}`

- Send a DELETE request with a given request header:

`http DELETE {{https://example.com/todos/7}} {{API-Key:foo}}`

- Show the whole HTTP exchange (both request and response):

`http -v {{https://example.com}}`

- Download a file:

`http --download {{https://example.com}}`
"
whatis,,"whatis(1)							     whatis(1)



NAME
       whatis - search the whatis database for complete words.

SYNOPSIS
       whatis keyword ...

DESCRIPTION
       whatis  searches  a set of database files containing short descriptions
       of system commands for keywords and displays the result on the standard
       output.	Only complete word matches are displayed.

       The  whatis  database  is  created using the command /usr/libexec/make-
       whatis.

AUTHOR
       John W. Eaton was the  original	author	of  man.   Zeyd  M.  Ben-Halim
       released  man  1.2,  and  Andries Brouwer followed up with versions 1.3
       thru 1.5p.  Federico  Lucifredi	<flucifredi@acm.org>  is  the  current
       maintainer.

SEE ALSO
       apropos(1), man(1).



			      September 19, 2005		     whatis(1)
","# whatis

> Display one-line descriptions from manual pages.

- Display a description from a man page:

`whatis {{command}}`

- Don't cut the description off at the end of the line:

`whatis --long {{command}}`

- Display descriptions for all commands matching a glob:

`whatis --wildcard {{net*}}`

- Search man page descriptions with a regular expression:

`whatis --regex '{{wish[0-9]\.[0-9]}}'`
"
dstat,http://dag.wieers.com/home-made/dstat,,"# dstat

> Versatile tool for generating system resource statistics.
> More information: <http://dag.wieers.com/home-made/dstat>.

- Display CPU, disk, net, paging and system statistics:

`dstat`

- Display statistics every 5 seconds and 4 updates only:

`dstat {{5}} {{4}}`

- Display CPU and memory statistics only:

`dstat --cpu --mem`

- List all available dstat plugins:

`dstat --list`

- Display the process using the most memory and most CPU:

`dstat --top-mem --top-cpu`

- Display battery percentage and remaining battery time:

`dstat --battery --battery-remain`
"
manpath,,"man(1)									man(1)



NAME
       man - format and display the on-line manual pages

SYNOPSIS
       man  [-acdfFhkKtwW]  [--path]  [-m system] [-p string] [-C config_file]
       [-M pathlist] [-P pager] [-B browser] [-H htmlpager] [-S  section_list]
       [section] name ...


DESCRIPTION
       man formats and displays the on-line manual pages.  If you specify sec-
       tion, man only looks in that section of the manual.  name  is  normally
       the  name of the manual page, which is typically the name of a command,
       function, or file.  However, if name contains  a  slash	(/)  then  man
       interprets  it  as a file specification, so that you can do man ./foo.5
       or even man /cd/foo/bar.1.gz.

       See below for a description of where man  looks	for  the  manual  page
       files.


OPTIONS
       -C  config_file
	      Specify  the  configuration  file  to  use; the default is /pri-
	      vate/etc/man.conf.  (See man.conf(5).)

       -M  path
	      Specify the list of directories to search for man pages.	 Sepa-
	      rate  the directories with colons.  An empty list is the same as
	      not specifying -M at all.  See SEARCH PATH FOR MANUAL PAGES.

       -P  pager
	      Specify which pager to use.  This option overrides the  MANPAGER
	      environment  variable,  which  in turn overrides the PAGER vari-
	      able.  By default, man uses /usr/bin/less -is.

       -B     Specify which browser to use on HTML files.  This  option  over-
	      rides  the  BROWSER  environment	variable. By default, man uses
	      /usr/bin/less-is,

       -H     Specify a command that renders HTML files as text.  This	option
	      overrides  the  HTMLPAGER  environment variable. By default, man
	      uses /bin/cat,

       -S  section_list
	      List is a colon separated list of  manual  sections  to  search.
	      This option overrides the MANSECT environment variable.

       -a     By default, man will exit after displaying the first manual page
	      it finds.  Using this option forces man to display all the  man-
	      ual pages that match name, not just the first.

       -c     Reformat	the  source man page, even when an up-to-date cat page
	      exists.  This can be meaningful if the cat  page	was  formatted
	      for  a screen with a different number of columns, or if the pre-
	      formatted page is corrupted.

       -d     Don't actually display the man  pages,  but  do  print  gobs  of
	      debugging information.

       -D     Both display and print debugging info.

       -f     Equivalent to whatis.

       -F or --preformat
	      Format only - do not display.

       -h     Print a help message and exit.

       -k     Equivalent to apropos.

       -K     Search  for  the	specified  string in *all* man pages. Warning:
	      this is probably very slow!  It  helps  to  specify  a  section.
	      (Just  to  give  a  rough idea, on my machine this takes about a
	      minute per 500 man pages.)

       -m  system
	      Specify an alternate set of man pages to	search	based  on  the
	      system name given.

       -p  string
	      Specify  the  sequence  of  preprocessors to run before nroff or
	      troff.  Not all installations will have a full set of preproces-
	      sors.   Some of the preprocessors and the letters used to desig-
	      nate them are: eqn (e), grap (g), pic (p), tbl (t), vgrind  (v),
	      refer  (r).   This  option  overrides the MANROFFSEQ environment
	      variable.

       -t     Use /usr/bin/groff -Tps -mandoc -c to format  the  manual  page,
	      passing  the  output  to	stdout.   The default output format of
	      /usr/bin/groff -Tps -mandoc -c is Postscript, refer to the  man-
	      ual  page  of /usr/bin/groff -Tps -mandoc -c for ways to pick an
	      alternate format.

       Depending on the selected  format  and  the  availability  of  printing
       devices,  the  output  may  need  to  be  passed through some filter or
       another before being printed.

       -w or --path
	      Don't actually display the man pages, but  do  print  the  loca-
	      tion(s) of the files that would be formatted or displayed. If no
	      argument is given: display (on stdout) the list  of  directories
	      that  is	searched by man for man pages. If manpath is a link to
	      man, then ""manpath"" is equivalent to ""man --path"".

       -W     Like -w, but print file names one per line,  without  additional
	      information.   This is useful in shell commands like man -aW man
	      | xargs ls -l


CAT PAGES
       Man will try to save the formatted man pages, in order to save  format-
       ting time the next time these pages are needed.	Traditionally, format-
       ted versions of pages in DIR/manX are saved in DIR/catX, but other map-
       pings   from   man   dir   to   cat  dir  can  be  specified  in  /pri-
       vate/etc/man.conf.  No cat pages are saved when the required cat direc-
       tory  does  not	exist.	No cat pages are saved when they are formatted
       for a line length different from 80.   No  cat  pages  are  saved  when
       man.conf contains the line NOCACHE.

       It is possible to make man suid to a user man. Then, if a cat directory
       has owner man and mode 0755 (only writable by man), and the  cat  files
       have  owner  man  and  mode  0644 or 0444 (only writable by man, or not
       writable at all), no ordinary user can change  the  cat	pages  or  put
       other  files  in the cat directory. If man is not made suid, then a cat
       directory should have mode 0777 if all users should be  able  to  leave
       cat pages there.

       The  option  -c	forces	reformatting a page, even if a recent cat page
       exists.


HTML PAGES
       Man will find HTML pages if they live in directories named as  expected
       to  be  "".html"", thus a valid name for an HTML version of the ls(1) man
       page would be /usr/share/man/htmlman1/ls.1.html.


SEARCH PATH FOR MANUAL PAGES
       man uses a sophisticated method of finding manual page files, based  on
       the   invocation   options   and   environment	variables,  the  /pri-
       vate/etc/man.conf configuration file, and some built in conventions and
       heuristics.

       First  of  all, when the name argument to man contains a slash (/), man
       assumes it is a file specification itself, and there  is  no  searching
       involved.

       But in the normal case where name doesn't contain a slash, man searches
       a variety of directories for a file that could be a manual page for the
       topic named.

       If  you	specify  the -M pathlist option, pathlist is a colon-separated
       list of the directories that man searches.

       If you don't specify -M but set the MANPATH environment	variable,  the
       value  of  that	variable  is  the  list  of  the  directories that man
       searches.

       If you don't specify an explicit path list  with  -M  or  MANPATH,  man
       develops  its  own path list based on the contents of the configuration
       file /private/etc/man.conf.  The MANPATH statements in  the  configura-
       tion  file  identify  particular  directories  to include in the search
       path.

       Furthermore, the MANPATH_MAP statements add to the search path  depend-
       ing  on your command search path (i.e. your PATH environment variable).
       For each directory that may be in  the  command	search	path,  a  MAN-
       PATH_MAP  statement  specifies  a directory that should be added to the
       search path for manual page files.  man looks at the PATH variable  and
       adds the corresponding directories to the manual page file search path.
       Thus, with the proper use of MANPATH_MAP, when you  issue  the  command
       man  xyz,  you  get a manual page for the program that would run if you
       issued the command xyz.

       In addition, for each directory in the command search path (we'll  call
       it  a  ""command	directory"")  for  which  you do not have a MANPATH_MAP
       statement, man automatically looks for a manual page directory ""nearby""
       namely as a subdirectory in the command directory itself or in the par-
       ent directory of the command directory.

       You can disable the automatic ""nearby"" searches by  including  a  NOAU-
       TOPATH statement in /private/etc/man.conf.

       In  each  directory in the search path as described above, man searches
       for a file named topic.section, with an optional suffix on the  section
       number  and  possibly  a compression suffix.  If it doesn't find such a
       file, it then looks in any subdirectories named manN or catN where N is
       the  manual section number.  If the file is in a catN subdirectory, man
       assumes it is a formatted manual page file (cat page).  Otherwise,  man
       assumes it is unformatted.  In either case, if the filename has a known
       compression suffix (like .gz), man assumes it is gzipped.

       If you want to see where (or if) man would find the manual page	for  a
       particular topic, use the --path (-w) option.


ENVIRONMENT
       MANPATH
	      If  MANPATH is set, man uses it as the path to search for manual
	      page files.  It overrides the configuration file and  the  auto-
	      matic  search  path,  but  is  overridden  by  the -M invocation
	      option.  See SEARCH PATH FOR MANUAL PAGES.

       MANPL  If MANPL is set, its value is used as the display  page  length.
	      Otherwise, the entire man page will occupy one (long) page.

       MANROFFSEQ
	      If  MANROFFSEQ is set, its value is used to determine the set of
	      preprocessors run before running nroff or  troff.   By  default,
	      pages are passed through the tbl preprocessor before nroff.

       MANSECT
	      If  MANSECT  is set, its value is used to determine which manual
	      sections to search.

       MANWIDTH
	      If MANWIDTH is set, its value is	used  as  the  width  manpages
	      should  be displayed.  Otherwise the pages may be displayed over
	      the whole width of your screen.

       MANPAGER
	      If MANPAGER is set, its value is used as the name of the program
	      to  use to display the man page.	If not, then PAGER is used. If
	      that has no value either, /usr/bin/less -is is used.

       BROWSER
	      The name of a browser to use for displaying HTML	manual	pages.
	      If it is not set, /usr/bin/less -is is used.

       HTMLPAGER
	      The  command to use for rendering HTML manual pages as text.  If
	      it is not set, /bin/cat is used.

       LANG   If LANG is set, its value defines the name of  the  subdirectory
	      where  man first looks for man pages. Thus, the command `LANG=dk
	      man 1 foo' will cause man to  look  for  the  foo  man  page  in
	      .../dk/man1/foo.1,  and  if  it cannot find such a file, then in
	      .../man1/foo.1, where ... is a directory on the search path.

       NLSPATH, LC_MESSAGES, LANG
	      The environment variables NLSPATH and LC_MESSAGES (or LANG  when
	      the  latter  does not exist) play a role in locating the message
	      catalog.	(But the English messages are  compiled  in,  and  for
	      English no catalog is required.)	Note that programs like col(1)
	      called by man also use e.g. LC_CTYPE.

       PATH   PATH helps determine the search path for manual page files.  See
	      SEARCH PATH FOR MANUAL PAGES.

       SYSTEM SYSTEM is used to get the default alternate system name (for use
	      with the -m option).

BUGS
       The -t option only works if a troff-like program is installed.
       If you see blinking  \255  or  <AD>  instead  of  hyphens,  put	`LESS-
       CHARSET=latin1' in your environment.

TIPS
       If you add the line

	 (global-set-key  [(f1)]  (lambda () (interactive) (manual-entry (cur-
       rent-word))))

       to your .emacs file, then hitting F1 will give you the man page for the
       library call at the current cursor position.

       To  get	a  plain  text	version  of a man page, without backspaces and
       underscores, try

	 # man foo | col -b > foo.mantxt

AUTHOR
       John W. Eaton was the  original	author	of  man.   Zeyd  M.  Ben-Halim
       released  man  1.2,  and  Andries Brouwer followed up with versions 1.3
       thru 1.5p.  Federico  Lucifredi	<flucifredi@acm.org>  is  the  current
       maintainer.

SEE ALSO
       apropos(1), whatis(1), less(1), groff(1), man.conf(5).



			      September 19, 2005			man(1)
","# manpath

> Determine the search path for manual pages.

- Display the search path used to find man pages:

`manpath`

- Show the entire global manpath:

`manpath --global`
"
qsub,,,"# qsub

> Submits a script to the queue management system TORQUE.

- Submit a script with default settings (depends on TORQUE settings):

`qsub {{script.sh}}`

- Submit a script with a specified wallclock runtime limit of 1 hour, 2 minutes and 3 seconds:

`qsub -l walltime={{1}}:{{2}}:{{3}} {{script.sh}}`

- Submit a script that is executed on 2 nodes using 4 cores per node:

`qsub -l nodes={{2}}:ppn={{4}} {{script.sh}}`

- Submit a script to a specific queue. Note that different queues can have different maximum and minimum runtime limits:

`qsub -q {{queue_name}} {{script.sh}}`
"
lsmod,,,"# lsmod

> Shows the status of linux kernel modules.
> See also `modprobe`, which loads kernel modules.

- List all currently loaded kernel modules:

`lsmod`
"
vncviewer,,,"# vncviewer

> Launches a VNC (Virtual Network Computing) client.

- Launch a VNC client which connects to a host on a given display:

`vncviewer {{host}}:{{display_number}}`

- Launch in full-screen mode:

`vncviewer -FullScreen {{host}}:{{display_number}}`

- Launch a VNC client with a specific screen geometry:

`vncviewer --geometry {{width}}x{{height}} {{host}}:{{display_number}}`

- Launch a VNC client which connects to a host on a given port:

`vncviewer {{host}}::{{port}}`
"
photorec,https://www.cgsecurity.org/wiki/PhotoRec,,"# photorec

> Deleted file recovery tool.
> It is recommended to write recovered files to a disk separate to the one being recovered from.
> More information: <https://www.cgsecurity.org/wiki/PhotoRec>.

- Run PhotoRec on a specific device:

`sudo photorec {{/dev/sdb}}`

- Run PhotoRec on a disk image (image.dd):

`sudo photorec {{path/to/image.dd}}`
"
scanimage,http://sane-project.org/man/scanimage.1.html,,"# scanimage

> Scan images with the Scanner Access Now Easy API.
> More information: <http://sane-project.org/man/scanimage.1.html>.

- List available scanners to ensure the target device is connected and recognized:

`scanimage -L`

- Scan an image and save it to a file:

`scanimage --format={{pnm|tiff|png|jpeg}} > {{path/to/new_image}}`
"
mpstat,,,"# mpstat

> Report CPU statistics.

- Display CPU statistics every 2 seconds:

`mpstat {{2}}`

- Display 5 reports, one by one, at 2 second intervals:

`mpstat {{2}} {{5}}`

- Display 5 reports, one by one, from a given processor, at 2 second intervals:

`mpstat -P {{0}} {{2}} {{5}}`
"
dbus-daemon,,,"# dbus-daemon

> The D-Bus message daemon, allowing multiple programs to exchange messages.

- Run the daemon with a configuration file:

`dbus-daemon --config-file {{path/to/file}}`

- Run the daemon with the standard per-login-session message bus configuration:

`dbus-daemon --session`

- Run the daemon with the standard systemwide message bus configuration:

`dbus-daemon --system`

- Set the address to listen on and override the configuration value for it:

`dbus-daemon --address {{address}}`

- Output the process id to `stdout`:

`dbus-daemon --print-pid`

- Force the message bus to write to the system log for messages:

`dbus-daemon --syslog`
"
iostat,,"
IOSTAT(8)		  BSD System Manager's Manual		     IOSTAT(8)

NAME
     iostat -- report I/O statistics

SYNOPSIS
     iostat [-CUdKIoT?] [-c count] [-n devs] [-w wait] [drives]

DESCRIPTION
     Iostat displays kernel I/O statistics on terminal, device and cpu opera-
     tions.  The first statistics that are printed are averaged over the sys-
     tem uptime.  To get information about the current activity, a suitable
     wait time should be specified, so that the subsequent sets of printed
     statistics will be averaged over that time.

     The options are as follows:

     -?    Display a usage statement and exit.

     -C    Display CPU statistics.  This is on by default, unless -d is speci-
	   fied.

     -c    Repeat the display count times.  If no wait interval is specified,
	   the default is 1 second.

     -d    Display only device statistics.  If this flag is turned on, only
	   device statistics will be displayed, unless -C or -U or -T is also
	   specfied to enable the display of CPU, load average or TTY statis-
	   tics.

     -I    Display total statstics for a given time period, rather than aver-
	   age statistics for each second during that time period.

     -K    In the blocks transferred display (-o), display block count in
	   kilobytes rather then the device native block size.

     -n    Display up to devs number of devices.  iostat will display fewer
	   devices if there aren't devs devices present.

     -o    Display old-style iostat device statistics.	Sectors per second,
	   transfers per second, and miliseconds per seek are displayed.  If
	   -I is specified, total blocks/sectors, total transfers, and
	   miliseconds per seek are displayed.

     -T    Display TTY statistics.  This is on by default, unless -d is speci-
	   fied.

     -U    Display system load averages.  This is on by default, unless -d is
	   specified.

     -w    Pause wait seconds between each display.  If no repeat count is
	   specified, the default is infinity.

     Iostat displays its information in the following format:

     tty
	   tin	   characters read from terminals
	   tout    characters written to terminals

     devices
	   Device operations.  The header of the field is the device name and
	   unit number.  iostat will display as many devices as will fit in a
	   standard 80 column screen, or the maximum number of devices in the
	   system, whichever is smaller.  If -n is specified on the command
	   line, iostat will display the smaller of the requested number of
	   devices, and the maximum number of devices in the system.  To force
	   iostat to display specific drives, their names may be supplied on
	   the command line.  iostat will not display more devices than will
	   fit in an 80 column screen, unless the -n argument is given on the
	   command line to specify a maximum number of devices to display, or
	   the list of specified devices exceeds 80 columns.  If fewer devices
	   are specified on the command line than will fit in an 80 column
	   screen, iostat will show only the specified devices.

	   The standard iostat device display shows the following statistics:

	   KB/t    kilobytes per transfer
	   tps	   transfers per second
	   MB/s    megabytes per second

	   The standard iostat device display, with the -I flag specified,
	   shows the following statistics:

	   KB/t    kilobytes per transfer
	   xfrs    total number of transfers
	   MB	   total number of megabytes transferred

	   The old-style iostat display (using -o) shows the following statis-
	   tics:

	   sps	   sectors transferred per second
	   tps	   transfers per second
	   msps    average milliseconds per transaction

	   The old-style iostat display, with the -I flag specified, shows the
	   following statistics:

	   blk	   total blocks/sectors transferred
	   xfr	   total transfers
	   msps    average milliseconds per transaction

     cpu
	   us	   % of cpu time in user mode
	   sy	   % of cpu time in system mode
	   id	   % of cpu time in idle mode

EXAMPLES
	   iostat -w 1 disk0 disk2

     Display statistics for the first and third disk devices device every sec-
     ond ad infinitum.

	   iostat -c 2

     Display the statistics for the first four devices in the system twice,
     with a one second display interval.

	   iostat -Iw 3

     Display total statistics every three seconds ad infinitum.

	   iostat -odICTw 2 -c 9

     Display total statistics using the old-style output format 9 times, with
     a two second interval between each measurement/display.  The -d flag gen-
     erally disables the TTY and CPU displays, but since the -T and -C flags
     are given, the TTY and CPU displays will be displayed.

SEE ALSO
     fstat(1), netstat(1), nfsstat(1), ps(1), pstat(8)

     The sections starting with ``Interpreting system activity'' in Installing
     and Operating 4.3BSD.

HISTORY
     This version of iostat first appeared in FreeBSD 3.0.

BSD			      September 27, 2001			   BSD
","# iostat

> Report statistics for devices and partitions.

- Display a report of CPU and disk statistics since system startup:

`iostat`

- Display a report of CPU and disk statistics with units converted to megabytes:

`iostat -m`

- Display CPU statistics:

`iostat -c`

- Display disk statistics with disk names (including LVM):

`iostat -N`

- Display extended disk statistics with disk names for device ""sda"":

`iostat -xN {{sda}}`

- Display incremental reports of CPU and disk statistics every 2 seconds:

`iostat {{2}}`
"
nethogs,,,"# nethogs

> Monitor bandwidth usage per process.

- Start nethogs as root (default device is eth0):

`sudo nethogs`

- Monitor bandwidth on specific device:

`sudo nethogs {{device}}`

- Monitor bandwidth on multiple devices:

`sudo nethogs {{device1}} {{device2}}`

- Specify refresh rate:

`sudo nethogs -t {{seconds}}`
"
ldconfig,,,"# ldconfig

> Configure symlinks and cache for shared library dependencies.

- Update symlinks and rebuild the cache (usually run when a new library is installed):

`sudo ldconfig`

- Update the symlinks for a given directory:

`sudo ldconfig -n {{path/to/directory}}`

- Print the libraries in the cache and check whether a given library is present:

`ldconfig -p | grep {{library_name}}`
"
f5fpc,,,"# f5fpc

> A proprietry commercial SSL VPN client by BIG-IP Edge.

- Open a new VPN connection:

`sudo f5fpc --start`

- Open a new VPN connection to a specific host:

`sudo f5fpc --start --host {{host.example.com}}`

- Specify a username (user will be prompted for a password):

`sudo f5fpc --start --host {{host.example.com}} --username {{user}}`

- Show the current VPN status:

`sudo f5fpc --info`

- Shutdown the VPN connection:

`sudo f5fpc --stop`
"
vrms,https://debian.pages.debian.net/vrms/,,"# vrms

> Report non-free packages installed on Debian-based OSes.
> More information: <https://debian.pages.debian.net/vrms/>.

- List non-free and contrib packages (and their description):

`vrms`

- Only output the package names:

`vrms --sparse`
"
sv,,,"# sv

> Control a running runsv service.

- Start a service:

`sudo sv up {{path/to/service}}`

- Stop a service:

`sudo sv down {{path/to/service}}`

- Get service status:

`sudo sv status {{path/to/service}}`
"
pkginfo,,,"# pkginfo

> Query the package database on a CRUX system.

- List installed packages and their versions:

`pkginfo -i`

- List files owned by a package:

`pkginfo -l {{package_name}}`

- List the owner(s) of files matching a pattern:

`pkginfo -o {{pattern}}`

- Print the footprint of a file:

`pkginfo -f {{file}}`
"
netstat,,"
NETSTAT(1)		  BSD General Commands Manual		    NETSTAT(1)

NAME
     netstat -- show network status

SYNOPSIS
     netstat [-AaLlnW] [-f address_family | -p protocol]
     netstat [-gilns] [-v] [-f address_family] [-I interface]
     netstat -i | -I interface [-w wait] [-c queue] [-abdgqRtS]
     netstat -s [-s] [-f address_family | -p protocol] [-w wait]
     netstat -i | -I interface -s [-f address_family | -p protocol]
     netstat -m [-m]
     netstat -r [-Aaln] [-f address_family]
     netstat -rs [-s]

DESCRIPTION
     The netstat command symbolically displays the contents of various net-
     work-related data structures.  There are a number of output formats,
     depending on the options for the information presented.  The first form
     of the command displays a list of active sockets for each protocol.  The
     second form presents the contents of one of the other network data struc-
     tures according to the option selected. Using the third form, with a wait
     interval specified, netstat will continuously display the information
     regarding packet traffic on the configured network interfaces.  The
     fourth form displays statistics for the specified protocol or address
     family. If a wait interval is specified, the protocol information over
     the last interval seconds will be displayed.  The fifth form displays
     per-interface statistics for the specified protocol or address family.
     The sixth form displays mbuf(9) statistics.  The seventh form displays
     routing table for the specified address family.  The eighth form displays
     routing statistics.

     The options have the following meaning:

     -A    With the default display, show the address of any protocol control
	   blocks associated with sockets and the flow hash; used for debug-
	   ging.

     -a    With the default display, show the state of all sockets; normally
	   sockets used by server processes are not shown. With the routing
	   table display (option -r, as described below), show protocol-cloned
	   routes (routes generated by a RTF_PRCLONING parent route); normally
	   these routes are not shown.

     -b    With the interface display (option -i, as described below), show
	   the number of bytes in and out.

     -c queue
	   With the queue statistics (option -q, as described below), show
	   only those for the specified queue.

     -d    With either interface display (option -i or an interval, as
	   described below), show the number of dropped packets.

     -f address_family
	   Limit statistics or address control block reports to those of the
	   specified address family.  The following address families are rec-
	   ognized: inet, for AF_INET, inet6, for AF_INET6 and unix, for
	   AF_UNIX.

     -g    Show information related to multicast (group address) membership.
	   If the -s option is also present, show extended interface group
	   management statistics.  If the -v option is specified, show link-
	   layer memberships; they are suppressed by default.  Source lists
	   for each group will also be printed.  Specifiying -v twice will
	   print the control plane timers for each interface and the source
	   list counters for each group.  If the -i is specified, only that
	   interface will be shown.  If the -f is specified, only information
	   for the address family will be displayed.

     -I interface
	   Show information about the specified interface; used with a wait
	   interval as described below.  If the -s option is present, show
	   per-interface protocol statistics on the interface for the speci-
	   fied address_family or protocol, or for all protocol families.

     -i    Show the state of interfaces which have been auto-configured
	   (interfaces statically configured into a system, but not located at
	   boot time are not shown).  If the -a options is also present, mul-
	   ticast addresses currently in use are shown for each Ethernet
	   interface and for each IP interface address.  Multicast addresses
	   are shown on separate lines following the interface address with
	   which they are associated.  If the -s option is present, show per-
	   interface statistics on all interfaces for the specified
	   address_family or protocol, or for all protocol families.

     -L    Show the size of the various listen queues.	The first count shows
	   the number of unaccepted connections.  The second count shows the
	   amount of unaccepted incomplete connections.  The third count is
	   the maximum number of queued connections.

     -l    Print full IPv6 address.

     -m    Show statistics recorded by the memory management routines (the
	   network stack manages a private pool of memory buffers). More
	   detailed information about the buffers, which includes their cache
	   related statistics, can be obtained by using -mm or -m -m option.

     -n    Show network addresses as numbers (normally netstat interprets
	   addresses and attempts to display them symbolically).  This option
	   may be used with any of the display formats.

     -p protocol
	   Show statistics about protocol, which is either a well-known name
	   for a protocol or an alias for it.  Some protocol names and aliases
	   are listed in the file /etc/protocols.  The special protocol name
	   ``bdg'' is used to show bridging statistics.  A null response typi-
	   cally means that there are no interesting numbers to report.  The
	   program will complain if protocol is unknown or if there is no sta-
	   tistics routine for it.

     -q    Show network interface send queue statistics.  By default all
	   queues are displayed, unless specified with -c.  This option
	   requires specifying an interface with -I option.  More detailed
	   information about the queues, which includes their queueing algo-
	   rithm related statistics, can be obtained by using -qq or -q -q
	   option.

     -r    Show the routing tables.  Use with -a to show protocol-cloned
	   routes.  When -s is also present, show routing statistics instead.
	   When -l is also present, netstat assumes more columns are there and
	   the maximum transmission unit.  More detailed information about the
	   route metrics are displayed with -ll for TCP round trip times -lll
	   for all metrics.  Use the -z flags to display only entries with
	   non-zero RTT values.  (``mtu'') are also displayed.

     -R    Show reachability information.  Use with -i to show link-layer
	   reachability information for a given interface.

     -s    Show per-protocol statistics.  If this option is repeated, counters
	   with a value of zero are suppressed.  For security reasons, root
	   privileges are required to read TCP statistics and in the absence
	   of such privileges all TCP counters will be reported as zero.

     -S    Show interface link status and interface state information about
	   the specified interface.  This option requires specifying an inter-
	   face with -I option.

     -v    Increase verbosity level.

     -W    In certain displays, avoid truncating addresses even if this causes
	   some fields to overflow.

     -w wait
	   Show network interface or protocol statistics at intervals of wait
	   seconds.

     -x    Show extended link-layer reachability information in addition to
	   that shown by the -R flag.

OUTPUT
     The default display, for active sockets, shows the local and remote
     addresses, send and receive queue sizes (in bytes), protocol, and the
     internal state of the protocol.  Address formats are of the form
     ``host.port'' or ``network.port'' if a socket's address specifies a net-
     work but no specific host address.  If known, the host and network
     addresses are displayed symbolically according to the databases
     /etc/hosts and /etc/networks, respectively.  If a symbolic name for an
     address is unknown, or if the -n option is specified, the address is
     printed numerically, according to the address family.  For more informa-
     tion regarding the Internet ``dot format'', refer to inet(3)).  Unspeci-
     fied, or ``wildcard'', addresses and ports appear as ``*''.

     Internet domain socket states:

     CLOSED:  The socket is not in use.

     LISTEN:  The socket is listening for incoming connections.  Unconnected
     listening sockets like these are only displayed when using the -a option.

     SYN_SENT:	The socket is actively trying to establish a connection to a
     remote peer.

     SYN_RCVD:	The socket has passively received a connection request from a
     remote peer.

     ESTABLISHED:  The socket has an established connection between a local
     application and a remote peer.

     CLOSE_WAIT:  The socket connection has been closed by the remote peer,
     and the system is waiting for the local application to close its half of
     the connection.

     LAST_ACK:	The socket connection has been closed by the remote peer, the
     local application has closed its half of the connection, and the system
     is waiting for the remote peer to acknowledge the close.

     FIN_WAIT_1:  The socket connection has been closed by the local
     application, the remote peer has not yet acknowledged the close, and the
     system is waiting for it to close its half of the connection.

     FIN_WAIT_2:  The socket connection has been closed by the local
     application, the remote peer has acknowledged the close, and the system
     is waiting for it to close its half of the connection.

     CLOSING:  The socket connection has been closed by the local application
     and the remote peer simultaneously, and the remote peer has not yet
     acknowledged the close attempt of the local application.

     TIME_WAIT:  The socket connection has been closed by the local
     application, the remote peer has closed its half of the connection, and
     the system is waiting to be sure that the remote peer received the last
     acknowledgement.

     The interface display provides a table of cumulative statistics regarding
     packets transferred, errors, and collisions.  The network addresses of
     the interface and the maximum transmission unit (``mtu'') are also dis-
     played.

     The routing table display indicates the available routes and their sta-
     tus.  Each route consists of a destination host or network and a gateway
     to use in forwarding packets.  The flags field shows a collection of
     information about the route stored as binary choices.  The individual
     flags are discussed in more detail in the route(8) and route(4) manual
     pages.  The mapping between letters and flags is:

     1	     RTF_PROTO1       Protocol specific routing flag #1
     2	     RTF_PROTO2       Protocol specific routing flag #2
     3	     RTF_PROTO3       Protocol specific routing flag #3
     B	     RTF_BLACKHOLE    Just discard packets (during updates)
     b	     RTF_BROADCAST    The route represents a broadcast address
     C	     RTF_CLONING      Generate new routes on use
     c	     RTF_PRCLONING    Protocol-specified generate new routes on use
     D	     RTF_DYNAMIC      Created dynamically (by redirect)
     G	     RTF_GATEWAY      Destination requires forwarding by intermediary
     H	     RTF_HOST	      Host entry (net otherwise)
     I	     RTF_IFSCOPE      Route is associated with an interface scope
     i	     RTF_IFREF	      Route is holding a reference to the interface
     L	     RTF_LLINFO       Valid protocol to link address translation
     M	     RTF_MODIFIED     Modified dynamically (by redirect)
     m	     RTF_MULTICAST    The route represents a multicast address
     R	     RTF_REJECT       Host or net unreachable
     r	     RTF_ROUTER       Host is a default router
     S	     RTF_STATIC       Manually added
     U	     RTF_UP	      Route usable
     W	     RTF_WASCLONED    Route was generated as a result of cloning
     X	     RTF_XRESOLVE     External daemon translates proto to link address
     Y	     RTF_PROXY	      Proxying; cloned routes will not be scoped

     Direct routes are created for each interface attached to the local host;
     the gateway field for such entries shows the address of the outgoing
     interface.  The refcnt field gives the current number of active uses of
     the route.  Connection oriented protocols normally hold on to a single
     route for the duration of a connection while connectionless protocols
     obtain a route while sending to the same destination.  The use field pro-
     vides a count of the number of packets sent using that route.  The inter-
     face entry indicates the network interface utilized for the route.  A
     route which is marked with the RTF_IFSCOPE flag is instantiated for the
     corresponding interface.  A cloning route which is marked with the
     RTF_PROXY flag will not generate new routes that are associated with its
     interface scope.

     When netstat is invoked with the -w option and a wait interval argument,
     it displays a running count of statistics related to network interfaces
     or protocols.  An obsolete version of this option used a numeric parame-
     ter with no option, and is currently supported for backward compatibil-
     ity.  By default, this display summarizes information for all interfaces.
     Information for a specific interface may be displayed with the -I option.

SEE ALSO
     nfsstat(1), ps(1), inet(4), unix(4), hosts(5), networks(5), protocols(5),
     route(8), services(5), iostat(8),

HISTORY
     The netstat command appeared in 4.2BSD.

     IPv6 support was added by WIDE/KAME project.

BUGS
     The notion of errors is ill-defined.

Darwin				 June 15, 2001				Darwin
","# netstat

> Displays network-related information such as open connections, open socket ports, etc.

- List all ports:

`netstat -a`

- List all listening ports:

`netstat -l`

- List listening TCP ports:

`netstat -t`

- Display PID and program names:

`netstat -p`

- List information continuously:

`netstat -c`

- List routes and do not resolve IP to hostname:

`netstat -rn`

- List listening TCP and UDP ports (+ user and process if you're root):

`netstat -lepunt`

- Print the routing table:

`netstat -nr`
"
xtrlock,,,"# xtrlock

> Lock the X display until the user supplies their password.

- Lock the display and show a padlock instead of the cursor:

`xtrlock`

- Display a blank screen as well as the padlock cursor:

`xtrlock -b`

- Fork the xtrlock process and return immediately:

`xtrlock -f`
"
eject,,,"# eject

> Eject cds, floppy disks and tape drives.

- Display the default device:

`eject -d`

- Eject the default device:

`eject`

- Eject a specific device (the default order is cd-rom, scsi, floppy and tape):

`eject {{/dev/cdrom}}`

- Toggle whether a device's tray is open or closed:

`eject -T {{/dev/cdrom}}`

- Eject a cd drive:

`eject -r {{/dev/cdrom}}`

- Eject a floppy drive:

`eject -f {{/mnt/floppy}}`

- Eject a tape drive:

`eject -q {{/mnt/tape}}`
"
a2dissite,https://manpages.debian.org/buster/apache2/a2dissite.8.en.html,,"# a2dissite

> Disable an Apache virtual host on Debian-based OSes.
> More information: <https://manpages.debian.org/buster/apache2/a2dissite.8.en.html>.

- Disable a virtual host:

`sudo a2dissite {{virtual_host}}`

- Don't show informative messages:

`sudo a2dissite --quiet {{virtual_host}}`
"
create_ap,,,"# create_ap

> Create an AP (Access Point) at any channel.

- Create an open network with no passphrase:

`create_ap {{wlan0}} {{eth0}} {{access_point_ssid}}`

- Use a WPA + WPA2 passphrase:

`create_ap {{wlan0}} {{eth0}} {{access_point_ssid}} {{passphrase}}`

- Create an access point without Internet sharing:

`create_ap -n {{wlan0}} {{acces_point_ssid}} {{passphrase}}`

- Create a bridged network with Internet sharing:

`create_ap -m bridge {{wlan0}} {{eth0}} {{access_point_ssid}} {{passphrase}}`

- Create a bridged network with Internet sharing and a pre-configured bridge interface:

`create_ap -m bridge {{wlan0}} {{br0}} {{access_point_ssid}} {{passphrase}}`

- Create an access port for Internet sharing from the same WiFi interface:

`create_ap {{wlan0}} {{wlan0}} {{access_point_ssid}} {{passphrase}}`

- Choose a different WiFi adapter driver:

`create_ap --driver {{wifi_adapter}} {{wlan0}} {{eth0}} {{access_point_ssid}} {{passphrase}}`
"
vgs,https://man7.org/linux/man-pages/man8/vgs.8.html,,"# vgs

> Display information about LVM volume groups.
> More information: https://man7.org/linux/man-pages/man8/vgs.8.html .

- Display information about volume groups:

`vgs`

- Display all volume groups:

`vgs -a`

- Change default display to show more details:

`vgs -v`

- Display only specific fields:

`vgs -o {{field_name_1}},{{field_name_2}}`

- Append field to default display:

`vgs -o +{{field_name}}`

- Suppress heading line:

`vgs --noheadings`

- Use separator to separate fields:

`vgs --separator =`
"
ifdown,,,"# ifdown

> Disable network interfaces.

- Disable interface eth0:

`ifdown {{eth0}}`

- Disable all interfaces which are enabled:

`ifdown -a`
"
rtorrent,,,"# rtorrent

> Download torrents over the command line.

- Add a torrent file or magnet to be downloaded:

`rtorrent {{torrent_or_magnet}}`

- Start the download:

`<Ctrl>S`

- View details about downloading torrent:

`->`

- Close rtorrent safely:

`<Ctrl>Q`
"
trap,,"
BUILTIN(1)		  BSD General Commands Manual		    BUILTIN(1)

NAME
     builtin, !, %, ., :, @, {, }, alias, alloc, bg, bind, bindkey, break,
     breaksw, builtins, case, cd, chdir, command, complete, continue, default,
     dirs, do, done, echo, echotc, elif, else, end, endif, endsw, esac, eval,
     exec, exit, export, false, fc, fg, filetest, fi, for, foreach, getopts,
     glob, goto, hash, hashstat, history, hup, if, jobid, jobs, kill, limit,
     local, log, login, logout, ls-F, nice, nohup, notify, onintr, popd,
     printenv, pushd, pwd, read, readonly, rehash, repeat, return, sched, set,
     setenv, settc, setty, setvar, shift, source, stop, suspend, switch,
     telltc, test, then, time, times, trap, true, type, ulimit, umask,
     unalias, uncomplete, unhash, unlimit, unset, unsetenv, until, wait,
     where, which, while -- shell built-in commands

SYNOPSIS
     builtin [-options] [args ...]

DESCRIPTION
     Shell builtin commands are commands that can be executed within the run-
     ning shell's process.  Note that, in the case of csh(1) builtin commands,
     the command is executed in a subshell if it occurs as any component of a
     pipeline except the last.

     If a command specified to the shell contains a slash ``/'', the shell
     will not execute a builtin command, even if the last component of the
     specified command matches the name of a builtin command.  Thus, while
     specifying ``echo'' causes a builtin command to be executed under shells
     that support the echo builtin command, specifying ``/bin/echo'' or
     ``./echo'' does not.

     While some builtin commands may exist in more than one shell, their oper-
     ation may be different under each shell which supports them.  Below is a
     table which lists shell builtin commands, the standard shells that sup-
     port them and whether they exist as standalone utilities.

     Only builtin commands for the csh(1) and sh(1) shells are listed here.
     Consult a shell's manual page for details on the operation of its builtin
     commands.	Beware that the sh(1) manual page, at least, calls some of
     these commands ``built-in commands'' and some of them ``reserved words''.
     Users of other shells may need to consult an info(1) page or other
     sources of documentation.

     Commands marked ``No**'' under External do exist externally, but are
     implemented as scripts using a builtin command of the same name.

	   Command	 External    csh(1)    sh(1)
	   !		 No	     No        Yes
	   %		 No	     Yes       No
	   .		 No	     No        Yes
	   :		 No	     Yes       Yes
	   @		 No	     Yes       Yes
	   {		 No	     No        Yes
	   }		 No	     No        Yes
	   alias	 No**	     Yes       Yes
	   alloc	 No	     Yes       No
	   bg		 No**	     Yes       Yes
	   bind 	 No	     No        Yes
	   bindkey	 No	     Yes       No
	   break	 No	     Yes       Yes
	   breaksw	 No	     Yes       No
	   builtin	 No	     No        Yes
	   builtins	 No	     Yes       No
	   case 	 No	     Yes       Yes
	   cd		 No**	     Yes       Yes
	   chdir	 No	     Yes       Yes
	   command	 No**	     No        Yes
	   complete	 No	     Yes       No
	   continue	 No	     Yes       Yes
	   default	 No	     Yes       No
	   dirs 	 No	     Yes       No
	   do		 No	     No        Yes
	   done 	 No	     No        Yes
	   echo 	 Yes	     Yes       Yes
	   echotc	 No	     Yes       No
	   elif 	 No	     No        Yes
	   else 	 No	     Yes       Yes
	   end		 No	     Yes       No
	   endif	 No	     Yes       No
	   endsw	 No	     Yes       No
	   esac 	 No	     No        Yes
	   eval 	 No	     Yes       Yes
	   exec 	 No	     Yes       Yes
	   exit 	 No	     Yes       Yes
	   export	 No	     No        Yes
	   false	 Yes	     No        Yes
	   fc		 No**	     No        Yes
	   fg		 No**	     Yes       Yes
	   filetest	 No	     Yes       No
	   fi		 No	     No        Yes
	   for		 No	     No        Yes
	   foreach	 No	     Yes       No
	   getopts	 No**	     No        Yes
	   glob 	 No	     Yes       No
	   goto 	 No	     Yes       No
	   hash 	 No	     No        Yes
	   hashstat	 No	     Yes       No
	   history	 No	     Yes       No
	   hup		 No	     Yes       No
	   if		 No	     Yes       Yes
	   jobid	 No	     No        Yes
	   jobs 	 No**	     Yes       Yes
	   kill 	 Yes	     Yes       No
	   limit	 No	     Yes       No
	   local	 No	     No        Yes
	   log		 No	     Yes       No
	   login	 Yes	     Yes       No
	   logout	 No	     Yes       No
	   ls-F 	 No	     Yes       No
	   nice 	 Yes	     Yes       No
	   nohup	 Yes	     Yes       No
	   notify	 No	     Yes       No
	   onintr	 No	     Yes       No
	   popd 	 No	     Yes       No
	   printenv	 Yes	     Yes       No
	   pushd	 No	     Yes       No
	   pwd		 Yes	     No        Yes
	   read 	 No**	     No        Yes
	   readonly	 No	     No        Yes
	   rehash	 No	     Yes       No
	   repeat	 No	     Yes       No
	   return	 No	     No        Yes
	   sched	 No	     Yes       No
	   set		 No	     Yes       Yes
	   setenv	 No	     Yes       No
	   settc	 No	     Yes       No
	   setty	 No	     Yes       No
	   setvar	 No	     No        Yes
	   shift	 No	     Yes       Yes
	   source	 No	     Yes       No
	   stop 	 No	     Yes       No
	   suspend	 No	     Yes       No
	   switch	 No	     Yes       No
	   telltc	 No	     Yes       No
	   test 	 Yes	     No        Yes
	   then 	 No	     No        Yes
	   time 	 Yes	     Yes       No
	   times	 No	     No        Yes
	   trap 	 No	     No        Yes
	   true 	 Yes	     No        Yes
	   type 	 No	     No        Yes
	   ulimit	 No	     No        Yes
	   umask	 No**	     Yes       Yes
	   unalias	 No**	     Yes       Yes
	   uncomplete	 No	     Yes       No
	   unhash	 No	     Yes       No
	   unlimit	 No	     Yes       No
	   unset	 No	     Yes       Yes
	   unsetenv	 No	     Yes       No
	   until	 No	     No        Yes
	   wait 	 No**	     Yes       Yes
	   where	 No	     Yes       No
	   which	 Yes	     Yes       No
	   while	 No	     Yes       Yes

SEE ALSO
     csh(1), echo(1), false(1), info(1), kill(1), login(1), nice(1), nohup(1),
     printenv(1), pwd(1), sh(1), test(1), time(1), true(1), which(1)

HISTORY
     The builtin manual page first appeared in FreeBSD 3.4.

AUTHORS
     This manual page was written by Sheldon Hearn <sheldonh@FreeBSD.org>.

BSD			       February 23, 2005			   BSD
","# trap

> Automatically execute commands after receiving signals by processes or the operating system.
> Can be used to perform cleanups for interruptions by the user or other actions.

- List available signals to set traps for:

`trap -l`

- List active traps for the current shell:

`trap -p`

- Set a trap to execute commands when one or more signals are detected:

`trap 'echo ""Caught signal {{SIGHUP}}""' {{SIGHUP}}`

- Remove active traps:

`trap - {{SIGHUP}} {{SIGINT}}`
"
fstrim,,,"# fstrim

> Discard unused blocks on a mounted filesystem.
> Only supported by flash memory devices such as SSDs and microSD cards.

- Trim unused blocks on all mounted partitions that support it:

`sudo fstrim --all`

- Trim unused blocks on a specified partition:

`sudo fstrim {{/}}`

- Display statistics after trimming:

`sudo fstrim --verbose {{/}}`
"
ifup,,,"# ifup

> Tool used to enable network interfaces.

- Enable interface eth0:

`ifup {{eth0}}`

- Enable all the interfaces defined with ""auto"" in /etc/network/interfaces:

`ifup -a`
"
speedometer,http://excess.org/speedometer,,"# speedometer

> Python script that shows a network traffic graph in the terminal.
> More information: <http://excess.org/speedometer>.

- Show graph for a specific interface:

`speedometer -r {{eth0}} -t {{eth0}}`
"
phar,,"PHAR(1) 			 User Commands			       PHAR(1)



NAME
       phar, phar.phar - PHAR (PHP archive) command line tool

SYNOPSIS
       phar <command> [options] ...


DESCRIPTION
       The PHAR file format provides a way to put entire PHP applications into
       a single file called a ""phar"" (PHP Archive) for easy  distribution  and
       installation.

       With the phar command you can create, update or extract PHP archives.

       Commands: add compress delete extract help help-list info list meta-del
       meta-get meta-set pack sign stub-get stub-set tree version


add command
       Add entries to a PHAR package.

       Required arguments:

       -f file	      Specifies the phar file to work on.

       ...	      Any number of input files and directories. If -i	is  in
		      use  then  ONLY  files  and  matching  the given regular
		      expression are being packed. If -x is given  then  files
		      matching that regular expression are NOT being packed.

       Optional arguments:

       -a alias       Provide an alias name for the phar file.

       -c algo	      Compression algorithm (see COMPRESSION )

       -i regex       Specifies a regular expression for input files.

       -l level       Number  of  preceding  subdirectories to strip from file
		      entries

       -x regex       Regular expression for input files to exclude.


compress command
       Compress or uncompress all files or a selected entry.

       Required arguments:

       -c algo	      Compression algorithm (see COMPRESSION )

       -f file	      Specifies the phar file to work on.

       Optional arguments:

       -e entry       Name of entry to work on	(must  include	PHAR  internal
		      directory name if any).


delete command
       Delete entry from a PHAR archive

       Required arguments:

       -e entry       Name  of	entry  to  work on (must include PHAR internal
		      directory name if any).

       -f file	      Specifies the phar file to work on.


extract command
       Extract a PHAR package to a directory.

       Required arguments:

       -f file	      Specifies the phar file to work on.

       Optional arguments:

       -i regex       Specifies a regular expression for input files.

       -x regex       Regular expression for input files to exclude.

       ...	      Directory to extract to (defaults to '.').



help command
       This help or help for a selected command.

       Optional arguments:

       ...	      Optional command to retrieve help for.


help-list command
       Lists available commands.


info command
       Get information about a PHAR package.

       By using -k it is possible to return a single value.

       Required arguments:

       -f file	      Specifies the phar file to work on.

       Optional arguments:

       -k index       Subscription index to work on.


list command
       List contents of a PHAR archive.

       Required arguments:

       -f file	      Specifies the phar file to work on.

       Optional arguments:

       -i regex       Specifies a regular expression for input files.

       -x regex       Regular expression for input files to exclude.



meta-del command
       Delete meta information of a PHAR entry or a PHAR package.

       If -k is given then the metadata is expected to be  an  array  and  the
       given index is being deleted.

       If something was deleted the return value is 0 otherwise it is 1.

       Required arguments:

       -f file	      Specifies the phar file to work on.

       Optional arguments:

       -e entry       Name  of	entry  to  work on (must include PHAR internal
		      directory name if any).

       -k index       Subscription index to work on.


meta-get command
       Get meta information of a PHAR entry or a PHAR  package	in  serialized
       from. If no output file is specified for meta data then stdout is being
       used.  You can also specify a particular index using -k. In  that  case
       the  metadata  is  expected  to	be an array and the value of the given
       index is returned using echo rather than using serialize. If that index
       does not exist or no meta data is present then the return value is 1.

       Required arguments:

       -f file	      Specifies the phar file to work on.

       Optional arguments:

       -e entry       Name  of	entry  to  work on (must include PHAR internal
		      directory name if any).

       -k index       Subscription index to work on.


meta-set command
       Set meta data of a PHAR entry or a PHAR package using serialized input.
       If  no  input file is specified for meta data then stdin is being used.
       You can also specify a particular index using  -k.  In  that  case  the
       metadata is expected to be an array and the value of the given index is
       being set.  If the metadata is not present or empty a new array will be
       created.   If  the metadata is present and a flat value then the return
       value is 1. Also using -k the input is been taken directly rather  then
       being serialized.

       Required arguments:

       -f file	      Specifies the phar file to work on.

       -m meta	      Meta data to store with entry (serialized php data).

       Optional arguments:

       -e entry       Name  of	entry  to  work on (must include PHAR internal
		      directory name if any).

       -k index       Subscription index to work on.


pack command
       Pack files into a PHAR archive.

       When using -s <stub>, then the stub file is  being  excluded  from  the
       list  of input files/dirs.To create an archive that contains PEAR class
       PHP_Archive then point -p argument to PHP/Archive.php.

       Required arguments:

       -f file	      Specifies the phar file to work on.

       ...	      Any number of input files and directories. If -i	is  in
		      use  then  ONLY  files  and  matching  the given regular
		      expression are being packed. If -x is given  then  files
		      matching that regular expression are NOT being packed.

       Optional arguments:

       -a alias       Provide an alias name for the phar file.

       -b bang	      Hash-bang    line    to	 start	 the   archive	 (e.g.
		      #!/usr/bin/php).	The hash mark itself '#!' and the new-
		      line character are optional.

       -c algo	      Compression algorithm (see COMPRESSION )

       -h hash	      Selects the hash algorithm (see HASH )

       -i regex       Specifies a regular expression for input files.

       -l level       Number  of  preceding  subdirectories to strip from file
		      entries

       -p loader      Location of  PHP_Archive	class  file  (pear  list-files
		      PHP_Archive).You	can  use '0' or '1' to locate it auto-
		      matically using the mentioned pear command.  When  using
		      '0'  the	command does not error out when the class file
		      cannot be located.  This	switch	also  adds  some  code
		      around  the  stub  so that class PHP_Archive gets regis-
		      tered  as  phar://  stream  wrapper  if  necessary.  And
		      finally this switch will add the file phar.inc from this
		      package and load it to ensure class Phar is present.

       -s stub	      Select the stub file.

       -x regex       Regular expression for input files to exclude.

       -y key	      Private key for OpenSSL signing.


sign command
       Set signature hash algorithm.

       Required arguments:

       -f file	      Specifies the phar file to work on.

       -h hash	      Selects the hash algorithm (see HASH )

       Optional arguments:

       -y key	      Private key for OpenSSL signing.


stub-get command
       Get the stub of a PHAR file. If no output file  is  specified  as  stub
       then stdout is being used.

       Required arguments:

       -f file	      Specifies the phar file to work on.

       Optional arguments:

       -s stub	      Select the stub file.


stub-set command
       Set the stub of a PHAR file. If no input file is specified as stub then
       stdin is being used.

       Required arguments:

       -f file	      Specifies the phar file to work on.

       Optional arguments:

       -b bang	      Hash-bang   line	 to   start    the    archive	 (e.g.
		      #!/usr/bin/php).	The hash mark itself '#!' and the new-
		      line character are optional.

       -p loader      Location of  PHP_Archive	class  file  (pear  list-files
		      PHP_Archive).You	can  use '0' or '1' to locate it auto-
		      matically using the mentioned pear command.  When  using
		      '0'  the	command does not error out when the class file
		      cannot be located.  This	switch	also  adds  some  code
		      around  the  stub  so that class PHP_Archive gets regis-
		      tered  as  phar://  stream  wrapper  if  necessary.  And
		      finally this switch will add the file phar.inc from this
		      package and load it to ensure class Phar is present.

       -s stub	      Select the stub file.



tree command
       Get a directory tree for a PHAR archive.

       Required arguments:

       -f file	      Specifies the phar file to work on.

       Optional arguments:

       -i regex       Specifies a regular expression for input files.

       -x regex       Regular expression for input files to exclude.


version command
       Get information about the PHAR environment and the tool version.



COMPRESSION
       Algorithms:

       0	      No compression

       none	      No compression

       auto	      Automatically select compression algorithm

       gz	      GZip compression

       gzip	      GZip compression

       bz2	      BZip2 compression

       bzip2	      BZip2 compression


HASH
       Algorithms:



		      md5	     MD5

       sha1	      SHA1

       sha256	      SHA256

       sha512	      SHA512

       openssl	      OpenSSL


SEE ALSO
       For a more or less complete description of PHAR look here:
       http://php.net/phar


BUGS
       You can view the list of known bugs or report any  new  bug  you
       found at:
       http://bugs.php.net

AUTHORS
       The PHP Group: Thies C. Arntzen, Stig Bakken, Andi Gutmans, Ras-
       mus Lerdorf, Sam Ruby, Sascha Schumann, Zeev Suraski,  Jim  Win-
       stead, Andrei Zmievski.

       Work  for  the  PHP  archive  was done by Gregory Beaver, Marcus
       Boerger.

       A List of active developers can be found here:
       http://www.php.net/credits.php

       And last but not least PHP was developed with the help of a huge
       amount of contributors all around the world.

VERSION INFORMATION
       This manpage describes phar, version 7.1.33.

COPYRIGHT
       Copyright (C) 1997-2018 The PHP Group

       This  source file is subject to version 3.01 of the PHP license,
       that is bundled with this package in the file  LICENSE,	and  is
       available through the world-wide-web at the following url:
       http://www.php.net/license/3_01.txt

       If  you did not receive a copy of the PHP license and are unable
       to obtain it through the world-wide-web, please send a  note  to
       license@php.net so we can mail you a copy immediately.



The PHP Group			     2018			       PHAR(1)
","# phar

> Create, update or extract PHP archives (PHAR).

- Add space-separated files or directories to a Phar file:

`phar add -f {{path/to/phar_file}} {{files_or_directories}}`

- Display the contents of a Phar file:

`phar list -f {{path/to/phar_file}}`

- Delete the specified file or directory from a Phar file:

`phar delete -f {{path/to/phar_file}} -e {{file_or_directory}}`

- Display full usage information and available hashing/compression algorithms:

`phar help`

- Compress or uncompress files and directories in a Phar file:

`phar compress -f {{path/to/phar_file}} -c {{algorithm}}`

- Get information about a Phar file:

`phar info -f {{path/to/phar_file}}`

- Sign a Phar file with a specific hash algorithm:

`phar sign -f {{path/to/phar_file}} -h {{algorithm}}`

- Sign a Phar file with an OpenSSL private key:

`phar sign -f {{path/to/phar_file}} -h openssl -y {{path/to/private_key}}`
"
nmtui,,,"# nmtui

> Text user interface for controlling NetworkManager.
> Use arrow keys to navigate, enter to select an option.

- Open the user interface:

`nmtui`

- Show a list of available connections, with the option to activate or deactivate them:

`nmtui connect`

- Connect to a given network:

`nmtui connect {{name|uuid|device|SSID}}`

- Edit/Add/Delete a given network:

`nmtui edit {{name|id}}`

- Set the system hostname:

`nmtui hostname`
"
alpine,,,"# alpine

> An email client and Usenet newsgroup program with a pico/nano-inspired interface.
> Supports most modern email services through IMAP.

- Open alpine normally:

`alpine`

- Open alpine directly to the message composition screen to send an email to a given email address:

`alpine {{email@example.net}}`

- Quit alpine:

`'q' then 'y'`
"
file,,"
FILE(1) 		  BSD General Commands Manual		       FILE(1)

NAME
     file -- determine file type

SYNOPSIS
     file [-bcdDhiIkLnNprsvz] [--extension] [--mime-encoding] [--mime-type]
	  [-f namefile] [-m magicfiles] [-P name=value] [-M magicfiles] file
     file -C [-m magicfiles]
     file [--help]

DESCRIPTION
     This manual page documents version 5.04 of the file command.

     file tests each argument in an attempt to classify it.  There are three
     sets of tests, performed in this order: filesystem tests, magic tests,
     and language tests.  The first test that succeeds causes the file type to
     be printed.

     The type printed will usually contain one of the words text (the file
     contains only printing characters and a few common control characters and
     is probably safe to read on an ASCII terminal), executable (the file con-
     tains the result of compiling a program in a form understandable to some
     UNIX kernel or another), or data meaning anything else (data is usually
     ``binary'' or non-printable).  Exceptions are well-known file formats
     (core files, tar archives) that are known to contain binary data.	When
     modifying magic files or the program itself, make sure to preserve these
     keywords.	Users depend on knowing that all the readable files in a
     directory have the word ``text'' printed.	Don't do as Berkeley did and
     change ``shell commands text'' to ``shell script''.

     The filesystem tests are based on examining the return from a stat(2)
     system call.  The program checks to see if the file is empty, or if it's
     some sort of special file.  Any known file types appropriate to the sys-
     tem you are running on (sockets, symbolic links, or named pipes (FIFOs)
     on those systems that implement them) are intuited if they are defined in
     the system header file <sys/stat.h>.

     The magic tests are used to check for files with data in particular fixed
     formats.  The canonical example of this is a binary executable (compiled
     program) a.out file, whose format is defined in <elf.h>, <a.out.h> and
     possibly <exec.h> in the standard include directory.  These files have a
     ``magic number'' stored in a particular place near the beginning of the
     file that tells the UNIX operating system that the file is a binary exe-
     cutable, and which of several types thereof.  The concept of a ``magic''
     has been applied by extension to data files.  Any file with some invari-
     ant identifier at a small fixed offset into the file can usually be
     described in this way.  The information identifying these files is read
     from the compiled magic file /usr/share/file/magic.mgc, or the files in
     the directory /usr/share/file/magic if the compiled file does not exist.

     If a file does not match any of the entries in the magic file, it is
     examined to see if it seems to be a text file.  ASCII, ISO-8859-x, non-
     ISO 8-bit extended-ASCII character sets (such as those used on Macintosh
     and IBM PC systems), UTF-8-encoded Unicode, UTF-16-encoded Unicode, and
     EBCDIC character sets can be distinguished by the different ranges and
     sequences of bytes that constitute printable text in each set.  If a file
     passes any of these tests, its character set is reported.	ASCII,
     ISO-8859-x, UTF-8, and extended-ASCII files are identified as ``text''
     because they will be mostly readable on nearly any terminal; UTF-16 and
     EBCDIC are only ``character data'' because, while they contain text, it
     is text that will require translation before it can be read.  In addi-
     tion, file will attempt to determine other characteristics of text-type
     files.  If the lines of a file are terminated by CR, CRLF, or NEL,
     instead of the Unix-standard LF, this will be reported.  Files that con-
     tain embedded escape sequences or overstriking will also be identified.

     Once file has determined the character set used in a text-type file, it
     will attempt to determine in what language the file is written.  The lan-
     guage tests look for particular strings (cf.  <names.h>) that can appear
     anywhere in the first few blocks of a file.  For example, the keyword .br
     indicates that the file is most likely a troff(1) input file, just as the
     keyword struct indicates a C program.  These tests are less reliable than
     the previous two groups, so they are performed last.  The language test
     routines also test for some miscellany (such as tar(1) archives).

     Any file that cannot be identified as having been written in any of the
     character sets listed above is simply said to be ``data''.

OPTIONS
     --apple
	     Causes the file command to output the file type and creator code
	     as used by older MacOS versions. The code consists of eight let-
	     ters, the first describing the file type, the latter the creator.

     -b, --brief
	     Do not prepend filenames to output lines (brief mode).

     -C, --compile
	     Write a magic.mgc output file that contains a pre-parsed version
	     of the magic file or directory.

     -c, --checking-printout
	     Cause a checking printout of the parsed form of the magic file.
	     This is usually used in conjunction with the -m flag to debug a
	     new magic file before installing it.

     -C, --compile
	     Write a magic.mgc output file that contains a pre-parsed version
	     of the magic file or directory.

     -d      Apply the default system tests; this is the default behavior
	     unless -M is specified.

     -D      Print debugging messages.

     -E      On filesystem errors (file not found etc), instead of handling
	     the error as regular output as POSIX mandates and keep going,
	     issue an error message and exit.

     -e, --exclude testname
	     Exclude the test named in testname from the list of tests made to
	     determine the file type.  Valid test names are:

	     apptype   EMX application type (only on EMX).

	     ascii     Various types of text files (this test will try to
		       guess the text encoding, irrespective of the setting of
		       the `encoding' option).

	     encoding  Different text encodings for soft magic tests.

	     tokens    Ignored for backwards compatibility.

	     cdf       Prints details of Compound Document Files.

	     compress  Checks for, and looks inside, compressed files.

	     elf       Prints ELF file details, provided soft magic tests are
		       enabled and the elf magic is found.

	     soft      Consults magic files.

	     tar       Examines tar files.

     --extension
	     Print a slash-separated list of valid extensions for the file
	     type found.

     -F, --separator separator
	     Use the specified string as the separator between the filename
	     and the file result returned.  Defaults to `:'.

     -f, --files-from namefile
	     Read the names of the files to be examined from namefile (one per
	     line) before the argument list.  Either namefile or at least one
	     filename argument must be present; to test the standard input,
	     use `-' as a filename argument.  Please note that namefile is
	     unwrapped and the enclosed filenames are processed when this
	     option is encountered and before any further options processing
	     is done.  This allows one to process multiple lists of files with
	     different command line arguments on the same file invocation.
	     Thus if you want to set the delimiter, you need to do it before
	     you specify the list of files, like: ``-F @ -f namefile'',
	     instead of: ``-f namefile -F @''.

     -h, --no-dereference
	     option causes symlinks not to be followed (on systems that sup-
	     port symbolic links).

     -i      If the file is a regular file, do not classify its contents.

     -I, --mime
	     Causes the file command to output mime type strings rather than
	     the more traditional human readable ones.	Thus it may say
	     `text/plain; charset=us-ascii' rather than ``ASCII text''.

     --mime-type, --mime-encoding
	     Like -I, but print only the specified element(s).

     -k, --keep-going
	     Don't stop at the first match, keep going.  Subsequent matches
	     will be have the string `\012- ' prepended.  (If you want a new-
	     line, see the -r option.)	The magic pattern with the highest
	     strength (see the -l option) comes first.

     -l, --list
	     Shows a list of patterns and their strength sorted descending by
	     magic(4) strength which is used for the matching (see also the -k
	     option).

     -L, --dereference
	     option causes symlinks to be followed, as the like-named option
	     in ls(1) (on systems that support symbolic links).  This is the
	     default behavior.

     -m, --magic-file list
	     Specify an alternate list of files and directories containing
	     magic.  This can be a single item, or a colon-separated list.  If
	     a compiled magic file is found alongside a file or directory, it
	     will be used instead.

     -M list
	     Like -m, except that the default rules are not applied unless -d
	     is specified.

     -n, --no-buffer
	     Force stdout to be flushed after checking each file.  This is
	     only useful if checking a list of files.  It is intended to be
	     used by programs that want filetype output from a pipe.

     -p, --preserve-date
	     On systems that support utime(3) or utimes(2), attempt to pre-
	     serve the access time of files analyzed, to pretend that file
	     never read them.

     -P, --parameter name=value
	     Set various parameter limits.

		   Name 	Default    Explanation
		   indir	15	   recursion limit for indirect magic
		   name 	30	   use count limit for name/use magic
		   elf_notes	256	   max ELF notes processed
		   elf_phnum	128	   max ELF program sections processed
		   elf_shnum	32768	   max ELF sections processed
		   regex	8192	   length limit for regex searches

     -r, --raw
	     No operation, included for historical compatibility.

     -s, --special-files
	     Normally, file only attempts to read and determine the type of
	     argument files which stat(2) reports are ordinary files.  This
	     prevents problems, because reading special files may have pecu-
	     liar consequences.  Specifying the -s option causes file to also
	     read argument files which are block or character special files.
	     This is useful for determining the filesystem types of the data
	     in raw disk partitions, which are block special files.  This
	     option also causes file to disregard the file size as reported by
	     stat(2) since on some systems it reports a zero size for raw disk
	     partitions.

     -v, --version
	     Print the version of the program and exit.

     -z, --uncompress
	     Try to look inside compressed files.

     -Z, --uncompress-noreport
	     Try to look inside compressed files, but report information about
	     the contents only not the compression.

     -0, --print0
	     Output a null character `\0' after the end of the filename.  Nice
	     to cut(1) the output.  This does not affect the separator, which
	     is still printed.

     --help  Print a help message and exit.

FILES
     /usr/share/file/magic.mgc	Default compiled list of magic.
     /usr/share/file/magic	Directory containing default magic files.

ENVIRONMENT
     The environment variable MAGIC can be used to set the default magic file
     name.  file adds ``.mgc'' to the value of this variable as appropriate.
     However, file has to exist in order for file.mime to be considered.

LEGACY DESCRIPTION
     In legacy mode, the -D, -I, and -M options do not exist.

     The -d, -i, and -r options behave differently.  The -d option provides
     debugging information (same as -D in conformance mode).  The -i option
     displays mime type information (same as -I in conformance mode).  The -r
     option will disable the translation of unprintable characters (by
     default, this translation is already disabled in conformance mode).

     Furthermore, the -h option becomes the default symlink behavior (don't
     follow symlinks) unless POSIXLY_CORRECT is set.

     For more information about legacy mode, see compat(5).

SEE ALSO
     hexdump(1), od(1), strings(1), magic(5), otool(1), compat(5)

STANDARDS CONFORMANCE
     This program conforms to Version 3 of the Single UNIX Specification
     (``SUSv3'').  Its behavior is mostly compatible with the System V program
     of the same name.	This version knows more magic, however, so it will
     produce different (albeit more accurate) output in many cases.

     The one significant difference between this version and System V is that
     this version treats any white space as a delimiter, so that spaces in
     pattern strings must be escaped.  For example,

	   >10	   string  language impress	   (imPRESS data)

     in an existing magic file would have to be changed to

	   >10	   string  language\ impress	   (imPRESS data)

     In addition, in this version, if a pattern string contains a backslash,
     it must be escaped.  For example

	   0	   string	   \begindata	   Andrew Toolkit document

     in an existing magic file would have to be changed to

	   0	   string	   \\begindata	   Andrew Toolkit document

     SunOS releases 3.2 and later from Sun Microsystems include a file command
     derived from the System V one, but with some extensions.  This version
     differs from Sun's only in minor ways.  It includes the extension of the
     `&' operator, used as, for example,

	   >16	   long&0x7fffffff >0		   not stripped

MAGIC DIRECTORY
     The magic file entries have been collected from various sources, mainly
     USENET, and contributed by various authors.  Christos Zoulas (address
     below) will collect additional or corrected magic file entries.  A con-
     solidation of magic file entries will be distributed periodically.

     The order of entries in the magic file is significant.  Depending on what
     system you are using, the order that they are put together may be incor-
     rect.  If your old file command uses a magic file, keep the old magic
     file around for comparison purposes (rename it to
     /usr/share/file/magic.orig).

EXAMPLES
	   $ file file.c file /dev/{wd0a,hda}
	   file.c:   C program text
	   file:     ELF 32-bit LSB executable, Intel 80386, version 1 (SYSV),
		     dynamically linked (uses shared libs), stripped
	   /dev/wd0a: block special (0/0)
	   /dev/hda: block special (3/0)

	   $ file -s /dev/wd0{b,d}
	   /dev/wd0b: data
	   /dev/wd0d: x86 boot sector

	   $ file -s /dev/hda{,1,2,3,4,5,6,7,8,9,10}
	   /dev/hda:   x86 boot sector
	   /dev/hda1:  Linux/i386 ext2 filesystem
	   /dev/hda2:  x86 boot sector
	   /dev/hda3:  x86 boot sector, extended partition table
	   /dev/hda4:  Linux/i386 ext2 filesystem
	   /dev/hda5:  Linux/i386 swap file
	   /dev/hda6:  Linux/i386 swap file
	   /dev/hda7:  Linux/i386 swap file
	   /dev/hda8:  Linux/i386 swap file
	   /dev/hda9:  empty
	   /dev/hda10: empty

	   $ file -i file.c file /dev/{wd0a,hda}
	   file.c:	text/x-c
	   file:	application/x-executable
	   /dev/hda:	application/x-not-regular-file
	   /dev/wd0a:	application/x-not-regular-file


HISTORY
     There has been a file command in every UNIX since at least Research
     Version 4 (man page dated November, 1973).  The System V version intro-
     duced one significant major change: the external list of magic types.
     This slowed the program down slightly but made it a lot more flexible.

     This program, based on the System V version, was written by Ian Darwin
     <ian@darwinsys.com> without looking at anybody else's source code.

     John Gilmore revised the code extensively, making it better than the
     first version.  Geoff Collyer found several inadequacies and provided
     some magic file entries.  Contributions of the `&' operator by Rob McMa-
     hon, <cudcv@warwick.ac.uk>, 1989.

     Guy Harris, <guy@netapp.com>, made many changes from 1993 to the present.

     Primary development and maintenance from 1990 to the present by Christos
     Zoulas <christos@astron.com>.

     Altered by Chris Lowth <chris@lowth.com>, 2000: handle the -I option to
     output mime type strings, using an alternative magic file and internal
     logic.

     Altered by Eric Fischer <enf@pobox.com>, July, 2000, to identify charac-
     ter codes and attempt to identify the languages of non-ASCII files.

     Altered by Reuben Thomas <rrt@sc3d.org>, 2007-2011, to improve MIME sup-
     port, merge MIME and non-MIME magic, support directories as well as files
     of magic, apply many bug fixes, update and fix a lot of magic, improve
     the build system, improve the documentation, and rewrite the Python bind-
     ings in pure Python.

     The list of contributors to the `magic' directory (magic files) is too
     long to include here.  You know who you are; thank you.  Many contribu-
     tors are listed in the source files.

LEGAL NOTICE
     Copyright (c) Ian F. Darwin, Toronto, Canada, 1986-1999.  Covered by the
     standard Berkeley Software Distribution copyright; see the file COPYING
     in the source distribution.

     The files tar.h and is_tar.c were written by John Gilmore from his pub-
     lic-domain tar(1) program, and are not covered by the above license.

RETURN CODE
     file returns 0 on success, and non-zero on error.

BUGS
     Please report bugs and send patches to the bug tracker at
     http://bugs.gw.com/ or the mailing list at <file@mx.gw.com> (visit
     http://mx.gw.com/mailman/listinfo/file first to subscribe).

TODO
     Fix output so that tests for MIME and APPLE flags are not needed all over
     the place, and actual output is only done in one place.  This needs a
     design.  Suggestion: push possible outputs on to a list, then pick the
     last-pushed (most specific, one hopes) value at the end, or use a default
     if the list is empty.  This should not slow down evaluation.

     The handling of MAGIC_CONTINUE and printing \012- between entries is
     clumsy and complicated; refactor and centralize.

     Some of the encoding logic is hard-coded in encoding.c and can be moved
     to the magic files if we had a !:charset annotation

     Continue to squash all magic bugs.  See Debian BTS for a good source.

     Store arbitrarily long strings, for example for %s patterns, so that they
     can be printed out.  Fixes Debian bug #271672.  This can be done by allo-
     cating strings in a string pool, storing the string pool at the end of
     the magic file and converting all the string pointers to relative offsets
     from the string pool.

     Add syntax for relative offsets after current level (Debian bug #466037).

     Make file -ki work, i.e. give multiple MIME types.

     Add a zip library so we can peek inside Office2007 documents to print
     more details about their contents.

     Add an option to print URLs for the sources of the file descriptions.

     Combine script searches and add a way to map executable names to MIME
     types (e.g. have a magic value for !:mime which causes the resulting
     string to be looked up in a table).  This would avoid adding the same
     magic repeatedly for each new hash-bang interpreter.

     When a file descriptor is available, we can skip and adjust the buffer
     instead of the hacky buffer management we do now.

     Fix ``name'' and ``use'' to check for consistency at compile time (dupli-
     cate ``name'', ``use'' pointing to undefined ``name'' ).  Make ``name'' /
     ``use'' more efficient by keeping a sorted list of names.	Special-case ^
     to flip endianness in the parser so that it does not have to be escaped,
     and document it.

     If the offsets specified internally in the file exceed the buffer size (
     HOWMANY variable in file.h), then we don't seek to that offset, but we
     give up.  It would be better if buffer managements was done when the file
     descriptor is available so move around the file.  One must be careful
     though because this has performance (and thus security considerations).

AVAILABILITY
     You can obtain the original author's latest version by anonymous FTP on
     ftp.astron.com in the directory /pub/file/file-X.YZ.tar.gz.

BSD			       October 19, 2016 			   BSD
","# file

> Determine file type.

- Give a description of the type of the specified file. Works fine for files with no file extension:

`file {{filename}}`

- Look inside a zipped file and determine the file type(s) inside:

`file -z {{foo.zip}}`

- Allow file to work with special or device files:

`file -s {{filename}}`

- Don't stop at first file type match; keep going until the end of the file:

`file -k {{filename}}`

- Determine the mime encoding type of a file:

`file -i {{filename}}`
"
mdadm,,,"# mdadm

> RAID management utility.

- Create array:

`mdadm --create {{/path/to/raid_device_file}} --level {{raid_level}} --raid-devices {{number_of_disks}} {{/path/to/disk_device_file}}`

- Stop array:

`mdadm -S {{/path/to/raid_device_file}}`

- Mark disk as failed:

`mdadm {{/path/to/raid_device_file}} -f {{/path/to/disk_device_file}}`

- Remove disk:

`mdadm {{/path/to/raid_device_file}} -r {{/path/to/disk_device_file}}`

- Add disk to array:

`mdadm {{/path/to/raid_device_file}} -a {{/path/to/disk_device_file}}`

- Show RAID info:

`mdadm -D {{/path/to/raid_device_file}}`
"
nsenter,https://github.com/jpetazzo/nsenter/,,"# nsenter

> Run a new command in a running process' namespace.
> Particularly useful for docker images or chroot jails.
> More information: <https://github.com/jpetazzo/nsenter/>.

- Run command in existing processes network namespace:

`nsenter -t {{pid}} -n {{command}} {{command_arguments}}`

- Run a new command in an existing processes ps-table namespace:

`nsenter -t {{pid}} -p {{command}} {{command_arguments}}`

- Run command in existing processes IPC namespace:

`nsenter -t {{pid}} -i {{command}} {{command_arguments}}`
"
ndctl,,,"# ndctl

> Utility for managing Non-Volatile DIMMs.

- Create an 'fsdax' mode namespace:

`ndctl create-namespace --mode={{fsdax}}`

- Change the mode of a namespace to 'raw':

`ndctl create-namespace --reconfigure={{namespaceX.Y}} --mode={{raw}}`

- Check a sector mode namespace for consistency, and repair if needed:

`ndctl check-namespace --repair {{namespaceX.Y}}`

- List all namespaces, regions, and buses (including disabled ones):

`ndctl list --namespaces --regions --buses --idle`

- List a specific namespace and include lots of additional information:

`ndctl list -vvv --namespace={{namespaceX.Y}}`

- Run a monitor to watch for SMART health events for NVDIMMs on the 'ACPI.NFIT' bus:

`ndctl monitor --bus={{ACPI.NFIT}}`

- Remove a namespace (when applicable) or reset it to an initial state:

`ndctl destroy-namespace --force {{namespaceX.Y}}`
"
dpkg-query,,,"# dpkg-query

> A tool that shows information about installed packages.

- List all installed packages:

`dpkg-query -l`

- List installed packages matching a pattern:

`dpkg-query -l '{{pattern}}'`

- List all files installed by a package:

`dpkg-query -L {{package_name}}`

- Show information about a package:

`dpkg-query -s {{package_name}}`
"
xsetwacom,,,"# xsetwacom

> Command line tool to change settings for Wacom pen tablets at runtime.

- List all the available wacom devices. The device name is in the first column:

`xsetwacom list`

- Set Wacom area to specific screen. Get name of the screen with `xrandr`:

`xsetwacom set ""{{device_name}}"" MapToOutput {{screen}}`

- Set mode to relative (like a mouse) or absolute (like a pen) mode:

`xsetwacom set ""{{device_name}}"" Mode ""{{Relative|Absolute}}""`

- Rotate the input (useful for tablet-PC when rotating screen) by 0|90|180|270 degrees from ""natural"" rotation:

`xsetwacom set ""{{device_name}}"" Rotate {{none|half|cw|ccw}}`

- Set button to only work when the tip of the pen is touching the tablet:

`xsetwacom set ""{{device_name}}"" TabletPCButton ""on""`
"
setfacl,,,"# setfacl

> Set file access control lists (ACL).

- Modify ACL of a file for user with read and write access:

`setfacl -m u:{{username}}:rw {{file}}`

- Modify default ACL of a file for all users:

`setfacl -d -m u::rw {{file}}`

- Remove ACL of a file for an user:

`setfacl -x u:{{username}} {{file}}`

- Remove all ACL entries of a file:

`setfacl -b {{file}}`
"
sshuttle,,,"# sshuttle

> Transparent proxy server that tunnels traffic over an SSH connection.
> Doesn't require root or any special setup on the remote SSH server, though root access on the local machine is prompted for.

- Forward all IPv4 TCP traffic via a remote SSH server:

`sshuttle --remote={{username}}@{{sshserver}} {{0.0.0.0/0}}`

- Also forward all DNS traffic to the server's default DNS resolver:

`sshuttle --dns --remote={{username}}@{{sshserver}} {{0.0.0.0/0}}`

- Forward all traffic except that which is bound for a specific subnet:

`sshuttle --remote={{username}}@{{sshserver}} {{0.0.0.0/0}} --exclude {{192.168.0.1/24}}`

- Use the tproxy method to forward all IPv4 and IPv6 traffic:

`sshuttle --method=tproxy --remote={{username}}@{{sshserver}} {{0.0.0.0/0}} {{::/0}} --exclude={{your_local_ip_address}} --exclude={{ssh_server_ip_address}}`
"
eyeD3,https://eyed3.readthedocs.io/en/latest/,,"# eyeD3

> Read and manipulate metadata of MP3 files.
> More information: <https://eyed3.readthedocs.io/en/latest/>.

- View information about an MP3 file:

`eyeD3 {{filename.mp3}}`

- Set the title of an MP3 file:

`eyeD3 --title {{""A Title""}} {{filename.mp3}}`

- Set the album of all the MP3 files in a directory:

`eyeD3 --album {{""Album Name""}} {{*.mp3}}`

- Set the front cover art for an MP3 file:

`eyeD3 --add-image {{front_cover.jpeg}}:FRONT_COVER: {{filename.mp3}}`
"
perl-rename,,,"# rename

> Rename multiple files.
> NOTE: this page refers to the command from the `perl-rename` Arch Linux package.

- Rename files using a Perl Common Regular Expression (substitute 'foo' with 'bar' wherever found):

`rename {{'s/foo/bar/'}} {{*}}`

- Dry-run - display which renames would occur without performing them:

`rename -n {{'s/foo/bar/'}} {{*}}`

- Force renaming even if the operation would remove existing destination files:

`rename -f {{'s/foo/bar/'}} {{*}}`

- Convert filenames to lower case (use `-f` in case-insensitive filesystems to prevent ""already exists"" errors):

`rename 'y/A-Z/a-z/' {{*}}`

- Replace whitespace with underscores:

`rename 's/\s+/_/g' {{*}}`
"
xman,,,"# xman

> Manual page viewer for X Window System.

- Start xman in three-button window:

`xman`

- Open the manual page output stored in a given file:

`xman -helpfile {{filename}}`

- Show both manual page and directory:

`xman -bothshown`
"
nologin,,"
NOLOGIN(8)		  BSD System Manager's Manual		    NOLOGIN(8)

NAME
     nologin -- politely refuse a login

SYNOPSIS
     nologin

DESCRIPTION
     The nologin utility displays a message that an account is not available
     and exits non-zero.  It is intended as a replacement shell field for
     accounts that have been disabled.

     To disable all logins, investigate nologin(5).

SEE ALSO
     login(1), nologin(5)

HISTORY
     The nologin utility appeared in 4.4BSD.

BSD				 June 19, 1993				   BSD
","# nologin

> Alternative shell that prevents a user from logging in.

- Set a user's login shell to `nologin` to prevent the user from logging in:

`chsh -s {{user}} nologin`

- Customize message for users with the login shell of `nologin`:

`echo ""{{declined_login_message}}"" > /etc/nologin.txt`
"
apt-mark,,,"# apt-mark

> Utility to change the status of installed packages.

- Mark a package as automatically installed:

`sudo apt-mark auto {{package_name}}`

- Hold a package at its current version and prevent updates to it:

`sudo apt-mark hold {{package_name}}`

- Allow a package to be updated again:

`sudo apt-mark unhold {{package_name}}`

- Show manually installed packages:

`apt-mark showmanual`

- Show held packages that aren't being updated:

`apt-mark showhold`
"
vmstat,https://linux.die.net/man/8/vmstat,,"# vmstat

> Report information about processes, memory, paging, block IO, traps, disks and CPU activity.
> More information: <https://linux.die.net/man/8/vmstat>.

- Display virtual memory statistics:

`vmstat`

- Display reports every 2 seconds for 5 times:

`vmstat {{2}} {{5}}`
"
findmnt,,,"# findmnt

> Find your filesystem.

- List all mounted filesystems:

`findmnt`

- Search for a device:

`findmnt {{/dev/sdb1}}`

- Search for a mountpoint:

`findmnt {{/}}`

- Find filesystems in specific type:

`findmnt -t {{ext4}}`

- Find filesystems with specific label:

`findmnt LABEL={{BigStorage}}`
"
openrc,https://wiki.gentoo.org/wiki/OpenRC,,"# openrc

> The OpenRC service manager.
> See also `rc-status`, `rc-update`, and `rc-service`.
> More information: <https://wiki.gentoo.org/wiki/OpenRC>.

- Change to a specific runlevel:

`sudo openrc {{runlevel_name}}`

- Change to a specific runlevel, but don't stop any existing services:

`sudo openrc --no-stop {{runlevel_name}}`
"
fc-pattern,,"FC-PATTERN(1)							 FC-PATTERN(1)



NAME
       fc-pattern - parse and show pattern

SYNOPSIS
       fc-pattern  [ -cdVh ]  [ --config ]  [ --default ]  [  [ -f format ]  [
       --format format ]  ]  [ --version ]  [ --help ]

	[ pattern  [ element... ]   ]

DESCRIPTION
       fc-pattern parses pattern (empty pattern  by  default)  and  shows  the
       parsed  result.	If --config is given, config substitution is performed
       on the pattern before being displayed.  If --default is given,  default
       substitution is performed on the pattern before being displayed.

       If any elements are specified, only those are printed.

OPTIONS
       This  program  follows  the  usual  GNU	command line syntax, with long
       options starting with  two  dashes  (`-').  A  summary  of  options  is
       included below.

       -c     Perform config substitution on pattern.

       -d     Perform default substitution on pattern.

       -f     Format output according to the format specifier format.

       -V     Show version of the program and exit.

       -h     Show summary of options.

       pattern
	      Parses and displays pattern (uses empty pattern by default).

       element
	      If set, the element property is displayed for parsed pattern.

SEE ALSO
       FcNameParse(3)  FcConfigSubstitute(3) FcDefaultSubstitute(3) FcPattern-
       Print(3)  FcPatternFormat(3)  fc-cat(1)	fc-cache(1)   fc-list(1)   fc-
       match(1) fc-query(1) fc-scan(1)

       The  fontconfig	user's	guide, in HTML format: /usr/share/doc/fontcon-
       fig/fontconfig-user.html.

AUTHOR
       This manual page was updated by Behdad Esfahbod <behdad@behdad.org>.



				 Apr 20, 2010			 FC-PATTERN(1)
","# fc-pattern

> Shows information about a font matching a pattern.

- Display default information about a font:

`fc-pattern -d '{{DejaVu Serif}}'`
"
nmcli-connection,,,"# nmcli connection

> Connection management with NetworkManager.

- List all NetworkManager connections (shows name, uuid, type and device):

`nmcli connection`

- Activate a connection by specifying an uuid:

`nmcli connection up uuid {{uuid}}`

- Deactivate a connection:

`nmcli connection down uuid {{uuid}}`

- Create an auto-configured dual stack connection:

`nmcli connection add ifname {{interface_name}} type {{ethernet}} ipv4.method {{auto}} ipv6.method {{auto}}`

- Create a static IPv6-only connection:

`nmcli connection add ifname {{interface_name}} type {{ethernet}} ip6 {{2001:db8::2/64}} gw6 {{2001:db8::1}} ipv6.dns {{2001:db8::1}} ipv4.method {{ignore}}`

- Create a static IPv4-only connection:

`nmcli connection add ifname {{interface_name}} type {{ethernet}} ip4 {{10.0.0.7/8}} gw4 {{10.0.0.1}} ipv4.dns {{10.0.0.1}} ipv6.method {{ignore}}`
"
blkid,,,"# blkid

> Lists all recognized partitions and their Universally Unique Identifier (UUID).

- List all partitions:

`sudo blkid`

- List all partitions in a table, including current mountpoints:

`sudo blkid -o list`
"
swapoff,,,"# swapoff

> Disables device or file for swapping.

- Disable a given swap partition:

`swapoff {{/dev/sdb7}}`

- Disable a given swap file:

`swapoff {{path/to/file}}`

- Disable all swap areas:

`swapoff -a`

- Disable swap by label of a device or file:

`swapoff -L {{swap1}}`
"
lastlog,,"
UTMP(5) 		    BSD File Formats Manual		       UTMP(5)

NAME
     utmp, wtmp, lastlog -- login records (DEPRECATED)

SYNOPSIS
     #include <utmp.h>

DESCRIPTION
     The interfaces in file <utmp.h> are all DEPRECATED and are only provided
     for compatibility with previous releases of Mac OS X.  See pututxline(3)
     and utmpx(5) for the supported interfaces.

     <utmp.h> declares the structures used to record information about current
     users in the file utmp, logins and logouts in the file wtmp, and last
     logins in the file lastlog.  The time stamps of date changes, shutdowns
     and reboots are also logged in the wtmp file.

     These files can grow rapidly on busy systems, daily or weekly rotation is
     recommended.  If any of these files do not exist, it is not created.
     These files must be created manually and are normally maintained in
     either the script /etc/daily or the script /etc/weekly.  (See cron(8).)

	   #define _PATH_UTMP	   ""/var/run/utmp""
	   #define _PATH_WTMP	   ""/var/log/wtmp""
	   #define _PATH_LASTLOG   ""/var/log/lastlog""

	   #define UT_NAMESIZE	   8
	   #define UT_LINESIZE	   8
	   #define UT_HOSTSIZE	   16

	   struct lastlog {
		   time_t  ll_time;
		   char    ll_line[UT_LINESIZE];
		   char    ll_host[UT_HOSTSIZE];
	   };

	   struct utmp {
		   char    ut_line[UT_LINESIZE];
		   char    ut_name[UT_NAMESIZE];
		   char    ut_host[UT_HOSTSIZE];
		   time_t  ut_time;
	   };

     Each time a user logs in, the login program looks up the user's UID in
     the file lastlog. If it is found, the timestamp of the last time the user
     logged in, the terminal line and the hostname are written to the standard
     output. (Providing the login is not quiet, see login(1).)	The login pro-
     gram then records the new login time in the file lastlog.

     After the new lastlog record is written , the file utmp is opened and the
     utmp record for the user inserted.  This record remains there until the
     user logs out at which time it is deleted.  The utmp file is used by the
     programs rwho(1), users(1), w(1), and who(1).

     Next, the login program opens the file wtmp, and appends the user's utmp
     record.  The same utmp record, with an updated time stamp is later
     appended to the file when the user logs out. (See launchd(8).)  The wtmp
     file is used by the programs last(1) and ac(8).

     In the event of a date change, a shutdown or reboot, the following items
     are logged in the wtmp file.

     reboot
     shutdown	 A system reboot or shutdown has been initiated.  The charac-
		 ter `~' is placed in the field ut_line, and reboot or
		 shutdown in the field ut_name.  (See shutdown(8) and
		 reboot(8).)

     date	 The system time has been manually or automatically updated.
		 (See date(1).)  The command name date is recorded in the
		 field ut_name.  In the field ut_line, the character `|' indi-
		 cates the time prior to the change, and the character `{'
		 indicates the new time.

FILES
     (These files no longer exist in 10.5 or later.)

     /var/run/utmp     The utmp file.
     /var/log/wtmp     The wtmp file.
     /var/log/lastlog  The lastlog file.

SEE ALSO
     last(1), login(1), who(1), ac(8), launchd(8)

HISTORY
     A utmp and wtmp file format appeared in Version 6 AT&T UNIX.  The lastlog
     file format appeared in 3.0BSD.

4th Berkeley Distribution	March 17, 1994	     4th Berkeley Distribution
","# lastlog

> Show the most recent login of all users or of a given user.

- Display the most recent login of all users:

`lastlog`

- Display lastlog record of the specified user:

`lastlog -u {{username}}`

- Display records before than 7 days:

`lastlog -b {{7}}`

- Display records more recent than 3 days:

`lastlog -t {{3}}`
"
pvs,https://www.man7.org/linux/man-pages/man8/pvs.8.html,,"# pvs

> Display information about LVM physical volumes.
> More information: <https://www.man7.org/linux/man-pages/man8/pvs.8.html>.

- Display information about physical volumes:

`pvs`

- Display non-physical volumes:

`pvs -a`

- Change default display to show more details:

`pvs -v`

- Display only specific fields:

`pvs -o {{field_name_1}},{{field_name_2}}`

- Append field to default display:

`pvs -o +{{field_name}}`

- Suppress heading line:

`pvs --noheadings`

- Use separator to separate fields:

`pvs --separator {{special_character}}`
"
lslocks,,,"# lslocks

> List local system locks.

- List all local system locks:

`lslocks`

- List locks with defined column headers:

`lslocks --output {{PID}},{{COMMAND}},{{PATH}}`

- List locks producing a raw output (no columns), and without column headers:

`lslocks --raw --noheadings`

- List locks by PID input:

`lslocks --pid {{PID}}`

- List locks with json output to `stdout`:

`lslocks --json`
"
pasuspender,,,"# pasuspender

> Temporarily suspends `pulseaudio` while another command is running to allow access to alsa.

- Suspend pulseaudio while running `jackd`:

`pasuspender -- {{jackd -d alsa --device hw:0}}`
"
timeshift,https://github.com/teejee2008/timeshift,,"# timeshift

> System restore utility.
> More information: <https://github.com/teejee2008/timeshift>.

- List snapshots:

`sudo timeshift --list`

- Create a new snapshot (if scheduled):

`sudo timeshift --check`

- Create a new snapshot (even if not scheduled):

`sudo timeshift --create`

- Restore a snapshot (selecting which snapshot to restore interactively):

`sudo timeshift --restore`

- Restore a specific snapshot:

`sudo timeshift --restore --snapshot '{{snapshot}}'`

- Delete a specific snapshot:

`sudo timeshift --delete --snapshot '{{snapshot}}'`
"
add-apt-repository,,,"# add-apt-repository

> Manages apt repository definitions.

- Add a new apt repository:

`add-apt-repository {{repository_spec}}`

- Remove an apt repository:

`add-apt-repository --remove {{repository_spec}}`

- Update the package cache after adding a repository:

`add-apt-repository --update {{repository_spec}}`

- Enable source packages:

`add-apt-repository --enable-source {{repository_spec}}`
"
guix-package,,,"# guix package

> Install, upgrade and remove Guix packages, or rollback to previous configurations.

- Install a new package:

`guix package -i {{package_name}}`

- Remove a package:

`guix package -r {{package_name}}`

- Search the package database for a regular expression:

`guix package -s ""{{search_pattern}}""`

- List installed packages:

`guix package -I`

- List generations:

`guix package -l`

- Roll back to the previous generation:

`guix package --roll-back`
"
playerctl,https://github.com/altdesktop/playerctl,,"# playerctl

> Utility to control different media players.
> More information: <https://github.com/altdesktop/playerctl>.

- Toggle play:

`playerctl play-pause`

- Next media:

`playerctl next`

- Previous media:

`playerctl previous`

- List all players:

`playerctl --list-all`

- Send a command to a specific player:

`playerctl --player={{player_name}} {{command}}`

- Send a command to all players:

`playerctl --all-players {{command}}`

- Show now playing:

`playerctl metadata --format ""Now playing: {{artist}} - {{album}} - {{title}}""`
"
lsb_release,,,"# lsb_release

> Provides certain LSB (Linux Standard Base) and distribution-specific information.

- Print all available information:

`lsb_release -a`

- Print a description (usually the full name) of the operating system:

`lsb_release -d`

- Print only the operating system name (ID), suppressing the field name:

`lsb_release -i -s`

- Print the release number and codename of the distribution, suppressing the field names:

`lsb_release -rcs`
"
opkg,,,"# opkg

> A lightweight package manager used to install OpenWrt packages.

- Install a package:

`opkg install {{package}}`

- Remove a package:

`opkg remove {{package}}`

- Update the list of available packages:

`opkg update`

- Upgrade all the installed packages:

`opkg upgrade`

- Upgrade one or more specific package(s):

`opkg upgrade {{package(s)}}`

- Display informations for a specific package:

`opkg info {{package}}`

- List all the available packages:

`opkg list`
"
usermod,,,"# usermod

> Modifies a user account.

- Change a user's name:

`usermod -l {{newname}} {{user}}`

- Add user to supplementary groups (mind the whitespace):

`usermod -a -G {{group1,group2}} {{user}}`

- Create a new home directory for a user and move their files to it:

`usermod -m -d {{/path/to/home}} {{user}}`
"
run-mailcap,,,"# run-mailcap

> Run MailCap Programs.
> Run mailcap view, see, edit, compose, print - execute programs via entries in the mailcap file (or any of its aliases) will use the given action to process each mime-type/file.

- Individual actions/programs on run-mailcap can be invoked with action flag:

`run-mailcap --action=ACTION [--option[=value]]`

- In simple language:

`run-mailcap --action=ACTION {{filename}}`

- Turn on extra information:

`run-mailcap --action=ACTION --debug {{filename}}`

- Ignore any ""copiousoutput"" directive and forward output to standard output:

`run-mailcap --action=ACTION --nopager {{filename}}`

- Display the found command without actually executing it:

`run-mailcap --action=ACTION --norun {{filename}}`
"
lynis,https://cisofy.com/documentation/lynis/,,"# lynis

> System and security auditing tool.
> More information: <https://cisofy.com/documentation/lynis/>.

- Check that Lynis is up-to-date:

`sudo lynis update info`

- Run a security audit of the system:

`sudo lynis audit system`

- Run a security audit of a Dockerfile:

`sudo lynis audit dockerfile {{path/to/dockerfile}}`
"
update-rc.d,,,"# update-rc.d

> Install and remove services which are System-V style init script links.
> Init scripts are in the /etc/init.d/.

- Install a service:

`update-rc.d {{mysql}} defaults`

- Enable a service:

`update-rc.d {{mysql}} enable`

- Disable a service:

`update-rc.d {{mysql}} disable`

- Forcibly remove a service:

`update-rc.d -f {{mysql}} remove`
"
vmware-checkvm,,,"# vmware-checkvm

> Checks to see if the current host is a VMWare VM or not.

- Return the current VMWare software version (exit status determines whether the system is a VM or not):

`vmware-checkvm`

- Return the VMWare hardware version:

`vmware-checkvm -h`
"
smbpasswd,,,"# smbpasswd

> Change a user's SMB password.
> Samba users must also have a local Unix account.

- Change the current user's SMB password:

`smbpasswd`

- Add a specified user to Samba and set password(user should already exist in system):

`smbpasswd -a {{username}}`

- Modify an existing Samba user's password:

`smbpasswd {{username}}`

- Delete a Samba user:

`smbpasswd -x {{username}}`
"
do-release-upgrade,,,"# do-release-upgrade

> The Ubuntu release upgrader.

- Upgrade to the latest release:

`sudo do-release-upgrade`

- Upgrade to the latest development release:

`sudo do-release-upgrade --devel-release`

- Upgrade to the latest proposed release:

`sudo do-release-upgrade --proposed`
"
archey,,,"# archey

> Simple tool for stylishly displaying system information.

- Show system information:

`archey`
"
nixos-rebuild,https://nixos.org/nixos/manual/#sec-changing-config,,"# nixos-rebuild

> Reconfigure a NixOS machine.
> More information: <https://nixos.org/nixos/manual/#sec-changing-config>.

- Build and switch to the new configuration, making it the boot default:

`sudo nixos-rebuild switch`

- Build and switch to the new configuration, making it the boot default and naming the boot entry:

`sudo nixos-rebuild switch -p {{name}}`

- Build and switch to the new configuration, making it the boot default and installing updates:

`sudo nixos-rebuild switch --upgrade`

- Rollback changes to the configuration, switching to the previous generation:

`sudo nixos-rebuild switch --rollback`

- Build the new configuration and make it the boot default without switching to it:

`sudo nixos-rebuild boot`

- Build and activate the new configuration, but don't make a boot entry (for testing purposes):

`sudo nixos-rebuild test`

- Build the configuration and open it in a virtual machine:

`sudo nixos-rebuild build-vm`
"
acpi,,,"# acpi

> Shows battery status or thermal information.

- Show battery information:

`acpi`

- Show thermal information:

`acpi -t`

- Show cooling device information:

`acpi -c`

- Show thermal information in Fahrenheit:

`acpi -tf`

- Show all information:

`acpi -V`
"
whiptail,,,"# whiptail

> Display text-based dialog boxes from shell scripts.

- Display a simple message:

`whiptail --title ""{{title}}"" --msgbox ""{{message}}"" {{height_in_chars}} {{width_in_chars}}`

- Display a boolean choice, returning the result through the exit code:

`whiptail --title ""{{title}}"" --yesno ""{{message}}"" {{height_in_chars}} {{width_in_chars}}`

- Customise the text on the yes / no buttons:

`whiptail --title ""{{title}}"" --yes-button ""{{text}}"" --no-button ""{{text}}"" --yesno ""{{message}}"" {{height_in_chars}} {{width_in_chars}}`

- Display a text input box:

`{{result_variable_name}}=""$(whiptail --title ""{{title}}"" --inputbox ""{{message}}"" {{height_in_chars}} {{width_in_chars}} {{default_text}} 3>&1 1>&2 2>&3)""`

- Display a password input box:

`{{result_variable_name}}=""$(whiptail --title ""{{title}}"" --passwordbox ""{{message}}"" {{height_in_chars}} {{width_in_chars}} 3>&1 1>&2 2>&3)""`

- Display a multiple-choice menu:

`{{result_variable_name}}=$(whiptail --title ""{{title}}"" --menu ""{{message}}"" {{height_in_chars}} {{width_in_chars}} {{menu_display_height}} ""{{value_1}}"" ""{{display_text_1}}"" ""{{value_n}}"" ""{{display_text_n}}"" ..... 3>&1 1>&2 2>&3)`
"
runcon,,,"# runcon

> Run a program in a different SELinux security context.
> With neither context nor command, print the current security context.

- Determine the current domain:

`runcon`

- Specify the domain to run a command in:

`runcon -t {{domain}}_t {{command}}`

- Specify the context role to run a command with:

`runcon -r {{role}}_r {{command}}`

- Specify the full context to run a command with:

`runcon {{user}}_u:{{role}}_r:{{domain}}_t {{command}}`
"
systemd-analyze,,,"# systemd-analyze

> Show timing details about the boot process of units (services, mount points, devices, sockets).

- List time of each unit to start up:

`systemd-analyze blame`

- Print a tree of the time critical chain of units:

`systemd-analyze critical-chain`
"
gedit,,,"# gedit

> Text editor of the GNOME Desktop project.

- Open a text file:

`gedit {{path/to/file}}`

- Open multiple text files:

`gedit {{file1 file2 ...}}`

- Open a text file with a specific encoding:

`gedit --encoding={{UTF-8}} {{path/to/file}}`

- Display a list of supported encodings:

`gedit --list-encodings`
"
zramctl,,,"# zramctl

> Setup and control zram devices.
> Use `mkfs` or `mkswap` to format zram devices to partitions.

- Check if zram is enabled:

`lsmod | grep -i zram`

- Enable zram with a dynamic number of devices (use `zramctl` to configure devices further):

`sudo modprobe zram`

- Enable zram with exactly 2 devices:

`sudo modprobe zram num_devices={{2}}`

- Find and initialise the next free zram device to a 2GB virtual drive using LZ4 compression:

`sudo zramctl --find --size {{2GB}} --algorithm {{lz4}}`

- List currently initialised devices:

`zramctl`
"
repquota,,"
REPQUOTA(8)		  BSD System Manager's Manual		   REPQUOTA(8)

NAME
     repquota -- summarize quotas for a file system

SYNOPSIS
     repquota [-g] [-u] [-v] filesystem ...
     repquota [-g] [-u] [-v] -a

DESCRIPTION
     Repquota prints a summary of the disk usage and quotas for the specified
     file systems.

     Available options:

     -a      Print the quotas of all the filesystems configured with a quota
	     mount option file at its root.

     -g      Print only group quotas (the default is to print both group and
	     user quotas if they exist).

     -u      Print only user quotas (the default is to print both group and
	     user quotas if they exist).

     -v      Print a header line before printing each filesystem quotas.

     For each user or group, the current number of files and amount of space
     (in kilobytes) is printed, along with any quotas created with edquota(8).

     Only members of the operator group or the super-user may use this com-
     mand.

FILES
     Each of the following quota files is located at the root of the mounted
     filesystem.  The mount option files are empty files whose existence indi-
     cates that quotas are to be enabled for that filesystem.

     .quota.user       data file containing user quotas
     .quota.group      data file containing group quotas
     .quota.ops.user   mount option file used to enable user quotas
     .quota.ops.group  mount option file used to enable group quotas

SEE ALSO
     quota(1), quotactl(2), edquota(8), quotacheck(8), quotaon(8)

DIAGNOSTICS
     Various messages about inaccessible files; self-explanatory.

HISTORY
     The repquota command appeared in 4.2BSD.

4.2 Berkeley Distribution	March 28, 2002	     4.2 Berkeley Distribution
","# repquota

> Display a summary of existing file quotas for a filesystem.

- Report stats for all quotas in use:

`sudo repquota -all`

- Report quota stats for all users, even those who aren't using any of their quota:

`sudo repquota -v {{filesystem}}`

- Report on quotas for users only:

`repquota --user {{filesystem}}`

- Report on quotas for groups only:

`sudo repquota --group {{filesystem}}`

- Report on used quota and limits in a human-readable format:

`sudo repquota --human-readable {{filesystem}}`

- Report on all quotas for users and groups in a human-readable format:

`sudo repquota -augs`
"
aspell,,,"# aspell

> Interactive spell checker.

- Spell check a single file:

`aspell check {{path/to/file}}`

- List misspelled words from standard input:

`cat {{file}} | aspell list`

- Show available dictionary languages:

`aspell dicts`

- Run aspell with different language (takes two letter ISO 639 language code):

`aspell --lang={{cs}}`

- List misspelled words from standard input and ignore words from personal word list:

`cat {{file}} | aspell --personal={{personal-word-list.pws}} {{list}}`
"
xfce4-screenshooter,,,"# xfce4-screenshooter

> The XFCE4 screenshot tool.

- Launch the screenshooter GUI:

`xfce4-screenshooter`

- Take a screenshot of the entire screen and launch the GUI to ask how to proceed:

`xfce4-screenshooter --fullscreen`

- Take a screenshot of the entire screen and save it in the specified directory:

`xfce4-screenshooter --fullscreen --save {{path/to/directory}}`

- Wait some time before taking the screenshot:

`xfce4-screenshooter --delay {{seconds}}`

- Take a screenshot of a region of the screen (select using the mouse):

`xfce4-screenshooter --region`

- Take a screenshot of the active window, and copy it to the clipboard:

`xfce4-screenshooter --window --clipboard`

- Take a screenshot of the active window, and open it with a chosen program:

`xfce4-screenshooter --window --open {{gimp}}`
"
groupadd,,,"# groupadd

> Add user groups to the system.

- Create a new Linux group:

`groupadd {{group_name}}`

- Create new group with a specific groupid:

`groupadd {{group_name}} -g {{group_id}}`
"
lrunzip,,,"# lrunzip

> A large file decompression program.
> See also `lrzip`, `lrztar`, `lrzuntar`.

- Decompress a file:

`lrunzip {{filename.lrz}}`

- Decompress a file using a specific number of processor threads:

`lrunzip -p {{8}} {{filename.lrz}}`

- Decompress a file and silently overwrite files if they exist:

`lrunzip -f {{filename.lrz}}`

- Keep broken or damaged files instead of deleting them when decompressing:

`lrunzip -K {{filename.lrz}}`

- Specify output file name and/or path:

`lrunzip -o {{outfilename}} {{filename.lrz}}`
"
pivpn,http://www.pivpn.io/,,"# pivpn

> Easy security-hardened OpenVPN setup and manager.
> Originally designed for the Raspberry Pi, but works on other Linux devices too.
> More information: <http://www.pivpn.io/>.

- Add a new client device:

`sudo pivpn add`

- List all client devices:

`sudo pivpn list`

- List currently connected devices and their statistics:

`sudo pivpn clients`

- Revoke a previously authenticated device:

`sudo pivpn revoke`

- Uninstall PiVPN:

`sudo pivpn uninstall`
"
sa,,"
SA(8)			  BSD System Manager's Manual			 SA(8)

NAME
     sa -- print system accounting statistics

SYNOPSIS
     sa [-abcdDfijkKlmnqrstu] [-P file] [-U file] [-v cutoff] [file ...]

DESCRIPTION
     The sa utility reports on, cleans up, and generally maintains system
     accounting files.

     The sa utility is able to condense the information in /var/account/acct
     into the summary files /var/account/savacct and /var/account/usracct,
     which contain system statistics according to command name and login id,
     respectively.  This condensation is desirable because on a large system,
     /var/account/acct can grow by hundreds of blocks per day.	The summary
     files are normally read before the accounting file, so that reports
     include all available information.

     If file names are supplied, they are read instead of /var/account/acct.
     After each file is read, if the summary files are being updated, an
     updated summary will be saved to disk.  Only one report is printed, after
     the last file is processed.

     The labels used in the output indicate the following, except where other-
     wise specified by individual options:

     avio   Average number of I/O operations per execution

     cp     Sum of user and system time, in minutes

     cpu    Same as cp

     k	    CPU-time averaged core usage, in 1k units

     k*sec  CPU storage integral, in 1k-core seconds

     re     Real time, in minutes

     s	    System time, in minutes

     tio    Total number of I/O operations

     u	    User time, in minutes

     The options to sa are:

     -a      List all command names, including those containing unprintable
	     characters and those used only once.  By default, sa places all
	     names containing unprintable characters and those used only once
	     under the name ``***other''.

     -b      If printing command statistics, sort output by the sum of user
	     and system time divided by number of calls.

     -c      In addition to the number of calls and the user, system and real
	     times for each command, print their percentage of the total over
	     all commands.

     -d      If printing command statistics, sort by the average number of
	     disk I/O operations.  If printing user statistics, print the
	     average number of disk I/O operations per user.

     -D      If printing command statistics, sort and print by the total num-
	     ber of disk I/O operations.

     -f      Force no interactive threshold comparison with the -v option.

     -i      Do not read in the summary files.

     -j      Instead of the total minutes per category, give seconds per call.

     -k      If printing command statistics, sort by the cpu-time average mem-
	     ory usage.  If printing user statistics, print the cpu-time aver-
	     age memory usage.

     -K      If printing command statistics, print and sort by the cpu-storage
	     integral.

     -l      Separate system and user time; normally they are combined.

     -m      Print per-user statistics rather than per-command statistics.

     -n      Sort by number of calls.

     -P file
	     Use the specified file for accessing the per-command accounting
	     summary database, instead of the default /var/account/savacct.

     -q      Create no output other than error messages.

     -r      Reverse order of sort.

     -s      Truncate the accounting files when done and merge their data into
	     the summary files.

     -t      For each command, report the ratio of real time to the sum of
	     user and system cpu times.  If the cpu time is too small to
	     report, ``*ignore*'' appears in this field.

     -U file
	     Use the specified file for accessing the per-user accounting sum-
	     mary database, instead of the default /var/account/usracct.

     -u      Superseding all other flags, for each entry in the accounting
	     file, print the user ID, total seconds of cpu usage, total memory
	     usage, number of I/O operations performed, and command name.

     -v cutoff
	     For each command used cutoff times or fewer, print the command
	     name and await a reply from the terminal.	If the reply begins
	     with ``y'', add the command to the category ``**junk**''.	This
	     flag is used to strip garbage from the report.

     By default, per-command statistics will be printed.  The number of calls,
     the total elapsed time in minutes, total cpu and user time in minutes,
     average number of I/O operations, and CPU-time averaged core usage will
     be printed.  If the -m option is specified, per-user statistics will be
     printed, including the user name, the number of commands invoked, total
     cpu time used (in minutes), total number of I/O operations, and CPU stor-
     age integral for each user.  If the -u option is specified, the uid, user
     and system time (in seconds), CPU storage integral, I/O usage, and com-
     mand name will be printed for each entry in the accounting data file.

     If the -u flag is specified, all flags other than -q are ignored.	If the
     -m flag is specified, only the -b, -d, -i, -k, -q, and -s flags are hon-
     ored.

FILES
     /var/account/acct	   raw accounting data file
     /var/account/savacct  per-command accounting summary database
     /var/account/usracct  per-user accounting summary database

EXIT STATUS
     The sa utility exits 0 on success, and >0 if an error occurs.

SEE ALSO
     lastcomm(1), acct(5), ac(8), accton(8)

CAVEATS
     While the behavior of the options in this version of sa was modeled after
     the original version, there are some intentional differences and undoubt-
     edly some unintentional ones as well.  In particular, the -q option has
     been added, and the -m option now understands more options than it used
     to.

     The formats of the summary files created by this version of sa are very
     different from the those used by the original version.  This is not con-
     sidered a problem, however, because the accounting record format has
     changed as well (since user ids are now 32 bits).

AUTHORS
     Chris G. Demetriou <cgd@postgres.berkeley.edu>

BUGS
     The number of options to this program is absurd, especially considering
     that there is not much logic behind their lettering.

     The field labels should be more consistent.

     The VM system does not record the CPU storage integral.

BSD				 May 18, 2007				   BSD
","# sa

> Summarizes accounting information. Part of the acct package.
> Shows commands called by users, including basic info on CPU time spent processing and I/O rates.

- Display executable invocations per user (username not displayed):

`sudo sa`

- Display executable invocations per user, showing responsible usernames:

`sudo sa --print-users`

- List resources used recently per user:

`sudo sa --user-summary`
"
hostname,,"
HOSTNAME(1)		  BSD General Commands Manual		   HOSTNAME(1)

NAME
     hostname -- set or print name of current host system

SYNOPSIS
     hostname [-fs] [name-of-host]

DESCRIPTION
     The hostname utility prints the name of the current host.	The super-user
     can set the hostname by supplying an argument.  To keep the hostname
     between reboots, run `scutil --set HostName name-of-host'.

     Options:

     -f    Include domain information in the printed name.  This is the
	   default behavior.

     -s    Trim off any domain information from the printed name.

SEE ALSO
     gethostname(3), scutil(8)

HISTORY
     The hostname command appeared in 4.2BSD.

BSD			       December 7, 2006 			   BSD
","# hostname

> Show or set the system's host name.

- Show current host name:

`hostname`

- Show the network address of the host name:

`hostname -i`

- Show all network addresses of the host:

`hostname -I`

- Show the FQDN (Fully Qualified Domain Name):

`hostname --fqdn`

- Set current host name:

`hostname {{new_hostname}}`
"
apache2ctl,,,"# apache2ctl

> The CLI tool to administrate HTTP web server Apache.
> This commmand comes with Debian based OSes, for RHEL based ones see `httpd`.

- Start the Apache daemon. Throw a message if it is already running:

`sudo apache2ctl start`

- Stop the Apache daemon:

`sudo apache2ctl stop`

- Restart the Apache daemon:

`sudo apache2ctl restart`

- Test syntax of the configuration file:

`sudo apache2ctl -t`

- List loaded modules:

`sudo apache2ctl -M`
"
ctrlaltdel,,,"# ctrlaltdel

> Utility to control what happens when CTRL+ALT+DEL is pressed.

- Get current setting:

`ctrlaltdel`

- Set CRTL+ALT+DEL to reboot immediately, without any preparation:

`sudo ctrlaltdel hard`

- Set CTRL+ALT+DEL to reboot ""normally"", giving processes a chance to exit first (send SIGINT to PID1):

`sudo ctrlaltdel soft`
"
prt-get,,,"# prt-get

> The CRUX package manager.

- Install a package:

`prt-get install {{package_name}}`

- Install a package with dependency handling:

`prt-get depinst {{package_name}}`

- Update a package manually:

`prt-get upgrade {{package_name}}`

- Remove a package:

`prt-get remove {{package_name}}`

- Upgrade the system from the local ports tree:

`prt-get sysup`

- Search the ports tree:

`prt-get search {{package_name}}`

- Search for a file in a package:

`prt-get fsearch {{file}}`
"
toilet,http://caca.zoy.org/wiki/toilet,,"# toilet

> A tool to display ASCII-art fonts.
> More information: <http://caca.zoy.org/wiki/toilet>.

- Generate ASCII art for a given text:

`toilet {{input_text}}`

- Generate ASCII art using a custom font file:

`toilet {{input_text}} -f {{font_filename}}`

- Generate ASCII art using a filter:

`toilet {{input_text}} --filter {{filter_name}}`

- Show available toilet filters:

`toilet --filter list `
"
lftp,https://linux.die.net/man/1/lftp,,"# lftp

> Sophisticated file transfer program.
> More information: <https://linux.die.net/man/1/lftp>.

- Connect to an FTP server:

`lftp {{ftp.example.com}}`

- Download multiple files (glob expression):

`mget {{path/to/*.png}}`

- Upload multiple files (glob expression):

`mput {{path/to/*.zip}}`

- Delete multiple files on the remote server:

`mrm {{path/to/*.txt}}`

- Rename a file on the remote server:

`mv {{original_filename}} {{new_filename}}`

- Download or update an entire directory:

`mirror {{path/to/remote_dir}} {{path/to/local_output_dir}}`

- Upload or update an entire directory:

`mirror -R {{path/to/local_dir}} {{path/to/remote_output_dir}}`
"
brew,,"BREW(1) 			     brew			       BREW(1)



NAME
       brew - The Missing Package Manager for macOS

SYNOPSIS
       brew --version
       brew command [--verbose|-v] [options] [formula] ...

DESCRIPTION
       Homebrew is the easiest and most flexible way to install the UNIX tools
       Apple didn't include with macOS.

ESSENTIAL COMMANDS
       For the full command list, see the COMMANDS section.

       With --verbose or --debug, many commands print extra debugging informa-
       tion. Note that these options should only appear after a command.

   install formula:
       Install formula.

       formula is usually the name of the formula to install, but it has other
       syntaxes which are listed in the SPECIFYING FORMULAE section.

   uninstall formula:
       Uninstall formula.

   list:
       List all installed formulae.

   search (text|/text/):
       Perform a substring search of cask tokens and formula names  for  text.
       If  text  is flanked by slashes, it is interpreted as a regular expres-
       sion. The search for text is extended online to homebrew/core and home-
       brew/cask.  If no search term is provided, all locally available formu-
       lae are listed.

COMMANDS
   analytics [subcommand]
       Control Homebrew's anonymous aggregate user behaviour  analytics.  Read
       more at https://docs.brew.sh/Analytics.

       brew analytics [state]
	   Display the current state of Homebrew's analytics.

       brew analytics [on|off]
	   Turn Homebrew's analytics on or off respectively.

       brew analytics regenerate-uuid
	   Regenerate the UUID used for Homebrew's analytics.

   cask command [options] [cask]
       Homebrew  Cask  provides a friendly CLI workflow for the administration
       of macOS applications distributed as binaries.

       Commands:

       o   --cache
	   Display the file used to cache a cask

       o   audit
	   Check cask for Homebrew coding style violations

       o   cat
	   Dump raw source of a cask to the standard output

       o   create
	   Creates the given cask and opens it in an editor

       o   doctor
	   Checks for configuration issues

       o   edit
	   Open the given cask for editing

       o   fetch
	   Downloads remote application files to local cache

       o   help
	   Print help for cask commands

       o   home
	   Opens the homepage of the given cask

       o   info
	   Displays information about the given cask

       o   install
	   Installs the given cask

       o   list
	   Lists installed casks or the casks provided in the arguments

       o   outdated
	   List the outdated installed casks

       o   reinstall
	   Reinstalls the given cask

       o   style
	   Checks style of the given cask using RuboCop

       o   uninstall
	   Uninstalls the given cask

       o   upgrade
	   Upgrades all outdated casks or the specified casks

       o   zap
	   Zaps all files associated with the given cask



       See also: man brew

       --appdir
	      Target location for Applications. Default: /Applications

       --colorpickerdir
	      Target location for Color Pickers. Default: ~/Library/ColorPick-
	      ers

       --prefpanedir
	      Target location for Preference Panes. Default: ~/Library/Prefer-
	      encePanes

       --qlplugindir
	      Target location for QuickLook Plugins. Default: ~/Library/Quick-
	      Look

       --mdimporterdir
	      Target  location for Spotlight Plugins. Default: ~/Library/Spot-
	      light

       --dictionarydir
	      Target location for Dictionaries. Default:  ~/Library/Dictionar-
	      ies

       --fontdir
	      Target location for Fonts. Default: ~/Library/Fonts

       --servicedir
	      Target location for Services. Default: ~/Library/Services

       --input_methoddir
	      Target  location	for  Input  Methods.  Default: ~/Library/Input
	      Methods

       --internet_plugindir
	      Target location for Internet Plugins. Default:  ~/Library/Inter-
	      net Plug-Ins

       --audio_unit_plugindir
	      Target	location    for    Audio    Unit   Plugins.   Default:
	      ~/Library/Audio/Plug-Ins/Components

       --vst_plugindir
	      Target	 location     for      VST	Plugins.      Default:
	      ~/Library/Audio/Plug-Ins/VST

       --vst3_plugindir
	      Target	  location	for	VST3	 Plugins.     Default:
	      ~/Library/Audio/Plug-Ins/VST3

       --screen_saverdir
	      Target location for  Screen  Savers.  Default:  ~/Library/Screen
	      Savers

       --language
	      Set language of the Cask to install. The first matching language
	      is used, otherwise the default language on the Cask. The default
	      value is the language of your system

   cleanup [options] [formula|cask]
       Remove  stale  lock  files  and outdated downloads for all formulae and
       casks, and remove old versions of installed formulae. If arguments  are
       specified,  only  do this for the given formulae and casks. Removes all
       downloads more than 120 days old.  This	can  be  adjusted  with  HOME-
       BREW_CLEANUP_MAX_AGE_DAYS.

       --prune
	      Remove all cache files older than specified days.

       -n, --dry-run
	      Show what would be removed, but do not actually remove anything.

       -s     Scrub the cache, including downloads for even  the  latest  ver-
	      sions.  Note  downloads for any installed formulae or casks will
	      still not be deleted. If you want to delete those  too:  rm  -rf
	      ""$(brew --cache)""

       --prune-prefix
	      Only  prune  the	symlinks  and  directories from the prefix and
	      remove no other files.

   commands [options]
       Show lists of built-in and external commands.

       -q, --quiet
	      List only the names of commands without category headers.

       --include-aliases
	      Include aliases of internal commands.

   config
       Show Homebrew and system configuration info useful  for	debugging.  If
       you  file  a  bug report, you will be required to provide this informa-
       tion.

   deps [options] [formula]
       Show dependencies for formula. Additional options specific  to  formula
       may  be appended to the command. When given multiple formula arguments,
       show the intersection of dependencies for each formula.

       -n     Sort dependencies in topological order.

       --1    Only show dependencies one level down, instead of recursing.

       --union
	      Show the union of dependencies for multiple formula, instead  of
	      the intersection.

       --full-name
	      List dependencies by their full name.

       --include-build
	      Include :build dependencies for formula.

       --include-optional
	      Include :optional dependencies for formula.

       --include-test
	      Include :test dependencies for formula (non-recursive).

       --skip-recommended
	      Skip :recommended dependencies for formula.

       --include-requirements
	      Include requirements in addition to dependencies for formula.

       --tree Show  dependencies  as a tree. When given multiple formula argu-
	      ments, show individual trees for each formula.

       --annotate
	      Mark any build, test, optional, or recommended  dependencies  as
	      such in the output.

       --installed
	      List  dependencies for formulae that are currently installed. If
	      formula is specified, list only its dependencies that  are  cur-
	      rently installed.

       --all  List dependencies for all available formulae.

       --for-each
	      Switch  into  the  mode  used by the --all option, but only list
	      dependencies for each provided formula, one  formula  per  line.
	      This is used for debugging the --installed/--all display mode.

   desc [options] (text|/text/|formula)
       Display	formula's  name and one-line description. Formula descriptions
       are cached; the cache is created  on  the  first  search,  making  that
       search slower than subsequent ones.

       -s, --search
	      Search  both names and descriptions for text. If text is flanked
	      by slashes, it is interpreted as a regular expression.

       -n, --name
	      Search just names for text. If text is flanked by slashes, it is
	      interpreted as a regular expression.

       -d, --description
	      Search  just  descriptions  for  text.  If  text	is  flanked by
	      slashes, it is interpreted as a regular expression.

   doctor [options]
       Check your system for potential problems. Will  exit  with  a  non-zero
       status  if  any	potential  problems  are found. Please note that these
       warnings are just used to help the Homebrew maintainers with  debugging
       if  you	file  an  issue. If everything you use Homebrew for is working
       fine: please don't worry or file an issue; just ignore this.

       --list-checks
	      List all audit methods, which can be run	individually  if  pro-
	      vided as arguments.

       -D, --audit-debug
	      Enable debugging and profiling of audit methods.

   fetch [options] formula
       Download  a  bottle  (if available) or source packages for formula. For
       tarballs, also print SHA-256 checksums.

       --HEAD Fetch HEAD version instead of stable version.

       --devel
	      Fetch development version instead of stable version.

       -f, --force
	      Remove a previously cached version and re-fetch.

       -v, --verbose
	      Do a verbose VCS checkout, if the URL represents a VCS. This  is
	      useful for seeing if an existing VCS cache has been updated.

       --retry
	      Retry  if  downloading fails or re-download if the checksum of a
	      previously cached version no longer matches.

       --deps Also download dependencies for any listed formula.

       -s, --build-from-source
	      Download source packages rather than a bottle.

       --build-bottle
	      Download source packages (for eventual bottling) rather  than  a
	      bottle.

       --force-bottle
	      Download a bottle if it exists for the current or newest version
	      of macOS, even if it would not be used during installation.

   gist-logs [options] formula
       Upload logs for a failed build of formula to a new  Gist.  Presents  an
       error message if no logs are found.

       --with-hostname
	      Include the hostname in the Gist.

       -n, --new-issue
	      Automatically  create  a	new  issue  in	the appropriate GitHub
	      repository after creating the Gist.

       -p, --private
	      The Gist will be marked private and will not appear in  listings
	      but will be accessible with its link.

   home [formula]
       Open  formula's	homepage in a browser, or open Homebrew's own homepage
       if no formula is provided.

   info [options] [formula]
       Display brief statistics for your Homebrew installation.

       If formula is provided, show summary of information about formula.

       --analytics
	      List global Homebrew analytics data or, if specified,  installa-
	      tion  and  build	error data for formula (provided neither HOME-
	      BREW_NO_ANALYTICS nor HOMEBREW_NO_GITHUB_API are set).

       --days How many days of analytics data to retrieve. The value for  days
	      must be 30, 90 or 365. The default is 30.

       --category
	      Which type of analytics data to retrieve. The value for category
	      must be install, install-on-request or build-error; cask-install
	      or os-version may be specified if formula is not. The default is
	      install.

       --github
	      Open the GitHub source page for formula in a  browser.  To  view
	      formula history locally: brew log -p formula

       --json Print  a	JSON  representation of formula. Currently the default
	      and only accepted value for version is  v1.  See	the  docs  for
	      examples	of  using the JSON output: https://docs.brew.sh/Query-
	      ing-Brew

       --installed
	      Print JSON of formulae that are currently installed.

       --all  Print JSON of all available formulae.

       -v, --verbose
	      Show more verbose analytics data for formula.

   install [options] formula
       Install formula. Additional options specific to formula may be appended
       to the command.

       Unless  HOMEBREW_NO_INSTALL_CLEANUP  is	set, brew cleanup will then be
       run for the installed formulae or, every 30 days, for all formulae.

       -d, --debug
	      If brewing fails, open an  interactive  debugging  session  with
	      access to IRB or a shell inside the temporary build directory.

       --env  If  std is passed, use the standard build environment instead of
	      superenv. If super is passed, use superenv even if  the  formula
	      specifies the standard build environment.

       --ignore-dependencies
	      An  unsupported Homebrew development flag to skip installing any
	      dependencies of any kind. If the dependencies  are  not  already
	      present,	the formula will have issues. If you're not developing
	      Homebrew, consider adjusting your PATH rather  than  using  this
	      flag.

       --only-dependencies
	      Install  the  dependencies  with	specified  options  but do not
	      install the formula itself.

       --cc   Attempt to compile using the specified compiler, which should be
	      the  name of the compiler's executable, e.g. gcc-7 for GCC 7. In
	      order to use  LLVM's  clang,  specify  llvm_clang.  To  use  the
	      Apple-provided  clang,  specify  clang.  This  option  will only
	      accept compilers that are provided by Homebrew or  bundled  with
	      macOS.  Please  do not file issues if you encounter errors while
	      using this option.

       -s, --build-from-source
	      Compile formula from source even if a bottle is provided. Depen-
	      dencies  will still be installed from bottles if they are avail-
	      able.

       --force-bottle
	      Install from a bottle if it exists for  the  current  or	newest
	      version  of  macOS,  even  if  it would not normally be used for
	      installation.

       --include-test
	      Install testing dependencies required to run brew test  formula.

       --HEAD If  formula  defines  it, install the HEAD version, aka. master,
	      trunk, unstable.

       --fetch-HEAD
	      Fetch the upstream repository to detect if the HEAD installation
	      of  the  formula	is  outdated. Otherwise, the repository's HEAD
	      will only be checked for updates when a new stable  or  develop-
	      ment version has been released.

       --keep-tmp
	      Retain the temporary files created during installation.

       --build-bottle
	      Prepare  the  formula for eventual bottling during installation,
	      skipping any post-install steps.

       --bottle-arch
	      Optimise bottles for the specified architecture rather than  the
	      oldest  architecture  supported by the version of macOS the bot-
	      tles are built on.

       -f, --force
	      Install without checking for previously  installed  keg-only  or
	      non-migrated versions.

       -v, --verbose
	      Print the verification and postinstall steps.

       --display-times
	      Print install times for each formula at the end of the run.

       -i, --interactive
	      Download	and  patch formula, then open a shell. This allows the
	      user to run ./configure --help and otherwise  determine  how  to
	      turn the software package into a Homebrew package.

       -g, --git
	      Create  a  Git  repository,  useful  for creating patches to the
	      software.

   leaves
       List installed formulae that are not dependencies of another  installed
       formula.

   link, ln [options] formula
       Symlink	all  of formula's installed files into Homebrew's prefix. This
       is done automatically when you install formulae but can be  useful  for
       DIY installations.

       --overwrite
	      Delete files that already exist in the prefix while linking.

       -n, --dry-run
	      List files which would be linked or deleted by brew link --over-
	      write without actually linking or deleting any files.

       -f, --force
	      Allow keg-only formulae to be linked.

   list, ls [options] [formula|cask]
       List all installed formulae or casks

       If formula is provided, summarise the paths within its current keg.

       --full-name
	      Print formulae with fully-qualified names. If --full-name is not
	      passed,  other  options  (i.e.  -1, -l, -r and -t) are passed to
	      ls(1) which produces the actual output.

       --unbrewed
	      List files in Homebrew's prefix not installed by Homebrew.

       --versions
	      Show the version number for  installed  formulae,  or  only  the
	      specified formulae if formula are provided.

       --multiple
	      Only show formulae with multiple versions installed.

       --pinned
	      Show  the  versions  of  pinned  formulae, or only the specified
	      (pinned) formulae if formula are provided. See also pin,	unpin.

       --formula
	      List only formulae.

       --cask List only casks.

       -1     Force  output to be one entry per line. This is the default when
	      output is not to a terminal.

       -l     List in long format. If the output is to a terminal, a total sum
	      for all the file sizes is printed before the long listing.

       -r     Reverse  the order of the sort to list the oldest entries first.

       -t     Sort by time modified, listing most recently modified first.

   log [options] [formula]
       Show the git log for formula, or show the log for the Homebrew  reposi-
       tory if no formula is provided.

       -p, --patch
	      Also print patch from commit.

       --stat Also print diffstat from commit.

       --oneline
	      Print only one line per commit.

       -1     Print only one commit.

       -n, --max-count
	      Print only a specified number of commits.

   migrate [options] formula
       Migrate	renamed  packages to new names, where formula are old names of
       packages.

       -f, --force
	      Treat installed formula and provided formula as if they are from
	      the same taps and migrate them anyway.

   missing [options] [formula]
       Check  the  given  formula kegs for missing dependencies. If no formula
       are provided, check all kegs. Will exit with a non-zero status  if  any
       kegs are found to be missing dependencies.

       --hide Act  as  if  none  of the specified hidden are installed. hidden
	      should be a comma-separated list of formulae.

   options [options] [formula]
       Show install options specific to formula.

       --compact
	      Show all options on a single line separated by spaces.

       --installed
	      Show options for formulae that are currently installed.

       --all  Show options for all available formulae.

       --command
	      Show options for the specified command.

   outdated [options] [formula|cask]
       List installed casks and formulae that have an updated  version	avail-
       able.  By  default,  version  information  is  displayed in interactive
       shells, and suppressed otherwise.

       -q, --quiet
	      List only the names of  outdated	kegs  (takes  precedence  over
	      --verbose).

       -v, --verbose
	      Include detailed version information.

       --formula
	      Only output outdated formulae.

       --cask Only output outdated casks.

       --json Print  output in JSON format. There are two versions: v1 and v2.
	      v1 is deprecated and is currently the default if no  version  is
	      specified. v2 prints outdated formulae and casks.

       --fetch-HEAD
	      Fetch the upstream repository to detect if the HEAD installation
	      of the formula is outdated.  Otherwise,  the  repository's  HEAD
	      will  only  be checked for updates when a new stable or develop-
	      ment version has been released.

       --greedy
	      Print outdated casks with auto_updates or version :latest.

   pin formula
       Pin the specified formula, preventing them  from  being	upgraded  when
       issuing the brew upgrade formula command. See also unpin.

   postinstall formula
       Rerun the post-install steps for formula.

   readall [options] [tap]
       Import  all items from the specified tap, or from all installed taps if
       none is provided. This can be useful for debugging  issues  across  all
       items  when  making significant changes to formula.rb, testing the per-
       formance of loading all items or checking if any current formulae/casks
       have Ruby issues.

       --aliases
	      Verify any alias symlinks in each tap.

       --syntax
	      Syntax-check  all  of  Homebrew's  Ruby  files  (if  no <tap> is
	      passed).

   reinstall [options] formula
       Uninstall and then install formula using the same options it was origi-
       nally installed with, plus any appended brew formula options.

       Unless  HOMEBREW_NO_INSTALL_CLEANUP  is	set, brew cleanup will then be
       run for the reinstalled formulae or, every 30 days, for all formulae.

       -d, --debug
	      If brewing fails, open an  interactive  debugging  session  with
	      access to IRB or a shell inside the temporary build directory.

       -s, --build-from-source
	      Compile formula from source even if a bottle is available.

       -i, --interactive
	      Download	and  patch formula, then open a shell. This allows the
	      user to run ./configure --help and otherwise  determine  how  to
	      turn the software package into a Homebrew package.

       --force-bottle
	      Install  from  a	bottle	if it exists for the current or newest
	      version of macOS, even if it would  not  normally  be  used  for
	      installation.

       --keep-tmp
	      Retain the temporary files created during installation.

       -f, --force
	      Install  without	checking  for previously installed keg-only or
	      non-migrated versions.

       -v, --verbose
	      Print the verification and postinstall steps.

       --display-times
	      Print install times for each formula at the end of the run.

   search [options] [text|/text/]
       Perform a substring search of cask tokens and formula names  for  text.
       If  text  is flanked by slashes, it is interpreted as a regular expres-
       sion. The search for text is extended online to homebrew/core and home-
       brew/cask.

       If  no text is provided, list all locally available formulae (including
       tapped ones). No online search is performed.

       --formula
	      Without text, list all locally  available  formulae  (no	online
	      search  is  performed). With text, search online and locally for
	      formulae.

       --cask Without text, list all locally available casks (including tapped
	      ones,  no  online search is performed). With text, search online
	      and locally for casks.

       --desc Search for formulae with a description matching text  and  casks
	      with a name matching text.

       --macports
	      Search for text in the given package manager's list.

       --fink Search for text in the given package manager's list.

       --opensuse
	      Search for text in the given package manager's list.

       --fedora
	      Search for text in the given package manager's list.

       --debian
	      Search for text in the given package manager's list.

       --ubuntu
	      Search for text in the given package manager's list.

   shellenv
       Print  export  statements.  When  run  in a shell, this installation of
       Homebrew will be added to your PATH, MANPATH, and INFOPATH.

       The variables HOMEBREW_PREFIX, HOMEBREW_CELLAR and  HOMEBREW_REPOSITORY
       are  also  exported  to	avoid  querying  them multiple times. Consider
       adding evaluation of this  command's  output  to  your  dotfiles  (e.g.
       ~/.profile,  ~/.bash_profile,  or  ~/.zprofile) with: eval $(brew shel-
       lenv)

   switch formula version
       Symlink all of the specified version  of  formula's  installation  into
       Homebrew's prefix.

   tap [options] [user/repo] [URL]
       Tap a formula repository.

       If no arguments are provided, list all installed taps.

       With URL unspecified, tap a formula repository from GitHub using HTTPS.
       Since so many taps are hosted on GitHub, this command is a shortcut for
       brew tap user/repo https://github.com/user/homebrew-repo.

       With  URL  specified, tap a formula repository from anywhere, using any
       transport protocol that git(1) handles. The one-argument  form  of  tap
       simplifies  but also limits. This two-argument command makes no assump-
       tions, so taps can be cloned from places other than  GitHub  and  using
       protocols other than HTTPS, e.g. SSH, git, HTTP, FTP(S), rsync.

       --full Convert  a shallow clone to a full clone without untapping. Taps
	      are only cloned as shallow clones on continuous integration,  or
	      if --shallow was originally passed.

       --shallow
	      Fetch  tap  as  a shallow clone rather than a full clone. Useful
	      for continuous integration.

       --force-auto-update
	      Auto-update tap even if it is not hosted on GitHub. By  default,
	      only  taps  hosted  on  GitHub are auto-updated (for performance
	      reasons).

       --repair
	      Migrate tapped formulae from  symlink-based  to  directory-based
	      structure.

       --list-pinned
	      List all pinned taps.

   tap-info [options] [tap]
       Show detailed information about one or more taps.

       If  no  tap  names  are	provided,  display  brief  statistics  for all
       installed taps.

       --installed
	      Show information on each installed tap.

       --json Print a JSON representation of tap. Currently  the  default  and
	      only accepted value for version is v1. See the docs for examples
	      of using the JSON output: https://docs.brew.sh/Querying-Brew

   uninstall, rm, remove [options] formula
       Uninstall formula.

       -f, --force
	      Delete all installed versions of formula.

       --ignore-dependencies
	      Don't fail uninstall, even if formula is	a  dependency  of  any
	      installed formulae.

   unlink [options] formula
       Remove  symlinks for formula from Homebrew's prefix. This can be useful
       for temporarily disabling a formula: brew unlink formula && commands &&
       brew link formula

       -n, --dry-run
	      List files which would be unlinked without actually unlinking or
	      deleting any files.

   unpin formula
       Unpin formula, allowing them to be upgraded by  brew  upgrade  formula.
       See also pin.

   untap tap
       Remove a tapped formula repository.

   update [options]
       Fetch the newest version of Homebrew and all formulae from GitHub using
       git(1) and perform any necessary migrations.

       --merge
	      Use git merge to apply updates (rather than git rebase).

       --preinstall
	      Run on auto-updates  (e.g.  before  brew	install).  Skips  some
	      slower steps.

       -f, --force
	      Always do a slower, full update check (even if unnecessary).

   update-reset [repository]
       Fetch  and  reset  Homebrew  and all tap repositories (or any specified
       repository) using git(1) to their latest origin/master.

       Note: this will destroy all your uncommitted or committed changes.

   upgrade [options] [formula|cask]
       Upgrade outdated casks and outdated, unpinned formulae using  the  same
       options	they  were  originally	installed with, plus any appended brew
       formula options. If cask or formula are	specified,  upgrade  only  the
       given cask or formula kegs (unless they are pinned; see pin, unpin).

       Unless  HOMEBREW_NO_INSTALL_CLEANUP  is	set, brew cleanup will then be
       run for the upgraded formulae or, every 30 days, for all formulae.

       -d, --debug
	      If brewing fails, open an  interactive  debugging  session  with
	      access to IRB or a shell inside the temporary build directory.

       --formula
	      Only upgrade outdated formulae.

       --cask Only upgrade outdated casks.

       -s, --build-from-source
	      Compile formula from source even if a bottle is available.

       -i, --interactive
	      Download	and  patch formula, then open a shell. This allows the
	      user to run ./configure --help and otherwise  determine  how  to
	      turn the software package into a Homebrew package.

       --force-bottle
	      Install  from  a	bottle	if it exists for the current or newest
	      version of macOS, even if it would  not  normally  be  used  for
	      installation.

       --fetch-HEAD
	      Fetch the upstream repository to detect if the HEAD installation
	      of the formula is outdated.  Otherwise,  the  repository's  HEAD
	      will  only  be checked for updates when a new stable or develop-
	      ment version has been released.

       --ignore-pinned
	      Set a successful exit status even if  pinned  formulae  are  not
	      upgraded.

       --keep-tmp
	      Retain the temporary files created during installation.

       -f, --force
	      Install  without	checking  for previously installed keg-only or
	      non-migrated versions.

       -v, --verbose
	      Print the verification and postinstall steps.

       --display-times
	      Print install times for each formula at the end of the run.

       -n, --dry-run
	      Show what would be upgraded, but do not  actually  upgrade  any-
	      thing.

       --greedy
	      Upgrade casks with auto_updates or version :latest

   uses [options] formula
       Show  formulae  that  specify formula as a dependency (i.e. show depen-
       dents of formula). When given  multiple	formula  arguments,  show  the
       intersection  of  formulae that use formula. By default, uses shows all
       formulae that specify formula as a required or  recommended  dependency
       for their stable builds.

       --recursive
	      Resolve more than one level of dependencies.

       --installed
	      Only list formulae that are currently installed.

       --include-build
	      Include  all formulae that specify formula as :build type depen-
	      dency.

       --include-test
	      Include all formulae that specify formula as :test  type	depen-
	      dency.

       --include-optional
	      Include  all  formulae  that  specify  formula as :optional type
	      dependency.

       --skip-recommended
	      Skip all formulae that  specify  formula	as  :recommended  type
	      dependency.

   --cache [options] [formula|cask]
       Display Homebrew's download cache. See also HOMEBREW_CACHE.

       If  formula  is	provided,  display the file or directory used to cache
       formula.

       -s, --build-from-source
	      Show the cache file used when building from source.

       --force-bottle
	      Show the cache file used when pouring a bottle.

       --formula
	      Only show cache files for formulae.

       --cask Only show cache files for casks.

   --caskroom [cask]
       Display Homebrew's Caskroom path.

       If cask is provided, display the location in the  Caskroom  where  cask
       would be installed, without any sort of versioned directory as the last
       path.

   --cellar [formula]
       Display Homebrew's Cellar path. Default: $(brew --prefix)/Cellar, or if
       that directory doesn't exist, $(brew --repository)/Cellar.

       If  formula  is provided, display the location in the Cellar where for-
       mula would be installed, without any sort of versioned directory as the
       last path.

   --env [options] [formula]
       Summarise Homebrew's build environment as a plain list.

       If  the	command's output is sent through a pipe and no shell is speci-
       fied, the list is formatted for export to  bash(1)  unless  --plain  is
       passed.

       --shell
	      Generate	a  list  of  environment  variables  for the specified
	      shell, or --shell=auto to detect the current shell.

       --plain
	      Generate plain output even when piped.

   --prefix [formula]
       Display Homebrew's install  path.  Default:  /usr/local	on  macOS  and
       /home/linuxbrew/.linuxbrew on Linux.

       If  formula  is provided, display the location in the Cellar where for-
       mula is or would be installed.

   --repository, --repo [user/repo]
       Display where Homebrew's .git directory is located.

       If user/repo are provided, display where tap user/repo's  directory  is
       located.

   --version
       Print the version numbers of Homebrew, Homebrew/homebrew-core and Home-
       brew/homebrew-cask (if tapped) to standard output.

DEVELOPER COMMANDS
   audit [options] [formula]
       Check formula for Homebrew coding style violations. This should be  run
       before  submitting a new formula. If no formula are provided, check all
       locally available formulae and skip style  checks.  Will  exit  with  a
       non-zero status if any errors are found.

       --strict
	      Run additional, stricter style checks.

       --git  Run additional, slower style checks that navigate the Git repos-
	      itory.

       --online
	      Run additional, slower style checks that require a network  con-
	      nection.

       --new-formula
	      Run  various  additional style checks to determine if a new for-
	      mula is eligible for Homebrew. This should be used when creating
	      new formula and implies --strict and --online.

       --tap  Check the formulae within the given tap, specified as user/repo.

       --fix  Fix style violations automatically using RuboCop's  auto-correct
	      feature.

       --display-cop-names
	      Include the RuboCop cop name for each violation in the output.

       --display-filename
	      Prefix  every line of output with the file or formula name being
	      audited, to make output easy to grep.

       --skip-style
	      Skip running non-RuboCop style checks. Useful  if  you  plan  on
	      running brew style separately. Default unless a formula is spec-
	      ified by name

       -D, --audit-debug
	      Enable debugging and profiling of audit methods.

       --only Specify a comma-separated method list to only  run  the  methods
	      named audit_method.

       --except
	      Specify  a comma-separated method list to skip running the meth-
	      ods named audit_method.

       --only-cops
	      Specify a comma-separated cops list to check for	violations  of
	      only the listed RuboCop cops.

       --except-cops
	      Specify  a comma-separated cops list to skip checking for viola-
	      tions of the listed RuboCop cops.

   bottle [options] formula
       Generate a bottle (binary package) from a formula  that	was  installed
       with  --build-bottle.  If  the  formula specifies a rebuild version, it
       will be incremented in  the  generated  DSL.  Passing  --keep-old  will
       attempt	to  keep  it  at  its  original value, while --no-rebuild will
       remove it.

       --skip-relocation
	      Do not check if the bottle can be marked as relocatable.

       --force-core-tap
	      Build a bottle even if formula is not in	homebrew/core  or  any
	      installed taps.

       --no-rebuild
	      If  the  formula specifies a rebuild version, remove it from the
	      generated DSL.

       --keep-old
	      If the formula specifies a rebuild version, attempt to  preserve
	      its value in the generated DSL.

       --json Write  bottle  information  to a JSON file, which can be used as
	      the value for --merge.

       --merge
	      Generate an updated bottle block for a  formula  and  optionally
	      merge  it  into  the  formula  file.  Instead of a formula name,
	      requires the path to a JSON  file  generated  with  brew	bottle
	      --json formula.

       --write
	      Write  changes  to the formula file. A new commit will be gener-
	      ated unless --no-commit is passed.

       --no-commit
	      When passed with --write, a new commit will not generated  after
	      writing changes to the formula file.

       --root-url
	      Use the specified URL as the root of the bottle's URL instead of
	      Homebrew's default.

   bump [options] [formula]
       Display out-of-date brew formulae and  the  latest  version  available.
       Also displays whether a pull request has been opened with the URL.

       --limit
	      Limit number of package results returned.

   bump-cask-pr [options] [cask]
       Create a pull request to update cask with a new version.

       A best effort to determine the SHA-256 will be made if the value is not
       supplied by the user.

       -n, --dry-run
	      Print what would be done rather than doing it.

       --write
	      Make the expected file  modifications  without  taking  any  Git
	      actions.

       --commit
	      When  passed  with  --write, generate a new commit after writing
	      changes to the cask file.

       --no-audit
	      Don't run brew cask audit before opening the PR.

       --no-style
	      Don't run brew cask style --fix before opening the PR.

       --no-browse
	      Print the pull request URL instead of opening in a browser.

       --no-fork
	      Don't try to fork the repository.

       --version
	      Specify the new version for the cask.

       --message
	      Append message to the default pull request message.

       --url  Specify the URL for the new download.

       --sha256
	      Specify the SHA-256 checksum of the new download.

       -f, --force
	      Ignore duplicate open PRs.

   bump-formula-pr [options] [formula]
       Create a pull request to update formula with a new URL or a new tag.

       If a URL is specified, the SHA-256 checksum of the new download	should
       also  be  specified. A best effort to determine the SHA-256 and formula
       name will be made if either or both values  are	not  supplied  by  the
       user.

       If  a  tag  is specified, the Git commit revision corresponding to that
       tag should also be specified. A best effort to determine  the  revision
       will be made if the value is not supplied by the user.

       If  a  version  is  specified,  a  best effort to determine the URL and
       SHA-256 or the tag and revision will be made if	both  values  are  not
       supplied by the user.

       Note:  this  command  cannot  be  used  to  transition a formula from a
       URL-and-SHA-256 style specification into a tag-and-revision style spec-
       ification,  nor	vice  versa. It must use whichever style specification
       the formula already uses.

       -n, --dry-run
	      Print what would be done rather than doing it.

       --write
	      Make the expected file  modifications  without  taking  any  Git
	      actions.

       --commit
	      When  passed  with  --write, generate a new commit after writing
	      changes to the formula file.

       --no-audit
	      Don't run brew audit before opening the PR.

       --strict
	      Run brew audit --strict before opening the PR.

       --no-browse
	      Print the pull request URL instead of opening in a browser.

       --no-fork
	      Don't try to fork the repository.

       --mirror
	      Use the specified URL as a mirror URL. If URL is	a  comma-sepa-
	      rated list of URLs, multiple mirrors will be added.

       --version
	      Use  the specified version to override the value parsed from the
	      URL or tag. Note that --version=0  can  be  used	to  delete  an
	      existing version override from a formula if it has become redun-
	      dant.

       --message
	      Append message to the default pull request message.

       --url  Specify the URL for the new download. If a URL is specified, the
	      SHA-256 checksum of the new download should also be specified.

       --sha256
	      Specify the SHA-256 checksum of the new download.

       --tag  Specify the new git commit tag for the formula.

       --revision
	      Specify  the new git commit revision corresponding to the speci-
	      fied tag.

       -f, --force
	      Ignore duplicate open PRs. Remove all mirrors if	--mirror=  was
	      not specified.

   bump-revision [options] formula [formula ...]
       Create a commit to increment the revision of formula. If no revision is
       present, ""revision 1"" will be added.

       -n, --dry-run
	      Print what would be done rather than doing it.

       --message
	      Append message to the default commit message.

   cat formula
       Display the source of formula.

   command cmd
       Display the path to the file being used when invoking brew cmd.

   create [options] URL
       Generate a formula for the downloadable file at URL and open it in  the
       editor.	Homebrew will attempt to automatically derive the formula name
       and version, but if it fails, you'll have to make  your	own  template.
       The wget formula serves as a simple example. For the complete API, see:
       https://rubydoc.brew.sh/Formula

       --autotools
	      Create a basic template for an Autotools-style build.

       --cmake
	      Create a basic template for a CMake-style build.

       --crystal
	      Create a basic template for a Crystal build.

       --go   Create a basic template for a Go build.

       --meson
	      Create a basic template for a Meson-style build.

       --node Create a basic template for a Node build.

       --perl Create a basic template for a Perl build.

       --python
	      Create a basic template for a Python build.

       --ruby Create a basic template for a Ruby build.

       --rust Create a basic template for a Rust build.

       --no-fetch
	      Homebrew will not download URL to the cache and  will  thus  not
	      add  its	SHA-256  to the formula for you, nor will it check the
	      GitHub API for GitHub projects (to fill out its description  and
	      homepage).

       --HEAD Indicate that URL points to the package's repository rather than
	      a file.

       --set-name
	      Explicitly set the name of the new formula.

       --set-version
	      Explicitly set the version of the new formula.

       --set-license
	      Explicitly set the license of the new formula.

       --tap  Generate the new formula within  the  given  tap,  specified  as
	      user/repo.

       -f, --force
	      Ignore errors for disallowed formula names and named that shadow
	      aliases.

   diy [options]
       Automatically determine the installation prefix for non-Homebrew  soft-
       ware.  Using  the  output  from	this command, you can install your own
       software into the Cellar and then link it into Homebrew's  prefix  with
       brew link.

       --name Explicitly set the name of the package being installed.

       --version
	      Explicitly set the version of the package being installed.

   edit [formula]
       Open  formula  in  the editor set by EDITOR or HOMEBREW_EDITOR, or open
       the Homebrew repository for editing if no formula is provided.

   extract [options] formula tap
       Look through repository history to find the most recent version of for-
       mula and create a copy in tap/Formula/formula@version.rb. If the tap is
       not installed yet, attempt to install/clone the tap before  continuing.
       To  extract  a  formula	from  a  tap that is not homebrew/core use its
       fully-qualified form of user/repo/formula.

       --version
	      Extract the specified version of formula	instead  of  the  most
	      recent.

       -f, --force
	      Overwrite the destination formula if it already exists.

   formula formula
       Display the path where formula is located.

   install-bundler-gems
       Install Homebrew's Bundler gems.

   irb [options]
       Enter the interactive Homebrew Ruby shell.

       --examples
	      Show several examples.

       --pry  Use Pry instead of IRB. Implied if HOMEBREW_PRY is set.

   linkage [options] [formula]
       Check  the library links from the given formula kegs. If no formula are
       provided, check all kegs. Raises an error if run on uninstalled	formu-
       lae.

       --test Show  only  missing libraries and exit with a non-zero status if
	      any missing libraries are found.

       --reverse
	      For every library that a keg references, print  its  dylib  path
	      followed by the binaries that link to it.

       --cached
	      Print the cached linkage values stored in HOMEBREW_CACHE, set by
	      a previous brew linkage run.

   livecheck [formulae]
       Check for newer versions of formulae from upstream.

       If no formula argument is passed, the list  of  formulae  to  check  is
       taken from HOMEBREW_LIVECHECK_WATCHLIST or ~/.brew_livecheck_watchlist.

       --full-name
	      Print formulae with fully-qualified names.

       --tap  Check the formulae within the given tap, specified as user/repo.

       --installed
	      Check formulae that are currently installed.

       --json Output informations in JSON format.

       --all  Check all available formulae.

       --newer-only
	      Show the latest version only if it's newer than the formula.

   man [options]
       Generate Homebrew's manpages.

       --fail-if-changed
	      Return a failing status code if changes are detected in the man-
	      page outputs. This can be used to notify CI  when  the  manpages
	      are  out	of  date.  Additionally, the date used in new manpages
	      will match those in the existing manpages (to  allow  comparison
	      without factoring in the date).

       --link This is now done automatically by brew update.

   pr-automerge [options]
       Find  pull requests that can be automatically merged using brew pr-pub-
       lish.

       --tap  Target tap repository (default: homebrew/core).

       --with-label
	      Pull requests must have this label.

       --without-labels
	      Pull requests must not have these labels (default: do not merge,
	      new formula).

       --without-approval
	      Pull requests do not require approval to be merged.

       --publish
	      Run brew pr-publish on matching pull requests.

       --ignore-failures
	      Include pull requests that have failing status checks.

   pr-publish [options] pull_request [pull_request ...]
       Publish	bottles for a pull request with GitHub Actions. Requires write
       access to the repository.

       --tap  Target tap repository (default: homebrew/core).

       --workflow
	      Target workflow filename (default:  publish-commit-bottles.yml).

   pr-pull [options] pull_request [pull_request ...]
       Download  and  publish bottles, and apply the bottle commit from a pull
       request with artifacts generated  by  GitHub  Actions.  Requires  write
       access to the repository.

       --no-publish
	      Download	the  bottles,  apply  the bottle commit and upload the
	      bottles to Bintray, but don't publish them.

       --no-upload
	      Download the bottles and apply  the  bottle  commit,  but  don't
	      upload to Bintray.

       -n, --dry-run
	      Print what would be done rather than doing it.

       --clean
	      Do not amend the commits from pull requests.

       --keep-old
	      If  the formula specifies a rebuild version, attempt to preserve
	      its value in the generated DSL.

       --branch-okay
	      Do not warn if pulling to a branch besides  master  (useful  for
	      testing).

       --resolve
	      When a patch fails to apply, leave in progress and allow user to
	      resolve, instead of aborting.

       --warn-on-upload-failure
	      Warn instead of raising an error if  the	bottle	upload	fails.
	      Useful for repairing bottle uploads that previously failed.

       --workflow
	      Retrieve	 artifacts   from  the	specified  workflow  (default:
	      tests.yml).

       --artifact
	      Download artifacts with the specified name (default: bottles).

       --bintray-org
	      Upload to the specified  Bintray	organisation  (default:  home-
	      brew).

       --tap  Target tap repository (default: homebrew/core).

       --root-url
	      Use the specified URL as the root of the bottle's URL instead of
	      Homebrew's default.

       --bintray-mirror
	      Use the specified Bintray  repository  to  automatically	mirror
	      stable URLs defined in the formulae (default: mirror).

   pr-upload [options]
       Apply the bottle commit and publish bottles to Bintray.

       --no-publish
	      Apply  the  bottle commit and upload the bottles, but don't pub-
	      lish them.

       --keep-old
	      If the formula specifies a rebuild version, attempt to  preserve
	      its value in the generated DSL.

       -n, --dry-run
	      Print what would be done rather than doing it.

       --warn-on-upload-failure
	      Warn  instead  of  raising  an error if the bottle upload fails.
	      Useful for repairing bottle uploads that previously failed.

       --bintray-org
	      Upload to the specified  Bintray	organisation  (default:  home-
	      brew).

       --root-url
	      Use the specified URL as the root of the bottle's URL instead of
	      Homebrew's default.

   prof [command]
       Run Homebrew with a Ruby profiler, e.g. brew prof readall.

       --stackprof
	      Use stackprof instead of ruby-prof (the default).

   release-notes [options] [previous_tag] [end_ref]
       Print the merged pull requests on Homebrew/brew between two  Git  refs.
       If  no  previous_tag  is  provided it defaults to the latest tag. If no
       end_ref is provided it defaults to origin/master.

       --markdown
	      Print as a Markdown list.

   ruby (-e text|file)
       Run a Ruby instance with Homebrew's libraries loaded, e.g. brew ruby -e
       ""puts :gcc.f.deps"" or brew ruby script.rb.

       -r     Load a library using require.

       -e     Execute the given text string as a script.

   sh [options] [file]
       Homebrew  build environment that uses years-battle-hardened build logic
       to help your ./configure && make && make  install  and  even  your  gem
       install	succeed. Especially handy if you run Homebrew in an Xcode-only
       configuration since it adds tools like make to your  PATH  which  build
       systems would not find otherwise.

       --env  Use  the standard PATH instead of superenv's when std is passed.

       -c, --cmd
	      Execute commands in a non-interactive shell.

   sponsors
       Print a Markdown summary of Homebrew's GitHub  Sponsors,  suitable  for
       pasting into a README.

   style [options] [file|tap|formula]
       Check formulae or files for conformance to Homebrew style guidelines.

       Lists  of  file,  tap and formula may not be combined. If none are pro-
       vided, style will run style  checks  on	the  whole  Homebrew  library,
       including core code and all formulae.

       --fix  Fix  style violations automatically using RuboCop's auto-correct
	      feature.

       --display-cop-names
	      Include the RuboCop cop name for each violation in the output.

       --only-cops
	      Specify a comma-separated cops list to check for	violations  of
	      only the listed RuboCop cops.

       --except-cops
	      Specify  a comma-separated cops list to skip checking for viola-
	      tions of the listed RuboCop cops.

   tap-new user/repo
       Generate the template files for a new tap.

   test [options] formula
       Run the test method provided by an installed formula. There is no stan-
       dard  output or return code, but generally it should notify the user if
       something is wrong with the installed formula.

       Example: brew install jruby && brew test jruby

       --devel
	      Test the development version of a formula.

       --HEAD Test the head version of a formula.

       --keep-tmp
	      Retain the temporary files created for the test.

       --retry
	      Retry if a testing fails.

   tests [options]
       Run Homebrew's unit and integration tests.

       --coverage
	      Generate code coverage reports.

       --generic
	      Run only OS-agnostic tests.

       --no-compat
	      Do not load the compatibility layer when running tests.

       --online
	      Include tests that use the GitHub API and tests that use any  of
	      the taps for official external commands.

       --byebug
	      Enable debugging using byebug.

       --only Run  only test_script_spec.rb. Appending :line_number will start
	      at a specific line.

       --seed Randomise tests with the specified value	instead  of  a	random
	      seed.

   typecheck
       Check for typechecking errors using Sorbet.

       -q, --quiet
	      Silence all non-critical errors.

       --update-definitions
	      Update Tapioca gem definitions of recently bumped gems

       --fail-if-not-changed
	      Return  a failing status code if all gems are up to date and gem
	      definitions do not need a tapioca update

       --dir  Typecheck all files in a specific directory.

       --file Typecheck a single file.

       --ignore
	      Ignores input files that contain the given string in their paths
	      (relative to the input path passed to Sorbet).

   unpack [options] formula
       Unpack  the source files for formula into subdirectories of the current
       working directory.

       --destdir
	      Create subdirectories in the directory named by path instead.

       --patch
	      Patches for formula will be applied to the unpacked source.

       -g, --git
	      Initialise a Git repository in the unpacked source. This is use-
	      ful for creating patches for the software.

       -f, --force
	      Overwrite the destination directory if it already exists.

   update-license-data [options]
       Update SPDX license data in the Homebrew repository.

       --fail-if-not-changed
	      Return  a  failing status code if current license data's version
	      is the same as the upstream. This can be used to notify CI  when
	      the SPDX license data is out of date.

   update-python-resources [options] formula
       Update versions for PyPI resource blocks in formula.

       -p, --print-only
	      Print the updated resource blocks instead of changing formula.

       -s, --silent
	      Suppress any output.

       --ignore-non-pypi-packages
	      Don't fail if formula is not a PyPI package.

       --version
	      Use the specified version when finding resources for formula. If
	      no version is specified, the current version for formula will be
	      used.

   update-test [options]
       Run  a  test  of brew update with a new repository clone. If no options
       are passed, use origin/master as the start commit.

       --to-tag
	      Set HOMEBREW_UPDATE_TO_TAG to test updating between tags.

       --keep-tmp
	      Retain the temporary directory  containing  the  new  repository
	      clone.

       --commit
	      Use the specified commit as the start commit.

       --before
	      Use the commit at the specified date as the start commit.

   vendor-gems
       Install and commit Homebrew's vendored gems.

GLOBAL OPTIONS
       These options are applicable across multiple subcommands.

       -d, --debug
	      Display any debugging information.

       -q, --quiet
	      Suppress any warnings.

       -v, --verbose
	      Make some output more verbose.

       -h, --help
	      Show this message.

OFFICIAL EXTERNAL COMMANDS
   bundle [subcommand]
       Bundler for non-Ruby dependencies from Homebrew, Homebrew Cask, Mac App
       Store and Whalebrew.

       brew bundle [install]
	   Install and upgrade (by default) all dependencies  from  the  Brew-
       file.

       You can skip the installation of dependencies by adding space-separated
       values to one or more of the  following	environment  variables:  HOME-
       BREW_BUNDLE_BREW_SKIP,	  HOMEBREW_BUNDLE_CASK_SKIP,	 HOMEBREW_BUN-
       DLE_MAS_SKIP, HOMEBREW_BUNDLE_WHALEBREW_SKIP, HOMEBREW_BUNDLE_TAP_SKIP

       brew bundle will output a Brewfile.lock.json in the same  directory  as
       the  Brewfile if all dependencies are installed successfully. This con-
       tains dependency and system status information which can be  useful  in
       debugging  brew	bundle	failures  and  replicating  a ""last known good
       build"" state. You can opt-out of this behaviour by  setting  the  HOME-
       BREW_BUNDLE_NO_LOCK  environment  variable  or  passing	the  --no-lock
       option. You may wish to check this file into the same  version  control
       system  as your Brewfile (or ensure your version control system ignores
       it if you'd prefer to  rely  on	debugging  information	from  a  local
       machine).

       brew bundle dump
	   Write all installed casks/formulae/images/taps into a Brewfile.

       brew bundle cleanup
	   Uninstall all dependencies not listed from the Brewfile.

       This  workflow  is  useful  for	maintainers  or  testers who regularly
       install lots of formulae.

       brew bundle check
	   Check if all dependencies are installed from the Brewfile .

       This provides a successful exit code if everything is up-to-date,  mak-
       ing it useful for scripting.

       brew bundle list
	   List all dependencies present in a Brewfile.

       By default, only Homebrew dependencies are listed.

       brew bundle exec command
	   Run	an  external command in an isolated build environment based on
       the Brewfile dependencies.

       This sanitized  build  environment  ignores  unrequested  dependencies,
       which  makes sure that things you didn't specify in your Brewfile won't
       get picked up by commands like bundle install,  npm  install,  etc.  It
       will also add compiler flags which will help find keg-only dependencies
       like openssl, icu4c, etc.

       --file Read the Brewfile from this location. Use --file=-  to  pipe  to
	      stdin/stdout.

       --global
	      Read the Brewfile from ~/.Brewfile.

       -v, --verbose
	      install prints output from commands as they are run. check lists
	      all missing dependencies.

       --no-upgrade
	      install won't run brew upgrade on  outdated  dependencies.  Note
	      they may still be upgraded by brew install if needed.

       -f, --force
	      dump  overwrites an existing Brewfile. cleanup actually performs
	      its cleanup operations.

       --no-lock
	      install won't output a Brewfile.lock.json.

       --all  list all dependencies.

       --formula
	      list Homebrew dependencies.

       --cask list Homebrew Cask dependencies.

       --tap  list tap dependencies.

       --mas  list Mac App Store dependencies.

       --whalebrew
	      list Whalebrew dependencies.

       --describe
	      dump adds a description comment  above  each  line,  unless  the
	      dependency does not have a description.

       --no-restart
	      dump does not add restart_service to formula lines.

       --zap  cleanup casks using the zap command instead of uninstall.

   services [subcommand]
       Manage background services with macOS' launchctl(1) daemon manager.

       If sudo is passed, operate on /Library/LaunchDaemons (started at boot).
       Otherwise, operate on ~/Library/LaunchAgents (started at login).

       [sudo] brew services [list]
	   List all managed services for the current user (or root).

       [sudo] brew services run (formula|--all)
	   Run the service formula without registering to launch at login  (or
       boot).

       [sudo] brew services start (formula|--all)
	   Start  the service formula immediately and register it to launch at
       login (or boot).

       [sudo] brew services stop (formula|--all)
	   Stop the service formula immediately and unregister it from launch-
       ing at login (or boot).

       [sudo] brew services restart (formula|--all)
	   Stop  (if  necessary) and start the service formula immediately and
       register it to launch at login (or boot).

       [sudo] brew services cleanup
	   Remove all unused services.

       --all  Run subcommand on all services.

   test-bot [options] [formula]:
       Tests the full lifecycle of a Homebrew change to  a  tap  (Git  reposi-
       tory).  For  example,  for a GitHub Actions pull request that changes a
       formula brew test-bot will ensure the system is cleaned	and  setup  to
       test  the formula, install the formula, run various tests and checks on
       it, bottle (package) the binaries and test formulae that depend	on  it
       to ensure they aren't broken by these changes.

       Only supports GitHub Actions as a CI provider. This is because Homebrew
       uses GitHub Actions and it's freely available for  public  and  private
       use with macOS and Linux workers.

       --dry-run
	      print what would be done rather than doing it.

       --cleanup
	      clean all state from the Homebrew directory. Use with care!

       --skip-setup
	      don't check if the local system is set up correctly.

       --keep-old
	      run  brew  bottle  --keep-old  to build new bottles for a single
	      platform.

       --skip-relocation
	      run brew bottle --skip-relocation  to  build  new  bottles  that
	      don't require relocation.

       --local
	      ask  Homebrew  to write verbose logs under ./logs/ and set $HOME
	      to ./home/

       --tap  use the git repository of the given tap. Defaults  to  the  core
	      tap for syntax checking.

       --fail-fast
	      immediately exit on a failing step.

       -v, --verbose
	      print  test  step  output  in  real time. Has the side effect of
	      passing output as raw bytes instead of re-encoding in UTF-8.

       --test-default-formula
	      use a default testing formula when not building  a  tap  and  no
	      other formulae are specified.

       --bintray-org
	      upload to the given Bintray organisation.

       --root-url
	      use the specified URL as the root of the bottle's URL instead of
	      Homebrew's default.

       --git-name
	      set the Git author/committer names to the given name.

       --git-email
	      set the Git author/committer email to the given email.

       --ci-upload
	      use the Homebrew CI bottle upload options.

       --publish
	      publish the uploaded bottles.

       --skip-recursive-dependents
	      only test the direct dependents.

       --only-cleanup-before
	      Only run the pre-cleanup step. Needs --cleanup.

       --only-setup
	      Only run the local system setup check step.

       --only-tap-syntax
	      Only run the tap syntax check step.

       --only-formulae
	      Only run the formulae steps.

       --only-cleanup-after
	      Only run the post-cleanup step. Needs --cleanup.

CUSTOM EXTERNAL COMMANDS
       Homebrew, like git(1), supports external commands. These are executable
       scripts	that  reside  somewhere  in  the  PATH,  named brew-cmdname or
       brew-cmdname.rb, which can be invoked like brew	cmdname.  This	allows
       you to create your own commands without modifying Homebrew's internals.

       Instructions for creating your own commands can be found in  the  docs:
       https://docs.brew.sh/External-Commands

SPECIFYING FORMULAE
       Many  Homebrew  commands  accept  one  or more formula arguments. These
       arguments can take several different forms:

       The name of a formula
	      e.g. git, node, wget.

       The fully-qualified name of a tapped formula
	      Sometimes a formula from a tapped repository may	conflict  with
	      one  in  homebrew/core.  You  can still access these formulae by
	      using a special syntax, e.g. homebrew/dupes/vim or homebrew/ver-
	      sions/node4.

       An arbitrary file
	      Homebrew can install formulae from a local path. It can point to
	      either a formula file or a bottle.

SPECIFYING CASKS
       Many Homebrew Cask commands accept one or more  cask  arguments.  These
       can  be	specified  the	same way as the formula arguments described in
       SPECIFYING FORMULAE above.

ENVIRONMENT
       Note that environment variables must have a value set to  be  detected.
       For  example,  run  export  HOMEBREW_NO_INSECURE_REDIRECT=1 rather than
       just export HOMEBREW_NO_INSECURE_REDIRECT.

       HOMEBREW_ARCH
	      Linux only: Pass the set value to a type name  representing  the
	      compiler's -march option.

	      Default: native.

       HOMEBREW_ARTIFACT_DOMAIN
	      Prefix all download URLs, including those for bottles, with this
	      variable.  For  example,	HOMEBREW_ARTIFACT_DOMAIN=http://local-
	      host:8080  will  cause  a  formula  with	the  URL https://exam-
	      ple.com/foo.tar.gz  to  instead  download   from	 http://local-
	      host:8080/example.com/foo.tar.gz.

       HOMEBREW_AUTO_UPDATE_SECS
	      Automatically  check for updates once per this seconds interval.

	      Default: 300.

       HOMEBREW_BAT
	      If set, use bat for the brew cat command.

       HOMEBREW_BAT_CONFIG_PATH
	      Use   the   bat	configuration	file.	For   example,	 HOME-
	      BREW_BAT=$HOME/.bat/config.

	      Default: $HOME/.bat/config

       HOMEBREW_BINTRAY_KEY
	      Use  this  API key when accessing the Bintray API (where bottles
	      are stored).

       HOMEBREW_BINTRAY_USER
	      Use this username when accessing the Bintray API (where  bottles
	      are stored).

       HOMEBREW_BOTTLE_DOMAIN
	      Use  the	specified  URL as the download mirror for bottles. For
	      example, HOMEBREW_BOTTLE_DOMAIN=http://localhost:8080 will cause
	      all  bottles to download from the prefix http://localhost:8080/.

	      Default:	  macOS:     https://homebrew.bintray.com/,	Linux:
	      https://linuxbrew.bintray.com/.

       HOMEBREW_BREW_GIT_REMOTE
	      Use the specified URL as the Homebrew/brew git(1) remote.

	      Default: https://github.com/Homebrew/brew.

       HOMEBREW_BROWSER
	      Use this as the browser when opening project homepages.

	      Default: $BROWSER or the OS's default browser.

       HOMEBREW_CACHE
	      Use the specified directory as the download cache.

	      Default:	   macOS:     $HOME/Library/Caches/Homebrew,	Linux:
	      $XDG_CACHE_HOME/Homebrew or $HOME/.cache/Homebrew.

       HOMEBREW_CASK_OPTS
	      Options which should be used for all cask commands.  All	--*dir
	      options,	  --language,	--require-sha,	 --no-quarantine   and
	      --no-binaries are supported. For example, you  might  add  some-
	      thing like the following to your ~/.profile, ~/.bash_profile, or
	      ~/.zshenv:

       export	    HOMEBREW_CASK_OPTS='--appdir=~/Applications        --font-
       dir=/Library/Fonts'

       HOMEBREW_CLEANUP_MAX_AGE_DAYS
	      Cleanup all cached files older than this many days.

	      Default: 120.

       HOMEBREW_COLOR
	      If set, force colour output on non-TTY outputs.

       HOMEBREW_CORE_GIT_REMOTE
	      Use  the	specified  URL	as  the  Homebrew/homebrew-core git(1)
	      remote.

	      Default:	  macOS:    https://github.com/Homebrew/homebrew-core,
	      Linux: https://github.com/Homebrew/linuxbrew-core.

       HOMEBREW_CURLRC
	      If  set, do not pass --disable when invoking curl(1), which dis-
	      ables the use of curlrc.

       HOMEBREW_CURL_RETRIES
	      Pass the given retry count to --retry when invoking curl(1).

	      Default: 3.

       HOMEBREW_CURL_VERBOSE
	      If set, pass --verbose when invoking curl(1).

       HOMEBREW_DEVELOPER
	      If set, tweak behaviour to be more relevant for Homebrew	devel-
	      opers  (active or budding) by e.g. turning warnings into errors.

       HOMEBREW_DISABLE_LOAD_FORMULA
	      If set, refuse to load formulae. This is	useful	when  formulae
	      are not trusted (such as in pull requests).

       HOMEBREW_DISPLAY
	      Use this X11 display when opening a page in a browser, for exam-
	      ple with brew home. Primarily useful on Linux.

	      Default: $DISPLAY.

       HOMEBREW_DISPLAY_INSTALL_TIMES
	      If set, print install times for each formula at the end  of  the
	      run.

       HOMEBREW_EDITOR
	      Use this editor when editing a single formula, or several formu-
	      lae in the same directory.

	      Note: brew edit will open all of Homebrew as discontinuous files
	      and directories. Visual Studio Code can handle this correctly in
	      project mode, but many editors will do strange  things  in  this
	      case.

	      Default: $EDITOR or $VISUAL.

       HOMEBREW_FAIL_LOG_LINES
	      Output this many lines of output on formula system failures.

	      Default: 15.

       HOMEBREW_FORBIDDEN_LICENSES
	      A  space-separated  list	of  licenses.  Homebrew will refuse to
	      install a formula if that formula or any of its dependencies has
	      a license on this list.

       HOMEBREW_FORCE_BREWED_CURL
	      If  set, always use a Homebrew-installed curl(1) rather than the
	      system version. Automatically set if the system version of  curl
	      is too old.

       HOMEBREW_FORCE_BREWED_GIT
	      If  set,	always use a Homebrew-installed git(1) rather than the
	      system version. Automatically set if the system version  of  git
	      is too old.

       HOMEBREW_FORCE_HOMEBREW_ON_LINUX
	      If  set, running Homebrew on Linux will use URLs for macOS. This
	      is useful when merging pull requests for macOS while on Linux.

       HOMEBREW_FORCE_VENDOR_RUBY
	      If set, always use Homebrew's vendored, relocatable Ruby version
	      even if the system version of Ruby is new enough.

       HOMEBREW_GITHUB_API_PASSWORD
	      Use  this  password  for authentication with the GitHub API, for
	      features such as brew search. We strongly recommend using  HOME-
	      BREW_GITHUB_API_TOKEN instead.

       HOMEBREW_GITHUB_API_TOKEN
	      Use  this personal access token for the GitHub API, for features
	      such   as   brew	  search.    You    can    create    one    at
	      https://github.com/settings/tokens.  If  set,  GitHub will allow
	      you a greater number of API requests. For more information, see:
	      https://docs.github.com/en/rest/over-
	      view/resources-in-the-rest-api#rate-limiting.

	      Note: Homebrew  doesn't  require	permissions  for  any  of  the
	      scopes,  but some developer commands may require additional per-
	      missions.

       HOMEBREW_GITHUB_API_USERNAME
	      Use this username for authentication with the  GitHub  API,  for
	      features	such as brew search. We strongly recommend using HOME-
	      BREW_GITHUB_API_TOKEN instead.

       HOMEBREW_GIT_EMAIL
	      Set the Git author and committer name to this value.

       HOMEBREW_GIT_NAME
	      Set the Git author and committer email to this value.

       HOMEBREW_INSTALL_BADGE
	      Print this text before the installation summary of each success-
	      ful build.

	      Default: The ""Beer Mug"" emoji.

       HOMEBREW_LIVECHECK_WATCHLIST
	      Use  this file to get the list of default Formulae to check when
	      no Formula argument is passed to brew livecheck

	      Default: $HOME/.brew_livecheck_watchlist.

       HOMEBREW_LOGS
	      Use the specified directory to store log files.

	      Default:	   macOS:     $HOME/Library/Logs/Homebrew,	Linux:
	      $XDG_CACHE_HOME/Homebrew/Logs or $HOME/.cache/Homebrew/Logs.

       HOMEBREW_MAKE_JOBS
	      Use this value as the number of parallel jobs to run when build-
	      ing with make(1).

	      Default: The number of available CPU cores.

       HOMEBREW_NO_ANALYTICS
	      If set, do not send analytics. See: https://docs.brew.sh/Analyt-
	      ics.

       HOMEBREW_NO_AUTO_UPDATE
	      If set, do not automatically update before running brew install,
	      brew upgrade or brew tap.

       HOMEBREW_NO_BOTTLE_SOURCE_FALLBACK
	      If set, fail on the failure of installation from a bottle rather
	      than falling back to building from source.

       HOMEBREW_NO_COLOR
	      If set, do not print text with colour added.

	      Default: $NO_COLOR.

       HOMEBREW_NO_COMPAT
	      If set, disable all use of legacy compatibility code.

       HOMEBREW_NO_EMOJI
	      If  set,	do  not  print	HOMEBREW_INSTALL_BADGE on a successful
	      build.

	      Note: Only tries to print emoji on OS X Lion or newer.

       HOMEBREW_NO_GITHUB_API
	      If set, do not use the GitHub API, e.g. for searches or fetching
	      relevant issues on a failed install.

       HOMEBREW_NO_INSECURE_REDIRECT
	      If set, forbid redirects from secure HTTPS to insecure HTTP.

	      Note:  While  ensuring  your downloads are fully secure, this is
	      likely to cause from-source SourceForge, some GNU & GNOME  based
	      formulae to fail to download.

       HOMEBREW_NO_INSTALL_CLEANUP
	      If set, brew install, brew upgrade and brew reinstall will never
	      automatically cleanup installed/upgraded/reinstalled formulae or
	      all formulae every 30 days.

       HOMEBREW_PRY
	      If set, use Pry for the brew irb command.

       HOMEBREW_SKIP_OR_LATER_BOTTLES
	      If  set  with  HOMEBREW_DEVELOPER, do not use bottles from older
	      versions of macOS. This is useful in development	on  new  macOS
	      versions.

       HOMEBREW_SVN
	      Use this as the svn(1) binary.

	      Default: A Homebrew-built Subversion (if installed), or the sys-
	      tem-provided binary.

       HOMEBREW_TEMP
	      Use this path as the temporary directory for building  packages.
	      Changing	this  may be needed if your system temporary directory
	      and Homebrew prefix are on different volumes, as macOS has trou-
	      ble  moving symlinks across volumes when the target does not yet
	      exist. This issue typically occurs when using FileVault or  cus-
	      tom SSD configurations.

	      Default: macOS: /private/tmp, Linux: /tmp.

       HOMEBREW_UPDATE_REPORT_ONLY_INSTALLED
	      If  set, brew update only outputs updates to installed software.

       HOMEBREW_UPDATE_TO_TAG
	      If set, always use the latest stable tag (even if developer com-
	      mands have been run).

       HOMEBREW_VERBOSE
	      If set, always assume --verbose when running commands.

       HOMEBREW_DEBUG
	      If set, always assume --debug when running commands.

       HOMEBREW_VERBOSE_USING_DOTS
	      If  set,	verbose  output  will  print  a  . no more than once a
	      minute. This can be useful to avoid long-running	Homebrew  com-
	      mands being killed due to no output.

       all_proxy
	      Use  this SOCKS5 proxy for curl(1), git(1) and svn(1) when down-
	      loading through Homebrew.

       ftp_proxy
	      Use this FTP proxy for curl(1), git(1) and svn(1) when download-
	      ing through Homebrew.

       http_proxy
	      Use  this  HTTP  proxy for curl(1), git(1) and svn(1) when down-
	      loading through Homebrew.

       https_proxy
	      Use this HTTPS proxy for curl(1), git(1) and svn(1)  when  down-
	      loading through Homebrew.

       no_proxy
	      A  comma-separated  list	of hostnames and domain names excluded
	      from proxying by curl(1), git(1)	and  svn(1)  when  downloading
	      through Homebrew.

       SUDO_ASKPASS
	      When  this variable is set, the -A option is passed when calling
	      sudo(8)

USING HOMEBREW BEHIND A PROXY
       Set the http_proxy, https_proxy, all_proxy, ftp_proxy  and/or  no_proxy
       environment variables documented above.

       For example, to use an unauthenticated HTTP or SOCKS5 proxy:



	   export http_proxy=http://$HOST:$PORT

	   export all_proxy=socks5://$HOST:$PORT



       And for an authenticated HTTP proxy:



	   export http_proxy=http://$USER:$PASSWORD@$HOST:$PORT



SEE ALSO
       Homebrew Documentation: https://docs.brew.sh

       Homebrew API: https://rubydoc.brew.sh

       git(1), git-log(1)

AUTHORS
       Homebrew's Project Leader is Mike McQuaid.

       Homebrew's Project Leadership Committee is Misty De Meo, Shaun Jackman,
       Jonathan Chang, Sean Molenaar and Markus Reiter.

       Homebrew's Technical Steering Committee is Michka Popoff,  FX  Coudert,
       Markus Reiter, Misty De Meo and Mike McQuaid.

       Homebrew/brew's	Linux  maintainers  are  Michka Popoff, Shaun Jackman,
       Dawid Dziurla, Issy Long and Maxim Belkin.

       Homebrew's other  current  maintainers  are  Claudia  Pellegrino,  Zach
       Auten,  Rui  Chen, Vitor Galvao, Caleb Xu, Gautham Goli, Steven Peters,
       Bo  Anderson,  William  Woodruff,  Igor	Kapkov,  Sam  Ford,  Alexander
       Bayandin,  Izaak  Beekman, Eric Knibbe, Viktor Szakats, Thierry Moisan,
       Steven Peters, Tom Schoonjans, Issy Long, CoreCode, Randall, Rylan Pol-
       ster, SeekingMeaning, William Ma and Dustin Rodrigues.

       Former maintainers with significant contributions include Jan Viljanen,
       JCount, commitay, Dominyk Tiller,  Tim  Smith,  Baptiste  Fontaine,  Xu
       Cheng,  Martin Afanasjew, Brett Koonce, Charlie Sharpsteen, Jack Nagel,
       Adam Vandenberg,  Andrew  Janke,  Alex  Dunn,  neutric,	Tomasz	Pajor,
       Uladzislau  Shablinski,	Alyssa	Ross,  ilovezfs, Chongyu Zhu and Home-
       brew's creator: Max Howell.

BUGS
       See our issues on GitHub:

       Homebrew/brew
	      https://github.com/Homebrew/brew/issues

       Homebrew/homebrew-core
	      https://github.com/Homebrew/homebrew-core/issues

       Homebrew/homebrew-cask
	      https://github.com/Homebrew/homebrew-cask/issues




Homebrew			September 2020			       BREW(1)
","# brew

> The Homebrew package manager for Linux.

- Search for available formulas:

`brew search {{text}}`

- Install the latest stable version of a formula (use `--devel` for development versions):

`brew install {{formula}}`

- List all installed formulae:

`brew list`

- Upgrade an installed formula (if no formula name is given, all installed formulae are upgraded):

`brew upgrade {{formula}}`

- Fetch the newest version of Linuxbrew and of all formulae from GitHub:

`brew update`

- Show formulae that have a more recent version available:

`brew outdated`

- Display information about a formula (version, installation path, dependencies, etc.):

`brew info {{formula}}`

- Check the local Linuxbrew installation for potential problems:

`brew doctor`
"
lvcreate,,,"# lvcreate

> Creates a logical volume in an existing volume group.
> A volume group is a collection of logical and physical volumes.

- Create a logical volume of 10 gigabytes in the volume group vg1:

`lvcreate -L {{10G}} {{vg1}}`

- Create a 1500 megabyte linear logical volume named mylv in the volume group vg1:

`lvcreate -L {{1500}} -n {{mylv}} {{vg1}}`

- Create a logical volume called mylv that uses 60% of the total space in volume group vg1:

`lvcreate -l {{60%VG}} -n {{mylv}} {{vg1}}`

- Create a logical volume called mylv that uses all of the unallocated space in the volume group vg1:

`lvcreate -l {{100%FREE}} -n {{mylv}} {{vg1}}`
"
mac2unix,,,"# mac2unix

> Change macOS-style line endings to Unix-style.
> Replaces LF with CR.

- Change the line endings of a file:

`mac2unix {{filename}}`

- Create a copy with Unix-style line endings:

`mac2unix -n {{filename}} {{new_filename}}`
"
hwclock,,,"# hwclock

> Used for reading or changing the hardware clock. Usually requires root.

- Display the current time as reported by the hardware clock:

`hwclock`

- Write the current software clock time to the hardware clock (sometimes used during system setup):

`hwclock --systohc`

- Write the current hardware clock time to the software clock:

`hwclock --hctosys`
"
pacman4console,https://github.com/YoctoForBeaglebone/pacman4console,,"# pacman4console

> A text-based console game inspired by the original Pacman.
> More information: <https://github.com/YoctoForBeaglebone/pacman4console>.

- Start a game at Level 1:

`pacman4console`

- Start a game on a certain level (there are nine official levels):

`pacman4console --level={{level_number}}`

- Start the pacman4console level editor, saving to a specified text file:

`pacman4consoleedit {{path/to/level_file}}`

- Play a custom level:

`pacman4console --level={{path/to/level_file}}`
"
compgen,,,"# compgen

> A built-in command for auto-completion in bash, which is called on pressing TAB key twice.

- List all commands that you could run:

`compgen -c`

- List all aliases:

`compgen -a`

- List all functions that you could run:

`compgen -A function`

- Show shell reserved key words:

`compgen -k`

- See all available commands/aliases starting with 'ls':

`compgen -ac {{ls}}`
"
eval,,"
BUILTIN(1)		  BSD General Commands Manual		    BUILTIN(1)

NAME
     builtin, !, %, ., :, @, {, }, alias, alloc, bg, bind, bindkey, break,
     breaksw, builtins, case, cd, chdir, command, complete, continue, default,
     dirs, do, done, echo, echotc, elif, else, end, endif, endsw, esac, eval,
     exec, exit, export, false, fc, fg, filetest, fi, for, foreach, getopts,
     glob, goto, hash, hashstat, history, hup, if, jobid, jobs, kill, limit,
     local, log, login, logout, ls-F, nice, nohup, notify, onintr, popd,
     printenv, pushd, pwd, read, readonly, rehash, repeat, return, sched, set,
     setenv, settc, setty, setvar, shift, source, stop, suspend, switch,
     telltc, test, then, time, times, trap, true, type, ulimit, umask,
     unalias, uncomplete, unhash, unlimit, unset, unsetenv, until, wait,
     where, which, while -- shell built-in commands

SYNOPSIS
     builtin [-options] [args ...]

DESCRIPTION
     Shell builtin commands are commands that can be executed within the run-
     ning shell's process.  Note that, in the case of csh(1) builtin commands,
     the command is executed in a subshell if it occurs as any component of a
     pipeline except the last.

     If a command specified to the shell contains a slash ``/'', the shell
     will not execute a builtin command, even if the last component of the
     specified command matches the name of a builtin command.  Thus, while
     specifying ``echo'' causes a builtin command to be executed under shells
     that support the echo builtin command, specifying ``/bin/echo'' or
     ``./echo'' does not.

     While some builtin commands may exist in more than one shell, their oper-
     ation may be different under each shell which supports them.  Below is a
     table which lists shell builtin commands, the standard shells that sup-
     port them and whether they exist as standalone utilities.

     Only builtin commands for the csh(1) and sh(1) shells are listed here.
     Consult a shell's manual page for details on the operation of its builtin
     commands.	Beware that the sh(1) manual page, at least, calls some of
     these commands ``built-in commands'' and some of them ``reserved words''.
     Users of other shells may need to consult an info(1) page or other
     sources of documentation.

     Commands marked ``No**'' under External do exist externally, but are
     implemented as scripts using a builtin command of the same name.

	   Command	 External    csh(1)    sh(1)
	   !		 No	     No        Yes
	   %		 No	     Yes       No
	   .		 No	     No        Yes
	   :		 No	     Yes       Yes
	   @		 No	     Yes       Yes
	   {		 No	     No        Yes
	   }		 No	     No        Yes
	   alias	 No**	     Yes       Yes
	   alloc	 No	     Yes       No
	   bg		 No**	     Yes       Yes
	   bind 	 No	     No        Yes
	   bindkey	 No	     Yes       No
	   break	 No	     Yes       Yes
	   breaksw	 No	     Yes       No
	   builtin	 No	     No        Yes
	   builtins	 No	     Yes       No
	   case 	 No	     Yes       Yes
	   cd		 No**	     Yes       Yes
	   chdir	 No	     Yes       Yes
	   command	 No**	     No        Yes
	   complete	 No	     Yes       No
	   continue	 No	     Yes       Yes
	   default	 No	     Yes       No
	   dirs 	 No	     Yes       No
	   do		 No	     No        Yes
	   done 	 No	     No        Yes
	   echo 	 Yes	     Yes       Yes
	   echotc	 No	     Yes       No
	   elif 	 No	     No        Yes
	   else 	 No	     Yes       Yes
	   end		 No	     Yes       No
	   endif	 No	     Yes       No
	   endsw	 No	     Yes       No
	   esac 	 No	     No        Yes
	   eval 	 No	     Yes       Yes
	   exec 	 No	     Yes       Yes
	   exit 	 No	     Yes       Yes
	   export	 No	     No        Yes
	   false	 Yes	     No        Yes
	   fc		 No**	     No        Yes
	   fg		 No**	     Yes       Yes
	   filetest	 No	     Yes       No
	   fi		 No	     No        Yes
	   for		 No	     No        Yes
	   foreach	 No	     Yes       No
	   getopts	 No**	     No        Yes
	   glob 	 No	     Yes       No
	   goto 	 No	     Yes       No
	   hash 	 No	     No        Yes
	   hashstat	 No	     Yes       No
	   history	 No	     Yes       No
	   hup		 No	     Yes       No
	   if		 No	     Yes       Yes
	   jobid	 No	     No        Yes
	   jobs 	 No**	     Yes       Yes
	   kill 	 Yes	     Yes       No
	   limit	 No	     Yes       No
	   local	 No	     No        Yes
	   log		 No	     Yes       No
	   login	 Yes	     Yes       No
	   logout	 No	     Yes       No
	   ls-F 	 No	     Yes       No
	   nice 	 Yes	     Yes       No
	   nohup	 Yes	     Yes       No
	   notify	 No	     Yes       No
	   onintr	 No	     Yes       No
	   popd 	 No	     Yes       No
	   printenv	 Yes	     Yes       No
	   pushd	 No	     Yes       No
	   pwd		 Yes	     No        Yes
	   read 	 No**	     No        Yes
	   readonly	 No	     No        Yes
	   rehash	 No	     Yes       No
	   repeat	 No	     Yes       No
	   return	 No	     No        Yes
	   sched	 No	     Yes       No
	   set		 No	     Yes       Yes
	   setenv	 No	     Yes       No
	   settc	 No	     Yes       No
	   setty	 No	     Yes       No
	   setvar	 No	     No        Yes
	   shift	 No	     Yes       Yes
	   source	 No	     Yes       No
	   stop 	 No	     Yes       No
	   suspend	 No	     Yes       No
	   switch	 No	     Yes       No
	   telltc	 No	     Yes       No
	   test 	 Yes	     No        Yes
	   then 	 No	     No        Yes
	   time 	 Yes	     Yes       No
	   times	 No	     No        Yes
	   trap 	 No	     No        Yes
	   true 	 Yes	     No        Yes
	   type 	 No	     No        Yes
	   ulimit	 No	     No        Yes
	   umask	 No**	     Yes       Yes
	   unalias	 No**	     Yes       Yes
	   uncomplete	 No	     Yes       No
	   unhash	 No	     Yes       No
	   unlimit	 No	     Yes       No
	   unset	 No	     Yes       Yes
	   unsetenv	 No	     Yes       No
	   until	 No	     No        Yes
	   wait 	 No**	     Yes       Yes
	   where	 No	     Yes       No
	   which	 Yes	     Yes       No
	   while	 No	     Yes       Yes

SEE ALSO
     csh(1), echo(1), false(1), info(1), kill(1), login(1), nice(1), nohup(1),
     printenv(1), pwd(1), sh(1), test(1), time(1), true(1), which(1)

HISTORY
     The builtin manual page first appeared in FreeBSD 3.4.

AUTHORS
     This manual page was written by Sheldon Hearn <sheldonh@FreeBSD.org>.

BSD			       February 23, 2005			   BSD
","# eval

> Execute arguments as a single command in the current shell and return its result.

- Call `echo` with the ""foo"" argument:

`eval ""{{echo foo}}""`

- Set a variable in the current shell:

`eval ""{{foo=bar}}""`
"
apt-key,https://host.tld/filename.key,,"# apt-key

> Key management utility for the APT Package Manager on Debian and Ubuntu.

- List trusted keys:

`apt-key list`

- Add a key to the trusted keystore:

`apt-key add {{public_key_file.asc}}`

- Delete a key from the trusted keystore:

`apt-key del {{key_id}}`

- Add a remote key to the trusted keystore:

`wget -qO - {{https://host.tld/filename.key}} | apt-key add -`

- Add a key from keyserver with only key id:

`apt-key adv --keyserver {{pgp.mit.edu}} --recv {{KEYID}}`
"
progress,https://github.com/Xfennec/progress,,"# progress

> Display/Monitor the progress of running coreutils.
> More information: <https://github.com/Xfennec/progress>.

- Show the progress of running coreutils:

`progress`

- Show the progress of running coreutils in quiet mode:

`progress -q`

- Launch and monitor a single long-running command:

`{{command}} & progress -mp $!`
"
groupdel,,,"# groupdel

> Delete existing user groups from the system.

- Delete an existing group:

`groupdel {{group_name}}`
"
pidof,,,"# pidof

> Gets the ID of a process using its name.

- List all process IDs with given name:

`pidof {{bash}}`

- List a single process ID with given name:

`pidof -s {{bash}}`

- List process IDs including scripts with given name:

`pidof -x {{script.py}}`

- Kill all processes with given name:

`kill ""$(pidof {{name}})"" `
"
mke2fs,,,"# mke2fs

> Creates a Linux filesystem inside a partition.

- Create an ext2 filesystem in partition 1 of device b (`sdb1`):

`mkfs.ext2 {{/dev/sdb1}}`

- Create an ext3 filesystem in partition 1 of device b (`sdb1`):

`mkfs.ext3 {{/dev/sdb1}}`

- Create an ext3 filesystem in partition 1 of device b (`sdb1`):

`mkfs.ext3 {{/dev/sdb1}}`
"
lrztar,,,"# lrztar

> A wrapper for `lrzip` to simplify compression of directories.
> See also: `tar`, `lrzuntar`, `lrunzip`.

- Archive a directory with `tar`, then compress:

`lrztar {{path/to/directory}}`

- Same as above, with ZPAQ - extreme compression, but very slow:

`lrztar -z {{path/to/directory}}`

- Specify the output file:

`lrztar -o {{path/to/file}} {{path/to/directory}}`

- Override the number of processor threads to use:

`lrztar -p {{8}} {{path/to/directory}}`

- Force overwriting of existing files:

`lrztar -f {{path/to/directory}}`
"
fsck,,"
FSCK(8) 		  BSD System Manager's Manual		       FSCK(8)

NAME
     fsck -- filesystem consistency check and interactive repair

SYNOPSIS
     fsck -p [-f]
     fsck [-l maxparallel] [-q] [-y] [-n] [-d]

DESCRIPTION
     The first form of fsck preens a standard set of filesystems or the speci-
     fied filesystems.	It is normally used in the script /etc/rc during auto-
     matic reboot.  Here fsck reads the filesystem descriptor table (using
     getfsent(3)) to determine which filesystems to check.  Only partitions
     that have ``rw,'' ``rq'' or ``ro'' as options, and that have non-zero
     pass number are checked.  Filesystems with pass number 1 (normally just
     the root filesystem) are checked one at a time.  When pass 1 completes,
     all remaining filesystems are checked, running one process per disk
     drive.  The disk drive containing each filesystem is inferred from the
     shortest prefix of the device name that ends in one or more digits; the
     remaining characters are assumed to be the partition designator.  In
     preening mode, filesystems that are marked clean are skipped.  Filesys-
     tems are marked clean when they are unmounted, when they have been
     mounted read-only, or when fsck runs on them successfully.

     It should be noted that fsck is now essentially a wrapper that invokes
     other fsck_XXX utilities as needed.  Currently, fsck can invoke fsck_hfs,
     fsck_apfs, fsck_msdos, fsck_exfat, and fsck_udf.  If this underlying
     process that fsck invokes encounters serious inconsistencies or the
     filesystem type is not one of the above, it exits with an abnormal return
     status and an automatic reboot will then fail.  For each corrected incon-
     sistency one or more lines will be printed identifying the filesystem on
     which the correction will take place, and the nature of the correction.

     If sent a QUIT signal, fsck will finish the filesystem checks, then exit
     with an abnormal return status that causes an automatic reboot to fail.
     This is useful when you want to finish the filesystem checks during an
     automatic reboot, but do not want the machine to come up multiuser after
     the checks complete.

     Without the -p option, fsck audits and interactively repairs inconsistent
     conditions for filesystems.  It should be noted that some of the correc-
     tive actions which are not correctable under the -p option will result in
     some loss of data.  The amount and severity of data lost may be deter-
     mined from the diagnostic output.	If the operator does not have write
     permission on the filesystem fsck will default to a -n action.

     The following flags are interpreted by fsck and passed along to the
     underlying tool that it spawns.

     -f 	 Force fsck to check `clean' filesystems when preening.

     -l 	 Limit the number of parallel checks to the number specified
		 in the following argument.  By default, the limit is the num-
		 ber of disks, running one process per disk.  If a smaller
		 limit is given, the disks are checked round-robin, one
		 filesystem at a time.

     -R 	 Specify a particular passno number for which fsck is to
		 check.  You may only specify 1 or 2.  Only those filesystems
		 matching that particular passno entry (if using fstab) will
		 be checked.  For more information on the passno field, see
		 fstab(5).

     -p 	 ""Preen"" mode, described above.

     -q 	 Do a quick check to determine if the filesystem was unmounted
		 cleanly.

     -y 	 Assume a yes response to all questions asked by fsck; this
		 should be used with great caution as this is a free license
		 to continue after essentially unlimited trouble has been
		 encountered.

     -n 	 Assume a no response to all questions asked by fsck except
		 for `CONTINUE?', which is assumed to be affirmative; do not
		 open the filesystem for writing.

     If no filesystems are given to fsck then a default list of filesystems is
     read using getfsent(3).

     Because of inconsistencies between the block device and the buffer cache,
     the raw device should always be used.

SEE ALSO
     fs(5), fsck_hfs(8), fsck_apfs(8), fsck_msdos(8), getfsent(3), fstab(5,)
     reboot(8)

4th Berkeley Distribution	 May 18, 2010	     4th Berkeley Distribution
","# fsck

> Check the integrity of a filesystem or repair it. The filesystem should be unmounted at the time the command is run.

- Check filesystem /dev/sda, reporting any damaged blocks:

`fsck {{/dev/sda}}`

- Check filesystem /dev/sda, reporting any damaged blocks and interactively letting the user choose to repair each one:

`fsck -r {{/dev/sda}}`

- Check filesystem /dev/sda, reporting any damaged blocks and automatically repairing them:

`fsck -a {{/dev/sda}}`
"
rpcinfo,,"
RPCINFO(8)		  BSD System Manager's Manual		    RPCINFO(8)

NAME
     rpcinfo -- report RPC information

SYNOPSIS
     rpcinfo [--rpcbvers version] [-m | -s] [host]
     rpcinfo [--rpcbvers version] -T netid host program [version]
     rpcinfo [--rpcbvers version] -a server address -T netid program [version]
     rpcinfo [--rpcbvers version] -b [-T netid] program version
     rpcinfo [--rpcbvers version] -d [-T netid] program version
     rpcinfo -l [-T netid] [host] program version
     rpcinfo [--rpcbvers version] --getaddr [-T netid] [host] program version
     rpcinfo --getversaddr [-T netid] [host] program version
     rpcinfo --indirect [-T netid] [host] program version
     rpcinfo [--rpcbvers version] --time [-T netid] [host]
     rpcinfo {--help | -h}
     rpcinfo -p [host]
     rpcinfo [-n portnum] -u host program [version]
     rpcinfo [-n portnum] -t host program [version]

DESCRIPTION
     rpcinfo makes an RPC call to an RPC server and reports what it finds.
     Unless otherwise specified or noted below the default rpcbind protocol
     version is 3.  With no or only generic options, call the rpcbind dump
     procedure on the specified host or ``localhost'' if host is not specified
     and display the results.  For versions 3 and 4 display the program num-
     ber, the version, the ``netid'', the universal address that the services
     is listening on, symbolic name of the program if known, and then the
     owner that registered the <program, version, netid, address> tuple.  For
     version 2 of the protocol list the program, version, protocol, port, and
     symbolic program name.  See the --summary option below for a typically
     more useful output. rpcbind defaults the netid to ``tcp'' for the dump
     procedure.

     The program argument can be either a name or a number.

     If a version is specified, rpcinfo attempts to call that version of the
     specified program.  Otherwise, if the version is optional rpcinfo
     attempts to find all the registered version numbers for the specified
     program by calling version 0 (which is presumed not to exist; if it does
     exist, rpcinfo attempts to obtain this information by calling an
     extremely high version number instead) and attempts to call each regis-
     tered version.

     A required transport option is needed for the second and third lines of
     the synopsis which is used to ping, i.e., call the null procedure of the
     specified program and version. The results will be displayed on stdout.
     If version is not specified each valid version found as described above
     will be called.  The third synopsis will use the supplied universal
     address over the transport specified by netid to call the null procedure
     of the specified program in the same manner as above. In addition the
     last two lines of the synopsis can ``ping'' the server as described in
     the Legacy Options section below.

GENERIC OPTIONS
     --rpcbvers version
	     Attempt to use the supplied rpcbind version. Note some options
	     below are version specific and this option may be ignored. If
	     specifying version 2 (portmapper), netid below must be one of
	     ``udp'' or ``tcp''.

     -T netid
	     Specify the netid to use. Supported netids are ``udp'', ``tcp'',
	     ``udp6'', and ``tcp6''.

     --timeout seconds
	     Timeout used in creating client handles and the client calls to
	     rpcbind. Current default is 12 seconds.

     Generic options may be supplied with any of the rpcinfo options below,
     though some options will override their values.

LEGACY OPTIONS
     The options below imply version 2 (portmapper) rpcbind calls. They are
     compatible with older versions of rpcinfo.

     {-p | --portmap} [-T netid] [host]
	     Probe the portmapper on host, and print a list of all registered
	     RPC programs.  If host is not specified, it defaults to the value
	     ``localhost''.

     {-u | --udpping} host program [version]
	     Make an RPC call to the NULL procedure of program on the speci-
	     fied host using UDP, and report whether a response was received.

     {-t | --tcpping} host program [version]
	     Make an RPC call to the NULL procedure of program on the speci-
	     fied host using TCP, and report whether a response was received.

     {-n | --portnum} portnum
	     Use portnum as the port number for the -t and -u options instead
	     of the port number given by the portmapper.

OPTIONS
     {-b | --broadcast} program version
	     Make an RPC multicast over INET6 to the RPCB_MULTICAST_ADDR,
	     ``FF02::202'', and broadcast over INET using UDP to procedure 0
	     of the specified program and version and report all hosts that
	     respond.  rpcifno will first use RPCBIND version 3 and then call
	     the broadcast procedure of the portmapper protocol to collect
	     older hosts. There is a reply cache kept so duplicates will not
	     be returned unless the cache fills.

	     Note that the -b option by its self is compatible with the older
	     portmapper.  However, specifying --rpcbvers 2 will short circuit
	     the rpcbind version 3 calls and only call the portmapper.

     {-d | --delete} [-T netid] program version
	     Delete registration for the RPC service of the specified program
	     and version.  If the netid is specified, only unregister the
	     program and version over that transport.  This option can be
	     exercised only by the super-user or the user who registered the
	     the RPC service.

     --getaddr [-T netid] [host] program version
	     Get the universal address that the client can use to contact the
	     program and version from host over netid.	If host is not speci-
	     fied localhost is assumed. If netid is not specified ``udp'' is
	     assumed. If the specified version is not available but some other
	     version is, return the universal address for one of those ver-
	     sions of the program.

     --getversaddr [-T netid] [host] program version
	     Get the universal address that the client can use to contact the
	     program and version from host over netid.	If host is not speci-
	     fied localhost is assumed. If netid is not specified ``udp'' is
	     assumed. If the version is not available then that will be indi-
	     cated. This requires the remote rpcbind support version 4.

     -h      Print out the synopsis of this program.

     --help  Print out the synopsis and an explanation of the options.

     --indirect [-T netid] [host] program version
	     Send a indirect call to the null procedure of program and version
	     on the specified host or localhost.  This requires the remote
	     rpcbind to support version 4.

     {-l | --list} [-T netid] [host] program version
	     List the transports available over the transport family specified
	     by the netid for the given program and version on the optional
	     host or localhost if not specified.  Requires the remote rpcbind
	     to support version 4.  The default transport family is INET.

     {-m | --metrics}
	     Print the metrics of rpcbind daemon for the specified host or
	     localhost if not specified.  Requires support for rpcbind ver-
	     sion 4 on the remote.

     {-s | --summary}
	     Print a summary of programs registered on host or ``localhost''
	     if host is not specified.	For each program registered list any
	     versions followed by any transports supported by that program.
	     Try to list the symbolic name of the transport and the owner that
	     registered the program.

     --time [host]
	     Return rpcbind's version of time on the specified host.

EXAMPLES
     To show all of the RPC services registered on the local machine use:

	   example% rpcinfo

     To show all of the RPC services registered on the machine named klaxon
     use:

	   example% rpcinfo klaxon

     More usefully to show the services registered on klaxon use:

	   example% rpcinfo -s klaxon

     To show all of the RPC services from an older host only running version 2
     of rpcbind on a host named horn use:

	   example% rpcinfo -p horn

     To show all machines on the local net that are running the NFS File ser-
     vice use:

	   example% rpcinfo -b nfs 'version'

     where 'version' is one of the current nfs versions of interest.

     To delete the registration for version 1 of the rquotad service use:

	   example% rpcinfo -d rquotad 1

SEE ALSO
     rpc(5), rpcbind(8)

     RPC Programming Guide.

     RFC 1833 Binding Protocols for ONC RPC Version 2.

     RFC 5665 IANA Considerations for Remote Procedure Call (RPC) Network
     Identifiers and Universal Address Formats.

BUGS
     In summary mode the maximum number of versions and transports is 16. The
     first 16 versions and the first 16 transports received from the server
     are displayed and the rest is silently ignored.

     In the second synopsis line, for a host that is specified as a link-local
     INET6 address will always return ``no route to host''.

     In releases prior to SunOS 3.0, the Network File System (NFS) did not
     register itself with the portmapper; rpcinfo cannot be used to make RPC
     calls to the NFS server on hosts running such releases.

BSD			       November 14, 2012			   BSD
","# rpcinfo

> Makes an RPC call to an RPC server and reports what it finds.

- Show full table of all RPC services registered on localhost:

`rpcinfo`

- Show concise table of all RPC services registered on localhost:

`rpcinfo -s {{localhost}}`

- Display table of statistics of rpcbind operations on localhost:

`rpcinfo -m`

- Display list of entries of given service name (mountd) and version number (2) on a remote nfs share:

`rpcinfo -l {{remote_nfs_server_ip}} {{mountd}} {{2}}`

- Delete the registration for version 1 of the mountd service for all transports:

`rpcinfo -d {{mountd}} {{1}}`
"
sysctl,,"
SYSCTL(8)		  BSD System Manager's Manual		     SYSCTL(8)

NAME
     sysctl -- get or set kernel state

SYNOPSIS
     sysctl [-bdehiNnoqx] name[=value] ...
     sysctl [-bdehNnoqx] -a

DESCRIPTION
     The sysctl utility retrieves kernel state and allows processes with
     appropriate privilege to set kernel state.  The state to be retrieved or
     set is described using a ``Management Information Base'' (``MIB'') style
     name, described as a dotted set of components.

     The following options are available:

     -A      Equivalent to -o -a (for compatibility).

     -a      List all the currently available non-opaque values.  This option
	     is ignored if one or more variable names are specified on the
	     command line.

     -b      Force the value of the variable(s) to be output in raw, binary
	     format.  No names are printed and no terminating newlines are
	     output.  This is mostly useful with a single variable.

     -d      Print the description of the variable instead of its value.

     -e      Separate the name and the value of the variable(s) with `='.
	     This is useful for producing output which can be fed back to the
	     sysctl utility.  This option is ignored if either -N or -n is
	     specified, or a variable is being set.

     -h      Format output for human, rather than machine, readability.

     -i      Ignore unknown OIDs.  The purpose is to make use of sysctl for
	     collecting data from a variety of machines (not all of which are
	     necessarily running exactly the same software) easier.

     -N      Show only variable names, not their values.  This is particularly
	     useful with shells that offer programmable completion.  To enable
	     completion of variable names in zsh(1) (ports/shells/zsh), use
	     the following code:

		   listsysctls () { set -A reply $(sysctl -AN ${1%.*}) }
		   compctl -K listsysctls sysctl

	     To enable completion of variable names in tcsh(1), use:

		   complete sysctl 'n/*/`sysctl -Na`/'

     -n      Show only variable values, not their names.  This option is use-
	     ful for setting shell variables.  For instance, to save the page-
	     size in variable psize, use:

		   set psize=`sysctl -n hw.pagesize`

     -o      Show opaque variables (which are normally suppressed).  The for-
	     mat and length are printed, as well as a hex dump of the first
	     sixteen bytes of the value.

     -q      Suppress some warnings generated by sysctl to standard error.

     -X      Equivalent to -x -a (for compatibility).

     -x      As -o, but prints a hex dump of the entire value instead of just
	     the first few bytes.

     The information available from sysctl consists of integers, strings, and
     opaque types.  The sysctl utility only knows about a couple of opaque
     types, and will resort to hexdumps for the rest.  The opaque information
     is much more useful if retrieved by special purpose programs such as
     ps(1), systat(1), and netstat(1).

     The string and integer information is summarized below.  For a detailed
     description of these variable see sysctl(3).

     The changeable column indicates whether a process with appropriate privi-
     lege can change the value.  String and integer values can be set using
     sysctl.

     Name					 Type	       Changeable
     hw.activecpu				 integer       no
     hw.busfrequency				 integer       no
     hw.busfrequency_max			 integer       no
     hw.busfrequency_min			 integer       no
     hw.byteorder				 integer       no
     hw.cacheconfig				 struct        no
     hw.cachelinesize				 integer       no
     hw.cachesize				 struct        no
     hw.cpu64bit_capable			 integer       no
     hw.cpufamily				 integer       no
     hw.cpufrequency				 integer       no
     hw.cpufrequency_max			 integer       no
     hw.cpufrequency_min			 integer       no
     hw.cpusubtype				 integer       no
     hw.cputhreadtype				 integer       no
     hw.cputype 				 integer       no
     hw.l1dcachesize				 integer       no
     hw.l1icachesize				 integer       no
     hw.l2cachesize				 integer       no
     hw.l3cachesize				 integer       no
     hw.logicalcpu				 integer       no
     hw.logicalcpu_max				 integer       no
     hw.memsize 				 integer       no
     hw.ncpu					 integer       no
     hw.packages				 integer       no
     hw.pagesize				 integer       no
     hw.physicalcpu				 integer       no
     hw.physicalcpu_max 			 integer       no
     hw.tbfrequency				 integer       no
     kern.argmax				 integer       no
     kern.bootargs				 string        no
     kern.boottime				 struct        no
     kern.clockrate				 struct        no
     kern.coredump				 integer       yes
     kern.corefile				 string        yes
     kern.flush_cache_on_write			 integer       yes
     kern.hostid				 integer       yes
     kern.hostname				 string        yes
     kern.job_control				 integer       no
     kern.maxfiles				 integer       yes
     kern.maxfilesperproc			 integer       yes
     kern.maxnbuf				 integer       yes
     kern.maxproc				 integer       yes
     kern.maxprocperuid 			 integer       yes
     kern.maxvnodes				 integer       yes
     kern.msgbuf				 integer       yes
     kern.nbuf					 integer       no
     kern.netboot				 integer       no
     kern.ngroups				 integer       no
     kern.nisdomainname 			 string        yes
     kern.num_files				 integer       no
     kern.num_tasks				 integer       no
     kern.num_taskthreads			 integer       no
     kern.num_threads				 integer       no
     kern.num_vnodes				 integer       no
     kern.nx					 integer       yes
     kern.osrelease				 string        no
     kern.osrevision				 integer       no
     kern.ostype				 string        no
     kern.osversion				 string        yes
     kern.posix1version 			 integer       no
     kern.procname				 string        yes
     kern.safeboot				 integer       no
     kern.saved_ids				 integer       no
     kern.secure_kernel 			 integer       no
     kern.securelevel				 integer       yes
     kern.singleuser				 integer       no
     kern.sleeptime				 struct        no
     kern.slide 				 integer       no
     kern.stack_depth_max			 integer       no
     kern.stack_size				 integer       no
     kern.sugid_coredump			 integer       yes
     kern.sugid_scripts 			 integer       yes
     kern.symfile				 string        no
     kern.usrstack				 integer       no
     kern.usrstack64				 integer       no
     kern.uuid					 string        no
     kern.version				 string        no
     kern.waketime				 struct        no
     machdep.cpu.address_bits.physical		 integer       no
     machdep.cpu.address_bits.virtual		 integer       no
     machdep.cpu.brand				 integer       no
     machdep.cpu.brand_string			 string        no
     machdep.cpu.cache.L2_associativity 	 integer       no
     machdep.cpu.cache.linesize 		 integer       no
     machdep.cpu.cache.size			 integer       no
     machdep.cpu.core_count			 integer       no
     machdep.cpu.cores_per_package		 integer       no
     machdep.cpu.extfamily			 integer       no
     machdep.cpu.extfeature_bits		 integer       no
     machdep.cpu.extfeatures			 string        no
     machdep.cpu.extmodel			 integer       no
     machdep.cpu.family 			 integer       no
     machdep.cpu.feature_bits			 integer       no
     machdep.cpu.features			 string        no
     machdep.cpu.leaf7_feature_bits		 integer       no
     machdep.cpu.leaf7_features 		 string        no
     machdep.cpu.logical_per_package		 integer       no
     machdep.cpu.max_basic			 integer       no
     machdep.cpu.max_ext			 integer       no
     machdep.cpu.microcode_version		 integer       no
     machdep.cpu.model				 integer       no
     machdep.cpu.processor_flag 		 integer       no
     machdep.cpu.signature			 integer       no
     machdep.cpu.stepping			 integer       no
     machdep.cpu.thread_count			 integer       no
     machdep.cpu.tlb.data.large 		 integer       no
     machdep.cpu.tlb.data.large_level1		 integer       no
     machdep.cpu.tlb.data.small 		 integer       no
     machdep.cpu.tlb.data.small_level1		 integer       no
     machdep.cpu.tlb.inst.large 		 integer       no
     machdep.cpu.tlb.inst.small 		 integer       no
     machdep.cpu.tlb.shared			 integer       no
     machdep.cpu.ucupdate			 integer       yes
     machdep.cpu.vendor 			 string        no
     machdep.cpu.xsave.extended_state		 integer       no
     machdep.tsc.deep_idle_rebase		 integer       yes
     machdep.tsc.frequency			 integer       no
     machdep.tsc.nanotime.generation		 integer       no
     machdep.tsc.nanotime.shift 		 integer       no
     net.inet.ip.forwarding			 integer       yes
     net.inet.ip.portrange.first		 integer       yes
     net.inet.ip.portrange.hifirst		 integer       yes
     net.inet.ip.portrange.hilast		 integer       yes
     net.inet.ip.portrange.last 		 integer       yes
     net.inet.ip.portrange.lowfirst		 integer       yes
     net.inet.ip.portrange.lowlast		 integer       yes
     net.inet.ip.redirect			 integer       yes
     net.inet.ip.ttl				 integer       yes
     net.inet.udp.checksum			 integer       yes
     net.inet.udp.maxdgram			 integer       yes
     vm.loadavg 				 struct        no
     vm.swapusage				 struct        no
     user.bc_base_max				 integer       no
     user.bc_dim_max				 integer       no
     user.bc_scale_max				 integer       no
     user.bc_string_max 			 integer       no
     user.coll_weights_max			 integer       no
     user.cs_path				 string        no
     user.expr_nest_max 			 integer       no
     user.line_max				 integer       no
     user.posix2_c_bind 			 integer       no
     user.posix2_c_dev				 integer       no
     user.posix2_char_term			 integer       no
     user.posix2_fort_dev			 integer       no
     user.posix2_fort_run			 integer       no
     user.posix2_localedef			 integer       no
     user.posix2_sw_dev 			 integer       no
     user.posix2_upe				 integer       no
     user.posix2_version			 integer       no
     user.re_dup_max				 integer       no
     user.stream_max				 integer       no
     user.tzname_max				 integer       no

FILES
     <sys/sysctl.h>	   definitions for top level identifiers, second level
			   kernel and hardware identifiers, and user level
			   identifiers
     <sys/socket.h>	   definitions for second level network identifiers
     <sys/gmon.h>	   definitions for third level profiling identifiers
     <vm/vm_param.h>	   definitions for second level virtual memory identi-
			   fiers
     <netinet/in.h>	   definitions for third level Internet identifiers
			   and fourth level IP identifiers
     <netinet/icmp_var.h>  definitions for fourth level ICMP identifiers
     <netinet/udp_var.h>   definitions for fourth level UDP identifiers

EXAMPLES
     For example, to retrieve the maximum number of processes allowed in the
     system, one would use the following request:

	   sysctl kern.maxproc

     To set the maximum number of processes allowed per uid to 1000, one would
     use the following request:

	   sysctl kern.maxprocperuid=1000

     Information about the system clock rate may be obtained with:

	   sysctl kern.clockrate

     Information about the load average history may be obtained with:

	   sysctl vm.loadavg

     More variables than these exist, and the best and likely only place to
     search for their deeper meaning is undoubtedly the source where they are
     defined.

COMPATIBILITY
     The -w option has been deprecated and is silently ignored.

SEE ALSO
     sysctl(3), sysctl.conf(5)

HISTORY
     A sysctl utility first appeared in 4.4BSD.

     In FreeBSD 2.2, sysctl was significantly remodeled.

BSD			       January 17, 2011 			   BSD
","# sysctl

> List and change kernel runtime variables.

- Show all available variables and their values:

`sysctl -a`

- Set a changeable kernel state variable:

`sysctl -w {{section.tunable}}={{value}}`

- Get currently open file handlers:

`sysctl fs.file-nr`

- Get limit for simultaneous open files:

`sysctl fs.file-max`

- Apply changes from /etc/sysctl.conf:

`sysctl -p`
"
cpufreq-set,,,"# cpufreq-set

> A tool to modify CPU frequency settings.
> The frequency value should range between the output of command `cpufreq-info -l`.

- Set the CPU frequency policy of CPU 1 to ""userspace"":

`sudo cpufreq-set -c {{1}} -g {{userspace}}`

- Set the current minimum CPU frequency of CPU 1:

`sudo cpufreq-set -c {{1}} --min {{min_frequency}}`

- Set the current maximum CPU frequency of CPU 1:

`sudo cpufreq-set -c {{1}} --max {{max_frequency}}`

- Set the current work frequency of CPU 1:

`sudo cpufreq-set -c {{1}} -f {{work_frequency}}`
"
feh,,,"# feh

> Lightweight image viewing utility.

- View images locally or using a URL:

`feh {{path/to/images}}`

- View images recursively:

`feh --recursive {{path/to/images}}`

- View images without window borders:

`feh --borderless {{path/to/images}}`

- Exit after the last image:

`feh --cycle-once {{path/to/images}}`

- Set the slideshow cycle delay:

`feh --slideshow-delay {{seconds}} {{path/to/images}}`

- Set your wallpaper (centered, filled, maximized, scaled or tiled):

`feh --bg-{{center|fill|max|scale|tile}} {{path/to/image}}`
"
betterlockscreen,,,"# betterlockscreen

> Simple, minimal lock screen.

- Lock the screen:

`betterlockscreen --lock`

- Change the lock screen background:

`betterlockscreen -u {{path/to/image.png}}`

- Lock the screen, showing some custom text:

`betterlockscreen -l pixel -t ""{{custom lock screen text}}""`

- Lock the screen, with a custom monitor off timeout in seconds:

`betterlockscreen --off {{5}} -l`
"
fc-list,,"FC-LIST(1)							    FC-LIST(1)



NAME
       fc-list - list available fonts

SYNOPSIS
       fc-list	[ -vVh ]  [ --verbose ]  [  [ -f format ]  [ --format format ]
       ]  [  [ -q ]  [ --quiet ]  ]  [ --version ]  [ --help ]

	[ pattern  [ element... ]   ]

DESCRIPTION
       fc-list lists fonts and styles available on the system for applications
       using  fontconfig.   If	any  elements  are  specified,	only those are
       printed.  Otherwise family and style are printed, unless verbose output
       is requested.

OPTIONS
       This  program  follows  the  usual  GNU	command line syntax, with long
       options starting with  two  dashes  (`-').  A  summary  of  options  is
       included below.

       -v     Print  verbose  output of the whole font pattern for each match,
	      or elements if any is provided.

       -f     Format output according to the format specifier format.

       -q     Suppress all normal output. returns 1 as the error  code	if  no
	      fonts matched.

       -V     Show version of the program and exit.

       -h     Show summary of options.

       pattern
	      If  this	argument  is set, only fonts matching pattern are dis-
	      played.

       element
	      If set, the element property is displayed for matching fonts.

EXAMPLES
       fc-list
	      Lists all font faces.

       fc-list :lang=hi
	      Lists font faces that cover Hindi.

       fc-list : family style file spacing
	      Lists the filename and spacing value for each font  face.  ``:''
	      is an empty pattern that matches all fonts.

SEE ALSO
       fc-match(1)  FcFontList(3) FcPatternFormat(3) fc-cat(1) fc-cache(1) fc-
       pattern(1) fc-query(1) fc-scan(1)

       The fontconfig user's guide, in	HTML  format:  /usr/share/doc/fontcon-
       fig/fontconfig-user.html.

AUTHOR
       This  manual  page was written by Keith Packard <keithp@keithp.com> and
       Josselin Mouette <joss@debian.org>.



				 Aug 13, 2008			    FC-LIST(1)
","# fc-list

> List available fonts installed on the system.

- Return a list of installed fonts in your system:

`fc-list`

- Return a list of installed fonts with given name:

`fc-list | grep '{{DejaVu Serif}}'`

- Return the number of installed fonts in your system:

`fc-list | wc -l`
"
watch,,"WATCH(1)			 User Commands			      WATCH(1)



NAME
       watch - execute a program periodically, showing output fullscreen

SYNOPSIS
       watch [options] command

DESCRIPTION
       watch  runs  command  repeatedly, displaying its output and errors (the
       first screenfull).  This allows you to watch the program output	change
       over  time.   By default, command is run every 2 seconds and watch will
       run until interrupted.

OPTIONS
       -d, --differences [permanent]
	      Highlight the differences between  successive  updates.	Option
	      will  read optional argument that changes highlight to be perma-
	      nent, allowing to see what has changed at least once since first
	      iteration.

       -n, --interval seconds
	      Specify  update  interval.   The	command will not allow quicker
	      than 0.1 second interval, in which the smaller values  are  con-
	      verted. Both '.' and ',' work for any locales.

       -p, --precise
	      Make watch attempt to run command every interval seconds. Try it
	      with  ntptime  and  notice  how  the  fractional	seconds  stays
	      (nearly) the same, as opposed to normal mode where they continu-
	      ously increase.

       -t, --no-title
	      Turn off the header showing the interval, command,  and  current
	      time  at	the top of the display, as well as the following blank
	      line.

       -b, --beep
	      Beep if command has a non-zero exit.

       -e, --errexit
	      Freeze updates on command error, and exit after a key press.

       -g, --chgexit
	      Exit when the output of command changes.

       -c, --color
	      Interpret ANSI color and style sequences.

       -x, --exec
	      Pass command to exec(2) instead of sh -c which reduces the  need
	      to use extra quoting to get the desired effect.

       -h, --help
	      Display help text and exit.

       -v, --version
	      Display version information and exit.

EXIT STATUS
	      0      Success.
	      1      Various failures.
	      2      Forking the process to watch failed.
	      3      Replacing	child  process	stdout	with  write  side pipe
		     failed.
	      4      Command execution failed.
	      5      Closing child process write pipe failed.
	      7      IPC pipe creation failed.
	      8      Getting  child  process  return  value  with   waitpid(2)
		     failed, or command exited up on error.
	      other  The  watch  will  propagate  command exit status as child
		     exit status.
NOTES
       POSIX option processing is used (i.e., option processing stops  at  the
       first  non-option argument).  This means that flags after command don't
       get interpreted by watch itself.
BUGS
       Upon terminal resize, the screen will not be correctly repainted  until
       the  next  scheduled update.  All --differences highlighting is lost on
       that update as well.

       Non-printing characters are stripped from program output.  Use ""cat -v""
       as part of the command pipeline if you want to see them.

       Combining  Characters  that are supposed to display on the character at
       the last column on the screen may display one column early, or they may
       not display at all.

       Combining  Characters  never  count as different in --differences mode.
       Only the base character counts.

       Blank lines directly after a line which ends in the last column do  not
       display.

       --precise mode doesn't yet have advanced temporal distortion technology
       to compensate for a command that takes more than  interval  seconds  to
       execute.   watch also can get into a state where it rapid-fires as many
       executions of command as it can to catch up from a previous  executions
       running longer than interval (for example, netstat taking ages on a DNS
       lookup).
EXAMPLES
       To watch for mail, you might do
	      watch -n 60 from
       To watch the contents of a directory change, you could use
	      watch -d ls -l
       If you're only interested in files owned by user joe, you might use
	      watch -d 'ls -l | fgrep joe'
       To see the effects of quoting, try these out
	      watch echo $$
	      watch echo '$$'
	      watch echo ""'""'$$'""'""
       To see the effect of precision time keeping, try adding -p to
	      watch -n 10 sleep 1
       You can watch for your administrator to install the latest kernel with
	      watch uname -r
       (Note that -p isn't guaranteed to work across  reboots,	especially  in
       the face of ntpdate or other bootup time-changing mechanisms)



procps-ng			  2018-03-03			      WATCH(1)
","# watch

> Execute a command repeatedly, and monitor the output in full-screen mode.

- Monitor files in the current directory:

`watch {{ls}}`

- Monitor disk space and highlight the changes:

`watch -d {{df}}`

- Monitor ""node"" processes, refreshing every 3 seconds:

`watch -n {{3}} ""{{ps aux | grep node}}""`
"
rpm,,,"# rpm

> RPM Package Manager.

- Show version of httpd package:

`rpm -q {{httpd}}`

- List versions of all matching packages:

`rpm -qa '{{mariadb*}}'`

- Forcibly install a package regardless of currently installed versions:

`rpm -U {{package_name.rpm}} --force`

- Identify owner of a file and show version of the package:

`rpm -qf {{/etc/postfix/main.cf}}`

- List package-owned files:

`rpm -ql {{kernel}}`

- Show scriptlets from an RPM file:

`rpm -qp --scripts {{package_name.rpm}}`

- Show changed, missing and/or incorrectly installed files of matching packages:

`rpm -Va '{{php-*}}'`
"
feedreader,https://jangernert.github.io/FeedReader/,,"# feedreader

> A GUI desktop RSS client.
> More information: <https://jangernert.github.io/FeedReader/>.

- Print the count of unread articles:

`feedreader --unreadCount`

- Add a URL for a feed to follow:

`feedreader --addFeed={{feed_url}}`

- Grab a specific article using its URL:

`feedreader --grabArticle={{article_url}}`

- Download all images from a specific article:

`feedreader --url={{feed_url}} --grabImages={{article_path}}`

- Play media from a URL:

`feedreader --playMedia={{article_url}}`
"
iptables,,,"# iptables

> Program that allows configuration of tables, chains and rules provided by the Linux kernel firewall.

- View chains, rules, and packet/byte counters for all tables:

`sudo iptables -vnL`

- Set chain policy rule:

`sudo iptables -P {{chain}} {{rule}}`

- Append rule to chain policy for IP:

`sudo iptables -A {{chain}} -s {{ip}} -j {{rule}}`

- Append rule to chain policy for IP considering protocol and port:

`sudo iptables -A {{chain}} -s {{ip}} -p {{protocol}} --dport {{port}} -j {{rule}}`

- Delete chain rule:

`sudo iptables -D {{chain}} {{rule_line_number}}`

- Save iptables configuration of a given table to a file:

`sudo iptables-save -t {{tablename}} > {{path/to/iptables_file}}`

- Restore iptables configuration from a file:

`sudo iptables-restore < {{path/to/iptables_file}}`
"
hlint,http://hackage.haskell.org/package/hlint,,"# hlint

> Tool for suggesting improvements to Haskell code.
> More information: <http://hackage.haskell.org/package/hlint>.

- Display suggestions for a given file:

`hlint {{path/to/file}} options`

- Check all Haskell files and generate a report:

`hlint {{path/to/directory}} --report`

- Automatically apply most suggestions:

`hlint {{path/to/file}} --refactor`

- Display additional options:

`hlint {{path/to/file}} --refactor-options`

- Generate a settings file ignoring all outstanding hints:

`hlint {{path/to/file}} --default > {{.hlint.yaml}}`
"
microcom,,,"# microcom

> A minimalistic terminal program, used to access remote devices via a serial, CAN or telnet connection from the console.

- Open a serial port using the specified baud rate:

`microcom --port {{path/to/serial_port}} --speed {{baud_rate}}`

- Establish a telnet connection to the specified host:

`microcom --telnet {{hostname}}:{{port}}`
"
getfacl,,,"# getfacl

> Get file access control lists.

- Display the file access control list:

`getfacl {{path/to/file_or_directory}}`

- Display the file access control list with numeric user and group IDs:

`getfacl -n {{path/to/file_or_directory}}`

- Display the file access control list with tabular output format:

`getfacl -t {{path/to/file_or_directory}}`
"
timedatectl,,,"# timedatectl

> Control the system time and date.

- Check the current system clock time:

`timedatectl`

- Set the local time of the system clock directly:

`timedatectl set-time {{""yyyy-MM-dd hh:mm:ss""}}`

- List available timezones:

`timedatectl list-timezones`

- Set the system timezone:

`timedatectl set-timezone {{timezone}}`

- Enable Network Time Protocol (NTP) synchronization:

`timedatectl set-ntp on`
"
a2ensite,https://manpages.debian.org/buster/apache2/a2ensite.8.en.html,,"# a2ensite

> Enable an Apache virtual host on Debian-based OSes.
> More information: <https://manpages.debian.org/buster/apache2/a2ensite.8.en.html>.

- Enable a virtual host:

`sudo a2ensite {{virtual_host}}`

- Don't show informative messages:

`sudo a2ensite --quiet {{virtual_host}}`
"
lvreduce,,,"# lvreduce

> Reduce the size of a logical volume.

- Reduce a volume's size to 120GB:

`lvreduce --size {{120G}} {{logical_volume}}`

- Reduce a volume's size by 40GB as well as the underlying filesystem:

`lvreduce --size -{{40G}} -r {{logical_volume}}`
"
xvfb-run,https://www.x.org/wiki/,,"# xvfb-run

> Run a command in a virtual X server environment.
> More information: <https://www.x.org/wiki/>.

- Run the specified command in a virtual X server:

`xvfb-run {{command}}`

- Try to get a free server number, if the default (99) is not available:

`xvfb-run --auto-servernum {{command}}`

- Pass arguments to the Xvfb server:

`xvfb-run --server-args ""{{-screen 0 1024x768x24}}"" {{command}}`
"
sensible-editor,,,"# sensible-editor

> Open the default editor.

- Open a file in the default editor:

`sensible-editor {{file}}`

- Open a file in the default editor, with the cursor at the end of the file:

`sensible-editor + {{file}}`

- Open a file in the default editor, with the cursor at the beginning of line 10:

`sensible-editor +10 {{file}}`

- Open 3 files in vertically splitted editor windows at the same time:

`sensible-editor -O3 {{file_1}} {{file_2}} {{file_3}}`
"
setxkbmap,,,"# setxkbmap

> Set the keyboard using the X Keyboard Extension.

- Set the keyboard in French AZERTY:

`setxkbmap {{fr}}`

- Set multiple keyboard layouts, their variants and switching option:

`setxkbmap -layout {{us,de}} -variant {{,qwerty}} -option {{'grp:alt_caps_toggle'}}`

- Get help:

`setxkbmap -help`

- List all layouts:

`localectl list-x11-keymap-layouts`

- List variants for the layout:

`localectl list-x11-keymap-variants {{de}}`

- List available switching options:

`localectl list-x11-keymap-options | grep grp:`
"
ip-address,,,"# ip address

> IP Address management subcommand.

- List network interfaces and their associated IP addresses:

`ip address`

- Filter to show only active network interfaces:

`ip address show up`

- Display information about a specific network interface:

`ip address show dev {{eth0}}`

- Add an IP address to a network interface:

`ip address add {{ip_address}} dev {{eth0}}`

- Remove an IP address from a network interface:

`ip address delete {{ip_address}} dev {{eth0}}`

- Delete all IP addresses in a given scope from a network interface:

`ip address flush dev {{eth0}} scope {{global|host|link}}`
"
lrzuntar,,,"# lrzuntar

> A wrapper for `lrunzip` to simplify decompression of directories.
> See also: `lrztar`, `lrzip`.

- Decompress from a file to the current directory:

`lrzuntar {{path/to/archive.tar.lrz}}`

- Decompress from a file to the current directory using a specific number of processor threads:

`lrzuntar -p {{8}} {{path/to/archive.tar.lrz}}`

- Decompress from a file to the current directory and silently overwrite items that already exist:

`lrzuntar -f {{archive.tar.lrz}}`

- Specify the output path:

`lrzuntar -O {{path/to/directory}} {{archive.tar.lrz}}`

- Delete the compressed file after decompression:

`lrzuntar -D {{path/to/archive.tar.lrz}}`
"
beep,,"curs_beep(3X)							 curs_beep(3X)



NAME
       beep, flash - curses bell and screen flash routines

SYNOPSIS
       #include <curses.h>

       int beep(void);
       int flash(void);

DESCRIPTION
       The  beep  and flash routines are used to alert the terminal user.  The
       routine beep sounds an audible alarm on the terminal, if possible; oth-
       erwise it flashes the screen (visible bell).  The routine flash flashes
       the screen, and if that is not possible, sounds the alert.  If  neither
       alert is possible, nothing happens.  Nearly all terminals have an audi-
       ble alert (bell or beep), but only some can flash the screen.

RETURN VALUE
       These routines return OK if they succeed in beeping  or	flashing,  ERR
       otherwise.

EXTENSIONS
       SVr4's beep and flash routines always returned OK, so it was not possi-
       ble to tell when the beep or flash failed.

PORTABILITY
       These functions are described in the  XSI  Curses  standard,  Issue  4.
       Like SVr4, it specifies that they always return OK.

SEE ALSO
       curses(3X)



								 curs_beep(3X)
","# beep

> A utility to beep the PC speaker.

- Play a beep:

`beep`

- Play a beep that repeats:

`beep -r {{repetitions}}`

- Play a beep at a specified frequency (Hz) and duration (milliseconds):

`beep -f {{frequency}} -l {{duration}}`

- Play each new frequency and duration as a distinct beep:

`beep -f {{frequency}} -l {{duration}} -n -f {{frequency}} -l {{duration}}`

- Play the C major scale:

`beep -f 262 -n -f 294 -n -f 330 -n -f 349 -n -f 392 -n -f 440 -n -f 494 -n -f 523`
"
rc-update,,,"# rc-update

> Add and remove OpenRC services to and from runlevels.
> See also `openrc`.

- List all services and the runlevels they are added to:

`rc-update show`

- Add a service to a runlevel:

`sudo rc-update add {{service_name}} {{runlevel}}`

- Delete a service from a runlevel:

`sudo rc-update delete {{service_name}} {{runlevel}}`

- Delete a service from all runlevels:

`sudo rc-update --all delete {{service_name}}`
"
rfkill,,,"# rfkill

> Enable and disable wireless devices.

- List devices:

`rfkill`

- Filter by columns:

`rfkill -o {{ID,TYPE,DEVICE}}`

- Block devices by type (e.g. bluetooth, wlan):

`rfkill block {{bluetooth}}`

- Unblock devices by type (e.g. bluetooth, wlan):

`rfkill unblock {{wlan}}`

- Output in JSON format:

`rfkill -J`
"
lsscsi,,,"# lsscsi

> List SCSI devices (or hosts) and their attributes.

- List all SCSI devices:

`lsscsi`

- List all SCSI devices with detailed attributes:

`lsscsi -L`

- List all SCSI devices with human readable disk capacity:

`lsscsi -s`
"
hexdump,,"
HEXDUMP(1)		  BSD General Commands Manual		    HEXDUMP(1)

NAME
     hexdump -- ASCII, decimal, hexadecimal, octal dump

SYNOPSIS
     hexdump [-bcCdovx] [-e format_string] [-f format_file] [-n length]
	     [-s skip] file ...

DESCRIPTION
     The hexdump utility is a filter which displays the specified files, or
     the standard input, if no files are specified, in a user specified for-
     mat.

     The options are as follows:

     -b      One-byte octal display.  Display the input offset in hexadecimal,
	     followed by sixteen space-separated, three column, zero-filled,
	     bytes of input data, in octal, per line.

     -C      Canonical hex+ASCII display.  Display the input offset in hexa-
	     decimal, followed by sixteen space-separated, two column, hexa-
	     decimal bytes, followed by the same sixteen bytes in %_p format
	     enclosed in ``|'' characters.

     -c      One-byte character display.  Display the input offset in hexadec-
	     imal, followed by sixteen space-separated, three column, space-
	     filled, characters of input data per line.

     -d      Two-byte decimal display.	Display the input offset in hexadeci-
	     mal, followed by eight space-separated, five column, zero-filled,
	     two-byte units of input data, in unsigned decimal, per line.

     -e format_string
	     Specify a format string to be used for displaying data.

     -f format_file
	     Specify a file that contains one or more newline separated format
	     strings.  Empty lines and lines whose first non-blank character
	     is a hash mark (#) are ignored.

     -n length
	     Interpret only length bytes of input.

     -o      Two-byte octal display.  Display the input offset in hexadecimal,
	     followed by eight space-separated, six column, zero-filled, two
	     byte quantities of input data, in octal, per line.

     -s offset
	     Skip offset bytes from the beginning of the input.  By default,
	     offset is interpreted as a decimal number.  With a leading 0x or
	     0X, offset is interpreted as a hexadecimal number, otherwise,
	     with a leading 0, offset is interpreted as an octal number.
	     Appending the character b, k, m, or g to offset causes it to be
	     interpreted as a multiple of 512, 1024, 1048576, or 1073741824,
	     respectively.

     -v      Cause hexdump to display all input data.  Without the -v option,
	     any number of groups of output lines, which would be identical to
	     the immediately preceding group of output lines (except for the
	     input offsets), are replaced with a line comprised of a single
	     asterisk.

     -x      Two-byte hexadecimal display.  Display the input offset in hexa-
	     decimal, followed by eight, space separated, four column, zero-
	     filled, two-byte quantities of input data, in hexadecimal, per
	     line.

     For each input file, hexdump sequentially copies the input to standard
     output, transforming the data according to the format strings specified
     by the -e and -f options, in the order that they were specified.

   Formats
     A format string contains any number of format units, separated by white-
     space.  A format unit contains up to three items: an iteration count, a
     byte count, and a format.

     The iteration count is an optional positive integer, which defaults to
     one.  Each format is applied iteration count times.

     The byte count is an optional positive integer.  If specified it defines
     the number of bytes to be interpreted by each iteration of the format.

     If an iteration count and/or a byte count is specified, a single slash
     must be placed after the iteration count and/or before the byte count to
     disambiguate them.  Any whitespace before or after the slash is ignored.

     The format is required and must be surrounded by double quote ("" "")
     marks.  It is interpreted as a fprintf-style format string (see
     fprintf(3)), with the following exceptions:

	   o   An asterisk (*) may not be used as a field width or precision.

	   o   A byte count or field precision is required for each ``s'' con-
	       version character (unlike the fprintf(3) default which prints
	       the entire string if the precision is unspecified).

	   o   The conversion characters ``h'', ``l'', ``n'', ``p'' and ``q''
	       are not supported.

	   o   The single character escape sequences described in the C stan-
	       dard are supported:

		     NUL		  \0
		     <alert character>	  \a
		     <backspace>	  \b
		     <form-feed>	  \f
		     <newline>		  \n
		     <carriage return>	  \r
		     <tab>		  \t
		     <vertical tab>	  \v

     The hexdump utility also supports the following additional conversion
     strings:

     _a[dox]	 Display the input offset, cumulative across input files, of
		 the next byte to be displayed.  The appended characters d, o,
		 and x specify the display base as decimal, octal or hexadeci-
		 mal respectively.

     _A[dox]	 Identical to the _a conversion string except that it is only
		 performed once, when all of the input data has been pro-
		 cessed.

     _c 	 Output characters in the default character set.  Nonprinting
		 characters are displayed in three character, zero-padded
		 octal, except for those representable by standard escape
		 notation (see above), which are displayed as two character
		 strings.

     _p 	 Output characters in the ASCII character set.	Non-ASCII
		 characters are displayed as a single ``.''.

     _u 	 Output US ASCII characters, with the exception that control
		 characters are displayed using the following, lower-case,
		 names.  Characters greater than 0xff, hexadecimal, are dis-
		 played as hexadecimal strings.

		 000 NUL  001 SOH  002 STX  003 ETX  004 EOT  005 ENQ
		 006 ACK  007 BEL  008 BS   009 HT   00A LF   00B VT
		 00C FF   00D CR   00E SO   00F SI   010 DLE  011 DC1
		 012 DC2  013 DC3  014 DC4  015 NAK  016 SYN  017 ETB
		 018 CAN  019 EM   01A SUB  01B ESC  01C FS   01D GS
		 01E RS   01F US   0FF DEL

     The default and supported byte counts for the conversion characters are
     as follows:

	   %_c, %_p, %_u, %c	   One byte counts only.

	   %d, %i, %o, %u, %X, %x  Four byte default, one, two and four byte
				   counts supported.

	   %E, %e, %f, %G, %g	   Eight byte default, four and twelve byte
				   counts supported.

     The amount of data interpreted by each format string is the sum of the
     data required by each format unit, which is the iteration count times the
     byte count, or the iteration count times the number of bytes required by
     the format if the byte count is not specified.

     The input is manipulated in ``blocks'', where a block is defined as the
     largest amount of data specified by any format string.  Format strings
     interpreting less than an input block's worth of data, whose last format
     unit both interprets some number of bytes and does not have a specified
     iteration count, have the iteration count incremented until the entire
     input block has been processed or there is not enough data remaining in
     the block to satisfy the format string.

     If, either as a result of user specification or hexdump modifying the
     iteration count as described above, an iteration count is greater than
     one, no trailing whitespace characters are output during the last itera-
     tion.

     It is an error to specify a byte count as well as multiple conversion
     characters or strings unless all but one of the conversion characters or
     strings is _a or _A.

     If, as a result of the specification of the -n option or end-of-file
     being reached, input data only partially satisfies a format string, the
     input block is zero-padded sufficiently to display all available data
     (i.e., any format units overlapping the end of data will display some
     number of the zero bytes).

     Further output by such format strings is replaced by an equivalent number
     of spaces.  An equivalent number of spaces is defined as the number of
     spaces output by an s conversion character with the same field width and
     precision as the original conversion character or conversion string but
     with any ``+'', `` '', ``#'' conversion flag characters removed, and ref-
     erencing a NULL string.

     If no format strings are specified, the default display is a one-byte
     hexadecimal display.

DIAGNOSTICS
     The hexdump utility exits 0 on success, and >0 if an error occurs.

EXAMPLES
     Note that the following format strings, used with -e, must be enclosed in
     single quotes.

     Display the input in perusal format:

	   ""%06.6_ao ""	12/1 ""%3_u ""
	   ""\t\t"" ""%_p ""
	   ""\n""

     Implement the -x option:

	   ""%07.7_Ax\n""
	   ""%07.7_ax  "" 8/2 ""%04x "" ""\n""

SEE ALSO
     gdb(1), od(1)

BSD				 July 10, 2004				   BSD
","# hexdump

> An ASCII, decimal, hexadecimal, octal dump.

- Print the hexadecimal representation of a file:

`hexdump {{file}}`

- Display the input offset in hexadecimal and its ASCII representation in two columns:

`hexdump -C {{file}}`

- Display the hexadecimal representation of a file, but interpret only n bytes of the input:

`hexdump -C -n{{number_of_bytes}} {{file}}`
"
inxi,,,"# inxi

> Print a summary of system information and resources for debugging purposes.

- Print a short summary of CPU, memory, hard drive and kernel information:

`inxi`

- Print a full description of CPU, memory, disk, network and process information:

`inxi -Fz`

- Print information about the distribution's repository:

`inxi -r`
"
vpnc,,,"# vpnc

> A VPN client for the Cisco 3000 VPN Concentrator.

- Connect with a defined configuration file:

`sudo vpnc {{config_file}}`

- Terminate the previously created connection:

`sudo vpnc-disconnect`
"
mkswap,,,"# mkswap

> Sets up a Linux swap area on a device or in a file.

- Setup a given partition as swap area:

`sudo mkswap {{/dev/sdb7}}`

- Use a given file as swap area:

`sudo mkswap {{path/to/file}}`

- Check a partition for bad blocks before creating the swap area:

`sudo mkswap -c {{/dev/sdb7}}`

- Specify a label for the file (to allow `swapon` to use the label):

`sudo mkswap -L {{swap1}} {{path/to/file}}`
"
numlockx,http://www.mike-devlin.com/linux/README-numlockx.htm,,"# numlockx

> Control the number lock key status in X11 sessions.
> More information: <http://www.mike-devlin.com/linux/README-numlockx.htm>.

- Show the current number lock status:

`numlockx status`

- Turn the number lock on:

`numlockx on`

- Turn the number lock off:

`numlockx off`

- Toggle the current state:

`numlockx toggle`
"
imgp,,,"# imgp

> Command line image resizer and rotator for JPEG and PNG images.

- Convert single images and/or whole directories containing valid image formats:

`imgp -x {{1366x1000}} {{path/to/dir}} {{path/to/file}}`

- Scale an image by 75% and overwrite the source image to a target resolution:

`imgp -x {{75}} -w {{path/to/file}}`

- Rotate an image clockwise by 90 degrees:

`imgp -o {{90}} {{path/to/file}}`
"
kpackagetool5,https://techbase.kde.org/Development/Tutorials/Plasma5/QML2/GettingStarted#Kpackagetool5,,"# kpackagetool5

> KPackage Manager: Install, list, remove Plasma packages.
> More information: <https://techbase.kde.org/Development/Tutorials/Plasma5/QML2/GettingStarted#Kpackagetool5>.

- List all known package types that can be installed:

`kpackagetool5 --list-types`

- Install the package from a directory:

`kpackagetool5 --type {{package_type}} --install {{path/to/directory}}`

- Update installed package from a directory:

`kpackagetool5 --type {{package_type}} --upgrade {{path/to/directory}}`

- List installed plasmoids (--global for all users):

`kpackagetool5 --type Plasma/Applet --list --global`

- Remove a plasmoid by name:

`kpackagetool5 --type Plasma/Applet --remove ""{{name}}""`
"
unix2mac,,,"# unix2mac

> Change Unix-style line endings to macOS-style.
> Replaces CR with LF.

- Change the line endings of a file:

`unix2mac {{filename}}`

- Create a copy with macOS-style line endings:

`unix2mac -n {{filename}} {{new_filename}}`
"
xbacklight,https://gitlab.freedesktop.org/xorg/app/xbacklight,,"# xbacklight

> Utility to adjust backlight brightness using the RandR extension.
> More information: <https://gitlab.freedesktop.org/xorg/app/xbacklight>.

- Get the current screen brightness as a percentage:

`xbacklight`

- Set the screen brightness to 40%:

`xbacklight -set {{40}}`

- Increase current brightness by 25%:

`xbacklight -inc {{25}}`

- Decrease current brightness by 75%:

`xbacklight -dec {{75}}`

- Increase backlight to 100%, over 60 seconds (value given in ms), using 60 steps:

`xbacklight -set {{100}} -time {{60000}} -steps {{60}}`
"
snapper,http://snapper.io/manpages/snapper.html,,"# snapper

> Filesystem snapshot management tool.
> More information: <http://snapper.io/manpages/snapper.html>.

- List snapshot configs:

`snapper list-configs`

- Create snapper config:

`snapper -c {{config}} create-config {{path/to/directory}}`

- Create a snapshot with a description:

`snapper -c {{config}} create -d {{""snapshot_description""}}`

- List snapshots for a config:

`snapper -c {{config}} list`

- Delete a snapshot:

`snapper -c {{config}} delete {{snapshot_number}}`

- Delete a range of snapshots:

`snapper -c {{config}} delete {{snapshot_X}}-{{snapshot_Y}}`
"
sam,https://github.com/awslabs/aws-sam-cli,,"# sam

> AWS Serverless Application Model (SAM) CLI.
> More information: <https://github.com/awslabs/aws-sam-cli>.

- Initialize a serverless application:

`sam init`

- Initialize a serverless application with a specific runtime:

`sam init --runtime {{python3.7}}`

- Package a SAM application:

`sam package`

- Build your Lambda function code:

`sam build`

- Run your serverless application locally:

`sam local start-api`

- Deploy an AWS SAM application:

`sam deploy`
"
chkconfig,,,"# chkconfig

> Manage the runlevel of services on CentOS 6.

- List services with runlevel:

`chkconfig --list`

- Show a service's runlevel:

`chkconfig --list {{ntpd}}`

- Enable service at boot:

`chkconfig {{sshd}} on`

- Enable service at boot for runlevels 2, 3, 4, and 5:

`chkconfig --level {{2345}} {{sshd}} on`

- Disable service at boot:

`chkconfig {{ntpd}} off`

- Disable service at boot for runlevel 3:

`chkconfig --level {{3}} {{ntpd}} off`
"
kexec,,,"# kexec

> Directly reboot into a new kernel.

- Load a new kernel:

`kexec -l {{path/to/kernel}} --initrd={{path/to/initrd}} --command-line={{arguments}}`

- Load a new kernel with current boot parameters:

`kexec -l {{path/to/kernel}} --initrd={{path/to/initrd}} --reuse-cmdline`

- Execute a currently loaded kernel:

`kexec -e`

- Unload current kexec target kernel:

`kexec -u`
"
chage,,,"# chage

> Change user account and password expiry information.

- List password information for the user:

`chage -l {{username}}`

- Enable password expiration in 10 days:

`sudo chage -M {{10}} {{username}}`

- Disable password expiration:

`sudo chage -M -1 {{username}}`

- Set account expiration date:

`sudo chage -E {{YYYY-MM-DD}}`

- Force user to change password on next log in:

`sudo chage -d 0`
"
script,,"
SCRIPT(1)		  BSD General Commands Manual		     SCRIPT(1)

NAME
     script -- make typescript of terminal session

SYNOPSIS
     script [-adkpqr] [-F pipe] [-t time] [file [command ...]]

DESCRIPTION
     The script utility makes a typescript of everything printed on your ter-
     minal.  It is useful for students who need a hardcopy record of an inter-
     active session as proof of an assignment, as the typescript file can be
     printed out later with lpr(1).

     If the argument file is given, script saves all dialogue in file.	If no
     file name is given, the typescript is saved in the file typescript.

     If the argument command is given, script will run the specified command
     with an optional argument vector instead of an interactive shell.

     The following options are available:

     -a      Append the output to file or typescript, retaining the prior con-
	     tents.

     -d      When playing back a session with the -p flag, do not sleep
	     between records when playing back a timestamped session.

     -F pipe
	     Immediately flush output after each write.  This will allow a
	     user to create a named pipe using mkfifo(1) and another user may
	     watch the live session using a utility like cat(1).

     -k      Log keys sent to the program as well as output.

     -p      Play back a session recorded with the -r flag in real time.

     -q      Run in quiet mode, omit the start, stop and command status mes-
	     sages.

     -r      Record a session with input, output, and timestamping.

     -t time
	     Specify the interval at which the script output file will be
	     flushed to disk, in seconds.  A value of 0 causes script to flush
	     after every character I/O event.  The default interval is 30 sec-
	     onds.

     The script ends when the forked shell (or command) exits (a control-D to
     exit the Bourne shell (sh(1)), and exit, logout or control-D (if
     ignoreeof is not set) for the C-shell, csh(1)).

     Certain interactive commands, such as vi(1), create garbage in the type-
     script file.  The script utility works best with commands that do not
     manipulate the screen.  The results are meant to emulate a hardcopy ter-
     minal, not an addressable one.

ENVIRONMENT
     The following environment variables are utilized by script:

     SCRIPT
	    The SCRIPT environment variable is added to the sub-shell.	If
	    SCRIPT already existed in the users environment, its value is
	    overwritten within the sub-shell.  The value of SCRIPT is the name
	    of the typescript file.

     SHELL  If the variable SHELL exists, the shell forked by script will be
	    that shell.  If SHELL is not set, the Bourne shell is assumed.
	    (Most shells set this variable automatically).

SEE ALSO
     csh(1)

HISTORY
     The script command appeared in 3.0BSD.

     The -d, -p and -r options first appeared in NetBSD 2.0 and were ported to
     FreeBSD 9.2.

BUGS
     The script utility places everything in the log file, including linefeeds
     and backspaces.  This is not what the naive user expects.

     It is not possible to specify a command without also naming the script
     file because of argument parsing compatibility issues.

     When running in -k mode, echo cancelling is far from ideal.  The slave
     terminal mode is checked for ECHO mode to check when to avoid manual echo
     logging.  This does not work when the terminal is in a raw mode where the
     program being run is doing manual echo.

     If script reads zero bytes from the terminal, it switches to a mode when
     it only attempts to read once a second until there is data to read.  This
     prevents script from spinning on zero-byte reads, but might cause a
     1-second delay in processing of user input.

BSD			       December 4, 2013 			   BSD
","# script

> Record all terminal output to file.

- Record a new session to a file named `typescript` in the current directory:

`script`

- Record a new session to a custom filepath:

`script {{path/to/session.out}}`

- Record a new session, appending to an existing file:

`script -a {{path/to/session.out}}`

- Record timing information (data is outputted to the standard error):

`script -t 2> {{path/to/timingfile}}`
"
file-rename,,,"# rename

> Rename multiple files.
> NOTE: this page refers to the command from the `file-rename` Debian package.

- Rename files using a Perl Common Regular Expression (substitute 'foo' with 'bar' wherever found):

`rename {{'s/foo/bar/'}} {{*}}`

- Dry-run - display which renames would occur without performing them:

`rename -n {{'s/foo/bar/'}} {{*}}`

- Force renaming even if the operation would remove existing destination files:

`rename -f {{'s/foo/bar/'}} {{*}}`

- Convert filenames to lower case (use `-f` in case-insensitive filesystems to prevent ""already exists"" errors):

`rename 'y/A-Z/a-z/' {{*}}`

- Replace whitespace with underscores:

`rename 's/\s+/_/g' {{*}}`
"
cmus,,,"# cmus

> Commandline Music Player.
> Use arrow keys to navigate, `<enter/return>` to select, and numbers 1-8 switch between different views.

- Open cmus from specified directory:

`cmus {{path/to/directory}}`

- Add file/directory to library:

`:add {{path/to/file_or_directory}}`

- Pause/unpause current song:

`c`

- Toggle shuffle mode on/off:

`s`

- Quit cmus:

`q`
"
lldb,,"
LLDB(1) 		  BSD General Commands Manual		       LLDB(1)

NAME
     lldb -- The debugger

SYNOPSIS
     lldb [-hvdexw] [-a arch] [-c core-file] [-l script-language]
	  [-s lldb-commands] [-n process-name] [-p pid] [[--] <PROGRAM-ARG1>
	  <PROGRAM-ARG2> ...]

DESCRIPTION
     lldb is the command line interface for the LLDB debugger library.	lldb
     can debug C, C++, Objective-C, Objective-C++ and Swift programs.

     The following options are available:

     -h, --help
	     Prints out the usage information for the lldb debugger.  The
	     --help text may be more up-to-date and authoritative than the
	     command line options described in this man page.

     -v, --version
	     Prints out the version number of the lldb debugger.

     -a, --arch arch
	     Specifies which architecture lldb will use when launching the
	     specified program (assuming the provided executable is built for
	     multiple architectures.)

     -f, --file filename
	     Specifies the executable file that lldb will be launching /
	     attaching to.

     -n, --attach-name process-name
	     Specifies the name of a currently-running process to attach to.
	     (or the name of a process to wait for if -w is used.)

     -w, --wait-for
	     When used in concert with -n process-name, indicates that lldb
	     should wait for a new process of that name to be started -- and
	     attach to it as early in the process-launch as possible.

     -p, --attach-pid pid
	     Specifies a currently running process that lldb should attach to.

     -c, --core core-file
	     Specifies the core file to examine.

     -l, --script-language language
	     Tells the debugger to use the specified scripting language for
	     user-defined scripts, rather than the default.  Valid scripting
	     languages that can be specified include Python, Perl, Ruby and
	     Tcl.  Currently only the Python extensions have been implemented.

     -d, --debug
	     Tells the debugger to print out extra information for debugging
	     itself.

     -s, --source filename
	     Tells lldb to read in and execute the file ""filename"", which
	     should contain lldb commands.

     -e, --editor
	     Instructs lldb to open source files using the host's ""external
	     editor"" mechanism.

     -x, --no-lldbinit
	     Do not automatically parse any '.lldbinit' files.

	     (If you do not provide -f then the first argument will be the
	     file to be debugged so 'lldb -- <filename> [<ARG1> [<ARG2>]]'
	     also works.  Remember to end the options with ""--"" if any of your
	     arguments have a ""-"" in them.)

USING LLDB
     In lldb there is a help command which can be used to find descriptions
     and examples of all lldb commands.  To get help on ""breakpoint set"" you
     would type ""help breakpoint set"".

     There is also an apropos command which will search the help text of all
     commands for a given term -- this is useful for locating a command by
     topic.  For instance, ""apropos breakpoint"" will list any command that has
     the word ""breakpoint"" in its help text.

FILES
     lldb will read settings/aliases/commands from three files at startup, if
     they exist.

     First, it will read a ~/.lldbinit-debugger command file.  If you are
     using the lldb command line interface, this is ~/.lldbinit-lldb.  If you
     are using lldb inside a GUI debugger like Xcode this will be
     ~/.lldbinit-Xcode.  This is a useful place to put settings that you want
     to apply only when a given lldb command interpreter is used.

     Second, ~/.lldbinit is read.

     Third, an .lldbinit file in the current working directory (where lldb is
     started) will be read.

SEE ALSO
     The LLDB project page http://lldb.llvm.org/ has many different resources
     for lldb users -- the gdb/lldb command equivalence page
     http://lldb.llvm.org/lldb-gdb.html can be especially helpful for users
     coming from gdb.

BUGS
     To report bugs, please visit http://llvm.org/bugs/

AUTHOR
     Maintained by the LLDB Team, http://lldb.llvm.org/

BSD			       December 16, 2015			   BSD
","# lldb

> The LLVM Low-Level Debugger.

- Debug an executable:

`lldb {{executable}}`

- Attach `lldb` to a running process with a given PID:

`lldb -p {{pid}}`

- Wait for a new process to launch with a given name, and attach to it:

`lldb -w -n {{process_name}}`
"
ssh-add,,"
SSH-ADD(1)		  BSD General Commands Manual		    SSH-ADD(1)

NAME
     ssh-add -- adds private key identities to the authentication agent

SYNOPSIS
     ssh-add [-cDdkLlqXx] [-E fingerprint_hash] [-t life] [file ...]
     ssh-add -s pkcs11
     ssh-add -e pkcs11

DESCRIPTION
     ssh-add adds private key identities to the authentication agent,
     ssh-agent(1).  When run without arguments, it adds the files
     ~/.ssh/id_rsa, ~/.ssh/id_dsa, ~/.ssh/id_ecdsa, and ~/.ssh/id_ed25519.
     After loading a private key, ssh-add will try to load corresponding cer-
     tificate information from the filename obtained by appending -cert.pub to
     the name of the private key file.	Alternative file names can be given on
     the command line.

     If any file requires a passphrase, ssh-add asks for the passphrase from
     the user.	The passphrase is read from the user's tty.  ssh-add retries
     the last passphrase if multiple identity files are given.

     The authentication agent must be running and the SSH_AUTH_SOCK environ-
     ment variable must contain the name of its socket for ssh-add to work.

     The options are as follows:

     -c      Indicates that added identities should be subject to confirmation
	     before being used for authentication.  Confirmation is performed
	     by ssh-askpass(1).  Successful confirmation is signaled by a zero
	     exit status from ssh-askpass(1), rather than text entered into
	     the requester.

     -D      Deletes all identities from the agent.

     -d      Instead of adding identities, removes identities from the agent.
	     If ssh-add has been run without arguments, the keys for the
	     default identities and their corresponding certificates will be
	     removed.  Otherwise, the argument list will be interpreted as a
	     list of paths to public key files to specify keys and certifi-
	     cates to be removed from the agent.  If no public key is found at
	     a given path, ssh-add will append .pub and retry.

     -E fingerprint_hash
	     Specifies the hash algorithm used when displaying key finger-
	     prints.  Valid options are: ``md5'' and ``sha256''.  The default
	     is ``sha256''.

     -e pkcs11
	     Remove keys provided by the PKCS#11 shared library pkcs11.

     -k      When loading keys into or deleting keys from the agent, process
	     plain private keys only and skip certificates.

     -L      Lists public key parameters of all identities currently repre-
	     sented by the agent.

     -l      Lists fingerprints of all identities currently represented by the
	     agent.

     -q      Be quiet after a successful operation.

     -s pkcs11
	     Add keys provided by the PKCS#11 shared library pkcs11.

     -t life
	     Set a maximum lifetime when adding identities to an agent.  The
	     lifetime may be specified in seconds or in a time format speci-
	     fied in sshd_config(5).

     -X      Unlock the agent.

     -x      Lock the agent with a password.

     -K      When adding identities, each passphrase will also be stored in
	     the user's keychain.  When removing identities with -d, each
	     passphrase will be removed from it.

     -A      Add identities to the agent using any passphrase stored in the
	     user's keychain.

ENVIRONMENT
     DISPLAY and SSH_ASKPASS
	     If ssh-add needs a passphrase, it will read the passphrase from
	     the current terminal if it was run from a terminal.  If ssh-add
	     does not have a terminal associated with it but DISPLAY and
	     SSH_ASKPASS are set, it will execute the program specified by
	     SSH_ASKPASS (by default ``ssh-askpass'') and open an X11 window
	     to read the passphrase.  This is particularly useful when calling
	     ssh-add from a .xsession or related script.  (Note that on some
	     machines it may be necessary to redirect the input from /dev/null
	     to make this work.)

     SSH_AUTH_SOCK
	     Identifies the path of a UNIX-domain socket used to communicate
	     with the agent.

FILES
     ~/.ssh/id_dsa
	     Contains the DSA authentication identity of the user.

     ~/.ssh/id_ecdsa
	     Contains the ECDSA authentication identity of the user.

     ~/.ssh/id_ed25519
	     Contains the Ed25519 authentication identity of the user.

     ~/.ssh/id_rsa
	     Contains the RSA authentication identity of the user.

     Identity files should not be readable by anyone but the user.  Note that
     ssh-add ignores identity files if they are accessible by others.

EXIT STATUS
     Exit status is 0 on success, 1 if the specified command fails, and 2 if
     ssh-add is unable to contact the authentication agent.

SEE ALSO
     ssh(1), ssh-agent(1), ssh-askpass(1), ssh-keygen(1), sshd(8)

AUTHORS
     OpenSSH is a derivative of the original and free ssh 1.2.12 release by
     Tatu Ylonen.  Aaron Campbell, Bob Beck, Markus Friedl, Niels Provos, Theo
     de Raadt and Dug Song removed many bugs, re-added newer features and cre-
     ated OpenSSH.  Markus Friedl contributed the support for SSH protocol
     versions 1.5 and 2.0.

BSD			      September 23, 2020			   BSD
","# ssh-add

> Manage loaded ssh keys in the ssh-agent.
> Ensure that ssh-agent is up and running for the keys to be loaded in it.

- Add the default ssh keys in ""~/.ssh"" to the ssh-agent:

`ssh-add`

- Add a specific key to the ssh-agent:

`ssh-add {{path/to/private_key}}`

- List fingerprints of currently loaded keys:

`ssh-add -l`

- Delete a key from the ssh-agent:

`ssh-add -d {{path/to/private_key}}`

- Delete all currently loaded keys from the ssh-agent:

`ssh-add -D`
"
certbot,,,"# certbot

> The Let's Encrypt Agent for automatically obtaining and renewing TLS certificates.
> Successor to `letsencrypt`.

- Obtain a new certificate via webroot authorization, but do not install it automatically:

`sudo certbot certonly --webroot --webroot-path {{path/to/webroot}} --domain {{subdomain.example.com}}`

- Obtain a new certificate via nginx authorization, installing the new certificate automatically:

`sudo certbot --nginx --domain {{subdomain.example.com}}`

- Obtain a new certificate via apache authorization, installing the new certificate automatically:

`sudo certbot --apache --domain {{subdomain.example.com}}`

- Renew all Let's Encrypt certificates that expire in 30 days or less (don't forget to restart any servers that use them afterwards):

`sudo certbot renew`

- Simulate the obtaining of a new certificate, but don't actually save any new certificates to disk:

`sudo certbot --webroot --webroot-path {{path/to/webroot}} --domain {{subdomain.example.com}} --dry-run`

- Obtain an untrusted test certificate instead:

`sudo certbot --webroot --webroot-path {{path/to/webroot}} --domain {{subdomain.example.com}} --test-cert`
"
runsvdir,,,"# runsvdir

> Run an entire directory of services.

- Start and manage all services in a directory as the current user:

`runsvdir {{path/to/services}}`

- Start and manage all services in a directory as root:

`sudo runsvdir {{path/to/services}}`

- Start services in separate sessions:

`runsvdir -P {{path/to/services}}`
"
debchange,https://manpages.debian.org/debchange,,"# debchange

> Tool for maintenance of the debian/changelog file in a Debian source package.
> More information: <https://manpages.debian.org/debchange>.

- Add a new version for a non-maintainer upload to the changelog:

`debchange --nmu`

- Add a changelog entry to the current version:

`debchange --append`

- Add a changelog entry to close the bug with specified ID:

`debchange --closes {{bug_id}}`
"
dnsrecon,https://github.com/darkoperator/dnsrecon,,"# dnsrecon

> DNS enumeration tool.
> More information: <https://github.com/darkoperator/dnsrecon>.

- Scan a domain and save the results to a SQLite database:

`dnsrecon --domain {{example.com}} --db {{path/to/database.sqlite}}`

- Scan a domain, specifying the nameserver and performing a zone transfer:

`dnsrecon --domain {{example.com}} --name_server {{nameserver.example.com}} --type axfr`

- Scan a domain, using a dictionary of subdomains and hostnames for bruteforcing:

`dnsrecon --domain {{example.com}} --dictionary {{path/to/dictionary.txt}} --type brt`

- Scan a domain, performing a reverse lookup of IP ranges from the SPF record and saving the results to a JSON file:

`dnsrecon --domain {{example.com}} -s --json`

- Scan a domain, performing a Google enumeration and saving the results to a CSV file:

`dnsrecon --domain {{example.com}} -g --csv`

- Scan a domain, performing DNS cache snooping:

`dnsrecon --domain {{example.com}} --type snoop --name_server {{nameserver.example.com}} --dictionary {{path/to/dictionary.txt}}`

- Scan a domain, performing zone walking:

`dnsrecon --domain {{example.com}} --type zonewalk`
"
xdotool,,,"# xdotool

> Command line automation for X11.

- Retrieve the X-Windows window ID of the running Firefox window(s):

`xdotool search --onlyvisible --name {{firefox}}`

- Click the right mouse button:

`xdotool click {{3}}`

- Get the id of the currently active window:

`xdotool getactivewindow`

- Focus on the window with id of 12345:

`xdotool windowfocus --sync {{12345}}`

- Type a message, with a 500ms delay for each letter:

`xdotool type --delay {{500}} ""Hello world""`

- Press the enter key:

`xdotool key {{KP_Enter}}`
"
lshw,,,"# lshw

> List detailed information about hardware configurations as root user.

- Launch the GUI:

`sudo lshw -X`

- List all hardwares in tabular format:

`sudo lshw -short`

- List all disks and storage controllers in tabular format:

`sudo lshw -class disk -class storage -short`

- Save all network interfaces to an HTML file:

`sudo lshw -class network -html > {{interfaces.html}}`
"
flameshot,https://flameshot.js.org,,"# flameshot 

> Screenshot utility with a gui interface.
> Supports basic image editing, such as text, shapes, colors, and imgur.
> More information: <https://flameshot.js.org>.

- Launch flameshot in gui mode:

`flameshot launcher`

- Take a screenshot by clicking and dragging:

`flameshot gui`

- Take a full screen screenshot:

`flameshot full`

- Set the save path to write screenshots to:

`flameshot full --path {{path/to/directory}}`

- Delay the screenshot for N milliseconds and output to clipboard:

`flameshot full --delay {{2000}} --clipboard`
"
useradd,,,"# useradd

> Create a new user.

- Create new user:

`useradd {{name}}`

- Create new user with a default home directory:

`useradd --create-home {{name}}`

- Create new user with specified shell:

`useradd --shell {{/path/to/shell}} {{name}}`

- Create new user belonging to additional groups (mind the lack of whitespace):

`useradd --groups {{group1,group2}} {{name}}`

- Create new system user without a home directory:

`useradd --no-create-home --system {{name}}`
"
x11vnc,,,"# x11vnc

> A VNC server that will enable VNC on an existing display ser.
> By default, the server will automatically terminate once all clients disconnect from it.

- Launch a VNC server that allows multiple clients to connect:

`x11vnc -shared`

- Launch a VNC server in view-only mode, and which won't terminate once the last client disconnects:

`x11vnc -forever -viewonly`

- Launch a VNC server on a specific display and screen (both starting at index zero):

`x11vnc -display :{{display}}.{{screen}}`

- Launch a VNC server on the third display's default screen:

`x11vnc -display :{{2}}`

- Launch a VNC server on the first display's second screen:

`x11vnc -display :{{0}}.{{1}}`
"
tic,https://pubs.opengroup.org/onlinepubs/007908799/xcurses/terminfo.html,"tic(1M) 							       tic(1M)



NAME
       tic - the terminfo entry-description compiler

SYNOPSIS
       tic  [-1CGILNTUVacfgrstx]  [-e  names]  [-o  dir]  [-R  subset] [-v[n]]
       [-w[n]] file

DESCRIPTION
       The command tic translates a terminfo file from source format into com-
       piled  format.	The  compiled  format  is  necessary  for use with the
       library routines in ncurses(3X).

       The results are	normally  placed  in  the  system  terminfo  directory
       /usr/share/terminfo.  There are two ways to change this behavior.

       First, you may override the system default by setting the variable TER-
       MINFO in your shell environment to a valid (existing) directory name.

       Secondly, if tic cannot get access to /usr/share/terminfo or your  TER-
       MINFO  directory,  it  looks for the directory $HOME/.terminfo; if that
       directory exists, the entry is placed there.

       Libraries that read terminfo entries are expected to check for  a  TER-
       MINFO  directory first, look at $HOME/.terminfo if TERMINFO is not set,
       and finally look in /usr/share/terminfo.

       -1     restricts the output to a single column

       -a     tells tic to retain commented-out capabilities rather than  dis-
	      carding them.  Capabilities are commented by prefixing them with
	      a period.  This sets the -x option, because it treats  the  com-
	      mented-out  entries  as  user-defined  names.   If the source is
	      termcap, accept the 2-character names  required  by  version  6.
	      Otherwise these are ignored.

       -C     Force  source translation to termcap format.  Note: this differs
	      from the -C option of infocmp(1M) in that  it  does  not	merely
	      translate capability names, but also translates terminfo strings
	      to termcap format.  Capabilities that are not  translatable  are
	      left  in	the entry under their terminfo names but commented out
	      with two preceding dots.

       -c     tells tic to only check file for errors, including syntax  prob-
	      lems  and  bad  use  links.   If	you  specify -C (-I) with this
	      option, the code will print warnings about entries which,  after
	      use  resolution, are more than 1023 (4096) bytes long.  Due to a
	      fixed buffer length in older termcap libraries (and a documented
	      limit in terminfo), these entries may cause core dumps.

       -e names
	      Limit  writes  and translations to the following comma-separated
	      list of terminals.  If any name or alias of a  terminal  matches
	      one  of  the  names  in  the  list, the entry will be written or
	      translated as normal.  Otherwise no output will be generated for
	      it.   The  option  value is interpreted as a file containing the
	      list if it contains a '/'.  (Note: depending on how tic was com-
	      piled, this option may require -I or -C.)

       -f     Display	  complex     terminfo	   strings    which    contain
	      if/then/else/endif expressions indented for readability.

       -G     Display constant literals in  decimal  form  rather  than  their
	      character equivalents.

       -g     Display  constant  character literals in quoted form rather than
	      their decimal equivalents.

       -I     Force source translation to terminfo format.

       -L     Force source translation to terminfo format  using  the  long  C
	      variable names listed in <term.h>

       -N     Disable smart defaults.  Normally, when translating from termcap
	      to terminfo, the compiler makes a number	of  assumptions  about
	      the   defaults   of   string  capabilities  reset1_string,  car-
	      riage_return,  cursor_left,  cursor_down,  scroll_forward,  tab,
	      newline, key_backspace, key_left, and key_down, then attempts to
	      use obsolete termcap capabilities to deduce correct values.   It
	      also normally suppresses output of obsolete termcap capabilities
	      such as bs.  This option forces a more literal translation  that
	      also preserves the obsolete capabilities.

       -odir  Write  compiled  entries to given directory.  Overrides the TER-
	      MINFO environment variable.

       -Rsubset
	      Restrict output to a given subset.  This option is for use  with
	      archaic  versions  of  terminfo  like  those on SVr1, Ultrix, or
	      HP/UX that do not support the full set of SVR4/XSI  Curses  ter-
	      minfo;  and  outright  broken ports like AIX 3.x that have their
	      own extensions incompatible with	SVr4/XSI.   Available  subsets
	      are ""SVr1"", ""Ultrix"", ""HP"", ""BSD"" and ""AIX""; see terminfo(5) for
	      details.

       -r     Force entry resolution (so there are no remaining  tc  capabili-
	      ties)  even  when doing translation to termcap format.  This may
	      be needed if you are preparing a	termcap  file  for  a  termcap
	      library  (such as GNU termcap through version 1.3 or BSD termcap
	      through 4.3BSD) that does not handle  multiple  tc  capabilities
	      per entry.

       -s     Summarize  the  compile  by  showing  the  directory  into which
	      entries are written, and the number of entries  which  are  com-
	      piled.

       -T     eliminates  size-restrictions  on  the  generated text.  This is
	      mainly useful for  testing  and  analysis,  since  the  compiled
	      descriptions  are limited (e.g., 1023 for termcap, 4096 for ter-
	      minfo).

       -t     tells tic to discard commented-out capabilities.	Normally  when
	      translating  from  terminfo to termcap, untranslatable capabili-
	      ties are commented-out.

       -U   tells tic to not post-process the data after  parsing  the	source
	    file.  Normally, it infers data which is commonly missing in older
	    terminfo data, or in termcaps.

       -V   reports the version of ncurses which was used in this program, and
	    exits.

       -vn  specifies that (verbose) output be written to standard error trace
	    information showing tic's progress.  The optional parameter n is a
	    number  from  1  to 10, inclusive, indicating the desired level of
	    detail of information.  If n is omitted, the default level	is  1.
	    If	n  is  specified  and  greater	than 1, the level of detail is
	    increased.

       -wn  specifies the width of the output.	The parameter is optional.  If
	    it is omitted, it defaults to 60.

       -x   Treat  unknown capabilities as user-defined.  That is, if you sup-
	    ply a capability name which tic does not recognize, it will  infer
	    its  type  (boolean, number or string) from the syntax and make an
	    extended table entry for that.   User-defined  capability  strings
	    whose name begins with ``k'' are treated as function keys.

       file contains one or more terminfo terminal descriptions in source for-
	    mat [see terminfo(5)].  Each description in the file describes the
	    capabilities of a particular terminal.

       The debug flag levels are as follows:

       1      Names of files created and linked

       2      Information related to the ``use'' facility

       3      Statistics from the hashing algorithm

       5      String-table memory allocations

       7      Entries into the string-table

       8      List of tokens encountered by scanner

       9      All values computed in construction of the hash table

       If the debug level n is not given, it is taken to be one.

       All  but  one  of  the capabilities recognized by tic are documented in
       terminfo(5).  The exception is the use capability.

       When a use=entry-name field is discovered in a terminal entry currently
       being  compiled,  tic  reads  in the binary from /usr/share/terminfo to
       complete the entry.  (Entries created from file will be used first.  If
       the  environment  variable  TERMINFO is set, that directory is searched
       instead of /usr/share/terminfo.)  tic duplicates  the  capabilities  in
       entry-name for the current entry, with the exception of those capabili-
       ties that explicitly are defined in the current entry.

       When an entry, e.g., entry_name_1, contains a  use=entry_name_2	field,
       any   canceled	capabilities  in  entry_name_2	must  also  appear  in
       entry_name_1 before use= for  these  capabilities  to  be  canceled  in
       entry_name_1.

       If  the	environment variable TERMINFO is set, the compiled results are
       placed there instead of /usr/share/terminfo.

       Total compiled entries cannot exceed 4096 bytes.  The name field cannot
       exceed  512  bytes.   Terminal names exceeding the maximum alias length
       (32 characters on systems with long filenames, 14 characters otherwise)
       will  be  truncated  to	the maximum alias length and a warning message
       will be printed.

COMPATIBILITY
       There is  some  evidence  that  historic  tic  implementations  treated
       description  fields with no whitespace in them as additional aliases or
       short names.  This tic does not do that, but it does warn when descrip-
       tion  fields may be treated that way and check them for dangerous char-
       acters.

EXTENSIONS
       Unlike the stock SVr4 tic command,  this  implementation  can  actually
       compile termcap sources.  In fact, entries in terminfo and termcap syn-
       tax can be mixed in a single source file.  See terminfo(5) for the list
       of termcap names taken to be equivalent to terminfo names.

       The  SVr4  manual  pages  are not clear on the resolution rules for use
       capabilities.  This implementation of tic will find  use  targets  any-
       where  in  the source file, or anywhere in the file tree rooted at TER-
       MINFO (if TERMINFO is defined), or in the user's $HOME/.terminfo direc-
       tory (if it exists), or (finally) anywhere in the system's file tree of
       compiled entries.

       The error messages from this tic have the same format as  GNU  C  error
       messages, and can be parsed by GNU Emacs's compile facility.

       The  -C,  -G, -I, -N, -R, -T, -V, -a, -e, -f, -g, -o, -r, -s, -t and -x
       options are not supported under SVr4.  The SVr4 -c mode does not report
       bad use links.

       System  V  does	not  compile  entries  to  or  read  entries from your
       $HOME/.terminfo directory unless TERMINFO is explicitly set to it.

FILES
       /usr/share/terminfo/?/*
	    Compiled terminal description database.

SEE ALSO
       infocmp(1M), captoinfo(1M), infotocap(1M),  toe(1M),  curses(3X),  ter-
       minfo(5).

       This describes ncurses version 5.7 (patch 20081102).



								       tic(1M)
","# tic

> Compile terminfo and install for ncurses.
> More information: <https://pubs.opengroup.org/onlinepubs/007908799/xcurses/terminfo.html>.

- Compile and install terminfo for a terminal:

`tic -xe {{terminal}} {{path/to/terminal.info}}`

- Check terminfo file for errors:

`tic -c {{path/to/terminal.info}}`

- Print database locations:

`tic -D`
"
unshadow,https://www.openwall.com/john/,,"# unshadow

> Utility provided by the John the Ripper project to obtain the traditional Unix password file if the system uses shadow passwords.
> More information: <https://www.openwall.com/john/>.

- Combine the /etc/shadow and /etc/passwd of the current system:

`sudo unshadow /etc/passwd /etc/shadow`

- Combine two arbitrary shadow and password files:

`sudo unshadow {{/path/to/passwd}} {{/path/to/shadow}}`
"
ltrace,,,"# ltrace

> Display dynamic library calls of a process.

- Print (trace) library calls of a program binary:

`ltrace ./{{program}}`

- Count library calls. Print a handy summary at the bottom:

`ltrace -c {{/path/to/program}}`

- Trace calls to malloc and free, omit those done by libc:

`ltrace -e malloc+free-@libc.so* {{/path/to/program}}`

- Write to file instead of terminal:

`ltrace -o {{file}} {{/path/to/program}}`
"
firewall-cmd,,,"# firewall-cmd

> The firewalld command line client.

- View the available firewall zones:

`firewall-cmd --get-active-zones`

- View the rules which are currently applied:

`firewall-cmd --list-all`

- Permanently move the interface into the block zone, effectively blocking all communication:

`firewall-cmd --permanent --zone={{block}} --change-interface={{enp1s0}}`

- Permanently open the port for a service in the specified zone (like port `443` when in the `public` zone):

`firewall-cmd --permanent --zone={{public}} --add-service={{https}}`

- Permanently close the port for a service in the specified zone (like port `80` when in the `public` zone):

`firewall-cmd --permanent --zone={{public}} --remove-service={{http}}`

- Permanently open two arbitrary ports in the specified zone:

`firewall-cmd --permanent --zone={{public}} --add-port={{25565/tcp}} --add-port={{19132/udp}}`

- Reload firewalld to force rule changes to take effect:

`firewall-cmd --reload`
"
findfs,https://mirrors.edge.kernel.org/pub/linux/utils/util-linux,,"# findfs

> Finds a filesystem by label or UUID.
> More information: <https://mirrors.edge.kernel.org/pub/linux/utils/util-linux>.

- Search block devices by filesystem label:

`findfs LABEL={{label}}`

- Search by filesystem UUID:

`findfs UUID={{uuid}}`

- Search by partition label (GPT or MAC partition table):

`findfs PARTLABEL={{partition_label}}`

- Search by partition UUID (GPT partition table only):

`findfs PARTUUID={{partition_uuid}}`
"
ntfsfix,,,"# ntfsfix

> Fix common problems on an NTFS partition.

- Fix a given NTFS partition:

`sudo ntfsfix {{/dev/sdb2}}`
"
n,,,"# n

> Tool to manage multiple node versions.

- Install a given version of node. If the version is already installed, it will be activated:

`n {{version}}`

- Display installed versions and interactively activate one of them:

`n`

- Remove a version:

`n rm {{version}}`

- Execute a file with a given version:

`n use {{version}} {{file.js}}`

- Output binary path for a version:

`n bin {{version}}`
"
arp-scan,,,"# arp-scan

> Send ARP packets to hosts (specified as IP addresses or hostnames) to scan the local network.

- Scan the current local network:

`arp-scan --localnet`

- Scan an IP network with a custom bitmask:

`arp-scan {{192.168.1.1}}/{{24}}`

- Scan an IP network within a custom range:

`arp-scan {{127.0.0.0}}-{{127.0.0.31}}`

- Scan an IP network with a custom net mask:

`arp-scan {{10.0.0.0}}:{{255.255.255.0}}`
"
lxc,,,"# lxc

> Manage Linux containers using the lxd REST API.
> Any container names or patterns can be prefixed with the name of a remote server.

- List local containers matching a string. Omit the string to list all local containers:

`lxc list {{match_string}}`

- List images matching a string. Omit the string to list all images:

`lxc image list [{{remote}}:]{{match_string}}`

- Create a new container from an image:

`lxc init [{{remote}}:]{{image}} {{container}}`

- Start a container:

`lxc start [{{remote}}:]{{container}}`

- Stop a container:

`lxc stop [{{remote}}:]{{container}}`

- Show detailed info about a container:

`lxc info [{{remote}}:]{{container}}`

- Take a snapshot of a container:

`lxc snapshot [{{remote}}:]{{container}} {{snapshot}}`
"
trizen,,,"# trizen

> Arch Linux utility for building packages from the Arch User Repository (AUR).

- Synchronize and update all AUR packages:

`trizen -Syua`

- Install a new package:

`trizen -S {{package}}`

- Remove a package and its dependencies:

`trizen -Rs {{package}}`

- Search the package database for a keyword:

`trizen -Ss {{keyword}}`

- Show information about a package:

`trizen -Si {{package}}`

- List installed packages and versions:

`trizen -Qe`
"
sbatch,,,"# sbatch

> Submit a batch job to the SLURM scheduler.

- Submit a batch job:

`sbatch {{path/to/job.sh}}`

- Submit a batch job with a custom name:

`sbatch --job-name={{myjob}} {{path/to/job.sh}}`

- Submit a batch job with a time limit of 30 minutes:

`sbatch --time={{00:30:00}} {{path/to/job.sh}}`

- Submit a job and request multiple nodes:

`sbatch --nodes={{3}} {{path/to/job.sh}}`
"
dmesg,,"
DMESG(8)		  BSD System Manager's Manual		      DMESG(8)

NAME
     dmesg -- display the system message buffer

SYNOPSIS
     dmesg [-M core] [-N system]

DESCRIPTION
     Dmesg displays the contents of the system message buffer.	This command
     needs to be run as root.

SEE ALSO
     syslogd(8)

HISTORY
     The dmesg command appeared in 4.0BSD.

4th Berkeley Distribution	 June 5, 1993	     4th Berkeley Distribution
","# dmesg

> Write the kernel messages to standard output.

- Show kernel messages:

`dmesg`

- Show kernel error messages:

`dmesg --level err`

- Show kernel messages and keep reading new ones, similar to `tail -f` (available in kernels 3.5.0 and newer):

`dmesg -w`

- Show how much physical memory is available on this system:

`dmesg | grep -i memory`

- Show kernel messages 1 page at a time:

`dmesg | less`

- Show kernel messages with a timestamp (available in kernels 3.5.0 and newer):

`dmesg -T`

- Show kernel messages in human-readable form (available in kernels 3.5.0 and newer):

`dmesg -H`

- Colorize output (available in kernels 3.5.0 and newer):

`dmesg -L`
"
pidstat,,,"# pidstat

> Show system resource usage, including CPU, memory, IO etc.

- Show CPU statistics at a 2 second interval for 10 times:

`pidstat {{2}} {{10}}`

- Show page faults and memory utilization:

`pidstat -r`

- Show input/output usage per process id:

`pidstat -d`

- Show information on a specific PID:

`pidstat -p {{PID}}`

- Show memory statistics for all processes whose command name include ""fox"" or ""bird"":

`pidstat -C ""{{fox|bird}}"" -r -p ALL`
"
hdparm,,,"# hdparm

> Get and set SATA and IDE hard drive parameters.

- Request the identification info of a given device:

`sudo hdparm -I /dev/{{device}}`

- Get the Advanced Power Management level:

`sudo hdparm -B /dev/{{device}}`

- Set the Advanced Power Management value (values 1-127 permit spin-down, and values 128-254 do not):

`sudo hdparm -B {{1}} /dev/{{device}}`

- Display the device's current power mode status:

`sudo hdparm -C /dev/{{device}}`

- Force a drive to immediately enter standby mode (usually causes a drive to spin down):

`sudo hdparm -y /dev/{{device}}`

- Put the drive into idle (low-power) mode, also setting its standby timeout:

`sudo hdparm -S {{standby_timeout}} {{device}}`
"
units,,"
UNITS(1)		  BSD General Commands Manual		      UNITS(1)

NAME
     units -- conversion program

SYNOPSIS
     units [-f filename] [-qv] [from-unit to-unit]

OPTIONS
     The following options are available:

     -f filename
	     Specify the name of the units data file to load.

     -q      Suppress prompting of the user for units and the display of sta-
	     tistics about the number of units loaded.

     -v      Print the version number.

     from-unit to-unit
	     Allow a single unit conversion to be done directly from the com-
	     mand line.  The program will not print prompts.  It will print
	     out the result of the single specified conversion.

DESCRIPTION
     The units program converts quantities expressed in various scales to
     their equivalents in other scales.  The units program can only handle
     multiplicative scale changes.  It cannot convert Celsius to Fahrenheit,
     for example.  It works interactively by prompting the user for input:

	 You have: meters
	 You want: feet
		 * 3.2808399
		 / 0.3048

	 You have: cm^3
	 You want: gallons
		 * 0.00026417205
		 / 3785.4118

	 You have: meters/s
	 You want: furlongs/fortnight
		 * 6012.8848
		 / 0.00016630952

	 You have: 1|2 inch
	 You want: cm
		 * 1.27
		 / 0.78740157

     Powers of units can be specified using the '^' character as shown in the
     example, or by simple concatenation: 'cm3' is equivalent to 'cm^3'.  Mul-
     tiplication of units can be specified by using spaces, a dash or an
     asterisk.	Division of units is indicated by the slash ('/').  Note that
     multiplication has a higher precedence than division, so 'm/s/s' is the
     same as 'm/s^2' or 'm/s s'.  Division of numbers must be indicated using
     the vertical bar ('|').  To convert half a meter, you would write '1|2
     meter'.  If you write '1/2 meter' then the units program would interpret
     that as equivalent to '0.5/meter'.  If you enter incompatible unit types,
     the units program will print a message indicating that the units are not
     conformable and it will display the reduced form for each unit:

	 You have: ergs/hour
	 You want: fathoms kg^2 / day
	 conformability error
		 2.7777778e-11 kg m^2 / sec^3
		 2.1166667e-05 kg^2 m / sec

     The conversion information is read from a units data file.  The default
     file includes definitions for most familiar units, abbreviations and met-
     ric prefixes.  Some constants of nature included are:

	   pi	      ratio of circumference to diameter
	   c	      speed of light
	   e	      charge on an electron
	   g	      acceleration of gravity
	   force      same as g
	   mole       Avogadro's number
	   water      pressure per unit height of water
	   mercury    pressure per unit height of mercury
	   au	      astronomical unit

     The unit 'pound' is a unit of mass.  Compound names are run together so
     'pound force' is a unit of force.	The unit 'ounce' is also a unit of
     mass.  The fluid ounce is 'floz'.	British units that differ from their
     US counterparts are prefixed with 'br', and currency is prefixed with its
     country name: 'belgiumfranc', 'britainpound'.  When searching for a unit,
     if the specified string does not appear exactly as a unit name, then
     units will try to remove a trailing 's' or a trailing 'es' and check
     again for a match.

     To find out what units are available read the standard units file.  If
     you want to add your own units you can supply your own file.  A unit is
     specified on a single line by giving its name and an equivalence.	Be
     careful to define new units in terms of old ones so that a reduction
     leads to the primitive units which are marked with '!' characters.  The
     units program will not detect infinite loops that could be caused by
     careless unit definitions.  Comments in the unit definition file begin
     with a '/' character at the beginning of a line.

     Prefixes are defined in the same was as standard units, but with a trail-
     ing dash at the end of the prefix name.  If a unit is not found even
     after removing trailing 's' or 'es', then it will be checked against the
     list of prefixes.	Prefixes will be removed until a legal base unit is
     identified.

     Here is an example of a short units file that defines some basic units.

	   m	     !a!
	   sec	     !b!
	   micro-    1e-6
	   minute    60 sec
	   hour      60 min
	   inch      0.0254 m
	   ft	     12 inches
	   mile      5280 ft

FILES
     /usr/share/misc/units.lib	the standard units library

AUTHORS
     Adrian Mariano <adrian@cam.cornell.edu>

BUGS
     The effect of including a '/' in a prefix is surprising.

     Exponents entered by the user can be only one digit.  You can work around
     this by multiplying several terms.

     The user must use | to indicate division of numbers and / to indicate
     division of symbols.  This distinction should not be necessary.

     The program contains various arbitrary limits on the length of the units
     converted and on the length of the data file.

     The program should use a hash table to store units so that it does not
     take so long to load the units list and check for duplication.

BSD				 July 14, 1993				   BSD
","# units

> Provide the conversion between two units of measure.
> Typing 'search {{text}}' in the prompt will display a list of all of the units containing {{text}}.

- Run in interactive mode:

`units`

- Show the conversion between two simple units:

`units {{quarts}} {{tablespoons}}`

- Convert between units with quantities:

`units {{15 pounds}} {{kilograms}}`

- Show the conversion between two compound units:

`units {{""meters / second""}} {{""inches / hour""}}`

- Show the conversion between units with different dimensions:

`units {{""acres""}} {{""ft^2""}}`
"
ebuild,,,"# ebuild

> A low level interface to the Gentoo Portage system.

- Create or update the package manifest:

`ebuild {{path/to/file.ebuild}} manifest`

- Clean the temporary build directories for the build file:

`ebuild {{path/to/file.ebuild}} clean`

- Fetch sources if they do not exist:

`ebuild {{path/to/file.ebuild}} fetch`

- Extract the sources to a temporary build directory:

`ebuild {{path/to/file.ebuild}} unpack`

- Compile the extracted sources:

`ebuild {{path/to/file.ebuild}} compile`

- Install the package to a temporary install directory:

`ebuild {{path/to/file.ebuild}} install`

- Install the temporary files to the live filesystem:

`ebuild {{path/to/file.ebuild}} qmerge`

- Fetch, unpack, compile, install and qmerge the specified ebuild file:

`ebuild {{path/to/file.ebuild}} merge`
"
rc-status,,,"# rc-status

> Show status info about runlevels.
> See also `openrc`.

- Show a summary of services and their status:

`rc-status`

- Include services in all runlevels in the summary:

`rc-status --all`

- List services that have crashed:

`rc-status --crashed`

- List manually started services:

`rc-status --manual`

- List supervised services:

`rc-status --supervised`

- Get the current runlevel:

`rc-status --runlevel`

- List all runlevels:

`rc-status --list`
"
duperemove,https://markfasheh.github.io/duperemove/,,"# duperemove

> Finds duplicate file system extents and optionally schedule them for deduplication.
> An extent is small part of a file inside the file system.
> On some file systems one extent can be referenced multiple times, when parts of the content of the files are identical.
> More information: <https://markfasheh.github.io/duperemove/>.

- Search for duplicate extents in a directory and show them:

`duperemove -r {{path/to/directory}}`

- Deduplicate duplicate extents on a Btrfs or XFS (experimental) file system:

`duperemove -r -d {{path/to/directory}}`

- Use a hash file to store extent hashes (less memory usage and can be reused on subsequent runs):

`duperemove -r -d --hashfile={{path/to/hashfile}} {{path/to/directory}}`

- Limit I/O threads (for hashing and dedupe stage) and CPU threads (for duplicate extent finding stage):

`duperemove -r -d --hashfile={{path/to/hashfile}} --io-threads={{N}} --cpu-threads={{N}} {{path/to/directory}}`
"
logwatch,,,"# logwatch

> Summarizes many different logs for common services (e.g., apache, pam_unix, sshd, etc.) in a single report.

- Analyze logs for a range of dates at certain level of detail:

`logwatch --range {{yesterday|today|all|help}} --detail {{low|medium|others}}'`

- Restrict report to only include information for a selected service:

`logwatch --range {{all}} --service {{apache|pam_unix|etc}}`
"
lscpu,,,"# lscpu

> Displays information about the CPU architecture.

- Display information about all CPUs:

`lscpu`

- Display information in a table:

`lscpu --extended`

- Display only information about offline CPUs in a table:

`lscpu --extended --offline`
"
sar,,,"# sar

> Monitor performance of various Linux subsystems.

- Report I/O and transfer rate issued to physical devices, one per second (press CTRL+C to quit):

`sar -b {{1}}`

- Report a total of 10 network device statistics, one per 2 seconds:

`sar -n DEV {{2}} {{10}}`

- Report CPU utilization, one per 2 seconds:

`sar -u ALL {{2}}`

- Report a total of 20 memory utilization statistics, one per second:

`sar -r ALL {{1}} {{20}}`

- Report the run queue length and load averages, one per second:

`sar -q {{1}}`

- Report paging statistics, one per 5 seconds:

`sar -B {{5}}`
"
yaourt,,,"# yaourt

> Arch Linux utility for building packages from the Arch User Repository.

- Synchronize and update all packages (including AUR):

`yaourt -Syua`

- Install a new package (includes AUR):

`yaourt -S {{package_name}}`

- Remove a package and its dependencies (includes AUR packages):

`yaourt -Rs {{package_name}}`

- Search the package database for a keyword (including AUR):

`yaourt -Ss {{package_name}}`

- List installed packages, versions, and repositories (AUR packages will be listed under the repository name 'local'):

`yaourt -Q`
"
urxvt,,,"# urxvt

> Rxvt-unicode.
> A customizable terminal emulator.

- Open a new urxvt window:

`urxvt`

- Run in a specific directory:

`urxvt -cd {{path/to/directory}}`

- Run a command in a new urxvt window:

`urxvt -e {{command}}`

- Run a command and keep the window open:

`urxvt --hold -e {{command}}`

- Run a command within the ""sh"" shell:

`urxvt -e {{sh}} -c {{command}}`
"
zypper,,,"# zypper

> SUSE & openSUSE package management utility.

- Synchronize list of packages and versions available:

`zypper refresh`

- Install a new package:

`zypper install {{package}}`

- Remove a package:

`zypper remove {{package}}`

- Upgrade installed packages to newest available versions:

`zypper update`

- Search package via keyword:

`zypper search {{keyword}}`
"
xrandr,,,"# xrandr

> Set the size, orientation and/or reflection of the outputs for a screen.

- Display the current state of the system (known screens, resolutions, ...):

`xrandr --query`

- Disable disconnected outputs and enable connected ones with default settings:

`xrandr --auto`

- Change the resolution and update frequency of DisplayPort 1 to 1920x1080, 60Hz:

`xrandr --output {{DP1}} --mode {{1920x1080}} --rate {{60}}`

- Set the resolution of HDMI2 to 1280x1024 and put it on the right of DP1:

`xrandr --output {{HDMI2}} --mode {{1280x1024}} --right-of {{DP1}}`

- Disable the VGA1 output:

`xrandr --output {{VGA1}} --off`
"
google-chrome,https://chrome.google.com,,"# google-chrome

> The web browser from Google.
> More information: <https://chrome.google.com>.

- Run with a custom profile directory:

`google-chrome --user-data-dir={{path/to/directory}}`

- Run without CORS validation, useful to test an API:

`google-chrome --user-data-dir={{path/to/directory}} --disable-web-security`
"
rofi,https://github.com/davatorium/rofi,,"# rofi

> An application launcher and window switcher.
> More Information: <https://github.com/davatorium/rofi>.

- Show the list of apps:

`rofi -show drun`

- Show the list of all commands:

`rofi -show run`

- Switch between windows:

`rofi -show window`

- Pipe a list of items to stdin and print the selected item to stdout:

`printf ""{{Choice1\nChoice2\nChoice3}}"" | rofi -dmenu`
"
firejail,,,"# firejail

> Securely sandboxes processes to containers using built-in Linux capabilities.

- Integrate firejail with your desktop environment:

`sudo firecfg`

- Open a restricted Mozilla Firefox:

`firejail {{firefox}}`

- Start a restricted Apache server on a known interface and address:

`firejail --net={{eth0}} --ip={{192.168.1.244}} {{/etc/init.d/apache2}} {{start}}`

- List running sandboxes:

`firejail --list`

- List network activity from running sandboxes:

`firejail --netstats`

- Shutdown a running sandbox:

`firejail --shutdown={{7777}}`
"
bitwise,https://github.com/mellowcandle/bitwise,,"# bitwise

> Multi base interactive calculator supporting dynamic base conversion and bit manipulation.
> More information: <https://github.com/mellowcandle/bitwise>.

- Run using interactive mode:

`bitwise`

- Convert from decimal:

`bitwise {{12345}}`

- Convert from hexadecimal:

`bitwise {{0x563d}}`

- Convert a C-style calculation:

`bitwise  {{""0x123 + 0x20 - 30 / 50""}}`
"
rdesktop,,,"# rdesktop

> Remote Desktop Protocol client.
> It can be used to connect the remote computer using the RDP protocol.

- Connect to a remote computer (default port is 3389):

`rdesktop -u {{username}} -p {{password}} {{host:port}}`

- Simple Examples:

`rdesktop -u Administrator -p passwd123 192.168.1.111:3389`

- Connect to a remote computer with full screen (press `Ctrl + Alt + Enter` to exist):

`rdesktop -u {{username}} -p {{password}} -f {{host:port}}`

- Use the customed resolution (use the letter 'x' between the number):

`rdesktop -u {{username}} -p {{password}} -g 1366x768 {{host:port}}`

- Connect to a remote computer using domain user:

`rdesktop -u {{username}} -p {{password}} -d {{domainname}} {{host:port}}`

- Use the 16 bit color (speed up):

`rdesktop -u {{username}} -p {{password}} -a 16 {{host:port}}`
"
updatedb,,,"# updatedb

> Create or update the database used by `locate`.
> It is usually run daily by cron.

- Refresh database content:

`sudo updatedb`

- Display file names as soon as they are found:

`sudo updatedb --verbose`
"
silentcast,https://github.com/colinkeenan/silentcast,,"# silentcast

> Silent screencast creator. Saves in `.mkv` and animated gif formats.
> More information: <https://github.com/colinkeenan/silentcast>.

- Launch silentcast:

`silentcast`

- Launch silentcast on a specific display:

`silentcast --display={{display}}`
"
autorandr,,,"# autorandr

> Automatically change screen layout.

- Save the current screen layout:

`autorandr -s {{profile_name}}`

- Show the saved profiles:

`autorandr`

- Change the profile:

`autorandr -l {{profile_name}}`

- Set the default profile:

`autorandr -d {{profile_name}}`
"
paccache,,,"# paccache

> A pacman cache cleaning utility.

- Remove all but the 3 most recent package versions from the pacman cache:

`paccache -r`

- Set the number of package versions to keep:

`paccache -rk {{num_versions}}`

- Perform a dry-run and show the number of candidate packages for deletion:

`paccache -d`

- Move candidate packages to a directory instead of deleting them:

`paccache -m {{path/to/directory}}`
"
steghide,https://github.com/StefanoDeVuono/steghide,,"# steghide

> Steganography tool for JPEG, BMP, WAV and AU file formats.
> More information: <https://github.com/StefanoDeVuono/steghide>.

- Embed data in a PNG image, prompting for a passphrase:

`steghide embed --coverfile {{path/to/image.png}} --embedfile {{path/to/data.txt}}`

- Extract data from a WAV audio file:

`steghide extract --stegofile {{path/to/sound.wav}}`

- Display file information, trying to detect an embedded file:

`steghide info {{path/to/file.jpg}}`

- Embed data in a JPEG image, using maximum compression:

`steghide embed --coverfile {{path/to/image.jpg}} --embedfile {{path/to/data.txt}} --compress {{9}}`

- Get the list of supported encryption algorithms and modes:

`steghide encinfo`

- Embed encrypted data in a JPEG image, e.g. with Blowfish in CBC mode:

`steghide embed --coverfile {{path/to/image.jpg}} --embedfile {{path/to/data.txt}} --encryption {{blowfish|...}} {{cbc|...}}`
"
light,,,"# light

> CLI to control the backlight of your screen.

- Get the current backlight value in percent:

`light`

- Set the backlight value to 50 percent:

`light -S {{50}}`

- Reduce 20 percent from the current backlight value:

`light -U {{20}}`

- Add 20 percent to the current backlight value:

`light -A {{20}}`
"
fc,,"
BUILTIN(1)		  BSD General Commands Manual		    BUILTIN(1)

NAME
     builtin, !, %, ., :, @, {, }, alias, alloc, bg, bind, bindkey, break,
     breaksw, builtins, case, cd, chdir, command, complete, continue, default,
     dirs, do, done, echo, echotc, elif, else, end, endif, endsw, esac, eval,
     exec, exit, export, false, fc, fg, filetest, fi, for, foreach, getopts,
     glob, goto, hash, hashstat, history, hup, if, jobid, jobs, kill, limit,
     local, log, login, logout, ls-F, nice, nohup, notify, onintr, popd,
     printenv, pushd, pwd, read, readonly, rehash, repeat, return, sched, set,
     setenv, settc, setty, setvar, shift, source, stop, suspend, switch,
     telltc, test, then, time, times, trap, true, type, ulimit, umask,
     unalias, uncomplete, unhash, unlimit, unset, unsetenv, until, wait,
     where, which, while -- shell built-in commands

SYNOPSIS
     builtin [-options] [args ...]

DESCRIPTION
     Shell builtin commands are commands that can be executed within the run-
     ning shell's process.  Note that, in the case of csh(1) builtin commands,
     the command is executed in a subshell if it occurs as any component of a
     pipeline except the last.

     If a command specified to the shell contains a slash ``/'', the shell
     will not execute a builtin command, even if the last component of the
     specified command matches the name of a builtin command.  Thus, while
     specifying ``echo'' causes a builtin command to be executed under shells
     that support the echo builtin command, specifying ``/bin/echo'' or
     ``./echo'' does not.

     While some builtin commands may exist in more than one shell, their oper-
     ation may be different under each shell which supports them.  Below is a
     table which lists shell builtin commands, the standard shells that sup-
     port them and whether they exist as standalone utilities.

     Only builtin commands for the csh(1) and sh(1) shells are listed here.
     Consult a shell's manual page for details on the operation of its builtin
     commands.	Beware that the sh(1) manual page, at least, calls some of
     these commands ``built-in commands'' and some of them ``reserved words''.
     Users of other shells may need to consult an info(1) page or other
     sources of documentation.

     Commands marked ``No**'' under External do exist externally, but are
     implemented as scripts using a builtin command of the same name.

	   Command	 External    csh(1)    sh(1)
	   !		 No	     No        Yes
	   %		 No	     Yes       No
	   .		 No	     No        Yes
	   :		 No	     Yes       Yes
	   @		 No	     Yes       Yes
	   {		 No	     No        Yes
	   }		 No	     No        Yes
	   alias	 No**	     Yes       Yes
	   alloc	 No	     Yes       No
	   bg		 No**	     Yes       Yes
	   bind 	 No	     No        Yes
	   bindkey	 No	     Yes       No
	   break	 No	     Yes       Yes
	   breaksw	 No	     Yes       No
	   builtin	 No	     No        Yes
	   builtins	 No	     Yes       No
	   case 	 No	     Yes       Yes
	   cd		 No**	     Yes       Yes
	   chdir	 No	     Yes       Yes
	   command	 No**	     No        Yes
	   complete	 No	     Yes       No
	   continue	 No	     Yes       Yes
	   default	 No	     Yes       No
	   dirs 	 No	     Yes       No
	   do		 No	     No        Yes
	   done 	 No	     No        Yes
	   echo 	 Yes	     Yes       Yes
	   echotc	 No	     Yes       No
	   elif 	 No	     No        Yes
	   else 	 No	     Yes       Yes
	   end		 No	     Yes       No
	   endif	 No	     Yes       No
	   endsw	 No	     Yes       No
	   esac 	 No	     No        Yes
	   eval 	 No	     Yes       Yes
	   exec 	 No	     Yes       Yes
	   exit 	 No	     Yes       Yes
	   export	 No	     No        Yes
	   false	 Yes	     No        Yes
	   fc		 No**	     No        Yes
	   fg		 No**	     Yes       Yes
	   filetest	 No	     Yes       No
	   fi		 No	     No        Yes
	   for		 No	     No        Yes
	   foreach	 No	     Yes       No
	   getopts	 No**	     No        Yes
	   glob 	 No	     Yes       No
	   goto 	 No	     Yes       No
	   hash 	 No	     No        Yes
	   hashstat	 No	     Yes       No
	   history	 No	     Yes       No
	   hup		 No	     Yes       No
	   if		 No	     Yes       Yes
	   jobid	 No	     No        Yes
	   jobs 	 No**	     Yes       Yes
	   kill 	 Yes	     Yes       No
	   limit	 No	     Yes       No
	   local	 No	     No        Yes
	   log		 No	     Yes       No
	   login	 Yes	     Yes       No
	   logout	 No	     Yes       No
	   ls-F 	 No	     Yes       No
	   nice 	 Yes	     Yes       No
	   nohup	 Yes	     Yes       No
	   notify	 No	     Yes       No
	   onintr	 No	     Yes       No
	   popd 	 No	     Yes       No
	   printenv	 Yes	     Yes       No
	   pushd	 No	     Yes       No
	   pwd		 Yes	     No        Yes
	   read 	 No**	     No        Yes
	   readonly	 No	     No        Yes
	   rehash	 No	     Yes       No
	   repeat	 No	     Yes       No
	   return	 No	     No        Yes
	   sched	 No	     Yes       No
	   set		 No	     Yes       Yes
	   setenv	 No	     Yes       No
	   settc	 No	     Yes       No
	   setty	 No	     Yes       No
	   setvar	 No	     No        Yes
	   shift	 No	     Yes       Yes
	   source	 No	     Yes       No
	   stop 	 No	     Yes       No
	   suspend	 No	     Yes       No
	   switch	 No	     Yes       No
	   telltc	 No	     Yes       No
	   test 	 Yes	     No        Yes
	   then 	 No	     No        Yes
	   time 	 Yes	     Yes       No
	   times	 No	     No        Yes
	   trap 	 No	     No        Yes
	   true 	 Yes	     No        Yes
	   type 	 No	     No        Yes
	   ulimit	 No	     No        Yes
	   umask	 No**	     Yes       Yes
	   unalias	 No**	     Yes       Yes
	   uncomplete	 No	     Yes       No
	   unhash	 No	     Yes       No
	   unlimit	 No	     Yes       No
	   unset	 No	     Yes       Yes
	   unsetenv	 No	     Yes       No
	   until	 No	     No        Yes
	   wait 	 No**	     Yes       Yes
	   where	 No	     Yes       No
	   which	 Yes	     Yes       No
	   while	 No	     Yes       Yes

SEE ALSO
     csh(1), echo(1), false(1), info(1), kill(1), login(1), nice(1), nohup(1),
     printenv(1), pwd(1), sh(1), test(1), time(1), true(1), which(1)

HISTORY
     The builtin manual page first appeared in FreeBSD 3.4.

AUTHORS
     This manual page was written by Sheldon Hearn <sheldonh@FreeBSD.org>.

BSD			       February 23, 2005			   BSD
","# fc

> Open the most recent command and edit it.

- Open in the default system editor:

`fc`

- Specify an editor to open with:

`fc -e {{'emacs'}}`

- List recent commands from history:

`fc -l`
"
nmcli-device,,,"# nmcli device

> Hardware device management with NetworkManager.

- Print the statuses of all network interfaces:

`nmcli device status`

- Print the available Wi-Fi access points:

`nmcli device wifi`

- Connect to the Wi-Fi network with a specified name and password:

`nmcli device wifi connect {{ssid}} password {{password}}`
"
dget,https://manpages.debian.org/dget,,"# dget

> Download Debian packages.
> More information: <https://manpages.debian.org/dget>.

- Download a binary package:

`dget {{package_name}}`

- Download and extract a package source from its .dsc file:

`dget {{http://deb.debian.org/debian/pool/main/h/haskell-tldr/haskell-tldr_0.4.0-2.dsc}}`

- Download a package source tarball from its .dsc file but don't extract it:

`dget -d {{http://deb.debian.org/debian/pool/main/h/haskell-tldr/haskell-tldr_0.4.0-2.dsc}}`
"
rename,,"
RENAME(2)		    BSD System Calls Manual		     RENAME(2)

NAME
     rename, renameat, renamex_np, renameatx_np -- change the name of a file

SYNOPSIS
     #include <stdio.h>

     int
     rename(const char *old, const char *new);

     int
     renameat(int fromfd, const char *from, int tofd, const char *to);

     int
     renamex_np(const char *from, const char *to, unsigned int flags);

     int
     renameatx_np(int fromfd, const char *from, int tofd, const char *to,
	 unsigned int flags);

DESCRIPTION
     The rename() system call causes the link named old to be renamed as new.
     If new exists, it is first removed.  Both old and new must be of the same
     type (that is, both must be either directories or non-directories) and
     must reside on the same file system.

     The rename() system call guarantees that an instance of new will always
     exist, even if the system should crash in the middle of the operation.

     If the final component of old is a symbolic link, the symbolic link is
     renamed, not the file or directory to which it points.

     The renameat() system call is equivalent to rename() except in the case
     where either from or to specifies a relative path.  If from is a relative
     path, the file to be renamed is located relative to the directory associ-
     ated with the file descriptor fromfd instead of the current working
     directory.  If the to is a relative path, the same happens only relative
     to the directory associated with tofd.  If the renameat() is passed the
     special value AT_FDCWD in the fromfd or tofd parameter, the current work-
     ing directory is used in the determination of the file for the respective
     path parameter.

     The renamex_np() and renameatx_np() system calls are similar to their
     counterparts except that they take a flags argument.  Values for flags
     are constructed with below bits set:

	   RENAME_SWAP	 On file systems that support it (see getattrlist(2)
			 VOL_CAP_INT_RENAME_SWAP), it will cause the source
			 and target to be atomically swapped.  Source and tar-
			 get need not be of the same type, i.e. it is possible
			 to swap a file with a directory.  EINVAL is returned
			 in case of bitwise-inclusive OR with RENAME_EXCL.

	   RENAME_EXCL	 On file systems that support it (see getattrlist(2)
			 VOL_CAP_INT_RENAME_EXCL), it will cause EEXIST to be
			 returned if the destination already exists. EINVAL is
			 returned in case of bitwise-inclusive OR with
			 RENAME_SWAP.

CAVEATS
     The system can deadlock if a loop is present in the file system graph.
     This loop takes the form of an entry in directory `a', say `a/foo', being
     a hard link to directory `b', and an entry in directory `b', say `b/bar',
     being a hard link to directory `a'.  When such a loop exists and two sep-
     arate processes attempt to perform `rename a/foo b/bar' and `rename b/bar
     a/foo', respectively, the system may deadlock attempting to lock both
     directories for modification.

     Whether or not hard links to directories are supported is specific to the
     underlying filesystem implementation.

     It is recommended that any hard links to directories in an underlying
     filesystem should be replaced by symbolic links by the system administra-
     tor to avoid the possibility of deadlocks.

     Moving or renaming a file or directory into a directory with inheritable
     ACLs does not result in ACLs being set on the file or directory. Use
     acl(3) in conjunction with rename() to set ACLs on the file or directory.

RETURN VALUES
     A 0 value is returned if the operation succeeds, otherwise rename()
     returns -1 and the global variable errno indicates the reason for the
     failure.

ERRORS
     The rename() system call will fail and neither of the argument files will
     be affected if:

     [EACCES]		A component of either path prefix denies search per-
			mission.

     [EACCES]		The requested operation requires writing in a direc-
			tory (e.g., new, new/.., or old/..) whose modes disal-
			low this.

     [EDQUOT]		The directory in which the entry for the new name is
			being placed cannot be extended because the user's
			quota of disk blocks on the file system containing the
			directory has been exhausted.

     [EEXIST]		flags has RENAME_EXCL set but new already exists.

     [EFAULT]		Path points outside the process's allocated address
			space.

     [EINVAL]		Old is a parent directory of new, or an attempt is
			made to rename `.' or `..'.  If RENAME_SWAP is used,
			then EINVAL will also be returned if new is a parent
			directory of old.  If both RENAME_SWAP and RENAME_EXCL
			bits are set in flags, then EINVAL will be returned.

     [EINVAL]		flags has an invalid value.

     [EIO]		An I/O error occurs while making or updating a direc-
			tory entry.

     [EISDIR]		new is a directory, but old is not a directory.

     [ELOOP]		Too many symbolic links are encountered in translating
			either pathname.  This is taken to be indicative of a
			looping symbolic link.

     [ENAMETOOLONG]	A component of a pathname exceeds {NAME_MAX} charac-
			ters, or an entire path name exceeds {PATH_MAX} char-
			acters.

     [ENOENT]		A component of the old path does not exist, or a path
			prefix of new does not exist.

     [ENOENT]		flags has RENAME_SWAP set but new does not exist.

     [ENOSPC]		The directory in which the entry for the new name is
			being placed cannot be extended because there is no
			space left on the file system containing the direc-
			tory.

     [ENOTDIR]		A component of either path prefix is not a directory.

     [ENOTDIR]		old is a directory, but new is not a directory.

     [ENOTEMPTY]	New is a directory and is not empty.

     [ENOTSUP]		flags has a value that is not supported by the file
			system.

     [EPERM]		The directory containing old is marked sticky, and
			neither the containing directory nor old are owned by
			the effective user ID.

     [EPERM]		The new file exists, the directory containing new is
			marked sticky, and neither the containing directory
			nor new are owned by the effective user ID.

     [EROFS]		The requested link requires writing in a directory on
			a read-only file system.

     [EXDEV]		The link named by new and the file named by old are on
			different logical devices (file systems).  Note that
			this error code will not be returned if the implemen-
			tation permits cross-device links.

     The renameat() and renameatx_np() calls may also fail with:

     [EBADF]		The from argument does not specify an absolute path
			and the fromfd argument is neither AT_FDCWD nor a
			valid file descriptor open for searching, or the to
			argument does not specify an absolute path and the
			tofd argument is neither AT_FDCWD nor a valid file
			descriptor open for searching.

     [ENOTDIR]		The from argument is not an absolute path and fromfd
			is neither AT_FDCWD nor a file descriptor associated
			with a directory, or the to argument is not an abso-
			lute path and tofd is neither AT_FDCWD nor a file
			descriptor associated with a directory.

CONFORMANCE
     The restriction on renaming a directory whose permissions disallow writ-
     ing is based on the fact that UFS directories contain a "".."" entry.  If
     renaming a directory would move it to another parent directory, this
     entry needs to be changed.

     This restriction has been generalized to disallow renaming of any write-
     disabled directory, even when this would not require a change to the ""..""
     entry.  For consistency, HFS+ directories emulate this behavior.

SEE ALSO
     open(2), symlink(7)

STANDARDS
     The rename() function conforms to IEEE Std 1003.1-1988 (``POSIX.1'').
     The renameat() system call is expected to conform to POSIX.1-2008 .

4.2 Berkeley Distribution     September 18, 2008     4.2 Berkeley Distribution
","# rename

> Rename multiple files.
> NOTE: this page refers to the command from the `util-linux` package.
> For the Perl version, see `file-rename` or `perl-rename`.
> Warning: This command has no safeguards and will overwrite files without prompting.

- Rename files using simple substitutions (substitute 'foo' with 'bar' wherever found):

`rename {{foo}} {{bar}} {{*}}`

- Dry-run - display which renames would occur without performing them:

`rename -vn {{foo}} {{bar}} {{*}}`

- Do not overwrite existing files:

`rename -o {{foo}} {{bar}} {{*}}`

- Change file extensions:

`rename {{.ext}} {{.bak}} {{*.ext}}`

- Prepend ""foo"" to all filenames in the current directory:

`rename {{''}} {{'foo'}} {{*}}`

- Rename a group of increasingly numbered files zero-padding the numbers up to 3 digits:

`rename {{foo}} {{foo00}} {{foo?}} && rename {{foo}} {{foo0}} {{foo??}}`
"
arecord,https://linux.die.net/man/1/arecord,,"# arecord

> Sound recorder for ALSA soundcard driver.
> More information: <https://linux.die.net/man/1/arecord>.

- Record a snippet in ""CD"" quality (finish with Ctrl-C when done):

`arecord -vv --format=cd {{path/to/file.wav}}`

- Record a snippet in ""CD"" quality, with a fixed duration of 10 seconds:

`arecord -vv --format=cd --duration={{10}} {{path/to/file.wav}}`

- Record a snippet and save it as mp3 (finish with Ctrl-C when done):

`arecord -vv --format=cd --file-type raw | lame -r - {{path/to/file.mp3}}`
"
compose,,,"# compose

> An alias to a `run-mailcap`'s action compose.
> Originally `run-mailcap` is used to mime-type/file.

- Compose action can be used to compose any existing file or new on default mailcap edit tool:

`compose {{filename}}`

- With `run-mailcap`:

`run-mailcap --action=compose {{filename}}`
"
groupmod,,,"# groupmod

> Modify existing user groups in the system.

- Change the group name:

`groupmod -n {{new_group_name}} {{old_group_name}}`

- Change the group id:

`groupmod -g {{new_group_id}} {{old_group_name}}`
"
btrfs,,,"# btrfs

> A filesystem based on the copy-on-write (COW) principle for Linux.

- Create subvolume:

`sudo btrfs subvolume create {{path/to/subvolume}}`

- List subvolumes:

`sudo btrfs subvolume list {{path/to/mount_point}}`

- Show space usage information:

`sudo btrfs filesystem df {{path/to/mount_point}}`

- Enable quota:

`sudo btrfs quota enable {{path/to/subvolume}}`

- Show quota:

`sudo btrfs qgroup show {{path/to/subvolume}}`
"
rtcwake,,,"# rtcwake

> Enter a system sleep state until specified wakeup time relative to your bios clock.

- Show whether an alarm is set or not:

`sudo rtcwake -m show -v`

- Suspend to ram and wakeup after 10 seconds:

`sudo rtcwake -m mem -s {{10}}`

- Suspend to disk (higher power saving) and wakeup 15 minutes later:

`sudo rtcwake -m disk --date +{{15}}min`

- Freeze the system (more efficient than suspend-to-ram but linux > 3.9 required) and wakeup at a given date and time:

`sudo rtcwake -m freeze --date {{YYYYMMDDhhmm}}`

- Disable a previously set alarm:

`sudo rtcwake -m disable`

- Perform a dry run to wakup the computer at a given time. (Press Ctrl + C to abort):

`sudo rtcwake -m on --date {{hh:ss}}`
"
sensors,,,"# sensors

> Report sensors information.

- Show the current readings of all sensor chips:

`sensors`

- Show temperatures in degrees Fahrenheit:

`sensors --fahrenheit`
"
uuidgen,,"
UUIDGEN(1)		  BSD General Commands Manual		    UUIDGEN(1)

NAME
     uuidgen -- generates new UUID strings

SYNOPSIS
     uuidgen [-hdr]

DESCRIPTION
     The uuidgen command generates a Universally Unique IDentifier (UUID), a
     128-bit value guaranteed to be unique over both space and time.

     The following options are available:

     -hdr      Emit CoreFoundation CFUUID-based source code for using the uuid
	       in a header.

RETURN VALUE
     The UUID is printed to standard output as a hyphen-punctuated ASCII
     string of the form: EEF45689-BBE5-4FB6-9E80-41B78F6578E2 (in printf(3)
     format ""%08X-%04X-%04X-%04X-%012X""), unless the -hdr option is given, in
     which case a fragment of source code is output.

Mac OS X			 July 1, 2005			      Mac OS X
","# uuidgen

> Generate unique identifiers (UUIDs).

- Create a random UUID:

`uuidgen --random`

- Create a UUID based on the current time:

`uuidgen --time`

- Create a UUID based on the hash of a URL:

`uuidgen --sha1 --namespace {{@url}} --name {{object_name}}`
"
fc-cache,,"FC-CACHE(1)							   FC-CACHE(1)



NAME
       fc-cache - build font information cache files

SYNOPSIS
       fc-cache  [  -EfrsvVh  ]   [  --error-on-no-fonts  ]   [  --force  ]  [
       --really-force ]  [  [ -y dir ]	[ --sysroot dir ]  ]  [  --system-only
       ]  [ --verbose ]  [ --version ]	[ --help ]  [ dir... ]

DESCRIPTION
       fc-cache  scans	the  font  directories	on  the system and builds font
       information cache files for applications  using	fontconfig  for  their
       font handling.

       If  directory  arguments are not given, fc-cache uses each directory in
       the current font configuration. Each  directory	is  scanned  for  font
       files  readable	by FreeType. A cache is created which contains proper-
       ties of each font and the associated filename.  This cache is  used  to
       speed up application startup when using the fontconfig library.

       Note  that  fc-cache must be executed once per architecture to generate
       font information customized for that architecture.

OPTIONS
       This program follows the usual  GNU  command  line  syntax,  with  long
       options	starting  with	two  dashes  (`-').  A	summary  of options is
       included below.

       -E     Raise an error if there are no fonts in dir  or  directories  in
	      the configuration if not given.

       -f     Force  re-generation of apparently up-to-date cache files, over-
	      riding the timestamp checking.

       -r     Erase all existing cache files and rescan.

       -s     Only scan system-wide directories, omitting the  places  located
	      in the user's home directory.

       -v     Display status information while busy.

       -y     Prepend dir to all paths for scanning.

       -h     Show summary of options.

       -V     Show version of the program and exit.

       dir    Directory to scan for fonts.

RETURN CODES
       fc-cache  returns  zero if the caches successfully generated. otherwise
       non-zero.

FILES
       %cachedir%/*-%arch%.cache-%version%
	      These files are generated by fc-cache and contain maps from file
	      names  to  font  properties.  They  are  read  by the fontconfig
	      library at application startup to locate appropriate fonts.

SEE ALSO
       fc-cat(1) fc-list(1) fc-match(1) fc-pattern(1) fc-query(1) fc-scan(1)

       The fontconfig user's guide, in	HTML  format:  /usr/share/doc/fontcon-
       fig/fontconfig-user.html.

AUTHOR
       This  manual  page was written by Keith Packard <keithp@keithp.com> and
       Josselin Mouette <joss@debian.org>.



				 Aug 13, 2008			   FC-CACHE(1)
","# fc-cache

> Scan font directories in order to build font cache files.

- Generate font cache files:

`fc-cache`

- Force a rebuild of all font cache files, without checking if cache is up-to-date:

`fc-cache -f`

- Erase font cache files, then generate new font cache files:

`fc-cache -r`
"
amixer,,,"# amixer

> Mixer for ALSA soundcard driver.

- Turn up the master volume by 10%:

`amixer -D pulse sset Master {{10%+}}`

- Turn down the master volume by 10%:

`amixer -D pulse sset Master {{10%-}}`
"
iwconfig,https://linux.die.net/man/8/iwconfig,,"# iwconfig

> Configure and show the parameters of a wireless network interface.
> More information: <https://linux.die.net/man/8/iwconfig>.

- Show the parameters and statistics of all the interfaces:

`iwconfig`

- Show the parameters and statistics of the specified interface:

`iwconfig {{interface}}`

- Set the ESSID (network name) of the specified interface (e.g., eth0 or wlp2s0):

`iwconfig {{interface}} {{new_network_name}}`

- Set the operating mode of the specified interface:

`ifconfig {{interface}} mode {{ad hoc|Managed|Master|Repeater|Secondary|Monitor|Auto}}`
"
emerge,,,"# emerge

> Gentoo Linux package manager utility.

- Synchronize all packages:

`emerge --sync`

- Update all packages, including dependencies:

`emerge -uDNav @world`

- Resume a failed updated, skipping the failing package:

`emerge --resume --skipfirst`

- Install a new package, with confirmation:

`emerge -av {{package_name}}`

- Remove a package, with confirmation:

`emerge -Cav {{package_name}}`

- Remove orphaned packages (that were installed only as dependencies):

`emerge -avc`

- Search the package database for a keyword:

`emerge -S {{keyword}}`
"
pkgadd,,,"# pkgadd

> Add a package to a CRUX system.

- Install a local software package:

`pkgadd {{package_name}}`

- Update an already installed package from a local package:

`pkgadd -u {{package_name}}`
"
uprecords,,,"# uprecords

> Displays a summary of historical uptime records.

- Display a summary of the top 10 historical uptime records:

`uprecords`

- Display the top 25 records:

`uprecords -m {{25}}`

- Display the downtime between reboots instead of the kernel version:

`uprecords -d`

- Show the most recent reboots:

`uprecords -B`

- Don't truncate information:

`uprecords -w`
"
pacman,,,"# pacman

> Arch Linux package manager utility.

- Synchronize and update all packages:

`pacman -Syu`

- Install a new package:

`pacman -S {{package_name}}`

- Remove a package and its dependencies:

`pacman -Rs {{package_name}}`

- Search the package database for a regular expression or keyword:

`pacman -Ss ""{{search_pattern}}""`

- List installed packages and versions:

`pacman -Q`

- List only the explicitly installed packages and versions:

`pacman -Qe`

- Find which package owns a certain file:

`pacman -Qo {{filename}}`

- Empty package cache to free up space:

`pacman -Scc`
"
colrm,,"
COLRM(1)		  BSD General Commands Manual		      COLRM(1)

NAME
     colrm -- remove columns from a file

SYNOPSIS
     colrm [start [stop]]

DESCRIPTION
     The colrm utility removes selected columns from the lines of a file.  A
     column is defined as a single character in a line.  Input is read from
     the standard input.  Output is written to the standard output.

     If only the start column is specified, columns numbered less than the
     start column will be written.  If both start and stop columns are speci-
     fied, columns numbered less than the start column or greater than the
     stop column will be written.  Column numbering starts with one, not zero.

     Tab characters increment the column count to the next multiple of eight.
     Backspace characters decrement the column count by one.

ENVIRONMENT
     The LANG, LC_ALL and LC_CTYPE environment variables affect the execution
     of colrm as described in environ(7).

EXIT STATUS
     The colrm utility exits 0 on success, and >0 if an error occurs.

SEE ALSO
     awk(1), column(1), cut(1), paste(1)

HISTORY
     The colrm command appeared in 3.0BSD.

BSD				August 4, 2004				   BSD
","# colrm

> Remove columns from `stdin`.

- Remove first column of `stdin`:

`colrm {{1 1}}`

- Remove from 3rd column till the end of each line:

`colrm {{3}}`

- Remove from the 3rd column till the 5th column of each line:

`colrm {{3 5}}`
"
nemo,https://github.com/linuxmint/nemo,,"# nemo

> File manager and graphical shell for Cinnamon.
> More information: <https://github.com/linuxmint/nemo>.

- Open a new window showing the user's home directory:

`nemo`

- Open a new window showing the current directory:

`nemo .`

- Close all open nemo windows:

`nemo --quit`
"
binwalk,https://github.com/ReFirmLabs/binwalk,,"# binwalk

> Firmware Analysis Tool.
> More information: <https://github.com/ReFirmLabs/binwalk>.

- Scan a binary file:

`binwalk {{path/to/binary}}`

- Extract files from a binary, specifying the output directory:

`binwalk --extract --directory {{output_directory}} {{path/to/binary}}`

- Recursively extract files from a binary limiting the recursion depth to 2:

`binwalk --extract --matryoshka --depth {{2}} {{path/to/binary}}`

- Extract files from a binary with the specified file signature:

`binwalk --dd '{{png image:png}}' {{path/to/binary}}`

- Analyze the entropy of a binary, saving the plot with the same name as the binary and `.png` extension appended:

`binwalk --entropy --save {{path/to/binary}}`

- Combine entropy, signature and opcodes analysis in a single command:

`binwalk --entropy --signature --opcodes {{path/to/binary}}`
"
cpufreq-aperf,,,"# cpufreq-aperf

> Calculate the average CPU frequency over a time period.
> Requires root privileges.

- Start calculating, defaulting to all CPU cores and 1 second refresh interval:

`sudo cpufreq-aperf`

- Start calculating for CPU 1 only:

`sudo cpufreq-aperf -c {{1}}`

- Start calculating with a 3 seconds refresh interval for all CPU cores:

`sudo cpufreq-aperf -i {{3}}`

- Calculate only once:

`sudo cpufreq-aperf -o`
"
mkfs.fat,,,"# mkfs.fat

> Creates an MS-DOS filesystem inside a partition.

- Create a fat filesystem inside partition 1 on device b (`sdb1`):

`mkfs.fat {{/dev/sdb1}}`

- Create filesystem with a volume-name:

`mkfs.fat -n {{volume_name}} {{/dev/sdb1}}`

- Create filesystem with a volume-id:

`mkfs.fat -i {{volume_id}} {{/dev/sdb1}}`

- Use 5 instead of 2 file allocation tables:

`mkfs.fat -f 5 {{/dev/sdb1}}`
"
pdfgrep,,,"# pdfgrep

> Search text in PDF files.

- Find lines that match pattern in a PDF:

`pdfgrep {{pattern}} {{file.pdf}}`

- Include file name and page number for each matched line:

`pdfgrep --with-filename --page-number {{pattern}} {{file.pdf}}`

- Do a case insensitive search for lines that begin with ""foo"" and return the first 3 matches:

`pdfgrep --max-count {{3}} --ignore-case {{'^foo'}} {{file.pdf}}`

- Find pattern in files with a .pdf extension in the current directory recursively:

`pdfgrep --recursive {{pattern}}`

- Find pattern on files that match a specific glob in the current directory recursively:

`pdfgrep --recursive --include {{'*book.pdf'}} {{pattern}}`
"
e4defrag,,,"# e4defrag

> Defragment an ext4 filesystem.

- Defragment the filesystem:

`e4defrag {{/dev/sdXN}}`

- See how fragmented a filesystem is:

`e4defrag -c {{/dev/sdXN}}`

- Print errors and the fragmentation count before and after each file:

`e4defrag -v {{/dev/sdXN}}`
"
scrot,,,"# scrot

> Screen capture utility.

- Capture a screenshot and save it to the current directory with the current date as the filename:

`scrot`

- Capture a screenshot and save it as ""capture.png"":

`scrot {{capture.png}}`

- Capture a screenshot interactively:

`scrot --select`

- Capture a screenshot from the currently focused window:

`scrot --focused`
"
perf,,,"# perf

> Framework for linux performance counter measurements.

- Display basic performance counter stats for a command:

`perf stat {{gcc hello.c}}`

- Display system-wide real time performance counter profile:

`sudo perf top`

- Run a command and record its profile into ""perf.data"":

`sudo perf record {{command}}`

- Read ""perf.data"" (created by `perf record`) and display the profile:

`sudo perf report`
"
lsblk,,,"# lsblk

> Lists information about devices.

- List all storage devices in a tree-like format:

`lsblk`

- Also list empty devices:

`lsblk -a`

- Print the SIZE column in bytes rather than in a human-readable format:

`lsblk -b`

- Output info about filesystems:

`lsblk -f`

- Use ASCII characters for tree formatting:

`lsblk -i`

- Output info about block-device topology:

`lsblk -t`

- Exclude the devices specified by the comma-separated list of major device numbers:

`lsblk -e {{1,7}}`
"
mons,https://github.com/Ventto/mons,,"# mons

> A tool to quickly manage two displays.
> More information: <https://github.com/Ventto/mons>.

- Enable only the primary monitor:

`mons -o`

- Enable only the secondary monitor:

`mons -s`

- Duplicate the primary monitor onto the secondary monitor, using the resolution of the primary monitor:

`mons -d`

- Mirror the primary monitor onto the secondary monitor, using the resolution of the secondary monitor:

`mons -m`
"
dmidecode,,,"# dmidecode

> Display the DMI (alternatively known as SMBIOS) table contents in a human-readable format.
> Requires root privileges.

- Show all DMI table contents:

`sudo dmidecode`

- Show the BIOS version:

`sudo dmidecode -s bios-version`

- Show the system's serial number:

`sudo dmidecode -s system-serial-number`

- Show BIOS information:

`sudo dmidecode -t bios`

- Show CPU information:

`sudo dmidecode -t processor`

- Show memory information:

`sudo dmidecode -t memory`
"
apt-cache,,,"# apt-cache

> Debian and Ubuntu package query tool.

- Search for a package in your current sources:

`apt-cache search {{query}}`

- Show information about a package:

`apt-cache show {{package}}`

- Show whether a package is installed and up to date:

`apt-cache policy {{package}}`

- Show dependencies for a package:

`apt-cache depends {{package}}`

- Show packages that depend on a particular package:

`apt-cache rdepends {{package}}`
"
powertop,,,"# powertop

> Optimize battery power usage.

- Calibrate power usage measurements:

`sudo powertop --calibrate`

- Generate HTML power usage report in the current directory:

`sudo powertop --html={{power_report.html}}`

- Tune to optimal settings:

`sudo powertop --auto-tune`
"
a2query,https://manpages.debian.org/buster/apache2/a2query.1.en.html,,"# a2query

> Retrieve runtime configuration from Apache on Debian-based OSes.
> More information: <https://manpages.debian.org/buster/apache2/a2query.1.en.html>.

- List enabled Apache modules:

`sudo a2query -m`

- Check if a specific module is installed:

`sudo a2query -m {{module_name}}`

- List enabled virtual hosts:

`sudo a2query -s`

- Display the currently enabled Multi Processing Module:

`sudo a2query -M`

- Display the Apache version:

`sudo a2query -v`
"
xbps,https://github.com/void-linux/xbps,,"# xbps

> The X Binary Package System (or xbps) is the binary package system used by Void Linux.
> More information: <https://github.com/void-linux/xbps>.

- Install packages and synchronize them with the remote repository:

`xbps-install --synchronize {{package_name1}} {{package_name2}}`

- Search for a package in the remote repository:

`xbps-query --repository -s {{package_name}}`

- Remove a package, leaving all of its dependencies installed:

`xbps-remove {{package_name}}`

- Remove a package and all of its dependencies recursively that are not required by other packages:

`xbps-remove --recursive {{package_name}}`

- Synchronize your repository databases and update your system and dependencies:

`xbps-install --synchronize -u`

- Remove packages that were installed as dependencies and aren't currently needed:

`xbps-remove --remove-orphans`

- Remove obsolete packages from the cache:

`xbps-remove --clean-cache`
"
a2enconf,https://manpages.debian.org/buster/apache2/a2enconf.8.en.html,,"# a2enconf

> Enable an Apache configuration file on Debian-based OSes.
> More information: <https://manpages.debian.org/buster/apache2/a2enconf.8.en.html>.

- Enable a configuration file:

`sudo a2enconf {{configuration_file}}`

- Don't show informative messages:

`sudo a2enconf --quiet {{configuration_file}}`
"
netselect,https://github.com/apenwarr/netselect,,"# netselect

> Speed test for choosing a fast network server.
> More information: <https://github.com/apenwarr/netselect> .

- Choose the server with the lowest latency:

`sudo netselect {{host_1}} {{host_2}}`

- Display nameserver resolution and statistics:

`sudo netselect -vv {{host_1}} {{host_2}}`

- Define maximum TTL (time to live):

`sudo netselect -m {{10}} {{host_1}} {{host_2}}`

- Print fastest N servers among the hosts:

`sudo netselect -s {{N}} {{host_1}} {{host_2}} {{host_3}}`

- List available options:

`netselect`
"
mkfs.minix,,,"# mkfs.minix

> Creates a Minix filesystem inside a partition.

- Create a Minix filesystem inside partition 1 on device b (`sdb1`):

`mkfs.minix {{/dev/sdb1}}`
"
debman,,,"# debman

> Read man pages from uninstalled packages.

- Read a man page for a command that is provided by a specified package name:

`debman -p {{package_name}} {{command_name}}`

- Specify a package version to download:

`debman -p {{package_name}}={{version}} {{command_name}}`

- Read a man page in a .deb file:

`debman -f {{path/to/filename.deb}} {{command_name}}`
"
tlp-stat,,,"# tlp-stat

> A tool to generate TLP status reports. See also `tlp`.

- Generate status report with configuration and all active settings:

`sudo tlp-stat`

- Show battery information:

`sudo tlp-stat -b`

- Show configuration:

`sudo tlp-stat -c`
"
bpytop,https://github.com/aristocratos/bpytop,,"# bpytop

> Display dynamic real-time information about running processes with graphs. Similar to `gtop` and `htop`.
> More information: <https://github.com/aristocratos/bpytop>.

- Start bpytop:

`bpytop`

- Start in minimal mode without memory and networking boxes:

`bpytop -m`

- Show version:

`bpytop -v`

- Toggle minimal mode:

`m`

- Search for running programs or processes:

`f`

- Change settings:

`M`
"
losetup,,,"# losetup

> Set up and control loop devices.

- List loop devices with detailed info:

`losetup -a`

- Attach a file to a given loop device:

`sudo losetup /dev/{{loop}} /{{path/to/file}}`

- Attach a file to a new free loop device and scan the device for partitions:

`sudo losetup --show --partscan -f /{{path/to/file}}`

- Attach a file to a read-only loop device:

`sudo losetup --read-only /dev/{{loop}} /{{path/to/file}}`

- Detach all loop devices:

`sudo losetup -D`

- Detach a given loop device:

`sudo losetup -d /dev/{{loop}}`
"
ldd,,,"# ldd

> Display shared library dependencies.

- Display shared library dependencies of a binary:

`ldd {{path/to/binary}}`

- Display unused direct dependencies:

`ldd -u {{path/to/binary}}`
"
zgrep,,"
GREP(1) 		  BSD General Commands Manual		       GREP(1)

NAME
     grep, egrep, fgrep, zgrep, zegrep, zfgrep -- file pattern searcher

SYNOPSIS
     grep [-abcdDEFGHhIiJLlmnOopqRSsUVvwxZ] [-A num] [-B num] [-C[num]]
	  [-e pattern] [-f file] [--binary-files=value] [--color[=when]]
	  [--colour[=when]] [--context[=num]] [--label] [--line-buffered]
	  [--null] [pattern] [file ...]

DESCRIPTION
     The grep utility searches any given input files, selecting lines that
     match one or more patterns.  By default, a pattern matches an input line
     if the regular expression (RE) in the pattern matches the input line
     without its trailing newline.  An empty expression matches every line.
     Each input line that matches at least one of the patterns is written to
     the standard output.

     grep is used for simple patterns and basic regular expressions (BREs);
     egrep can handle extended regular expressions (EREs).  See re_format(7)
     for more information on regular expressions.  fgrep is quicker than both
     grep and egrep, but can only handle fixed patterns (i.e. it does not
     interpret regular expressions).  Patterns may consist of one or more
     lines, allowing any of the pattern lines to match a portion of the input.

     zgrep, zegrep, and zfgrep act like grep, egrep, and fgrep, respectively,
     but accept input files compressed with the compress(1) or gzip(1) com-
     pression utilities.

     The following options are available:

     -A num, --after-context=num
	     Print num lines of trailing context after each match.  See also
	     the -B and -C options.

     -a, --text
	     Treat all files as ASCII text.  Normally grep will simply print
	     ``Binary file ... matches'' if files contain binary characters.
	     Use of this option forces grep to output lines matching the spec-
	     ified pattern.

     -B num, --before-context=num
	     Print num lines of leading context before each match.  See also
	     the -A and -C options.

     -b, --byte-offset
	     The offset in bytes of a matched pattern is displayed in front of
	     the respective matched line.

     -C[num, --context=num]
	     Print num lines of leading and trailing context surrounding each
	     match.  The default is 2 and is equivalent to -A 2 -B 2.  Note:
	     no whitespace may be given between the option and its argument.

     -c, --count
	     Only a count of selected lines is written to standard output.

     --colour=[when, --color=[when]]
	     Mark up the matching text with the expression stored in
	     GREP_COLOR environment variable.  The possible values of when can
	     be `never', `always' or `auto'.

     -D action, --devices=action
	     Specify the demanded action for devices, FIFOs and sockets.  The
	     default action is `read', which means, that they are read as if
	     they were normal files.  If the action is set to `skip', devices
	     will be silently skipped.

     -d action, --directories=action
	     Specify the demanded action for directories.  It is `read' by
	     default, which means that the directories are read in the same
	     manner as normal files.  Other possible values are `skip' to
	     silently ignore the directories, and `recurse' to read them
	     recursively, which has the same effect as the -R and -r option.

     -E, --extended-regexp
	     Interpret pattern as an extended regular expression (i.e. force
	     grep to behave as egrep).

     -e pattern, --regexp=pattern
	     Specify a pattern used during the search of the input: an input
	     line is selected if it matches any of the specified patterns.
	     This option is most useful when multiple -e options are used to
	     specify multiple patterns, or when a pattern begins with a dash
	     (`-').

     --exclude
	     If specified, it excludes files matching the given filename pat-
	     tern from the search.  Note that --exclude patterns take priority
	     over --include patterns, and if no --include pattern is speci-
	     fied, all files are searched that are not excluded.  Patterns are
	     matched to the full path specified, not only to the filename com-
	     ponent.

     --exclude-dir
	     If -R is specified, it excludes directories matching the given
	     filename pattern from the search.	Note that --exclude-dir pat-
	     terns take priority over --include-dir patterns, and if no
	     --include-dir pattern is specified, all directories are searched
	     that are not excluded.

     -F, --fixed-strings
	     Interpret pattern as a set of fixed strings (i.e. force grep to
	     behave as fgrep).

     -f file, --file=file
	     Read one or more newline separated patterns from file.  Empty
	     pattern lines match every input line.  Newlines are not consid-
	     ered part of a pattern.  If file is empty, nothing is matched.

     -G, --basic-regexp
	     Interpret pattern as a basic regular expression (i.e. force grep
	     to behave as traditional grep).

     -H      Always print filename headers with output lines.

     -h, --no-filename
	     Never print filename headers (i.e. filenames) with output lines.

     --help  Print a brief help message.

     -I      Ignore binary files.  This option is equivalent to
	     --binary-file=without-match option.

     -i, --ignore-case
	     Perform case insensitive matching.  By default, grep is case sen-
	     sitive.

     --include
	     If specified, only files matching the given filename pattern are
	     searched.	Note that --exclude patterns take priority over
	     --include patterns.  Patterns are matched to the full path speci-
	     fied, not only to the filename component.

     --include-dir
	     If -R is specified, only directories matching the given filename
	     pattern are searched.  Note that --exclude-dir patterns take pri-
	     ority over --include-dir patterns.

     -J, --bz2decompress
	     Decompress the bzip2(1) compressed file before looking for the
	     text.

     -L, --files-without-match
	     Only the names of files not containing selected lines are written
	     to standard output.  Pathnames are listed once per file searched.
	     If the standard input is searched, the string ``(standard
	     input)'' is written.

     -l, --files-with-matches
	     Only the names of files containing selected lines are written to
	     standard output.  grep will only search a file until a match has
	     been found, making searches potentially less expensive.  Path-
	     names are listed once per file searched.  If the standard input
	     is searched, the string ``(standard input)'' is written.

     --mmap  Use mmap(2) instead of read(2) to read input, which can result in
	     better performance under some circumstances but can cause unde-
	     fined behaviour.

     -m num, --max-count=num
	     Stop reading the file after num matches.

     -n, --line-number
	     Each output line is preceded by its relative line number in the
	     file, starting at line 1.	The line number counter is reset for
	     each file processed.  This option is ignored if -c, -L, -l, or -q
	     is specified.

     --null  Prints a zero-byte after the file name.

     -O      If -R is specified, follow symbolic links only if they were
	     explicitly listed on the command line.  The default is not to
	     follow symbolic links.

     -o, --only-matching
	     Prints only the matching part of the lines.

     -p      If -R is specified, no symbolic links are followed.  This is the
	     default.

     -q, --quiet, --silent
	     Quiet mode: suppress normal output.  grep will only search a file
	     until a match has been found, making searches potentially less
	     expensive.

     -R, -r, --recursive
	     Recursively search subdirectories listed.

     -S      If -R is specified, all symbolic links are followed.  The default
	     is not to follow symbolic links.

     -s, --no-messages
	     Silent mode.  Nonexistent and unreadable files are ignored (i.e.
	     their error messages are suppressed).

     -U, --binary
	     Search binary files, but do not attempt to print them.

     -V, --version
	     Display version information and exit.

     -v, --invert-match
	     Selected lines are those not matching any of the specified pat-
	     terns.

     -w, --word-regexp
	     The expression is searched for as a word (as if surrounded by
	     `[[:<:]]' and `[[:>:]]'; see re_format(7)).

     -x, --line-regexp
	     Only input lines selected against an entire fixed string or regu-
	     lar expression are considered to be matching lines.

     -y      Equivalent to -i.	Obsoleted.

     -Z, -z, --decompress
	     Force grep to behave as zgrep.

     --binary-files=value
	     Controls searching and printing of binary files.  Options are
	     binary, the default: search binary files but do not print them;
	     without-match: do not search binary files; and text: treat all
	     files as text.

     --context[=num]
	     Print num lines of leading and trailing context.  The default is
	     2.

     --line-buffered
	     Force output to be line buffered.	By default, output is line
	     buffered when standard output is a terminal and block buffered
	     otherwise.

     If no file arguments are specified, the standard input is used.

ENVIRONMENT
     GREP_OPTIONS  May be used to specify default options that will be placed
		   at the beginning of the argument list.  Backslash-escaping
		   is not supported, unlike the behavior in GNU grep.

EXIT STATUS
     The grep utility exits with one of the following values:

     0	   One or more lines were selected.
     1	   No lines were selected.
     >1    An error occurred.

EXAMPLES
     To find all occurrences of the word `patricia' in a file:

	   $ grep 'patricia' myfile

     To find all occurrences of the pattern `.Pp' at the beginning of a line:

	   $ grep '^\.Pp' myfile

     The apostrophes ensure the entire expression is evaluated by grep instead
     of by the user's shell.  The caret `^' matches the null string at the
     beginning of a line, and the `\' escapes the `.', which would otherwise
     match any character.

     To find all lines in a file which do not contain the words `foo' or
     `bar':

	   $ grep -v -e 'foo' -e 'bar' myfile

     A simple example of an extended regular expression:

	   $ egrep '19|20|25' calendar

     Peruses the file `calendar' looking for either 19, 20, or 25.

SEE ALSO
     ed(1), ex(1), gzip(1), sed(1), re_format(7)

STANDARDS
     The grep utility is compliant with the IEEE Std 1003.1-2008 (``POSIX.1'')
     specification.

     The flags [-AaBbCDdGHhIJLmoPRSUVwZ] are extensions to that specification,
     and the behaviour of the -f flag when used with an empty pattern file is
     left undefined.

     All long options are provided for compatibility with GNU versions of this
     utility.

     Historic versions of the grep utility also supported the flags [-ruy].
     This implementation supports those options; however, their use is
     strongly discouraged.

HISTORY
     The grep command first appeared in Version 6 AT&T UNIX.

BUGS
     The grep utility does not normalize Unicode input, so a pattern contain-
     ing composed characters will not match decomposed input, and vice versa.

BSD				 July 28, 2010				   BSD
","# zgrep

> Grep text patterns from files within compressed file (equivalent to grep -Z).

- Grep a pattern in a compressed file (case-sensitive):

`zgrep {{pattern}} {{path/to/compressed/file}}`

- Grep a pattern in a compressed file (case-insensitive):

`zgrep -i {{pattern}} {{path/to/compressed/file}}`

- Output count of lines containing matched pattern in a compressed file:

`zgrep -c {{pattern}} {{path/to/compressed/file}}`

- Display the lines which don’t have the pattern present (Invert the search function):

`zgrep -v {{pattern}} {{path/to/compressed/file}}`

- Grep a compressed file for multiple patterns:

`zgrep -e ""{{pattern_1}}"" -e ""{{pattern_2}}"" {{path/to/compressed/file}}`

- Use extended regular expressions (supporting `?`, `+`, `{}`, `()` and `|`):

`zgrep -E {{^regex$}} {{path/to/file}}`

- Print 3 lines of [C]ontext around, [B]efore, or [A]fter each match:

`zgrep -{{C|B|A}} {{3}} {{pattern}} {{path/to/compressed/file}}`
"
ksvgtopng5,,,"# ksvgtopng5

> Convert SVG files to PNG format.

- Convert an SVG file (should be an absolute path) to PNG:

`ksvgtopng5 {{width}} {{height}} {{path/to/file.svg}} {{output_filename.png}}`
"
collectd,https://collectd.org/,,"# collectd

> System statistics collection daemon.
> More information: <https://collectd.org/>.

- Show usage help, including the program version:

`collectd -h`

- Test the configuration file and then exit:

`collectd -t`

- Test plugin data collection functionality and then exit:

`collectd -T`

- Start collectd:

`collectd`

- Specify a custom configuration file location:

`collectd -C {{path/to/file}}`

- Specify a custom PID file location:

`collectd -P {{path/to/file}}`

- Don't fork into the background:

`collectd -f`
"
csplit,,"
CSPLIT(1)		  BSD General Commands Manual		     CSPLIT(1)

NAME
     csplit -- split files based on context

SYNOPSIS
     csplit [-ks] [-f prefix] [-n number] file args ...

DESCRIPTION
     The csplit utility splits file into pieces using the patterns args.  If
     file is a dash (`-'), csplit reads from standard input.

     The options are as follows:

     -f prefix
	     Give created files names beginning with prefix.  The default is
	     ``xx''.

     -k      Do not remove output files if an error occurs or a HUP, INT or
	     TERM signal is received.

     -n number
	     Use number of decimal digits after the prefix to form the file
	     name.  The default is 2.

     -s      Do not write the size of each output file to standard output as
	     it is created.

     The args operands may be a combination of the following patterns:

     /regexp/[[+|-]offset]
	     Create a file containing the input from the current line to (but
	     not including) the next line matching the given basic regular
	     expression.  An optional offset from the line that matched may be
	     specified.

     %regexp%[[+|-]offset]
	     Same as above but a file is not created for the output.

     line_no
	     Create containing the input from the current line to (but not
	     including) the specified line number.

     {num}   Repeat the previous pattern the specified number of times.  If it
	     follows a line number pattern, a new file will be created for
	     each line_no lines, num times.  The first line of the file is
	     line number 1 for historic reasons.

     After all the patterns have been processed, the remaining input data (if
     there is any) will be written to a new file.

     Requesting to split at a line before the current line number or past the
     end of the file will result in an error.

ENVIRONMENT
     The LANG, LC_ALL, LC_COLLATE and LC_CTYPE environment variables affect
     the execution of csplit as described in environ(7).

EXIT STATUS
     The csplit utility exits 0 on success, and >0 if an error occurs.

EXAMPLES
     Split the mdoc(7) file foo.1 into one file for each section (up to 20):

	   csplit -k foo.1 '%^\.Sh%' '/^\.Sh/' '{20}'

     Split standard input after the first 99 lines and every 100 lines there-
     after:

	   csplit -k - 100 '{19}'

SEE ALSO
     sed(1), split(1), re_format(7)

STANDARDS
     The csplit utility conforms to IEEE Std 1003.1-2001 (``POSIX.1'').

HISTORY
     A csplit command appeared in PWB UNIX.

BUGS
     Input lines are limited to LINE_MAX (2048) bytes in length.

BSD			       January 26, 2005 			   BSD
","# csplit

> Split a file into pieces.
> This generates files named ""xx00"", ""xx01"", and so on.

- Split a file at lines 5 and 23:

`csplit {{file}} {{5}} {{23}}`

- Split a file every 5 lines (this will fail if the total number of lines is not divisible by 5):

`csplit {{file}} {{5}} {*}`

- Split a file every 5 lines, ignoring exact-division error:

`csplit -k {{file}} {{5}} {*}`

- Split a file at line 5 and use a custom prefix for the output files:

`csplit {{file}} {{5}} -f {{prefix}}`

- Split a file at a line matching a regular expression:

`csplit {{file}} /{{regex}}/`
"
unix2dos,,,"# unix2dos

> Change Unix-style line endings to DOS-style.
> Replaces CR with CRLF.

- Change the line endings of a file:

`unix2dos {{filename}}`

- Create a copy with DOS-style line endings:

`unix2dos -n {{filename}} {{new_filename}}`
"
xterm,,,"# xterm

> A terminal emulator for the X Window System.

- Open the terminal with a title of `Example`:

`xterm -T {{Example}}`

- Open the terminal in fullscreen mode:

`xterm -fullscreen`

- Open the terminal with a dark blue background and yellow foreground (font color):

`xterm -bg {{darkblue}} -fg {{yellow}}`

- Open the terminal with 100 characters per line and 35 lines, in screen position x=200px, y=20px:

`xterm -geometry {{100}}x{{35}}+{{200}}+{{20}}`

- Open the terminal using a Serif font and a font size equal to 20:

`xterm -fa {{'Serif'}} -fs {{20}}`
"
phpenmod,,,"# phpenmod

> Enable PHP extensions on Debian-based OSes.

- Enable the json extension for every SAPI of every PHP version:

`sudo phpenmod {{json}}`

- Enable the json extension for PHP 7.3 with the cli SAPI:

`sudo phpenmod -v {{7.3}} -s {{cli}} {{json}}`
"
scriptreplay,,,"# scriptreplay

> Replay a typescript created by the `script` command to the standard output.

- Replay a typescript at the speed it was recorded:

`scriptreplay {{path/to/timing_file}} {{path/to/typescript}}`

- Replay a typescript at double the original speed:

`scriptreplay {{path/to/timingfile}} {{path/to/typescript}} 2`

- Replay a typescript at half the original speed:

`scriptreplay {{path/to/timingfile}} {{path/to/typescript}} 0.5`
"
disown,,,"# disown

> Allow sub-processes to live beyond the shell that they are attached to.
> See also the `jobs` command.

- Disown the current job:

`disown`

- Disown a specific job:

`disown %{{job_number}}`

- Disown all jobs:

`disown -a`

- Keep job (do not disown it), but mark it so that no future SIGHUP is received on shell exit:

`disown -h %{{job_number}}`
"
netselect-apt,https://manpages.debian.org/buster/netselect-apt/netselect-apt.1.en.html,,"# netselect-apt

> Create a `sources.list` file for a Debian mirror with the lowest latency.
> More information: <https://manpages.debian.org/buster/netselect-apt/netselect-apt.1.en.html>.

- Create `sources.list` using the lowest latency server:

`sudo netselect-apt`

- Specify Debian branch, stable is used by default:

`sudo netselect-apt {{testing}}`

- Include non-free section:

`sudo netselect-apt --non-free`

- Specify a country for the mirror list lookup:

`sudo netselect-apt -c {{India}}`
"
iftop,https://linux.die.net/man/8/iftop,,"# iftop

> Show bandwidth usage on an interface by host.
> More information: <https://linux.die.net/man/8/iftop>.

- Show the bandwidth usage:

`sudo iftop`

- Show the bandwidth usage of a given interface:

`sudo iftop -i {{interface}}`

- Show the bandwidth usage with port information:

`sudo iftop -P`

- Do not show bar graphs of traffic:

`sudo iftop -b`

- Do not look up hostnames:

`sudo iftop -n`

- Get help about interactive commands:

`?`
"
equery,,,"# equery

> View information about Portage packages.

- List all installed packages:

`equery list '*'`

- Search for installed packages in the Portage tree and in overlays:

`equery list -po {{package_name}}`

- List all packages that depend on a given package:

`equery depends {{package_name}}`

- List all packages that a given package depends on:

`equery depgraph {{package_name}}`

- List all files installed by a package:

`equery files --tree {{package_name}}`
"
fuser,,"FUSER(P)		   POSIX Programmer's Manual		      FUSER(P)



NAME
       fuser  -  list process IDs of all processes that have one or more files
       open

SYNOPSIS
       fuser [ -cfu ] file ...

DESCRIPTION
       The fuser utility shall write to standard output  the  process  IDs  of
       processes running on the local system that have one or more named files
       open. For block special devices, all processes using any file  on  that
       device are listed.

       The  fuser utility shall write to standard error additional information
       about the named files indicating how the file is being used.

       Any output for processes running on remote systems that	have  a  named
       file open is unspecified.

       A user may need appropriate privilege to invoke the fuser utility.

OPTIONS
       The  fuser  utility  shall  conform  to	the Base Definitions volume of
       IEEE Std 1003.1-2001, Section 12.2, Utility Syntax Guidelines.

       The following options shall be supported:

       -c     The file is treated as a	mount  point  and  the	utility  shall
	      report on any files open in the file system.

       -f     The report shall be only for the named files.

       -u     The  user  name, in parentheses, associated with each process ID
	      written to standard output shall be written to standard error.


OPERANDS
       The following operand shall be supported:

       file   A pathname on which the file or file system is to be reported.


STDIN
       Not used.

INPUT FILES
       The user database.

ENVIRONMENT VARIABLES
       The following environment  variables  shall  affect  the  execution  of
       fuser:

       LANG   Provide  a  default value for the internationalization variables
	      that are unset or null. (See  the  Base  Definitions  volume  of
	      IEEE Std 1003.1-2001,  Section  8.2,  Internationalization Vari-
	      ables for the precedence of internationalization variables  used
	      to determine the values of locale categories.)

       LC_ALL If  set  to a non-empty string value, override the values of all
	      the other internationalization variables.

       LC_CTYPE
	      Determine the locale for	the  interpretation  of  sequences  of
	      bytes  of  text  data as characters (for example, single-byte as
	      opposed to multi-byte characters in arguments).

       LC_MESSAGES
	      Determine the locale that should be used to  affect  the	format
	      and contents of diagnostic messages written to standard error.

       NLSPATH
	      Determine the location of message catalogs for the processing of
	      LC_MESSAGES .


ASYNCHRONOUS EVENTS
       Default.

STDOUT
       The fuser utility shall write the process ID  for  each	process  using
       each  file given as an operand to standard output in the following for-
       mat:


	      ""%d"", <process_id>

STDERR
       The fuser utility shall write diagnostic messages to standard error.

       The fuser utility also shall write the following to standard error:

	* The pathname of each named file is written followed immediately by a
	  colon.


	* For  each  process  ID written to standard output, the character 'c'
	  shall be written to standard error if the process is using the  file
	  as  its  current directory and the character 'r' shall be written to
	  standard error if the process is using the file as its  root	direc-
	  tory. Implementations may write other alphabetic characters to indi-
	  cate other uses of files.


	* When the -u option is specified, characters indicating  the  use  of
	  the  file  shall be followed immediately by the user name, in paren-
	  theses, corresponding to the process' real user  ID.	 If  the  user
	  name cannot be resolved from the process' real user ID, the process'
	  real user ID shall be written instead of the user name.


       When standard output and standard error are directed to the same  file,
       the  output  shall  be  interleaved so that the filename appears at the
       start of each line, followed by the process ID and characters  indicat-
       ing  the use of the file. Then, if the -u option is specified, the user
       name or user ID for each process using that file shall be written.

       A <newline> shall be written to standard error after  the  last	output
       described above for each file operand.

OUTPUT FILES
       None.

EXTENDED DESCRIPTION
       None.

EXIT STATUS
       The following exit values shall be returned:

	0     Successful completion.

       >0     An error occurred.


CONSEQUENCES OF ERRORS
       Default.

       The following sections are informative.

APPLICATION USAGE
       None.

EXAMPLES
       The command:


	      fuser -fu .

       writes  to  standard output the process IDs of processes that are using
       the current directory and writes to standard error an indication of how
       those  processes  are using the directory and the user names associated
       with the processes that are using the current directory.

RATIONALE
       The definition of the fuser utility follows existing practice.

FUTURE DIRECTIONS
       None.

SEE ALSO
       None.

COPYRIGHT
       Portions of this text are reprinted and reproduced in  electronic  form
       from IEEE Std 1003.1, 2003 Edition, Standard for Information Technology
       -- Portable Operating System Interface (POSIX),	The  Open  Group  Base
       Specifications  Issue  6,  Copyright  (C) 2001-2003 by the Institute of
       Electrical and Electronics Engineers, Inc and The Open  Group.  In  the
       event of any discrepancy between this version and the original IEEE and
       The Open Group Standard, the original IEEE and The Open Group  Standard
       is  the	referee document. The original Standard can be obtained online
       at http://www.opengroup.org/unix/online.html .



IEEE/The Open Group		     2003			      FUSER(P)
","# fuser

> Display process IDs currently using files or sockets.

- Find which processes are accessing a file or directory:

`fuser {{path/to/file_or_directory}}`

- Show more fields (`USER`, `PID`, `ACCESS` and `COMMAND`):

`fuser --verbose {{path/to/file_or_directory}}`

- Identify processes using a TCP socket:

`fuser --namespace tcp {{port}}`

- Kill all processes accessing a file or directory (sends the `SIGKILL` signal):

`fuser --kill {{path/to/file_or_directory}}`

- Find which processes are accessing the filesystem containing a specific file or directory:

`fuser --mount {{path/to/file_or_directory}}`
"
fdisk,,"
FDISK(8)		  BSD System Manager's Manual		      FDISK(8)

NAME
     fdisk -- DOS partition maintenance program

SYNOPSIS
     fdisk [-ieu] [-f mbrname] [-c cylinders] [-h heads] [-s sectors]
	   [-S size] [-b size] device

DESCRIPTION
     In order for the BIOS to boot the kernel, certain conventions must be
     adhered to.  Sector 0 of a bootable hard disk must contain boot code, an
     MBR partition table, and a magic number (0xAA55).	These MBR partitions
     (also known as BIOS partitions) can be used to break the disk up into
     several pieces.

     The BIOS loads sector 0 of the boot disk into memory, verifies the magic
     number, and begins executing the code at the first byte.  The normal DOS
     MBR boot code searches the MBR partition table for an ``active'' parti-
     tion (indicated by a `*' in the first column), and if one is found, the
     boot block from that partition is loaded and executed in place of the
     original (MBR) boot block.

     The options are as follows:

     -i      Initialize the MBR sector.

     -a style
	     Specify an automatic partitioning style.

     -e      Edit existing MBR sectors.

     -f mbrname
	     Specifies an alternate MBR template file.

     -u      Update MBR code, preserving existing partition table.

     -y      Do not ask for confirmation before writing.

     -d      Dump partition table in a format readable by the -r option.

     -r      Read a partition table from the standard input.

     -t      Test if the disk is partitioned.

     -c cylinders, -h heads, -s sectors
	     Specifies an alternate BIOS geometry for fdisk to use.

     -S size
	     Specify the disk size in blocks.

     -b size
	     Specify the number of bytes per disk block.

     The DOS fdisk program can be used to divide space on the disk into parti-
     tions and set one active.	This fdisk program serves a similar purpose to
     the DOS program.  When called with no special flags, it prints the MBR
     partition table of the specified device, i.e.,

	 # fdisk fd0
	 Disk: fd0	 geometry: 80/2/18 [2880 sectors]
	 Offset: 0	 Signature: 0xAA55
		  Starting	  Ending
	  #: id  cyl  hd sec -	cyl  hd sec [	  start -	size]
	 ----------------------------------------------------------------------
	 *1: A6    0   0   1 -	 79   1  18 [	      0 -	2880] OpenBSD
	  2: 00    0   0   0 -	  0   0   0 [	      0 -	   0] unused
	  3: A7    0   0   2 -	 79   1  18 [	      1 -	2879] NEXTSTEP
	  4: 00    0   0   0 -	  0   0   0 [	      0 -	   0] unused

     The geometry displayed is a synthetic geometry unless another geometry
     has been selected using the -c, -h, -s, -S, and -b options.  In the
     future, fdisk will read the BIOS geometry from the IOKit registry.

     In this example, the disk is divided into two partitions that happen to
     fill the disk.  The first partition overlaps the third partition.	(Used
     for debugging purposes.)

     #		 Number of partition table entry.  A ``*'' denotes the
		 bootable partition.

     id 	 System identifier.  OpenBSD reserves the magic number 166
		 decimal (A6 in hex).  If no 166 partition is found, it will
		 use an older FreeBSD partition (with a magic number of 165 or
		 A5 in hex).

     cyl/hd/sec  These fields provide the starting and ending address of the
		 partition in BIOS geometry

     start/size  These fields provide the starting sector and size in sectors
		 of the partition in linear block addresses.

     NOTE: The sectors field is ``1 based'', and the start field is ``0
     based''.  The CHS values may need to be in the BIOS's geometry for older
     systems to be able to boot and use the drive correctly; most modern sys-
     tems prefer the starting sector and size in preference to the CHS values.

     The -i flag is used to indicate that the partition data is to be initial-
     ized.  In this mode, fdisk will completely overwrite the primary MBR and
     partition table, either using the default MBR template, or the one speci-
     fied by the -f flag.

     In the default template, partition number 1 will be configured as a Dar-
     win boot partition spanning from cylinder 0, head 1, sector 1, and
     extending for 8 megabytes.  Partition number 2 will be configured as a
     Darwin HFS partition spanning the rest of the disk.  This mode is
     designed to initialize an MBR the very first time, or when it has been
     corrupted beyond repair.

     You can specify other default partition styles with the -a flag.  The
     available styles are:

     boothfs	 Creates an 8Mb boot partition (type AB hex) and makes the
		 rest of the disk a Darwin HFS partition (type AF hex).

     hfs	 Makes the entire disk one HFS+ partition (type AF hex).

     dos	 Makes the entire disk one DOS partition (type 0C hex).

     raid	 Makes the entire disk one type AC hex partition.

     The -u flag is used to update the MBR code on a given drive.  The MBR
     code extends from offset 0x000 to the start of the partition table at
     offset 0x1BE.  It is similar to the -i flag, except the existing parti-
     tion table is preserved. This is useful for writing new MBR code onto an
     existing drive, and is equivalent to the DOS command ``FDISK /MBR''.
     Note that this option will overwrite the NT disk signature, if present.
     The -u and -i flags may not be specified together.

     The flag -e is used to modify a partition table using a interactive edit
     mode of the fdisk program.  This mode is designed to allow you to change
     any partition on the drive you choose, including extended partitions.  It
     is a very powerful mode, but is safe as long as you do not execute the
     write command, or answer in the negative (the default) when fdisk asks
     you about writing out changes.

COMMAND MODE
     When you first enter this mode, you are presented with a prompt, that
     looks like so: fdisk: 0>.	This prompt has two important pieces of infor-
     mation for you.  It will tell you if the in-memory copy of the boot block
     has been modified or not.	If it has been modified, the prompt will
     change to look like: fdisk:*0>.  The second piece of information pertains
     to the number given in the prompt.  This number specifies the disk offset
     of the currently selected boot block you are editing.  This number could
     be something different that zero when you are editing extended parti-
     tions.  The list of commands and their explanations are given below.

     help    Display a list of commands that fdisk understands in the interac-
	     tive edit mode.

     manual  Display this manual page.

     reinit  Initialize the currently selected, in-memory copy of the boot
	     block.

     auto    Partition the disk with one of the automatic partition styles.

     disk    Display the current drive geometry that fdisk has probed.	You
	     are given a chance to edit it if you wish.

     edit    Edit a given table entry in the memory copy of the current boot
	     block.  You may edit either in BIOS geometry mode, or in sector
	     offsets and sizes.

     setpid  Change the partition identifier of the given partition table
	     entry.  This command is particularly useful for reassigning an
	     existing partition to OpenBSD.

     flag    Make the given partition table entry bootable.  Only one entry
	     can be marked bootable.  If you wish to boot from an extended
	     partition, you will need to mark the partition table entry for
	     the extended partition as bootable.

     update  Update the machine code in the memory copy of the currently
	     selected boot block.  Note that this option will overwrite the NT
	     disk signature, if present.

     select  Select and load into memory the boot block pointed to by the
	     extended partition table entry in the current boot block.

     print   Print the currently selected in-memory copy of the boot block and
	     its MBR table to the terminal.

     write   Write the in-memory copy of the boot block to disk.  You will be
	     asked to confirm this operation.

     exit    Exit the current level of fdisk, either returning to the previ-
	     ously selected in-memory copy of a boot block, or exiting the
	     program if there is none.

     quit    Exit the current level of fdisk, either returning to the previ-
	     ously selected in-memory copy of a boot block, or exiting the
	     program if there is none.	Unlike exit it does write the modified
	     block out.

     abort   Quit program without saving current changes.

NOTES
     The automatic calculation of starting cylinder etc. uses a set of figures
     that represent what the BIOS thinks is the geometry of the drive.	These
     figures are by default taken from the in-core disklabel, or values that
     /boot has passed to the kernel, but fdisk gives you an opportunity to
     change them if there is a need to.  This allows the user to create a
     bootblock that can work with drives that use geometry translation under a
     potentially different BIOS.

     If you hand craft your disk layout, please make sure that the OpenBSD
     partition starts on a cylinder boundary.  (This restriction may be
     changed in the future.)

     Editing an existing partition is risky, and may cause you to lose all the
     data in that partition.

     You should run this program interactively once or twice to see how it
     works.  This is completely safe as long as you answer the ``write'' ques-
     tions in the negative.

FILES
     /usr/mdec/mbr  default MBR template

SEE ALSO
     gpt(8), pdisk(8)

BUGS
     There are subtleties fdisk detects that are not explained in this manual
     page.  As well, chances are that some of the subtleties it should detect
     are being steamrolled.  Caveat Emptor.

BSD				January 3, 2002 			   BSD
","# fdisk

> A program for managing partition tables and partitions on a hard disk.

- List partitions:

`fdisk -l`

- Start the partition manipulator:

`fdisk {{/dev/sda}}`
"
edquota,,"
EDQUOTA(8)		  BSD System Manager's Manual		    EDQUOTA(8)

NAME
     edquota -- edit user quotas

SYNOPSIS
     edquota [-u] [-p proto-username] username ...
     edquota -g [-p proto-groupname] groupname ...
     edquota -t [-u]
     edquota -t -g

DESCRIPTION
     Edquota is a quota editor.  By default, or if the -u flag is specified,
     one or more users may be specified on the command line.  For each user a
     temporary file is created with an ASCII representation of the current
     disk quotas for that user.  The list of filesystems with user quotas is
     determined by scanning the mounted filesystems for a .quota.ops.user file
     located at its root.  An editor is invoked on the ASCII file.  The editor
     invoked is vi(1) unless the environment variable EDITOR specifies other-
     wise.

     The quotas may then be modified, new quotas added, etc.  Setting a quota
     to zero indicates that no quota should be imposed.  Setting a hard limit
     to one indicates that no allocations should be permitted.	Setting a soft
     limit to one with a hard limit of zero indicates that allocations should
     be permitted on only a temporary basis (see -t below).  The current usage
     information in the file is for informational purposes; only the hard and
     soft limits can be changed.

     On leaving the editor, edquota reads the temporary file and modifies the
     binary quota files to reflect the changes made.  The binary quota file,
     .quota.user is stored at the root of the filesystem.  The default file-
     name and root location for the user quotas cannot be overridden.

     If the -p flag is specified, edquota will duplicate the quotas of the
     prototypical user specified for each user specified.  This is the normal
     mechanism used to initialize quotas for groups of users.

     If the -g flag is specified, edquota is invoked to edit the quotas of one
     or more groups specified on the command line.  The list of filesystems
     with group quotas is determined by scanning the mounted filesystems for a
     .quota.ops.group file located at its root.  Similarly, the binary quota
     file, .quota.group is stored at the root of the filesystem.  The default
     filename and root location for group quotas cannot be overridden.	The -p
     flag can be specified in conjunction with the -g flag to specify a proto-
     typical group to be duplicated among the listed set of groups.

     Users are permitted to exceed their soft limits for a grace period that
     may be specified per filesystem.  Once the grace period has expired, the
     soft limit is enforced as a hard limit.  The default grace period for a
     filesystem is specified in /usr/include/sys/quota.h.  The -t flag can be
     used to change the grace period.  By default, or when invoked with the -u
     flag, the grace period is set for each filesystem with a .quota.ops.user
     file located at its root.	When invoked with the -g flag, the grace
     period is set for each filesystem with a .quota.ops.group file located at
     its root.	The grace period may be specified in days, hours, minutes, or
     seconds.  Setting a grace period to zero indicates that the default grace
     period should be imposed.	Setting a grace period to one second indicates
     that no grace period should be granted.

     Only the super-user may edit quotas.

FILES
     Each of the following quota files is located at the root of the mounted
     filesystem.  The mount option files are empty files whose existence indi-
     cates that quotas are to be enabled for that filesystem.  The binary data
     files will be created by edquota, if they don't already exist.

     .quota.user       data file containing user quotas
     .quota.group      data file containing group quotas
     .quota.ops.user   mount option file used to enable user quotas
     .quota.ops.group  mount option file used to enable group quotas

SEE ALSO
     quota(1), quotactl(2), quotacheck(8), quotaon(8), repquota(8)

DIAGNOSTICS
     Various messages about inaccessible files; self-explanatory.

BSD			      September 23, 2020			   BSD
","# edquota

> Edit quotas for a user or group. By default it operates on all file systems with quotas.
> Quota information is stored permanently in the `quota.user` and `quota.group` files in the root of the filesystem.

- Edit quota of the current user:

`edquota --user $(whoami)`

- Edit quota of a specific user:

`sudo edquota --user {{username}}`

- Edit quota for a group:

`sudo edquota --group {{group}}`

- Restrict operations to a given filesystem (by default edquota operates on all filesystems with quotas):

`sudo edquota --file-system {{filesystem}}`

- Edit the default grace period:

`sudo edquota -t`

- Duplicate a quota to other users:

`sudo edquota -p {{reference_user}} {{destination_user1}} {{destination_user2}}`
"
whereis,,"
WHEREIS(1)		  BSD General Commands Manual		    WHEREIS(1)

NAME
     whereis -- locate programs

SYNOPSIS
     whereis [program ...]

DESCRIPTION
     The whereis utility checks the standard binary directories for the speci-
     fied programs, printing out the paths of any it finds.

     The path searched is the string returned by the sysctl(8) utility for the
     ``user.cs_path'' string.

SEE ALSO
     find(1), locate(1), man(1), which(1), sysctl(8)

COMPATIBILITY
     The historic flags and arguments for the whereis utility are no longer
     available in this version.

HISTORY
     The whereis command appeared in 3.0BSD.

BSD				April 27, 1995				   BSD
","# whereis

> Locate the binary, source, and manual page files for a command.

- Locate binary, source and man pages for ssh:

`whereis {{ssh}}`

- Locate binary and man pages for ls:

`whereis -bm {{ls}}`

- Locate source of gcc and man pages for git:

`whereis -s {{gcc}} -m {{git}}`

- Locate binaries for gcc in /usr/bin/ only:

`whereis -b -B {{/usr/bin/}} -f {{gcc}}`

- Locate unusual binaries (those that have more or less than one binary on the system):

`whereis -u *`

- Locate binaries that have unusual manual entries (binaries that have more or less than one manual installed):

`whereis -u -m *`
"
unset,,"
BUILTIN(1)		  BSD General Commands Manual		    BUILTIN(1)

NAME
     builtin, !, %, ., :, @, {, }, alias, alloc, bg, bind, bindkey, break,
     breaksw, builtins, case, cd, chdir, command, complete, continue, default,
     dirs, do, done, echo, echotc, elif, else, end, endif, endsw, esac, eval,
     exec, exit, export, false, fc, fg, filetest, fi, for, foreach, getopts,
     glob, goto, hash, hashstat, history, hup, if, jobid, jobs, kill, limit,
     local, log, login, logout, ls-F, nice, nohup, notify, onintr, popd,
     printenv, pushd, pwd, read, readonly, rehash, repeat, return, sched, set,
     setenv, settc, setty, setvar, shift, source, stop, suspend, switch,
     telltc, test, then, time, times, trap, true, type, ulimit, umask,
     unalias, uncomplete, unhash, unlimit, unset, unsetenv, until, wait,
     where, which, while -- shell built-in commands

SYNOPSIS
     builtin [-options] [args ...]

DESCRIPTION
     Shell builtin commands are commands that can be executed within the run-
     ning shell's process.  Note that, in the case of csh(1) builtin commands,
     the command is executed in a subshell if it occurs as any component of a
     pipeline except the last.

     If a command specified to the shell contains a slash ``/'', the shell
     will not execute a builtin command, even if the last component of the
     specified command matches the name of a builtin command.  Thus, while
     specifying ``echo'' causes a builtin command to be executed under shells
     that support the echo builtin command, specifying ``/bin/echo'' or
     ``./echo'' does not.

     While some builtin commands may exist in more than one shell, their oper-
     ation may be different under each shell which supports them.  Below is a
     table which lists shell builtin commands, the standard shells that sup-
     port them and whether they exist as standalone utilities.

     Only builtin commands for the csh(1) and sh(1) shells are listed here.
     Consult a shell's manual page for details on the operation of its builtin
     commands.	Beware that the sh(1) manual page, at least, calls some of
     these commands ``built-in commands'' and some of them ``reserved words''.
     Users of other shells may need to consult an info(1) page or other
     sources of documentation.

     Commands marked ``No**'' under External do exist externally, but are
     implemented as scripts using a builtin command of the same name.

	   Command	 External    csh(1)    sh(1)
	   !		 No	     No        Yes
	   %		 No	     Yes       No
	   .		 No	     No        Yes
	   :		 No	     Yes       Yes
	   @		 No	     Yes       Yes
	   {		 No	     No        Yes
	   }		 No	     No        Yes
	   alias	 No**	     Yes       Yes
	   alloc	 No	     Yes       No
	   bg		 No**	     Yes       Yes
	   bind 	 No	     No        Yes
	   bindkey	 No	     Yes       No
	   break	 No	     Yes       Yes
	   breaksw	 No	     Yes       No
	   builtin	 No	     No        Yes
	   builtins	 No	     Yes       No
	   case 	 No	     Yes       Yes
	   cd		 No**	     Yes       Yes
	   chdir	 No	     Yes       Yes
	   command	 No**	     No        Yes
	   complete	 No	     Yes       No
	   continue	 No	     Yes       Yes
	   default	 No	     Yes       No
	   dirs 	 No	     Yes       No
	   do		 No	     No        Yes
	   done 	 No	     No        Yes
	   echo 	 Yes	     Yes       Yes
	   echotc	 No	     Yes       No
	   elif 	 No	     No        Yes
	   else 	 No	     Yes       Yes
	   end		 No	     Yes       No
	   endif	 No	     Yes       No
	   endsw	 No	     Yes       No
	   esac 	 No	     No        Yes
	   eval 	 No	     Yes       Yes
	   exec 	 No	     Yes       Yes
	   exit 	 No	     Yes       Yes
	   export	 No	     No        Yes
	   false	 Yes	     No        Yes
	   fc		 No**	     No        Yes
	   fg		 No**	     Yes       Yes
	   filetest	 No	     Yes       No
	   fi		 No	     No        Yes
	   for		 No	     No        Yes
	   foreach	 No	     Yes       No
	   getopts	 No**	     No        Yes
	   glob 	 No	     Yes       No
	   goto 	 No	     Yes       No
	   hash 	 No	     No        Yes
	   hashstat	 No	     Yes       No
	   history	 No	     Yes       No
	   hup		 No	     Yes       No
	   if		 No	     Yes       Yes
	   jobid	 No	     No        Yes
	   jobs 	 No**	     Yes       Yes
	   kill 	 Yes	     Yes       No
	   limit	 No	     Yes       No
	   local	 No	     No        Yes
	   log		 No	     Yes       No
	   login	 Yes	     Yes       No
	   logout	 No	     Yes       No
	   ls-F 	 No	     Yes       No
	   nice 	 Yes	     Yes       No
	   nohup	 Yes	     Yes       No
	   notify	 No	     Yes       No
	   onintr	 No	     Yes       No
	   popd 	 No	     Yes       No
	   printenv	 Yes	     Yes       No
	   pushd	 No	     Yes       No
	   pwd		 Yes	     No        Yes
	   read 	 No**	     No        Yes
	   readonly	 No	     No        Yes
	   rehash	 No	     Yes       No
	   repeat	 No	     Yes       No
	   return	 No	     No        Yes
	   sched	 No	     Yes       No
	   set		 No	     Yes       Yes
	   setenv	 No	     Yes       No
	   settc	 No	     Yes       No
	   setty	 No	     Yes       No
	   setvar	 No	     No        Yes
	   shift	 No	     Yes       Yes
	   source	 No	     Yes       No
	   stop 	 No	     Yes       No
	   suspend	 No	     Yes       No
	   switch	 No	     Yes       No
	   telltc	 No	     Yes       No
	   test 	 Yes	     No        Yes
	   then 	 No	     No        Yes
	   time 	 Yes	     Yes       No
	   times	 No	     No        Yes
	   trap 	 No	     No        Yes
	   true 	 Yes	     No        Yes
	   type 	 No	     No        Yes
	   ulimit	 No	     No        Yes
	   umask	 No**	     Yes       Yes
	   unalias	 No**	     Yes       Yes
	   uncomplete	 No	     Yes       No
	   unhash	 No	     Yes       No
	   unlimit	 No	     Yes       No
	   unset	 No	     Yes       Yes
	   unsetenv	 No	     Yes       No
	   until	 No	     No        Yes
	   wait 	 No**	     Yes       Yes
	   where	 No	     Yes       No
	   which	 Yes	     Yes       No
	   while	 No	     Yes       Yes

SEE ALSO
     csh(1), echo(1), false(1), info(1), kill(1), login(1), nice(1), nohup(1),
     printenv(1), pwd(1), sh(1), test(1), time(1), true(1), which(1)

HISTORY
     The builtin manual page first appeared in FreeBSD 3.4.

AUTHORS
     This manual page was written by Sheldon Hearn <sheldonh@FreeBSD.org>.

BSD			       February 23, 2005			   BSD
","# unset

> Remove shell variables or functions.

- Remove the variable `foo`, or if the variable doesn't exist, remove the function `foo`:

`unset {{foo}}`

- Remove the variables foo and bar:

`unset -v {{foo}} {{bar}}`

- Remove the function my_func:

`unset -f {{my_func}}`
"
swapon,,,"# swapon

> Enables device or file for swapping.

- Get swap information:

`swapon -s`

- Enable a given swap partition:

`swapon {{/dev/sdb7}}`

- Enable a given swap file:

`swapon {{path/to/file}}`

- Enable all swap areas:

`swapon -a`

- Enable swap by label of a device or file:

`swapon -L {{swap1}}`
"
faketime,https://manpages.ubuntu.com/manpages/trusty/man1/faketime.1.html,,"# faketime

> Fake the system time for a given command.
> More information: <https://manpages.ubuntu.com/manpages/trusty/man1/faketime.1.html>.

- Fake the time to this evening, before printing the result of `date`:

`faketime '{{today 23:30}}' {{date}}`

- Open a new `bash` shell, which uses yesterday as the current date:

`faketime '{{yesterday}}' {{bash}}`

- Simulate how any program would act next friday night:

`faketime '{{next Friday 1 am}}' {{path/to/any/program}}`
"
diff3,,"DIFF3(1)			 User Commands			      DIFF3(1)



NAME
       diff3 - compare three files line by line

SYNOPSIS
       diff3 [OPTION]... MYFILE OLDFILE YOURFILE

DESCRIPTION
       Compare three files line by line.

       -e  --ed
	      Output unmerged changes from OLDFILE to YOURFILE into MYFILE.

       -E  --show-overlap
	      Output unmerged changes, bracketing conflicts.

       -A  --show-all
	      Output all changes, bracketing conflicts.

       -x  --overlap-only
	      Output overlapping changes.

       -X     Output overlapping changes, bracketing them.

       -3  --easy-only
	      Output unmerged nonoverlapping changes.

       -m  --merge
	      Output merged file instead of ed script (default -A).

       -L LABEL  --label=LABEL
	      Use LABEL instead of file name.

       -i     Append `w' and `q' commands to ed scripts.

       -a  --text
	      Treat all files as text.

       -T  --initial-tab
	      Make tabs line up by prepending a tab.

       --diff-program=PROGRAM
	      Use PROGRAM to compare files.

       -v  --version
	      Output version info.

       --help Output this help.

       If a FILE is `-', read standard input.

AUTHOR
       Written by Randy Smith.

REPORTING BUGS
       Report bugs to <bug-gnu-utils@gnu.org>.

COPYRIGHT
       Copyright (C) 2002 Free Software Foundation, Inc.

       This  program  comes  with NO WARRANTY, to the extent permitted by law.
       You may redistribute copies of this program under the terms of the  GNU
       General	Public License.  For more information about these matters, see
       the file named COPYING.

SEE ALSO
       The full documentation for diff3 is maintained as a Texinfo manual.  If
       the  info  and  diff3 programs are properly installed at your site, the
       command

	      info diff

       should give you access to the complete manual.



diffutils 2.8.1 		  April 2002			      DIFF3(1)
","# diff3

> Compare three files line by line.

- Compare files:

`diff3 {{file1}} {{file2}} {{file3}}`

- Show all changes, outlining conflicts:

`diff3 --show-all {{file1}} {{file2}} {{file3}}`
"
tshark,,,"# tshark

> Packet analysis tool, CLI version of wireshark.

- Monitor everything on localhost:

`tshark`

- Only capture packets matching a specific capture filter:

`tshark -f '{{udp port 53}}'`

- Only show packets matching a specific output filter:

`tshark -Y '{{http.request.method == ""GET""}}'`

- Decode a TCP port using a specific protocol (e.g. HTTP):

`tshark -d tcp.port=={{8888}},{{http}}`

- Specify the format of captured output:

`tshark -T {{json|text|ps|…}}`

- Select specific fields to output:

`tshark -T {{fields|ek|json|pdml}} -e {{http.request.method}} -e {{ip.src}}`

- Write captured packet to a file:

`tshark -w {{path/to/file}}`

- Analyze packets from a file:

`tshark -r {{filename}}.pcap`
"
expect,https://linux.die.net/man/1/expect,"EXPECT(1)							     EXPECT(1)



NAME
       expect - programmed dialogue with interactive programs, Version 5

SYNOPSIS
       expect [ -dDinN ] [ -c cmds ] [ [ -[f|b] ] cmdfile ] [ args ]

INTRODUCTION
       Expect  is a program that ""talks"" to other interactive programs accord-
       ing to a script.  Following  the  script,  Expect  knows  what  can  be
       expected  from  a  program and what the correct response should be.  An
       interpreted language provides branching and high-level  control	struc-
       tures  to  direct the dialogue.	In addition, the user can take control
       and interact directly when desired, afterward returning control to  the
       script.

       Expectk is a mixture of Expect and Tk.  It behaves just like Expect and
       Tk's wish.  Expect can also be used directly in	C  or  C++  (that  is,
       without Tcl).  See libexpect(3).

       The name ""Expect"" comes from the idea of send/expect sequences popular-
       ized by uucp, kermit and other modem control programs.  However	unlike
       uucp,  Expect is generalized so that it can be run as a user-level com-
       mand with any program and task in mind.	Expect can  actually  talk  to
       several programs at the same time.

       For example, here are some things Expect can do:

	      o   Cause  your computer to dial you back, so that you can login
		  without paying for the call.

	      o   Start a game (e.g., rogue) and if the optimal  configuration
		  doesn't  appear, restart it (again and again) until it does,
		  then hand over control to you.

	      o   Run fsck, and in response to its  questions,	answer	""yes"",
		  ""no""	or  give  control  back to you, based on predetermined
		  criteria.

	      o   Connect to another network or  BBS  (e.g.,  MCI  Mail,  Com-
		  puServe)  and  automatically	retrieve  your mail so that it
		  appears as if it was originally sent to your local system.

	      o   Carry environment variables, current directory, or any  kind
		  of information across rlogin, telnet, tip, su, chgrp, etc.

       There  are  a  variety  of  reasons  why the shell cannot perform these
       tasks.  (Try, you'll see.)  All are possible with Expect.

       In general, Expect is useful for running  any  program  which  requires
       interaction between the program and the user.  All that is necessary is
       that the interaction can be characterized programmatically.  Expect can
       also give the user back control (without halting the program being con-
       trolled) if desired.  Similarly, the user can  return  control  to  the
       script at any time.

USAGE
       Expect  reads  cmdfile  for  a list of commands to execute.  Expect may
       also be invoked implicitly on systems which support the #! notation  by
       marking	the  script  executable,  and  making  the  first line in your
       script:

	   #!/usr/local/bin/expect -f

       Of course, the  path  must  accurately  describe  where	Expect	lives.
       /usr/local/bin is just an example.

       The -c flag prefaces a command to be executed before any in the script.
       The command should be quoted to prevent being broken up by  the	shell.
       This  option may be used multiple times.  Multiple commands may be exe-
       cuted with a single -c by separating them  with	semicolons.   Commands
       are  executed  in  the  order  they  appear.  (When using Expectk, this
       option is specified as -command.)

       The -d flag enables some diagnostic  output,  which  primarily  reports
       internal  activity  of commands such as expect and interact.  This flag
       has the same effect as ""exp_internal 1"" at the beginning of  an	Expect
       script,	plus the version of Expect is printed.	(The strace command is
       useful for tracing statements, and the  trace  command  is  useful  for
       tracing	variable  assignments.)   (When  using Expectk, this option is
       specified as -diag.)

       The -D flag enables an interactive debugger.  An integer  value	should
       follow.	 The  debugger will take control before the next Tcl procedure
       if the value is non-zero or if a ^C is pressed (or a breakpoint is hit,
       or  other appropriate debugger command appears in the script).  See the
       README file or SEE ALSO (below) for more information on	the  debugger.
       (When using Expectk, this option is specified as -Debug.)

       The -f flag prefaces a file from which to read commands from.  The flag
       itself is optional as it is only useful when using the #! notation (see
       above),	so  that  other arguments may be supplied on the command line.
       (When using Expectk, this option is specified as -file.)

       By default, the command file is read into memory and  executed  in  its
       entirety.   It  is  occasionally  desirable to read files one line at a
       time.  For example, stdin is read this way.  In order  to  force  arbi-
       trary  files  to  be  handled  this  way, use the -b flag.  (When using
       Expectk, this option is specified as  -buffer.)Notethatstdio-buffering-
       maystilltakeplacehoweverthisshouldn'tcauseproblemswhenreadingfromafi-
       foorstdin.

       If the string ""-"" is supplied as a filename,  standard  input  is  read
       instead.  (Use ""./-"" to read from a file actually named ""-"".)

       The  -i flag causes Expect to interactively prompt for commands instead
       of reading them from a file.  Prompting is terminated via the exit com-
       mand or upon EOF.  See interpreter (below) for more information.  -i is
       assumed if neither a command file nor -c is used.  (When using Expectk,
       this option is specified as -interactive.)

       --  may	be  used to delimit the end of the options.  This is useful if
       you want to pass an option-like argument  to  your  script  without  it
       being  interpreted  by  Expect.	 This can usefully be placed in the #!
       line to prevent any flag-like interpretation by Expect.	 For  example,
       the  following  will leave the original arguments (including the script
       name) in the variable argv.

	   #!/usr/local/bin/expect --

       Note that  the  usual  getopt(3)  and  execve(2)  conventions  must  be
       observed when adding arguments to the #! line.

       The  file  $exp_library/expect.rc  is sourced automatically if present,
       unless the -N flag is used.  (When using Expectk, this option is speci-
       fied  as  -NORC.)   Immediately	after  this,  the file ~/.expect.rc is
       sourced automatically, unless the -n flag is used.  If the  environment
       variable DOTDIR is defined, it is treated as a directory and .expect.rc
       is read from there.  (When using Expectk, this option is  specified  as
       -norc.)	This sourcing occurs only after executing any -c flags.

       -v  causes  Expect  to  print its version number and exit.  (The corre-
       sponding flag in Expectk, which uses long flag names, is -version.)

       Optional args are constructed into a list and stored  in  the  variable
       named argv.  argc is initialized to the length of argv.

       argv0  is  defined to be the name of the script (or binary if no script
       is used).  For example, the following prints out the name of the script
       and the first three arguments:

	   send_user ""$argv0 [lrange $argv 0 2]\n""


COMMANDS
       Expect  uses  Tcl  (Tool  Command Language).  Tcl provides control flow
       (e.g., if, for, break), expression evaluation and  several  other  fea-
       tures such as recursion, procedure definition, etc.  Commands used here
       but not defined (e.g., set, if, exec) are Tcl  commands	(see  tcl(3)).
       Expect supports additional commands, described below.  Unless otherwise
       specified, commands return the empty string.

       Commands are listed alphabetically so that they can be quickly located.
       However,  new users may find it easier to start by reading the descrip-
       tions of spawn, send, expect, and interact, in that order.

       Note that the best introduction to the language (both Expect  and  Tcl)
       is provided in the book ""Exploring Expect"" (see SEE ALSO below).  Exam-
       ples are included in this man page but they are very limited since this
       man page is meant primarily as reference material.

       Note  that in the text of this man page, ""Expect"" with an uppercase ""E""
       refers to the Expect program  while  ""expect""  with  a  lower-case  ""e""
       refers to the expect command within the Expect program.)

       close [-slave] [-onexec 0|1] [-i spawn_id]
	     closes  the  connection to the current process.  Most interactive
	     programs will detect EOF on their stdin and exit; thus close usu-
	     ally  suffices to kill the process as well.  The -i flag declares
	     the process to close corresponding to the named spawn_id.

	     Both expect and interact will detect  when  the  current  process
	     exits and implicitly do a close.  But if you kill the process by,
	     say, ""exec kill $pid"", you will need to explicitly call close.

	     The -onexec flag determines whether the spawn id will  be	closed
	     in  any new spawned processes or if the process is overlayed.  To
	     leave a spawn id open, use the value 0.  A non-zero integer value
	     will force the spawn closed (the default) in any new processes.

	     The  -slave  flag	closes the slave associated with the spawn id.
	     (See ""spawn -pty"".)  When the connection is closed, the slave  is
	     automatically closed as well if still open.

	     No  matter whether the connection is closed implicitly or explic-
	     itly, you should call wait to clear up the  corresponding	kernel
	     process slot.  close does not call wait since there is no guaran-
	     tee that closing a process connection will cause it to exit.  See
	     wait below for more info.

       debug [[-now] 0|1]
	     controls  a Tcl debugger allowing you to step through statements,
	     set breakpoints, etc.

	     With no arguments, a 1 is returned if the debugger  is  not  run-
	     ning, otherwise a 0 is returned.

	     With  a  1 argument, the debugger is started.  With a 0 argument,
	     the debugger is stopped.  If a 1 argument is preceded by the -now
	     flag, the debugger is started immediately (i.e., in the middle of
	     the debug command itself).  Otherwise, the  debugger  is  started
	     with the next Tcl statement.

	     The  debug  command  does	not change any traps.  Compare this to
	     starting Expect with the -D flag (see above).

	     See the README file or SEE ALSO (below) for more  information  on
	     the debugger.

       disconnect
	     disconnects  a  forked  process  from the terminal.  It continues
	     running in the background.  The process is given its own  process
	     group (if possible).  Standard I/O is redirected to /dev/null.

	     The  following  fragment  uses disconnect to continue running the
	     script in the background.

		 if {[fork]!=0} exit
		 disconnect
		 . . .

	     The following script reads a password, and then  runs  a  program
	     every  hour  that	demands  a  password each time it is run.  The
	     script supplies the password so that you only  have  to  type  it
	     once.   (See  the stty command which demonstrates how to turn off
	     password echoing.)

		 send_user ""password?\ ""
		 expect_user -re ""(.*)\n""
		 for {} 1 {} {
		     if {[fork]!=0} {sleep 3600;continue}
		     disconnect
		     spawn priv_prog
		     expect Password:
		     send ""$expect_out(1,string)\r""
		     . . .
		     exit
		 }

	     An advantage to using  disconnect	over  the  shell  asynchronous
	     process  feature (&) is that Expect can save the terminal parame-
	     ters prior to disconnection, and then later  apply  them  to  new
	     ptys.   With  &, Expect does not have a chance to read the termi-
	     nal's parameters since the terminal is  already  disconnected  by
	     the time Expect receives control.

       exit [-opts] [status]
	     causes Expect to exit or otherwise prepare to do so.

	     The  -onexit  flag causes the next argument to be used as an exit
	     handler.  Without	an  argument,  the  current  exit  handler  is
	     returned.

	     The  -noexit flag causes Expect to prepare to exit but stop short
	     of actually returning control to the operating system.  The user-
	     defined exit handler is run as well as Expect's own internal han-
	     dlers.  No further Expect commands should be executed.   This  is
	     useful  if you are running Expect with other Tcl extensions.  The
	     current interpreter (and main window if in  the  Tk  environment)
	     remain  so  that  other Tcl extensions can clean up.  If Expect's
	     exit is called again (however this might occur), the handlers are
	     not rerun.

	     Upon  exiting,  all  connections to spawned processes are closed.
	     Closure will be detected as an EOF by  spawned  processes.   exit
	     takes  no other actions beyond what the normal _exit(2) procedure
	     does.  Thus, spawned processes that do not check for EOF may con-
	     tinue  to	run.  (A variety of conditions are important to deter-
	     mining, for example, what signals a spawned process will be sent,
	     but   these  are  system-dependent,  typically  documented  under
	     exit(3).)	Spawned processes that continue to run will be	inher-
	     ited by init.

	     status  (or 0 if not specified) is returned as the exit status of
	     Expect.  exit is implicitly executed if the end of the script  is
	     reached.

       exp_continue [-continue_timer]
	     The command exp_continue allows expect itself to continue execut-
	     ing rather than  returning  as  it  normally  would.  By  default
	     exp_continue  resets  the timeout timer. The -continue_timer flag
	     prevents timer from being restarted. (See expect for more	infor-
	     mation.)

       exp_internal [-f file] value
	     causes  further  commands to send diagnostic information internal
	     to Expect to stderr if value is non-zero.	This  output  is  dis-
	     abled  if	value is 0.  The diagnostic information includes every
	     character received, and every attempt made to match  the  current
	     output against the patterns.

	     If the optional file is supplied, all normal and debugging output
	     is written to that file (regardless of the value of value).   Any
	     previous diagnostic output file is closed.

	     The -info flag causes exp_internal to return a description of the
	     most recent non-info arguments given.

       exp_open [args] [-i spawn_id]
	     returns a Tcl file identifier that corresponds  to  the  original
	     spawn  id.   The  file  identifier can then be used as if it were
	     opened by Tcl's open command.  (The spawn id should no longer  be
	     used.  A wait should not be executed.

	     The  -leaveopen  flag leaves the spawn id open for access through
	     Expect commands.  A wait must be executed on the spawn id.

       exp_pid [-i spawn_id]
	     returns the process id corresponding  to  the  currently  spawned
	     process.  If the -i flag is used, the pid returned corresponds to
	     that of the given spawn id.

       exp_send
	     is an alias for send.

       exp_send_error
	     is an alias for send_error.

       exp_send_log
	     is an alias for send_log.

       exp_send_tty
	     is an alias for send_tty.

       exp_send_user
	     is an alias for send_user.

       exp_version [[-exit] version]
	     is useful for assuring that the script  is  compatible  with  the
	     current version of Expect.

	     With  no  arguments,  the	current version of Expect is returned.
	     This version may then be encoded in your script.  If you actually
	     know  that you are not using features of recent versions, you can
	     specify an earlier version.

	     Versions consist of three numbers separated by  dots.   First  is
	     the  major number.  Scripts written for versions of Expect with a
	     different major number will almost certainly not work.   exp_ver-
	     sion returns an error if the major numbers do not match.

	     Second is the minor number.  Scripts written for a version with a
	     greater minor number than the current  version  may  depend  upon
	     some new feature and might not run.  exp_version returns an error
	     if the major numbers  match,  but	the  script  minor  number  is
	     greater than that of the running Expect.

	     Third  is	a number that plays no part in the version comparison.
	     However, it is incremented when the Expect software  distribution
	     is  changed  in  any  way, such as by additional documentation or
	     optimization.  It is reset to 0 upon each new minor version.

	     With the -exit flag, Expect prints an error and exits if the ver-
	     sion is out of date.

       expect [[-opts] pat1 body1] ... [-opts] patn [bodyn]
	     waits  until  one of the patterns matches the output of a spawned
	     process, a specified time period has passed, or an end-of-file is
	     seen.  If the final body is empty, it may be omitted.

	     Patterns  from  the most recent expect_before command are implic-
	     itly used before any other  patterns.   Patterns  from  the  most
	     recent  expect_after  command are implicitly used after any other
	     patterns.

	     If the arguments to the entire expect statement require more than
	     one  line,  all  the  arguments may be ""braced"" into one so as to
	     avoid terminating each line with a backslash.  In this one  case,
	     the usual Tcl substitutions will occur despite the braces.

	     If  a  pattern is the keyword eof, the corresponding body is exe-
	     cuted upon end-of-file.  If a pattern is the keyword timeout, the
	     corresponding  body is executed upon timeout.  If no timeout key-
	     word is used, an implicit null action is executed	upon  timeout.
	     The  default  timeout  period  is	10 seconds but may be set, for
	     example to 30, by the command  ""set  timeout  30"".   An  infinite
	     timeout  may  be designated by the value -1.  If a pattern is the
	     keyword default, the corresponding body is executed  upon	either
	     timeout or end-of-file.

	     If  a  pattern  matches, then the corresponding body is executed.
	     expect returns the result of the body (or the empty string if  no
	     pattern matched).	In the event that multiple patterns match, the
	     one appearing first is used to select a body.

	     Each time new output arrives, it is compared to each  pattern  in
	     the  order  they are listed.  Thus, you may test for absence of a
	     match by making the last pattern something guaranteed to  appear,
	     such  as  a  prompt.  In situations where there is no prompt, you
	     must use timeout (just like you would  if	you  were  interacting
	     manually).

	     Patterns  are  specified in three ways.  By default, patterns are
	     specified as with Tcl's string match command.  (Such patterns are
	     also  similar  to C-shell regular expressions usually referred to
	     as ""glob"" patterns).  The -gl flag may may  be  used  to  protect
	     patterns  that  might otherwise match expect flags from doing so.
	     Any pattern beginning with a ""-"" should be  protected  this  way.
	     (All  strings starting with ""-"" are reserved for future options.)


	     For example, the following fragment looks for a successful login.
	     (Note  that abort is presumed to be a procedure defined elsewhere
	     in the script.)

		 expect {
		     busy		{puts busy\n ; exp_continue}
		     failed		abort
		     ""invalid password"" abort
		     timeout		abort
		     connected
		 }

	     Quotes are necessary on the fourth pattern since  it  contains  a
	     space,  which  would  otherwise  separate	the  pattern  from the
	     action.  Patterns with the same action (such as the 3rd and  4th)
	     require  listing  the  actions again.  This can be avoid by using
	     regexp-style patterns (see below).  More information  on  forming
	     glob-style patterns can be found in the Tcl manual.

	     Regexp-style  patterns  follow the syntax defined by Tcl's regexp
	     (short for ""regular expression"") command.	 regexp  patterns  are
	     introduced  with  the  flag  -re.	 The  previous	example can be
	     rewritten using a regexp as:

		 expect {
		     busy	{puts busy\n ; exp_continue}
		     -re ""failed|invalid password"" abort
		     timeout	abort
		     connected
		 }

	     Both types of patterns are ""unanchored"".  This  means  that  pat-
	     terns  do	not have to match the entire string, but can begin and
	     end the match anywhere in the string (as long as everything  else
	     matches).	 Use  ^  to  match the beginning of a string, and $ to
	     match the end.  Note that if you do not wait for  the  end  of  a
	     string,  your  responses  can  easily end up in the middle of the
	     string as they are echoed from the spawned process.  While  still
	     producing	correct results, the output can look unnatural.  Thus,
	     use of $ is encouraged if you can exactly describe the characters
	     at the end of a string.

	     Note  that  in  many editors, the ^ and $ match the beginning and
	     end of lines respectively. However, because expect  is  not  line
	     oriented,	these  characters  match  the beginning and end of the
	     data (as opposed to  lines)  currently  in  the  expect  matching
	     buffer.  (Also, see the note below on ""system indigestion."")

	     The  -ex  flag  causes  the  pattern  to be matched as an ""exact""
	     string.  No interpretation of *, ^, etc  is  made	(although  the
	     usual  Tcl  conventions  must still be observed).	Exact patterns
	     are always unanchored.


	     The -nocase flag causes uppercase characters  of  the  output  to
	     compare as if they were lowercase characters.  The pattern is not
	     affected.

	     While reading output, more than  2000  bytes  can	force  earlier
	     bytes  to	be ""forgotten"".  This may be changed with the function
	     match_max.  (Note that excessively large values can slow down the
	     pattern  matcher.)   If patlist is full_buffer, the corresponding
	     body is executed if match_max bytes have  been  received  and  no
	     other patterns have matched.  Whether or not the full_buffer key-
	     word  is  used,  the  forgotten   characters   are   written   to
	     expect_out(buffer).

	     If  patlist  is  the keyword null, and nulls are allowed (via the
	     remove_nulls command), the corresponding body is  executed  if  a
	     single  ASCII  0 is matched.  It is not possible to match 0 bytes
	     via glob or regexp patterns.

	     Upon matching a pattern (or eof or full_buffer), any matching and
	     previously   unmatched   output   is   saved   in	 the  variable
	     expect_out(buffer).  Up to 9 regexp substring matches  are  saved
	     in      the      variables      expect_out(1,string)      through
	     expect_out(9,string).  If the -indices flag is used before a pat-
	     tern,  the  starting  and	ending indices (in a form suitable for
	     lrange)  of  the  10  strings  are  stored   in   the   variables
	     expect_out(X,start)  and  expect_out(X,end)  where  X is a digit,
	     corresponds to the substring position in the buffer.  0 refers to
	     strings  which  matched  the  entire pattern and is generated for
	     glob patterns as well as regexp  patterns.   For  example,  if  a
	     process has produced output of ""abcdefgh\n"", the result of:

		 expect ""cd""

	     is as if the following statements had executed:

		 set expect_out(0,string) cd
		 set expect_out(buffer) abcd

	     and ""efgh\n"" is left in the output buffer.  If a process produced
	     the output ""abbbcabkkkka\n"", the result of:

		 expect -indices -re ""b(b*).*(k+)""

	     is as if the following statements had executed:

		 set expect_out(0,start) 1
		 set expect_out(0,end) 10
		 set expect_out(0,string) bbbcabkkkk
		 set expect_out(1,start) 2
		 set expect_out(1,end) 3
		 set expect_out(1,string) bb
		 set expect_out(2,start) 10
		 set expect_out(2,end) 10
		 set expect_out(2,string) k
		 set expect_out(buffer) abbbcabkkkk

	     and ""a\n"" is left in the output buffer.  The pattern ""*"" (and -re
	     "".*"")  will flush the output buffer without reading any more out-
	     put from the process.

	     Normally, the matched output is discarded from Expect's  internal
	     buffers.	This  may be prevented by prefixing a pattern with the
	     -notransfer flag.	This flag is especially useful in  experiment-
	     ing  (and	can  be  abbreviated  to  ""-not"" for convenience while
	     experimenting).

	     The spawn id associated with  the	matching  output  (or  eof  or
	     full_buffer) is stored in expect_out(spawn_id).

	     The  -timeout  flag  causes the current expect command to use the
	     following value as a timeout instead of using the	value  of  the
	     timeout variable.

	     By  default, patterns are matched against output from the current
	     process, however the -i flag declares the output from  the  named
	     spawn_id  list  be  matched against any following patterns (up to
	     the next -i).  The spawn_id list should either  be  a  whitespace
	     separated	list  of  spawn_ids  or a variable referring to such a
	     list of spawn_ids.

	     For example, the following example waits for ""connected"" from the
	     current  process,	or ""busy"", ""failed"" or ""invalid password"" from
	     the spawn_id named by $proc2.

		 expect {
		     -i $proc2 busy {puts busy\n ; exp_continue}
		     -re ""failed|invalid password"" abort
		     timeout abort
		     connected
		 }

	     The value of the global variable  any_spawn_id  may  be  used  to
	     match  patterns to any spawn_ids that are named with all other -i
	     flags in the current expect command.  The spawn_id from a -i flag
	     with no associated pattern (i.e., followed immediately by another
	     -i) is made available to any other patterns in  the  same	expect
	     command associated with any_spawn_id.

	     The  -i  flag  may  also name a global variable in which case the
	     variable is read for a list of spawn ids.	The variable is reread
	     whenever  it  changes.   This  provides a way of changing the I/O
	     source while the command is in  execution.   Spawn  ids  provided
	     this way are called ""indirect"" spawn ids.

	     Actions  such  as	break  and  continue  cause control structures
	     (i.e., for, proc) to  behave  in  the  usual  way.   The  command
	     exp_continue  allows  expect  itself to continue executing rather
	     than returning as it normally would.

	     This is useful for avoiding explicit  loops  or  repeated	expect
	     statements.  The following example is part of a fragment to auto-
	     mate rlogin.  The exp_continue avoids having to  write  a	second
	     expect  statement	(to  look  for the prompt again) if the rlogin
	     prompts for a password.

		 expect {
		     Password: {
			 stty -echo
			 send_user ""password (for $user) on $host: ""
			 expect_user -re ""(.*)\n""
			 send_user ""\n""
			 send ""$expect_out(1,string)\r""
			 stty echo
			 exp_continue
		     } incorrect {
			 send_user ""invalid password or account\n""
			 exit
		     } timeout {
			 send_user ""connection to $host timed out\n""
			 exit
		     } eof {
			 send_user \
			     ""connection to host failed: $expect_out(buffer)""
			 exit
		     } -re $prompt
		 }

	     For example, the following fragment might help a  user  guide  an
	     interaction that is already totally automated.  In this case, the
	     terminal is put into raw mode.  If the user presses ""+"", a  vari-
	     able is incremented.  If ""p"" is pressed, several returns are sent
	     to the process, perhaps to poke it in some way, and ""i"" lets  the
	     user interact with the process, effectively stealing away control
	     from the script.  In each case, the exp_continue allows the  cur-
	     rent expect to continue pattern matching after executing the cur-
	     rent action.

		 stty raw -echo
		 expect_after {
		     -i $user_spawn_id
		     ""p"" {send ""\r\r\r""; exp_continue}
		     ""+"" {incr foo; exp_continue}
		     ""i"" {interact; exp_continue}
		     ""quit"" exit
		 }


	     By default, exp_continue resets the timeout timer.  The timer  is
	     not restarted, if exp_continue is called with the -continue_timer
	     flag.

       expect_after [expect_args]
	     works identically to the expect_before except  that  if  patterns
	     from  both  expect and expect_after can match, the expect pattern
	     is used.  See the expect_before command for more information.

       expect_background [expect_args]
	     takes the same arguments as expect, however  it  returns  immedi-
	     ately.  Patterns are tested whenever new input arrives.  The pat-
	     tern timeout and default are meaningless to expect_background and
	     are silently discarded.  Otherwise, the expect_background command
	     uses expect_before and expect_after  patterns  just  like	expect
	     does.

	     When  expect_background  actions  are being evaluated, background
	     processing for the same spawn id is blocked.  Background process-
	     ing  is  unblocked  when  the action completes.  While background
	     processing is blocked, it is possible to do a (foreground) expect
	     on the same spawn id.

	     It  is  not  possible  to execute an expect while an expect_back-
	     ground is unblocked.  expect_background for a particular spawn id
	     is  deleted  by  declaring  a new expect_background with the same
	     spawn id.	Declaring expect_background with  no  pattern  removes
	     the  given  spawn	id  from  the ability to match patterns in the
	     background.

       expect_before [expect_args]
	     takes the same arguments as expect, however  it  returns  immedi-
	     ately.   Pattern-action  pairs from the most recent expect_before
	     with the same spawn id are  implicitly  added  to	any  following
	     expect  commands.	 If  a pattern matches, it is treated as if it
	     had been specified in the expect command itself, and the  associ-
	     ated  body  is executed in the context of the expect command.  If
	     patterns from  both  expect_before  and  expect  can  match,  the
	     expect_before pattern is used.

	     If  no  pattern is specified, the spawn id is not checked for any
	     patterns.

	     Unless overridden by a  -i  flag,	expect_before  patterns  match
	     against  the  spawn id defined at the time that the expect_before
	     command was executed (not when its pattern is matched).

	     The -info flag causes expect_before to return the current	speci-
	     fications of what patterns it will match.	By default, it reports
	     on the current spawn id.  An optional spawn id specification  may
	     be given for information on that spawn id.  For example

		 expect_before -info -i $proc

	     At most one spawn id specification may be given.  The flag -indi-
	     rect suppresses direct spawn ids that  come  only	from  indirect
	     specifications.

	     Instead  of  a spawn id specification, the flag ""-all"" will cause
	     ""-info"" to report on all spawn ids.

	     The output of the -info flag can be reused  as  the  argument  to
	     expect_before.

       expect_tty [expect_args]
	     is  like  expect but it reads characters from /dev/tty (i.e. key-
	     strokes from the user).  By  default,  reading  is  performed  in
	     cooked  mode.   Thus,  lines  must end with a return in order for
	     expect to see them.  This may be changed via stty (see  the  stty
	     command below).

       expect_user [expect_args]
	     is  like  expect  but  it	reads characters from stdin (i.e. key-
	     strokes from the user).  By  default,  reading  is  performed  in
	     cooked  mode.   Thus,  lines  must end with a return in order for
	     expect to see them.  This may be changed via stty (see  the  stty
	     command below).

       fork  creates  a  new process.  The new process is an exact copy of the
	     current Expect process.  On success, fork returns 0  to  the  new
	     (child)  process  and returns the process ID of the child process
	     to the parent process.  On failure (invariably  due  to  lack  of
	     resources, e.g., swap space, memory), fork returns -1 to the par-
	     ent process, and no child process is created.

	     Forked processes exit via the exit command, just like the	origi-
	     nal  process.   Forked  processes are allowed to write to the log
	     files.  If you do not disable debugging or logging in most of the
	     processes, the result can be confusing.

	     Some  pty implementations may be confused by multiple readers and
	     writers, even momentarily.  Thus, it is  safest  to  fork	before
	     spawning processes.

       interact [string1 body1] ... [stringn [bodyn]]
	     gives  control  of  the current process to the user, so that key-
	     strokes are sent to the  current  process,  and  the  stdout  and
	     stderr of the current process are returned.

	     String-body  pairs  may  be specified as arguments, in which case
	     the body is executed when the corresponding  string  is  entered.
	     (By  default,  the  string  is  not sent to the current process.)
	     The interpreter command is assumed, if the final body is missing.

	     If  the  arguments  to the entire interact statement require more
	     than one line, all the arguments may be ""braced"" into one	so  as
	     to  avoid	terminating  each  line with a backslash.  In this one
	     case, the usual Tcl substitutions will occur despite the  braces.

	     For example, the following command runs interact with the follow-
	     ing string-body pairs defined:  When ^Z  is  pressed,  Expect  is
	     suspended.   (The -reset flag restores the terminal modes.)  When
	     ^A is pressed, the user sees ""you	typed  a  control-A""  and  the
	     process is sent a ^A.  When $ is pressed, the user sees the date.
	     When ^C is pressed, Expect exits.	If ""foo"" is entered, the  user
	     sees  ""bar"".   When  ~~  is  pressed, the Expect interpreter runs
	     interactively.

		 set CTRLZ \032
		 interact {
		     -reset $CTRLZ {exec kill -STOP [pid]}
		     \001   {send_user ""you typed a control-A\n"";
			     send ""\001""
			    }
		     $	    {send_user ""The date is [clock format [clock seconds]].""}
		     \003   exit
		     foo    {send_user ""bar""}
		     ~~
		 }


	     In string-body pairs, strings are matched in the order  they  are
	     listed  as  arguments.  Strings that partially match are not sent
	     to the current process in anticipation of the  remainder  coming.
	     If characters are then entered such that there can no longer pos-
	     sibly be a match, only the part of the string will be sent to the
	     process  that cannot possibly begin another match.  Thus, strings
	     that are substrings of partial matches can match  later,  if  the
	     original  strings	that  was  attempting  to  be match ultimately
	     fails.

	     By default, string matching is exact with	no  wild  cards.   (In
	     contrast,	 the   expect  command	uses  glob-style  patterns  by
	     default.)	The -ex flag may be  used  to  protect	patterns  that
	     might  otherwise match interact flags from doing so.  Any pattern
	     beginning with a  ""-""  should  be	protected  this  way.	  (All
	     strings starting with ""-"" are reserved for future options.)

	     The  -re  flag  forces  the string to be interpreted as a regexp-
	     style pattern.  In this case, matching substrings are  stored  in
	     the  variable interact_out similarly to the way expect stores its
	     output in the variable expect_out.  The -indices  flag  is  simi-
	     larly supported.

	     The  pattern  eof introduces an action that is executed upon end-
	     of-file.  A separate eof pattern may also follow the -output flag
	     in  which	case it is matched if an eof is detected while writing
	     output.  The default eof action is  ""return"",  so	that  interact
	     simply returns upon any EOF.

	     The  pattern timeout introduces a timeout (in seconds) and action
	     that is executed after no characters have been read for  a  given
	     time.  The timeout pattern applies to the most recently specified
	     process.  There is no  default  timeout.	The  special  variable
	     ""timeout""	(used  by  the	expect	command) has no affect on this
	     timeout.

	     For example, the following statement could be used to  autologout
	     users  who  have not typed anything for an hour but who still get
	     frequent system messages:

		 interact -input $user_spawn_id timeout 3600 return -output \
		     $spawn_id


	     If the pattern is the keyword null, and nulls  are  allowed  (via
	     the  remove_nulls command), the corresponding body is executed if
	     a single ASCII 0 is matched.  It is not possible to match 0 bytes
	     via glob or regexp patterns.

	     Prefacing	a  pattern  with  the flag -iwrite causes the variable
	     interact_out(spawn_id) to be set to the  spawn_id	which  matched
	     the pattern (or eof).

	     Actions  such  as	break  and  continue  cause control structures
	     (i.e., for, proc) to behave in the  usual	way.   However	return
	     causes  interact  to  return  to  its  caller, while inter_return
	     causes interact to cause a return in its caller.  For example, if
	     ""proc  foo""  called  interact  which  then  executed  the	action
	     inter_return, proc foo would return.  (This means that if	inter-
	     act  calls interpreter interactively typing return will cause the
	     interact to continue, while inter_return will cause the  interact
	     to return to its caller.)

	     During  interact,	raw mode is used so that all characters may be
	     passed to the current process.  If the current process  does  not
	     catch job control signals, it will stop if sent a stop signal (by
	     default ^Z).  To restart it, send a continue signal (such	as  by
	     ""kill  -CONT  <pid>"").   If  you really want to send a SIGSTOP to
	     such a process (by ^Z), consider spawning csh first and then run-
	     ning  your  program.   On	the  other hand, if you want to send a
	     SIGSTOP to Expect itself,	first  call  interpreter  (perhaps  by
	     using an escape character), and then press ^Z.

	     String-body  pairs can be used as a shorthand for avoiding having
	     to enter the interpreter and execute commands interactively.  The
	     previous  terminal  mode  is used while the body of a string-body
	     pair is being executed.

	     For speed, actions execute in raw mode by	default.   The	-reset
	     flag  resets  the terminal to the mode it had before interact was
	     executed (invariably, cooked mode).  Note that characters entered
	     when  the mode is being switched may be lost (an unfortunate fea-
	     ture of the terminal driver on some systems).  The only reason to
	     use -reset is if your action depends on running in cooked mode.

	     The  -echo flag sends characters that match the following pattern
	     back to the process that generated  them  as  each  character  is
	     read.   This  may	be  useful when the user needs to see feedback
	     from partially typed patterns.

	     If a pattern is being echoed but eventually fails to  match,  the
	     characters  are  sent  to	the  spawned  process.	If the spawned
	     process then echoes them, the user will see the characters twice.
	     -echo  is	probably only appropriate in situations where the user
	     is unlikely to not complete the pattern.  For example,  the  fol-
	     lowing  excerpt is from rftp, the recursive-ftp script, where the
	     user is prompted to enter ~g, ~p, or ~l, to get, put, or list the
	     current  directory  recursively.	These are so far away from the
	     normal ftp commands, that the user is unlikely to type ~ followed
	     by anything else, except mistakenly, in which case, they'll prob-
	     ably just ignore the result anyway.

		 interact {
		     -echo ~g {getcurdirectory 1}
		     -echo ~l {getcurdirectory 0}
		     -echo ~p {putcurdirectory}
		 }

	     The -nobuffer flag sends characters that match the following pat-
	     tern on to the output process as characters are read.

	     This  is useful when you wish to let a program echo back the pat-
	     tern.  For example, the following might be used to monitor  where
	     a	person	is  dialing (a Hayes-style modem).  Each time ""atd"" is
	     seen the script logs the rest of the line.

		 proc lognumber {} {
		     interact -nobuffer -re ""(.*)\r"" return
		     puts $log ""[clock format [clock seconds]]: dialed $interact_out(1,string)""
		 }

		 interact -nobuffer ""atd"" lognumber


	     During interact, previous use of log_user is ignored.  In partic-
	     ular,  interact  will  force its output to be logged (sent to the
	     standard output) since it is presumed the user  doesn't  wish  to
	     interact blindly.

	     The  -o flag causes any following key-body pairs to be applied to
	     the output of the current process.  This can be useful, for exam-
	     ple, when dealing with hosts that send unwanted characters during
	     a telnet session.

	     By default, interact expects the user to  be  writing  stdin  and
	     reading  stdout  of  the Expect process itself.  The -u flag (for
	     ""user"") makes interact look for the user as the process named  by
	     its argument (which must be a spawned id).

	     This allows two unrelated processes to be joined together without
	     using an explicit loop.  To aid in debugging, Expect  diagnostics
	     always  go to stderr (or stdout for certain logging and debugging
	     information).  For the same reason, the interpreter command  will
	     read interactively from stdin.

	     For  example,  the  following  fragment  creates a login process.
	     Then it dials the user (not shown), and finally connects the  two
	     together.	 Of  course, any process may be substituted for login.
	     A shell, for example, would allow the user to work  without  sup-
	     plying an account and password.

		 spawn login
		 set login $spawn_id
		 spawn tip modem
		 # dial back out to user
		 # connect user to login
		 interact -u $login

	     To  send  output  to  multiple processes, list each spawn id list
	     prefaced by a -output flag.  Input for a group  of  output  spawn
	     ids  may  be  determined  by a spawn id list prefaced by a -input
	     flag.  (Both -input and -output may take lists in the  same  form
	     as the -i flag in the expect command, except that any_spawn_id is
	     not meaningful in interact.)  All following flags and strings (or
	     patterns)	apply to this input until another -input flag appears.
	     If no -input  appears,  -output  implies  ""-input	$user_spawn_id
	     -output"".	 (Similarly,  with  patterns that do not have -input.)
	     If one -input is specified, it overrides  $user_spawn_id.	 If  a
	     second  -input  is specified, it overrides $spawn_id.  Additional
	     -input flags may be specified.

	     The two implied input processes default to having	their  outputs
	     specified	as  $spawn_id  and  $user_spawn_id (in reverse).  If a
	     -input flag appears with no -output flag,	characters  from  that
	     process are discarded.

	     The  -i  flag  introduces	a replacement for the current spawn_id
	     when no other -input or  -output  flags  are  used.   A  -i  flag
	     implies a -o flag.

	     It  is possible to change the processes that are being interacted
	     with by using  indirect  spawn  ids.   (Indirect  spawn  ids  are
	     described	in the section on the expect command.)	Indirect spawn
	     ids may be specified with the -i, -u, -input, or -output flags.

       interpreter  [args]
	     causes the user to be interactively prompted for Expect  and  Tcl
	     commands.	The result of each command is printed.

	     Actions  such  as	break  and  continue  cause control structures
	     (i.e., for, proc) to behave in the  usual	way.   However	return
	     causes  interpreter  to  return to its caller, while inter_return
	     causes interpreter to cause a return in its caller.  For example,
	     if  ""proc	foo"" called interpreter which then executed the action
	     inter_return, proc foo would return.  Any	other  command	causes
	     interpreter to continue prompting for new commands.

	     By  default, the prompt contains two integers.  The first integer
	     describes the depth of the evaluation stack (i.e., how many times
	     Tcl_Eval has been called).  The second integer is the Tcl history
	     identifier.  The prompt can be set by defining a procedure called
	     ""prompt1""	whose  return  value  becomes  the  next prompt.  If a
	     statement has open quotes, parens, braces, or  brackets,  a  sec-
	     ondary  prompt  (by  default  ""+> "") is issued upon newline.  The
	     secondary prompt may  be  set  by	defining  a  procedure	called
	     ""prompt2"".

	     During  interpreter,  cooked mode is used, even if the its caller
	     was using raw mode.

	     If stdin is closed, interpreter will return unless the -eof  flag
	     is used, in which case the subsequent argument is invoked.

       log_file [args] [[-a] file]
	     If  a  filename is provided, log_file will record a transcript of
	     the session (beginning at that point) in the file.  log_file will
	     stop recording if no argument is given.  Any previous log file is
	     closed.

	     Instead of a filename, a Tcl file identifier may be  provided  by
	     using  the  -open	or  -leaveopen	flags.	This is similar to the
	     spawn command.  (See spawn for more info.)

	     The -a flag forces output to be logged that was suppressed by the
	     log_user command.

	     By default, the log_file command appends to old files rather than
	     truncating them, for the convenience of being able to  turn  log-
	     ging  off	and  on  multiple  times  in one session.  To truncate
	     files, use the -noappend flag.

	     The -info flag causes log_file to return  a  description  of  the
	     most recent non-info arguments given.

       log_user -info|0|1
	     By  default,  the send/expect dialogue is logged to stdout (and a
	     logfile if open).	The logging to stdout is disabled by the  com-
	     mand  ""log_user 0"" and reenabled by ""log_user 1"".	Logging to the
	     logfile is unchanged.

	     The -info flag causes log_user to return  a  description  of  the
	     most recent non-info arguments given.

       match_max [-d] [-i spawn_id] [size]
	     defines  the  size  of  the  buffer (in bytes) used internally by
	     expect.  With no size argument, the current size is returned.

	     With the -d flag, the default size is set.  (The initial  default
	     is  2000.)  With the -i flag, the size is set for the named spawn
	     id, otherwise it is set for the current process.

       overlay [-# spawn_id] [-# spawn_id] [...] program [args]
	     executes program args in place of	the  current  Expect  program,
	     which  terminates.   A  bare  hyphen  argument forces a hyphen in
	     front of the command name as  if  it  was	a  login  shell.   All
	     spawn_ids	are closed except for those named as arguments.  These
	     are mapped onto the named file identifiers.

	     Spawn_ids are mapped to file identifiers for the new  program  to
	     inherit.	For  example, the following line runs chess and allows
	     it to be controlled by the current process - say, a chess master.

		 overlay -0 $spawn_id -1 $spawn_id -2 $spawn_id chess

	     This is more efficient than ""interact -u"", however, it sacrifices
	     the ability to do programmed interaction since the Expect process
	     is no longer in control.

	     Note that no controlling terminal is provided.  Thus, if you dis-
	     connect or remap standard input, programs	that  do  job  control
	     (shells, login, etc) will not function properly.

       parity [-d] [-i spawn_id] [value]
	     defines  whether  parity  should be retained or stripped from the
	     output of	spawned  processes.   If  value  is  zero,  parity  is
	     stripped,	otherwise it is not stripped.  With no value argument,
	     the current value is returned.

	     With the -d flag, the default parity value is set.  (The  initial
	     default  is  1, i.e., parity is not stripped.)  With the -i flag,
	     the parity value is set for the named spawn id, otherwise	it  is
	     set for the current process.

       remove_nulls [-d] [-i spawn_id] [value]
	     defines  whether nulls are retained or removed from the output of
	     spawned processes before pattern matching or storing in the vari-
	     able  expect_out  or  interact_out.   If  value  is  1, nulls are
	     removed.  If value is 0, nulls are not removed.   With  no  value
	     argument, the current value is returned.

	     With the -d flag, the default value is set.  (The initial default
	     is 1, i.e., nulls are removed.)  With the -i flag, the  value  is
	     set  for  the named spawn id, otherwise it is set for the current
	     process.

	     Whether or not nulls are removed, Expect will record  null  bytes
	     to the log and stdout.

       send [-flags] string
	     Sends string to the current process.  For example, the command

		 send ""hello world\r""

	     sends the characters, h e l l o <blank> w o r l d <return> to the
	     current process.  (Tcl includes  a  printf-like  command  (called
	     format) which can build arbitrarily complex strings.)

	     Characters  are  sent  immediately  although  programs with line-
	     buffered input will not read the characters until a return  char-
	     acter is sent.  A return character is denoted ""\r"".

	     The  --  flag  forces  the  next  argument to be interpreted as a
	     string rather than a flag.  Any string can be  preceded  by  ""--""
	     whether  or  not  it actually looks like a flag.  This provides a
	     reliable mechanism to  specify  variable  strings	without  being
	     tripped  up  by  those  that  accidentally look like flags.  (All
	     strings starting with ""-"" are reserved for future options.)

	     The -i flag declares  that  the  string  be  sent	to  the  named
	     spawn_id.	 If the spawn_id is user_spawn_id, and the terminal is
	     in raw mode, newlines in the string are translated to return-new-
	     line  sequences  so  that	they  appear as if the terminal was in
	     cooked mode.  The -raw flag disables this translation.

	     The -null flag sends null characters (0 bytes).  By default,  one
	     null  is  sent.   An integer may follow the -null to indicate how
	     many nulls to send.

	     The -break flag generates a break	condition.   This  only  makes
	     sense  if	the  spawn id refers to a tty device opened via ""spawn
	     -open"".  If you have spawned a process such as  tip,  you	should
	     use tip's convention for generating a break.

	     The  -s  flag  forces  output to be sent ""slowly"", thus avoid the
	     common situation where a computer outtypes an input  buffer  that
	     was designed for a human who would never outtype the same buffer.
	     This  output  is  controlled  by  the  value  of	the   variable
	     ""send_slow"" which takes a two element list.  The first element is
	     an integer that describes the number of bytes to send atomically.
	     The  second element is a real number that describes the number of
	     seconds by which the atomic sends must be separated.   For  exam-
	     ple,  ""set  send_slow  {10  .001}""  would force ""send -s"" to send
	     strings with 1 millisecond in between each 10 characters sent.

	     The -h flag forces output to be  sent  (somewhat)	like  a  human
	     actually  typing.	 Human-like  delays appear between the charac-
	     ters.  (The algorithm is based upon a Weibull distribution,  with
	     modifications  to suit this particular application.)  This output
	     is controlled by the value of  the  variable  ""send_human""  which
	     takes  a  five  element list.  The first two elements are average
	     interarrival time of characters in seconds.  The first is used by
	     default.	The  second  is  used at word endings, to simulate the
	     subtle pauses that occasionally occur at such  transitions.   The
	     third  parameter  is  a  measure of variability where .1 is quite
	     variable, 1 is reasonably variable, and 10 is  quite  invariable.
	     The  extremes  are  0  to infinity.  The last two parameters are,
	     respectively, a minimum and maximum interarrival time.  The mini-
	     mum  and  maximum	are  used last and ""clip"" the final time.  The
	     ultimate average can be quite different from the given average if
	     the minimum and maximum clip enough values.

	     As  an example, the following command emulates a fast and consis-
	     tent typist:

		 set send_human {.1 .3 1 .05 2}
		 send -h ""I'm hungry.  Let's do lunch.""

	     while the following might be more suitable after a hangover:

		 set send_human {.4 .4 .2 .5 100}
		 send -h ""Goodd party lash night!""

	     Note that errors are not simulated, although you can set up error
	     correction  situations yourself by embedding mistakes and correc-
	     tions in a send argument.

	     The flags for sending null characters, for  sending  breaks,  for
	     forcing  slow  output  and  for  human-style  output are mutually
	     exclusive. Only the one specified last will be used. Furthermore,
	     no  string  argument  can be specified with the flags for sending
	     null characters or breaks.

	     It is a good idea to precede the first send to a  process	by  an
	     expect.   expect  will  wait for the process to start, while send
	     cannot.  In particular, if the first send	completes  before  the
	     process  starts  running,	you  run  the risk of having your data
	     ignored.  In situations where interactive programs offer no  ini-
	     tial prompt, you can precede send by a delay as in:

		 # To avoid giving hackers hints on how to break in,
		 # this system does not prompt for an external password.
		 # Wait for 5 seconds for exec to complete
		 spawn telnet very.secure.gov
		 sleep 5
		 send password\r

	     exp_send  is an alias for send.  If you are using Expectk or some
	     other variant of Expect in the Tk environment, send is defined by
	     Tk  for  an entirely different purpose.  exp_send is provided for
	     compatibility between environments.  Similar aliases are provided
	     for other Expect's other send commands.

       send_error [-flags] string
	     is  like  send,  except  that the output is sent to stderr rather
	     than the current process.

       send_log [--] string
	     is like send, except that the string is only sent to the log file
	     (see  log_file.)	The  arguments	are  ignored if no log file is
	     open.

       send_tty [-flags] string
	     is like send, except that the output is sent to  /dev/tty	rather
	     than the current process.

       send_user [-flags] string
	     is  like  send,  except  that the output is sent to stdout rather
	     than the current process.

       sleep seconds
	     causes the script to sleep for the given number of seconds.  Sec-
	     onds  may	be a decimal number.  Interrupts (and Tk events if you
	     are using Expectk) are processed while Expect sleeps.

       spawn [args] program [args]
	     creates a new process running program args.   Its	stdin,	stdout
	     and  stderr are connected to Expect, so that they may be read and
	     written by other Expect commands.	The connection	is  broken  by
	     close  or	if  the  process itself closes any of the file identi-
	     fiers.

	     When a process is started by spawn, the variable spawn_id is  set
	     to a descriptor referring to that process.  The process described
	     by spawn_id is considered the current process.  spawn_id  may  be
	     read or written, in effect providing job control.

	     user_spawn_id  is a global variable containing a descriptor which
	     refers to the user.  For example, when spawn_id is  set  to  this
	     value, expect behaves like expect_user.

	     error_spawn_id is a global variable containing a descriptor which
	     refers to the standard error.  For example, when spawn_id is  set
	     to this value, send behaves like send_error.

	     tty_spawn_id  is  a global variable containing a descriptor which
	     refers to /dev/tty.  If /dev/tty does not exist  (such  as  in  a
	     cron,  at,  or  batch  script), then tty_spawn_id is not defined.
	     This may be tested as:

		 if {[info vars tty_spawn_id]} {
		     # /dev/tty exists
		 } else {
		     # /dev/tty doesn't exist
		     # probably in cron, batch, or at script
		 }


	     spawn returns the UNIX process id.  If no process is  spawned,  0
	     is  returned.   The  variable spawn_out(slave,name) is set to the
	     name of the pty slave device.

	     By default, spawn echoes the command  name  and  arguments.   The
	     -noecho flag stops spawn from doing this.

	     The  -console  flag causes console output to be redirected to the
	     spawned process.  This is not supported on all systems.

	     Internally, spawn uses a pty, initialized the  same  way  as  the
	     user's tty.  This is further initialized so that all settings are
	     ""sane"" (according to stty(1)).   If  the  variable  stty_init  is
	     defined, it is interpreted in the style of stty arguments as fur-
	     ther configuration.  For example, ""set stty_init raw"" will  cause
	     further  spawned  processes's  terminals  to  start  in raw mode.
	     -nottycopy skips the initialization  based  on  the  user's  tty.
	     -nottyinit skips the ""sane"" initialization.

	     Normally,	spawn  takes  little  time  to execute.  If you notice
	     spawn taking a significant amount of time, it is probably encoun-
	     tering  ptys  that are wedged.  A number of tests are run on ptys
	     to avoid entanglements with errant  processes.   (These  take  10
	     seconds  per wedged pty.)	Running Expect with the -d option will
	     show if Expect is encountering many ptys in odd states.   If  you
	     cannot  kill the processes to which these ptys are attached, your
	     only recourse may be to reboot.

	     If program cannot be spawned successfully because	exec(2)  fails
	     (e.g.  when  program  doesn't  exist),  an  error message will be
	     returned by the next interact or expect command as if program had
	     run and produced the error message as output.  This behavior is a
	     natural consequence of the implementation of spawn.   Internally,
	     spawn forks, after which the spawned process has no way to commu-
	     nicate with the original Expect process except  by  communication
	     via the spawn_id.

	     The  -open  flag  causes the next argument to be interpreted as a
	     Tcl file identifier (i.e., returned by open.)  The spawn  id  can
	     then  be used as if it were a spawned process.  (The file identi-
	     fier should no longer be used.)  This lets you treat raw devices,
	     files, and pipelines as spawned processes without using a pty.  0
	     is returned to indicate there is no associated process.  When the
	     connection  to  the spawned process is closed, so is the Tcl file
	     identifier.  The -leaveopen flag is similar to -open except  that
	     -leaveopen  causes the file identifier to be left open even after
	     the spawn id is closed.

	     The -pty flag causes a pty to be opened but no  process  spawned.
	     0	is  returned  to  indicate  there  is  no  associated process.
	     Spawn_id is set as usual.

	     The variable spawn_out(slave,fd) is set to a file identifier cor-
	     responding  to  the  pty  slave.	It  can be closed using ""close
	     -slave"".

	     The -ignore flag names a signal to  be  ignored  in  the  spawned
	     process.	Otherwise,  signals get the default behavior.  Signals
	     are named as  in  the  trap  command,  except  that  each	signal
	     requires a separate flag.

       strace level
	     causes  following statements to be printed before being executed.
	     (Tcl's trace command traces variables.)  level indicates how  far
	     down in the call stack to trace.  For example, the following com-
	     mand runs Expect while tracing the first 4 levels of  calls,  but
	     none below that.

		 expect -c ""strace 4"" script.exp


	     The  -info flag causes strace to return a description of the most
	     recent non-info arguments given.

       stty args
	     changes terminal modes similarly to the external stty command.

	     By default, the controlling terminal is accessed.	 Other	termi-
	     nals can be accessed by appending ""< /dev/tty..."" to the command.
	     (Note that the arguments should not  be  grouped  into  a	single
	     argument.)

	     Requests  for  status return it as the result of the command.  If
	     no status is requested and the controlling terminal is  accessed,
	     the  previous  status of the raw and echo attributes are returned
	     in a form which can later be used by the command.

	     For example, the arguments raw or -cooked put the	terminal  into
	     raw  mode.   The  arguments  -raw or cooked put the terminal into
	     cooked mode.  The arguments echo and -echo put the terminal  into
	     echo and noecho mode respectively.

	     The  following  example  illustrates  how	to temporarily disable
	     echoing.  This could be used in  otherwise-automatic  scripts  to
	     avoid  embedding passwords in them.  (See more discussion on this
	     under EXPECT HINTS below.)

		 stty -echo
		 send_user ""Password: ""
		 expect_user -re ""(.*)\n""
		 set password $expect_out(1,string)
		 stty echo


       system args
	     gives args to sh(1) as input, just as if it had been typed  as  a
	     command  from  a  terminal.   Expect waits until the shell termi-
	     nates.  The return status from sh is handled the  same  way  that
	     exec handles its return status.

	     In  contrast  to  exec  which  redirects  stdin and stdout to the
	     script, system performs no redirection (other than that indicated
	     by  the  string  itself).	 Thus,	it is possible to use programs
	     which must talk directly to /dev/tty.  For the same  reason,  the
	     results of system are not recorded in the log.

       timestamp [args]
	     returns  a  timestamp.   With no arguments, the number of seconds
	     since the epoch is returned.

	     The -format flag introduces a string which is returned  but  with
	     substitutions  made  according  to  the POSIX rules for strftime.
	     For example %a is replaced by an abbreviated weekday name	(i.e.,
	     Sat).  Others are:
		 %a	 abbreviated weekday name
		 %A	 full weekday name
		 %b	 abbreviated month name
		 %B	 full month name
		 %c	 date-time as in: Wed Oct  6 11:45:56 1993
		 %d	 day of the month (01-31)
		 %H	 hour (00-23)
		 %I	 hour (01-12)
		 %j	 day (001-366)
		 %m	 month (01-12)
		 %M	 minute (00-59)
		 %p	 am or pm
		 %S	 second (00-61)
		 %u	 day (1-7, Monday is first day of week)
		 %U	 week (00-53, first Sunday is first day of week one)
		 %V	 week (01-53, ISO 8601 style)
		 %w	 day (0-6)
		 %W	 week (00-53, first Monday is first day of week one)
		 %x	 date-time as in: Wed Oct  6 1993
		 %X	 time as in: 23:59:59
		 %y	 year (00-99)
		 %Y	 year as in: 1993
		 %Z	 timezone (or nothing if not determinable)
		 %%	 a bare percent sign

	     Other  %  specifications are undefined.  Other characters will be
	     passed through untouched.	Only the C locale is supported.

	     The -seconds flag introduces a number of seconds since the  epoch
	     to be used as a source from which to format.  Otherwise, the cur-
	     rent time is used.

	     The -gmt flag forces timestamp output to use  the	GMT  timezone.
	     With no flag, the local timezone is used.

       trap [[command] signals]
	     causes  the  given  command to be executed upon future receipt of
	     any of the given signals.	The command is executed in the	global
	     scope.   If command is absent, the signal action is returned.  If
	     command is the string SIG_IGN, the signals are ignored.  If  com-
	     mand  is the string SIG_DFL, the signals are result to the system
	     default.  signals is either a single signal or a list of signals.
	     Signals  may be specified numerically or symbolically as per sig-
	     nal(3).  The ""SIG"" prefix may be omitted.

	     With no arguments (or the argument  -number),  trap  returns  the
	     signal number of the trap command currently being executed.

	     The  -code  flag  uses the return code of the command in place of
	     whatever code Tcl was about to return when the command originally
	     started running.

	     The  -interp  flag  causes  the command to be evaluated using the
	     interpreter active at the time the command started running rather
	     than when the trap was declared.

	     The  -name flag causes the trap command to return the signal name
	     of the trap command currently being executed.

	     The -max flag causes the trap command to return the largest  sig-
	     nal number that can be set.

	     For  example,  the command ""trap {send_user ""Ouch!""} SIGINT"" will
	     print ""Ouch!""  each time the user presses ^C.

	     By default, SIGINT (which can usually be  generated  by  pressing
	     ^C) and SIGTERM cause Expect to exit.  This is due to the follow-
	     ing trap, created by default when Expect starts.

		 trap exit {SIGINT SIGTERM}

	     If you use the -D flag to start the debugger, SIGINT is redefined
	     to  start the interactive debugger.  This is due to the following
	     trap:

		 trap {exp_debug 1} SIGINT

	     The debugger trap can be changed by setting the environment vari-
	     able EXPECT_DEBUG_INIT to a new trap command.

	     You  can,	of  course, override both of these just by adding trap
	     commands to your script.  In particular, if  you  have  your  own
	     ""trap  exit  SIGINT"", this will override the debugger trap.  This
	     is useful if you want to prevent users from getting to the debug-
	     ger at all.

	     If  you  want to define your own trap on SIGINT but still trap to
	     the debugger when it is running, use:

		 if {![exp_debug]} {trap mystuff SIGINT}

	     Alternatively, you can trap to the debugger using some other sig-
	     nal.

	     trap  will not let you override the action for SIGALRM as this is
	     used internally to Expect.  The disconnect command  sets  SIGALRM
	     to  SIG_IGN  (ignore).  You can reenable this as long as you dis-
	     able it during subsequent spawn commands.

	     See signal(3) for more info.

       wait [args]
	     delays until a spawned process (or the current process if none is
	     named) terminates.

	     wait normally returns a list of four integers.  The first integer
	     is the pid of the process that was waited upon.  The second inte-
	     ger is the corresponding spawn id.  The third integer is -1 if an
	     operating system error occurred, or 0 otherwise.	If  the  third
	     integer  was  0, the fourth integer is the status returned by the
	     spawned process.  If the third integer was -1, the fourth integer
	     is  the  value  of errno set by the operating system.  The global
	     variable errorCode is also set.

	     Additional elements may appear at the end	of  the  return  value
	     from  wait.   An  optional  fifth	element  identifies a class of
	     information.  Currently, the only possible value for this element
	     is  CHILDKILLED in which case the next two values are the C-style
	     signal name and a short textual description.

	     The -i flag declares the process to  wait	corresponding  to  the
	     named  spawn_id  (NOT the process id).  Inside a SIGCHLD handler,
	     it is possible to wait for any spawned process by using the spawn
	     id -1.

	     The  -nowait  flag causes the wait to return immediately with the
	     indication of a successful wait.  When the process exits (later),
	     it  will automatically disappear without the need for an explicit
	     wait.

	     The wait command may also be used wait for a forked process using
	     the  arguments  ""-i  -1"".	Unlike its use with spawned processes,
	     this command can be executed at any time.	There  is  no  control
	     over  which  process is reaped.  However, the return value can be
	     checked for the process id.


LIBRARIES
       Expect automatically knows about  two  built-in	libraries  for	Expect
       scripts.   These  are defined by the directories named in the variables
       exp_library and exp_exec_library.  Both are meant  to  contain  utility
       files that can be used by other scripts.

       exp_library  contains architecture-independent files.  exp_exec_library
       contains architecture-dependent files.  Depending on your system,  both
       directories   may   be  totally	empty.	 The  existence  of  the  file
       $exp_exec_library/cat-buffers describes whether your  /bin/cat  buffers
       by default.

PRETTY-PRINTING
       A  vgrind  definition  is available for pretty-printing Expect scripts.
       Assuming the vgrind definition supplied with the Expect distribution is
       correctly installed, you can use it as:

	   vgrind -lexpect file


EXAMPLES
       It  many  not  be  apparent how to put everything together that the man
       page describes.	I encourage you to read and try out  the  examples  in
       the  example  directory	of  the Expect distribution.  Some of them are
       real programs.  Others are simply illustrative of  certain  techniques,
       and  of	course, a couple are just quick hacks.	The INSTALL file has a
       quick overview of these programs.

       The Expect papers (see SEE ALSO) are also useful.   While  some	papers
       use  syntax corresponding to earlier versions of Expect, the accompany-
       ing rationales are still valid and go into a lot more detail than  this
       man page.

CAVEATS
       Extensions  may collide with Expect's command names.  For example, send
       is defined by Tk for an entirely different purpose.  For  this  reason,
       most of the Expect commands are also available as ""exp_XXXX"".  Commands
       and variables beginning with ""exp"", ""inter"", ""spawn"", and ""timeout""  do
       not have aliases.  Use the extended command names if you need this com-
       patibility between environments.

       Expect takes a rather liberal view of scoping.	In  particular,  vari-
       ables  read  by	commands specific to the Expect program will be sought
       first from the local scope, and if not found, in the global scope.  For
       example, this obviates the need to place ""global timeout"" in every pro-
       cedure you write that uses expect.  On the other hand, variables  writ-
       ten  are  always in the local scope (unless a ""global"" command has been
       issued).  The most common problem this causes is when spawn is executed
       in  a  procedure.  Outside the procedure, spawn_id no longer exists, so
       the spawned process is no longer accessible simply because of  scoping.
       Add a ""global spawn_id"" to such a procedure.

       If  you	cannot	enable the multispawning capability (i.e., your system
       supports neither select (BSD *.*), poll (SVR>2), nor something  equiva-
       lent),  Expect will only be able to control a single process at a time.
       In this case, do not attempt to set spawn_id, nor  should  you  execute
       processes  via  exec  while a spawned process is running.  Furthermore,
       you will not be able to expect from multiple processes  (including  the
       user as one) at the same time.

       Terminal  parameters can have a big effect on scripts.  For example, if
       a script is written to look for echoing, it will misbehave  if  echoing
       is turned off.  For this reason, Expect forces sane terminal parameters
       by default.  Unfortunately, this can make things unpleasant  for  other
       programs.   As  an example, the emacs shell wants to change the ""usual""
       mappings: newlines get mapped to newlines  instead  of  carriage-return
       newlines,  and  echoing	is  disabled.  This allows one to use emacs to
       edit the input line.  Unfortunately, Expect cannot possibly guess this.

       You  can request that Expect not override its default setting of termi-
       nal parameters, but you must then be very careful when writing  scripts
       for  such  environments.   In  the  case of emacs, avoid depending upon
       things like echoing and end-of-line mappings.

       The commands that accepted arguments braced into  a  single  list  (the
       expect  variants and interact) use a heuristic to decide if the list is
       actually one argument or many.  The heuristic can fail only in the case
       when  the list actually does represent a single argument which has mul-
       tiple embedded \n's with non-whitespace characters between them.   This
       seems  sufficiently  improbable, however the argument ""-nobrace"" can be
       used to force a single argument to be handled  as  a  single  argument.
       This  could  conceivably  be  used  with machine-generated Expect code.
       Similarly, -brace forces a single argument to  be  handle  as  multiple
       patterns/actions.


BUGS
       It  was	really	tempting  to name the program ""sex"" (for either ""Smart
       EXec"" or ""Send-EXpect""), but good sense (or  perhaps  just  Puritanism)
       prevailed.

       On  some systems, when a shell is spawned, it complains about not being
       able to access the tty but runs anyway.	This means your system	has  a
       mechanism  for  gaining	the  controlling  tty that Expect doesn't know
       about.  Please find out what it is, and send this information  back  to
       me.

       Ultrix  4.1  (at least the latest versions around here) considers time-
       outs of above 1000000 to be equivalent to 0.

       Digital UNIX 4.0A (and probably other  versions)  refuses  to  allocate
       ptys  if you define a SIGCHLD handler.  See grantpt page for more info.

       IRIX 6.0 does not handle pty permissions correctly so  that  if	Expect
       attempts  to  allocate a pty previously used by someone else, it fails.
       Upgrade to IRIX 6.1.

       Telnet (verified only under SunOS 4.1.2) hangs  if  TERM  is  not  set.
       This  is  a  problem  under  cron,  at and in cgi scripts, which do not
       define TERM.  Thus, you must set it explicitly - to what type  is  usu-
       ally  irrelevant.   It  just has to be set to something!  The following
       probably suffices for most cases.

	   set env(TERM) vt100


       Tip (verified only under BSDI BSD/OS 3.1 i386) hangs if SHELL and  HOME
       are  not  set.	This  is  a problem under cron, at and in cgi scripts,
       which do not define these environment variables.  Thus,	you  must  set
       them  explicitly  - to what type is usually irrelevant.	It just has to
       be set to something!  The following probably suffices for most cases.

	   set env(SHELL) /bin/sh
	   set env(HOME) /usr/local/bin



       Some implementations of ptys are designed so  that  the	kernel	throws
       away  any unread output after 10 to 15 seconds (actual number is imple-
       mentation-dependent) after the process has closed the file  descriptor.
       Thus Expect programs such as

	   spawn date
	   sleep 20
	   expect

       will  fail.   To  avoid this, invoke non-interactive programs with exec
       rather than spawn.  While such situations are conceivable, in  practice
       I  have	never  encountered  a situation in which the final output of a
       truly interactive program would be lost due to this behavior.

       On the other hand, Cray UNICOS ptys throw away any unread output  imme-
       diately	after  the  process  has  closed  the file descriptor.	I have
       reported this to Cray and they are working on a fix.

       Sometimes a delay is required between a prompt and a response, such  as
       when  a	tty interface is changing UART settings or matching baud rates
       by looking for start/stop bits.	Usually, all this  is  require	is  to
       sleep  for  a second or two.  A more robust technique is to retry until
       the hardware is ready to receive input.	 The  following  example  uses
       both strategies:

	   send ""speed 9600\r"";
	   sleep 1
	   expect {
	       timeout {send ""\r""; exp_continue}
	       $prompt
	   }


       trap  -code  will  not  work  with any command that sits in Tcl's event
       loop, such as sleep.  The problem is that in the event loop,  Tcl  dis-
       cards  the  return codes from async event handlers.  A workaround is to
       set a flag in the trap code.  Then check the flag immediately after the
       command (i.e., sleep).

       The  expect_background  command	ignores  -timeout arguments and has no
       concept of timeouts in general.


EXPECT HINTS
       There are a couple of things about Expect that  may  be	non-intuitive.
       This  section attempts to address some of these things with a couple of
       suggestions.

       A common expect problem is how to recognize shell prompts.  Since these
       are  customized differently by differently people and different shells,
       portably automating rlogin can be difficult without knowing the prompt.
       A  reasonable  convention  is  to have users store a regular expression
       describing their prompt (in particular, the end of it) in the  environ-
       ment  variable EXPECT_PROMPT.  Code like the following can be used.  If
       EXPECT_PROMPT doesn't exist, the code still has a good chance of  func-
       tioning correctly.

	   set prompt ""(%|#|\\$) $""	     ;# default prompt
	   catch {set prompt $env(EXPECT_PROMPT)}

	   expect -re $prompt

       I  encourage you to write expect patterns that include the end of what-
       ever you expect to see.	This avoids the  possibility  of  answering  a
       question  before  seeing  the entire thing.  In addition, while you may
       well be able to answer questions before seeing them  entirely,  if  you
       answer  early,  your answer may appear echoed back in the middle of the
       question.  In other words, the resulting dialogue will be  correct  but
       look scrambled.

       Most  prompts  include  a space character at the end.  For example, the
       prompt from ftp is 'f', 't', 'p',  '>'  and  <blank>.   To  match  this
       prompt,	you must account for each of these characters.	It is a common
       mistake not to include the blank.  Put the blank in explicitly.

       If you use a pattern of the form X*, the * will match  all  the	output
       received  from  the  end  of X to the last thing received.  This sounds
       intuitive but can be somewhat confusing because the phrase ""last  thing
       received""  can  vary  depending	upon the speed of the computer and the
       processing of I/O both by the kernel and the device driver.

       In particular, humans tend to  see  program  output  arriving  in  huge
       chunks  (atomically)  when  in reality most programs produce output one
       line at a time.	Assuming this is the case, the * in the pattern of the
       previous  paragraph  may  only  match  the end of the current line even
       though there seems to be more, because at the time of  the  match  that
       was all the output that had been received.

       expect  has no way of knowing that further output is coming unless your
       pattern specifically accounts for it.

       Even depending on line-oriented buffering is unwise.  Not only do  pro-
       grams  rarely  make  promises  about the type of buffering they do, but
       system indigestion can break output lines up so	that  lines  break  at
       seemingly random places.  Thus, if you can express the last few charac-
       ters of a prompt when writing patterns, it is wise to do so.

       If you are waiting for a pattern in the last output of  a  program  and
       the  program  emits  something  else  instead,  you will not be able to
       detect that with the timeout keyword.  The reason is that  expect  will
       not timeout - instead it will get an eof indication.  Use that instead.
       Even better, use both.  That way if that line is ever moved around, you
       won't have to edit the line itself.

       Newlines  are  usually converted to carriage return, linefeed sequences
       when output by the terminal driver.  Thus, if you want a  pattern  that
       explicitly  matches  the  two lines, from, say, printf(""foo\nbar""), you
       should use the pattern ""foo\r\nbar"".

       A  similar  translation	occurs	when  reading  from  the   user,   via
       expect_user.   In  this	case, when you press return, it will be trans-
       lated to a newline.  If Expect then passes that to a program which sets
       its terminal to raw mode (like telnet), there is going to be a problem,
       as the program expects a true return.  (Some programs are actually for-
       giving  in  that they will automatically translate newlines to returns,
       but most don't.)  Unfortunately, there is no way to  find  out  that  a
       program put its terminal into raw mode.

       Rather  than  manually replacing newlines with returns, the solution is
       to use the command ""stty raw"", which will stop the translation.	 Note,
       however,  that  this means that you will no longer get the cooked line-
       editing features.

       interact implicitly sets your terminal to raw mode so this problem will
       not arise then.

       It is often useful to store passwords (or other private information) in
       Expect scripts.	This is not recommended since anything that is	stored
       on a computer is susceptible to being accessed by anyone.  Thus, inter-
       actively prompting for passwords from a script is a smarter  idea  than
       embedding them literally.  Nonetheless, sometimes such embedding is the
       only possibility.

       Unfortunately, the UNIX file system  has  no  direct  way  of  creating
       scripts	which  are  executable	but unreadable.  Systems which support
       setgid shell scripts may indirectly simulate this as follows:

       Create the Expect script (that contains	the  secret  data)  as	usual.
       Make  its permissions be 750 (-rwxr-x---) and owned by a trusted group,
       i.e., a group which is allowed to read it.  If necessary, create a  new
       group for this purpose.	Next, create a /bin/sh script with permissions
       2751 (-rwxr-s--x) owned by the same group as before.

       The result is a script which may be  executed  (and  read)  by  anyone.
       When invoked, it runs the Expect script.

SEE ALSO
       Tcl(3), libexpect(3)
       ""Exploring  Expect: A Tcl-Based Toolkit for Automating Interactive Pro-
       grams"" by Don Libes, pp. 602, ISBN 1-56592-090-2,  O'Reilly  and  Asso-
       ciates, 1995.
       ""expect:  Curing  Those	Uncontrollable	Fits  of Interactivity"" by Don
       Libes, Proceedings of the Summer 1990 USENIX Conference, Anaheim, Cali-
       fornia, June 11-15, 1990.
       ""Using  expect  to  Automate System Administration Tasks"" by Don Libes,
       Proceedings of the 1990 USENIX Large Installation  Systems  Administra-
       tion Conference, Colorado Springs, Colorado, October 17-19, 1990.
       ""Tcl:  An  Embeddable Command Language"" by John Ousterhout, Proceedings
       of the Winter 1990 USENIX Conference, Washington, D.C., January	22-26,
       1990.
       ""expect:  Scripts  for  Controlling Interactive Programs"" by Don Libes,
       Computing Systems, Vol. 4, No. 2, University of California Press  Jour-
       nals, November 1991.
       ""Regression  Testing  and Conformance Testing Interactive Programs"", by
       Don Libes, Proceedings  of  the	Summer	1992  USENIX  Conference,  pp.
       135-144, San Antonio, TX, June 12-15, 1992.
       ""Kibitz	-  Connecting  Multiple Interactive Programs Together"", by Don
       Libes, Software - Practice & Experience, John Wiley & Sons,  West  Sus-
       sex, England, Vol. 23, No. 5, May, 1993.
       ""A  Debugger  for  Tcl  Applications"", by Don Libes, Proceedings of the
       1993 Tcl/Tk Workshop, Berkeley, CA, June 10-11, 1993.

AUTHOR
       Don Libes, National Institute of Standards and Technology

ACKNOWLEDGMENTS
       Thanks to John Ousterhout for Tcl, and Scott Paisley  for  inspiration.
       Thanks to Rob Savoye for Expect's autoconfiguration code.

       The  HISTORY  file documents much of the evolution of expect.  It makes
       interesting reading and might give you further insight  to  this  soft-
       ware.   Thanks  to the people mentioned in it who sent me bug fixes and
       gave other assistance.

       Design and implementation of Expect was paid for in part  by  the  U.S.
       government  and	is therefore in the public domain.  However the author
       and NIST would like credit if this program and  documentation  or  por-
       tions of them are used.



			       29 December 1994 		     EXPECT(1)
","# expect

> Script executor that interacts with other programs that require user input.
> More information: <https://linux.die.net/man/1/expect>.

- Execute an expect script from a file:

`expect {{path/to/file}}`

- Execute a specified expect script:

`expect -c ""{{commands}}""`

- Enter an interactive REPL (use `exit` or Ctrl + D to exit):

`expect -i`
"
dockerd,https://docs.docker.com/engine/reference/commandline/dockerd/,,"# dockerd

> A persistent process to start and manage docker containers.
> More information: <https://docs.docker.com/engine/reference/commandline/dockerd/>.

- Run docker daemon:

`dockerd`

- Run docker daemon and config it to listen to specific sockets(unix,tcp):

`dockerd --host unix://{{path/to/tmp.sock}} --host tcp://{{ip}}`

- Run with specific daemon PID file:

`dockerd --pidfile {{path/to/pid_file}}`

- Run in debug mode:

`dockerd --debug`

- Run and set a specific log level:

`dockerd --log-level={{debug|info|warn|error|fatal}}`
"
mkfs.cramfs,,,"# mkfs.cramfs

> Creates a ROM filesystem inside a partition.

- Create a ROM filesystem inside partition 1 on device b (`sdb1`):

`mkfs.cramfs {{/dev/sdb1}}`

- Create a ROM filesystem with a volume-name:

`mkfs.cramfs -n {{volume_name}} {{/dev/sdb1}}`
"
smbclient,,,"# smbclient

> FTP-like client to access SMB/CIFS resources on servers.

- Connect to a share (user will be prompted for password; `exit` to quit the session):

`smbclient {{//server/share}}`

- Connect with a different username:

`smbclient {{//server/share}} --user {{username}}`

- Connect with a different workgroup:

`smbclient {{//server/share}} --workgroup {{domain}} --user {{username}}`

- Connect with a username and password:

`smbclient {{//server/share}} --user {{username%password}}`

- Download a file from the server:

`smbclient {{//server/share}} --directory {{path/to/directory}} --command ""get {{file.txt}}""`

- Upload a file to the server:

`smbclient {{//server/share}} --directory {{path/to/directory}} --command ""put {{file.txt}}""`
"
cryptsetup,,,"# cryptsetup

> Manage plain dm-crypt and LUKS (Linux Unified Key Setup) encrypted volumes.

- Initialize a LUKS volume (overwrites all data on the partition):

`cryptsetup luksFormat {{/dev/sda1}}`

- Open a LUKS volume and create a decrypted mapping at /dev/mapper/{{target}}:

`cryptsetup luksOpen {{/dev/sda1}} {{target}}`

- Remove an existing mapping:

`cryptsetup luksClose {{target}}`

- Change the LUKS volume's passphrase:

`cryptsetup luksChangeKey {{/dev/sda1}}`
"
userdel,,,"# userdel

> Remove a user.

- Remove a user and their home directory:

`userdel -r {{name}}`
"
logcat,https://developer.android.com/studio/command-line/logcat,,"# logcat

> Dump a log of system messages.
> Native Android CLI tool.
> More information: <https://developer.android.com/studio/command-line/logcat>.

- Display system logs:

`logcat`

- Write system logs to a file:

`logcat -f {{path/to/file}}`

- Display lines that match a regex:

`logcat --regex {{regex}}`
"
resize2fs,,,"# resize2fs

> Resize an ext2, ext3 or ext4 filesystem.
> Does not resize the underlying partition, and the filesystem must be unmounted.

- Automatically resize a filesystem:

`resize2fs {{/dev/sdXN}}`

- Resize the filesystem to a size of 40G, displaying a progress bar:

`resize2fs -p {{/dev/sdXN}} {{40G}}`

- Shrink the filesystem to its minimum possible size:

`resize2fs -M {{/dev/sdXN}}`
"
service,,,"# service

> Manage services by running init scripts.
> The full script path should be omitted (/etc/init.d/ is assumed).

- Start/Stop/Restart/Reload service (start/stop should always be available):

`service {{init_script}} {{start|stop|restart|reload}}`

- Do a full restart (runs script twice with start and stop):

`service {{init_script}} --full-restart`

- Show the current status of a service:

`service {{init_script}} status`

- List the status of all services:

`service --status-all`
"
ac,,"
AC(8)			  BSD System Manager's Manual			 AC(8)

NAME
     ac -- display connect-time accounting

SYNOPSIS
     ac [-d] [-p] [-w file] [users ...]

DESCRIPTION
     A record of individual login and logout times are written to the system
     log by login(8) and launchd(8), respectively.  The program ac examines
     these records and writes the accumulated connect time (in decimal hours)
     for all logins to the standard output.

     Options available:

     -d      Display the connect times in 24 hour chunks.

     -p      Display individual user totals.

     -w file
	     Read raw connect time data from file, instead of the system log.

     users ...
	     Display totals for the given individuals only.

     If no arguments are given, ac displays the total amount of login time for
     all active accounts on the system.

SEE ALSO
     login(1), utmpx(5), launchd(8), sa(8)

HISTORY
     An ac command appeared in Version 6 AT&T UNIX.

4th Berkeley Distribution	April 19, 1994	     4th Berkeley Distribution
","# ac

> Print statistics on how long users have been connected.

- Print how long the current user has been connected in hours:

`ac`

- Print how long users have been connected in hours:

`ac --individual-totals`

- Print how long a particular user has been connected in hours:

`ac --individual-totals {{username}}`

- Print how long a particular user has been connected in hours per day (with total):

`ac --daily-totals --individual-totals {{username}}`
"
pacaur,,,"# pacaur

> A utility for Arch Linux to build and install packages from the Arch User Repository.

- Synchronize and update all packages (includes AUR):

`pacaur -Syu`

- Synchronize and update only AUR packages:

`pacaur -Syua`

- Install a new package (includes AUR):

`pacaur -S {{package_name}}`

- Remove a package and its dependencies (includes AUR packages):

`pacaur -Rs {{package_name}}`

- Search the package database for a keyword (includes AUR):

`pacaur -Ss {{keyword}}`

- List all currently installed packages (includes AUR packages):

`pacaur -Qs`
"
yay,,,"# yay

> Yet Another Yogurt: A utility for Arch Linux to build and install packages from the Arch User Repository.
> Also see `pacman`.

- Interactively search and install packages from the repos and AUR:

`yay {{package_name|search_term}}`

- Synchronize and update all packages from the repos and AUR:

`yay`

- Synchronize and update only AUR packages:

`yay -Sua`

- Install a new package from the repos and AUR:

`yay -S {{package_name}}`

- Search the package database for a keyword from the repos and AUR:

`yay -Ss {{keyword}}`

- Show statistics for installed packages and system health:

`yay -Ps`
"
pwgen,,,"# pwgen

> Generate pronounceable passwords.

- Generate random password with s[y]mbols:

`pwgen -y {{length}}`

- Generate secure, hard-to-memorize passwords:

`pwgen -s {{length}}`

- Generate password with at least one capital letter in them:

`pwgen -c {{length}}`
"
newgrp,,"
NEWGRP(1)		  BSD General Commands Manual		     NEWGRP(1)

NAME
     newgrp -- change to a new group

SYNOPSIS
     newgrp [-l] [group]

DESCRIPTION
     The newgrp utility creates a new shell execution environment with modi-
     fied real and effective group IDs.

     The options are as follows:

     -l      Simulate a full login.  The environment and umask are set to what
	     would be expected if the user actually logged in again.

     If the group operand is present, a new shell is started with the speci-
     fied effective and real group IDs.  The user will be prompted for a pass-
     word if they are not a member of the specified group.

     Otherwise, the real, effective and supplementary group IDs are restored
     to those from the current user's password database entry.

EXIT STATUS
     The newgrp utility attempts to start the shell regardless of whether
     group IDs were successfully changed.

     If an error occurs and the shell cannot be started, newgrp exits >0.
     Otherwise, the exit status of newgrp is the exit status of the shell.

SEE ALSO
     csh(1), groups(1), login(1), sh(1), su(1), umask(1), group(5), passwd(5),
     environ(7)

STANDARDS
     The newgrp utility conforms to IEEE Std 1003.1-2001 (``POSIX.1'').

HISTORY
     A newgrp utility appeared in Version 6 AT&T UNIX.

BUGS
     Group passwords are inherently insecure as there is no way to stop users
     obtaining the crypted passwords from the group database.  Their use is
     discouraged.

BSD				 May 23, 2002				   BSD
","# newgrp

> Switch primary group membership.

- Change user's primary group membership:

`newgrp {{group_name}}`

- Reset primary group membership to user's default group in /etc/passwd:

`newgrp`
"
genie,https://github.com/arkane-systems/genie,,"# genie

> Set up and use a ""bottle"" namespace to run systemd under WSL (Windows Subsystem for Linux).
> To run these from Windows rather than an already-running distribution, precede them with `wsl`.
> More information: <https://github.com/arkane-systems/genie>.

- Initialize the bottle (run once, at start):

`genie -i`

- Run a login shell inside the bottle:

`genie -s`

- Run a specified command inside the bottle:

`genie -c {{command}}`
"
apport-bug,https://wiki.ubuntu.com/Apport,,"# apport-bug

> File a bug report on Ubuntu.
> More information: <https://wiki.ubuntu.com/Apport>.

- Report a bug about the whole system:

`apport-bug`

- Report a bug about a specific package:

`apport-bug {{package}}`

- Report a bug about a specific executable:

`apport-bug {{path/to/executable}}`

- Report a bug about a specific process:

`apport-bug {{PID}}`
"
uvcdynctrl,,,"# uvcdynctrl

> A libwebcam command line tool to manage dynamic controls in uvcvideo.

- List all available cameras:

`uvcdynctrl -l`

- Specify the device to use (defaults to `video0`):

`uvcdynctrl -d {{device_name}}`

- List available controls:

`uvcdynctrl -c`

- Set a new control value (for negative values, add -- before {{-value}}):

`uvcdynctrl -s {{control_name}} {{value}}`

- Get the current control value:

`uvcdynctrl -g {{control_name}}`

- Save the state of the current controls to a file:

`uvcdynctrl -W {{filename}}`

- Load the state of the controls from a file:

`uvcdynctrl -L {{filename}}`
"
tree,,"TREE(1) 							       TREE(1)



NAME
       tree - list contents of directories in a tree-like format.

SYNOPSIS
       tree  [-acdfghilnpqrstuvxACDFQNSUX]  [-L  level [-R]] [-H baseHREF] [-T
       title] [-o filename] [--nolinks] [-P pattern] [-I  pattern]  [--inodes]
       [--device] [--noreport] [--dirsfirst] [--version] [--help] [--filelimit
       #] [--si] [--prune] [--du] [--timefmt  format]  [--matchdirs]  [--from-
       file] [--] [directory ...]


DESCRIPTION
       Tree  is  a  recursive  directory listing program that produces a depth
       indented listing of files, which is  colorized  ala  dircolors  if  the
       LS_COLORS  environment  variable  is set and output is to tty.  With no
       arguments, tree lists the files in the current directory.  When	direc-
       tory  arguments	are given, tree lists all the files and/or directories
       found in the given directories each in turn.  Upon completion of  list-
       ing all files/directories found, tree returns the total number of files
       and/or directories listed.

       By default, when a symbolic link is encountered, the path that the sym-
       bolic  link refers to is printed after the name of the link in the for-
       mat:

	   name -> real-path

       If the `-l' option is given and the symbolic link refers to  an	actual
       directory, then tree will follow the path of the symbolic link as if it
       were a real directory.


OPTIONS
       Tree understands the following command line switches:


LISTING OPTIONS
       -a     All files are printed.  By default tree does  not  print	hidden
	      files  (those  beginning with a dot `.').  In no event does tree
	      print the file system constructs	`.'  (current  directory)  and
	      `..' (previous directory).


       -d     List directories only.


       -l     Follows  symbolic links if they point to directories, as if they
	      were directories. Symbolic links that will result  in  recursion
	      are avoided when detected.


       -f     Prints the full path prefix for each file.


       -x     Stay on the current file-system only.  Ala find -xdev.


       -L level
	      Max display depth of the directory tree.


       -R     Recursively  cross  down the tree each level directories (see -L
	      option), and at each of  them  execute  tree  again  adding  `-o
	      00Tree.html' as a new option.


       -P pattern
	      List  only  those files that match the wild-card pattern.  Note:
	      you must use the -a option to also consider those  files	begin-
	      ning with a dot `.'  for matching.  Valid wildcard operators are
	      `*' (any zero or more characters), `?' (any  single  character),
	      `[...]'  (any single character listed between brackets (optional
	      - (dash) for character  range  may  be  used:  ex:  [A-Z]),  and
	      `[^...]'	(any  single character not listed in brackets) and `|'
	      separates alternate patterns.


       -I pattern
	      Do not list those files that match the wild-card pattern.


       --ignore-case
	      If a match pattern is specified by the -P  or  -I  option,  this
	      will  cause  the pattern to match without regards to the case of
	      each letter.


       --matchdirs
	      If a match pattern is specified by  the  -P  option,  this  will
	      cause  the pattern to be applied to directory names (in addition
	      to filenames).  In the event of a match on the  directory  name,
	      matching	is  disabled  for  the	directory's  contents.	If the
	      --prune option is used, empty folders  that  match  the  pattern
	      will not be pruned.


       --prune
	      Makes  tree prune empty directories from the output, useful when
	      used in conjunction with -P or -I.  See BUGS AND NOTES below for
	      more information on this option.


       --noreport
	      Omits  printing  of  the file and directory report at the end of
	      the tree listing.


       --charset charset
	      Set the character set to use when outputting HTML and  for  line
	      drawing.


       --filelimit #
	      Do not descend directories that contain more than # entries.


       --timefmt format
	      Prints (implies -D) and formats the date according to the format
	      string which uses the strftime(3) syntax.


       -o filename
	      Send output to filename.



FILE OPTIONS
       -q     Print non-printable characters in filenames  as  question  marks
	      instead of the default.


       -N     Print non-printable characters as is instead of as escaped octal
	      numbers.


       -Q     Quote the names of files in double quotes.


       -p     Print the file type and permissions for each  file  (as  per  ls
	      -l).


       -u     Print the username, or UID # if no username is available, of the
	      file.


       -g     Print the group name, or GID # if no group name is available, of
	      the file.


       -s     Print the size of each file in bytes along with the name.


       -h     Print  the  size	of each file but in a more human readable way,
	      e.g. appending a size letter for kilobytes (K),  megabytes  (M),
	      gigabytes (G), terabytes (T), petabytes (P) and exabytes (E).


       --si   Like -h but use SI units (powers of 1000) instead.


       --du   For  each directory report its size as the accumulation of sizes
	      of all its files and sub-directories (and their  files,  and  so
	      on).   The total amount of used space is also given in the final
	      report (like the 'du -c' command.) This option requires tree  to
	      read  the entire directory tree before emitting it, see BUGS AND
	      NOTES below.  Implies -s.


       -D     Print the date of the last modification time or if -c  is  used,
	      the last status change time for the file listed.


       -F     Append  a `/' for directories, a `=' for socket files, a `*' for
	      executable files, a `>'  for  doors  (Solaris)  and  a  `|'  for
	      FIFO's, as per ls -F


       --inodes
	      Prints the inode number of the file or directory


       --device
	      Prints the device number to which the file or directory belongs



SORTING OPTIONS
       -v     Sort the output by version.


       -t     Sort  the output by last modification time instead of alphabeti-
	      cally.


       -c     Sort the output by last status change instead of alphabetically.
	      Modifies the -D option (if used) to print the last status change
	      instead of modification time.


       -U     Do not sort.  Lists files in directory order.  Disables  --dirs-
	      first.


       -r     Sort  the  output  in  reverse  order.  This is a meta-sort that
	      alter the above sorts.  This option is disabled when -U is used.


       --dirsfirst
	      List  directories  before files. This is a meta-sort that alters
	      the above sorts.	This option is disabled when -U is used.


       --sort[=]type
	      Sort the output by type instead of name.	Possible  values  are:
	      ctime (-c), mtime (-t), size, or version (-v).


GRAPHICS OPTIONS
       -i     Makes  tree not print the indentation lines, useful when used in
	      conjunction with the -f option.  Also removes as much whitespace
	      as possible when used with the -J or -x options.


       -A     Turn  on	ANSI  line graphics hack when printing the indentation
	      lines.


       -S     Turn on CP437 line graphics (useful  when  using	Linux  console
	      mode fonts). This option is now equivalent to `--charset=IBM437'
	      and may eventually be depreciated.


       -n     Turn colorization off always, over-ridden by the -C option.


       -C     Turn colorization on always, using built-in  color  defaults  if
	      the  LS_COLORS or TREE_COLORS environment variables are not set.
	      Useful to colorize output to a pipe.



XML/JSON/HTML OPTIONS
       -X     Turn on XML output. Outputs the directory tree as an XML format-
	      ted file.


       -J     Turn  on JSON output. Outputs the directory tree as an JSON for-
	      matted array.


       -H baseHREF
	      Turn on HTML output, including HTTP references. Useful  for  ftp
	      sites.   baseHREF  gives	the  base ftp location when using HTML
	      output. That is, the local directory  may  be  `/local/ftp/pub',
	      but   it	 must	be   referenced  as  `ftp://hostname.organiza-
	      tion.domain/pub' (baseHREF should  be  `ftp://hostname.organiza-
	      tion.domain').  Hint: don't use ANSI lines with this option, and
	      don't give more than one directory in the directory list. If you
	      wish  to	use  colors  via CSS style-sheet, use the -C option in
	      addition to this option to force color output.


       -T title
	      Sets the title and H1 header string in HTML output mode.


       --nolinks
	      Turns off hyperlinks in HTML output.



INPUT OPTIONS
       --fromfile Reads a directory listing from a file rather than the  file-
       system.	 Paths	provided  on  the  command line are files to read from
       rather than directories to search.  The	dot  (.)  directory  indicates
       that tree should read paths from standard input.


MISC OPTIONS
       --help Outputs a verbose usage listing.


       --version
	      Outputs the version of tree.


       --     Option  processing  terminator.  No further options will be pro-
	      cessed after this.



FILES
       /etc/DIR_COLORS		System color database.
       ~/.dircolors	   Users color database.


ENVIRONMENT
       LS_COLORS      Color information created by dircolors
       TREE_COLORS    Uses this for color information over LS_COLORS if it  is
       set.
       TREE_CHARSET   Character set for tree to use in HTML mode.
       CLICOLOR       Enables colorization even if TREE_COLORS or LS_COLORS is
       not set.
       CLICOLOR_FORCE Always enables colorization (effectively -C)
       LC_CTYPE       Locale for filename output.
       LC_TIME	      Locale for timefmt output, see strftime(3).
       TZ	 Timezone for timefmt output, see strftime(3).


AUTHOR
       Steve Baker (ice@mama.indstate.edu)
       HTML output hacked by Francesc Rocher (rocher@econ.udg.es)
       Charsets and OS/2 support by Kyosuke Tokoro (NBG01720@nifty.ne.jp)


BUGS AND NOTES
       Tree does not prune ""empty"" directories when the -P and -I options  are
       used by default. Use the --prune option.

       The -h and --si options round to the nearest whole number unlike the ls
       implementations which rounds up always.

       Pruning files and directories with the -I, -P and  --filelimit  options
       will lead to incorrect file/directory count reports.

       The  --prune  and --du options cause tree to accumulate the entire tree
       in memory before emitting it. For large directory trees this can  cause
       a significant delay in output and the use of large amounts of memory.

       The  timefmt  expansion	buffer	is limited to a ridiculously large 255
       characters.  Output of time strings longer than this will be undefined,
       but are guaranteed to not exceed 255 characters.

       XML/JSON trees are not colored, which is a bit of a shame.

       Probably more.


SEE ALSO
       dircolors(1), ls(1), find(1), du(1), strftime(3)



Tree 1.8.0							       TREE(1)
","# tree

> Show the contents of the current directory as a tree.

- Print files and directories up to 'num' levels of depth (where 1 means the current directory):

`tree -L {{num}}`

- Print directories only:

`tree -d`

- Print hidden files too:

`tree -a`

- Print the tree without indentation lines, showing the full path instead (use `-N` to not escape whitespace and special characters):

`tree -i -f`

- Print the size of each node next to it, in human-readable format:

`tree -s -h`

- Filter the tree using a wildcard (glob) pattern:

`tree -P {{*.txt}}`

- Ignore entries that match a wildcard (glob) pattern:

`tree -I {{*.txt}}`

- Print the tree ignoring the given directories:

`tree -I '{{directory_name1|directory_name2}}'`
"
a2dismod,https://manpages.debian.org/buster/apache2/a2dismod.8.en.html,,"# a2dismod

> Disable an Apache module on Debian-based OSes.
> More information: <https://manpages.debian.org/buster/apache2/a2dismod.8.en.html>.

- Disable a module:

`sudo a2dismod {{module}}`

- Don't show informative messages:

`sudo a2dismod --quiet {{module}}`
"
lvresize,,,"# lvresize

> Change the size of a logical volume.

- Change a volume's size to 120GB:

`lvresize -L {{120G}} {{logical_volume}}`

- Reduce a volume's size by 120GB as well as the underlying filesystem:

`lvresize --size -{{120G}} -r {{logical_volume}}`

- Increase a volume's size to 100% of the free phyiscal volume space:

`lvresize --size {{100}}%FREE {{logical_volume}}`
"
yank,,,"# yank

> Read input from `stdin` and display a selection interface that allows a field to be selected and copied to the clipboard.

- Yank using the default delimiters (\f, \n, \r, \s, \t):

`{{sudo dmesg}} | yank`

- Yank an entire line:

`{{sudo dmesg}} | yank -l`

- Yank using a specific delimiter:

`{{echo hello=world}} | yank -d {{=}}`

- Only yank fields matching a specific pattern:

`{{ps ux}} | yank -g {{""[0-9]+""}}`
"
dpkg,,,"# dpkg

> Debian package manager.

- Install a package:

`dpkg -i {{path/to/file.deb}}`

- Remove a package:

`dpkg -r {{package_name}}`

- List installed packages:

`dpkg -l {{pattern}}`

- List package contents:

`dpkg -L {{package_name}}`

- List contents of a local package file:

`dpkg -c {{path/to/file.deb}}`

- Find out which package owns a file:

`dpkg -S {{filename}}`
"
mountpoint,,,"# mountpoint

> Test if a directory is a filesystem mountpoint.

- Check if a directory is a mountpoint:

`mountpoint {{path/to/directory}}`

- Check if a directory is a mountpoint without showing any output:

`mountpoint -q {{path/to/directory}}`

- Show major/minor numbers of a mountpoint's filesystem:

`mountpoint --fs-devno {{path/to/directory}}`
"
edit,,,"# edit

> An alias to a `run-mailcap`'s action edit.
> Originally `run-mailcap` is used to process/edit mime-type/file.

- Edit action can be used to view any file on default mailcap explorer:

`edit {{filename}}`

- With `run-mailcap`:

`run-mailcap --action=edit {{filename}}`
"
apt-get,,,"# apt-get

> Debian and Ubuntu package management utility.
> Search for packages using `apt-cache`.

- Update the list of available packages and versions (it's recommended to run this before other `apt-get` commands):

`apt-get update`

- Install a package, or update it to the latest available version:

`apt-get install {{package}}`

- Remove a package:

`apt-get remove {{package}}`

- Remove a package and its configuration files:

`apt-get purge {{package}}`

- Upgrade all installed packages to their newest available versions:

`apt-get upgrade`

- Clean the local repository - removing package files (.deb) from interrupted downloads that can no longer be downloaded:

`apt-get autoclean`

- Remove all packages that are no longer needed:

`apt-get autoremove`

- Upgrade installed packages (like `upgrade`), but remove obsolete packages and install additional packages to meet new dependencies:

`apt-get dist-upgrade`
"
kpartx,,,"# kpartx

> Create device maps from partition tables.

- Add partition mappings:

`kpartx -a {{whole_disk.img}}`

- Delete partition mappings:

`kpartx -d {{whole_disk.img}}`

- List partition mappings:

`kpartx -l {{whole_disk.img}}`
"
hardinfo,,,"# hardinfo

> Show hardware information in GUI window.

- Start hardinfo:

`hardinfo`

- Print report to standard output:

`hardinfo -r`

- Save report to HTML file:

`hardinfo -r -f html > hardinfo.html`
"
strace,,,"# strace

> Troubleshooting tool for tracing system calls.

- Start tracing a specific process by its PID:

`strace -p {{pid}}`

- Trace a process and filter output by system call:

`strace -p {{pid}} -e {{system_call_name}}`

- Count time, calls, and errors for each system call and report a summary on program exit:

`strace -p {{pid}} -c`

- Show the time spent in every system call:

`strace -p {{pid}} -T`

- Start tracing a program by executing it:

`strace {{program}}`

- Start tracing file operations of a program:

`strace -e trace=file {{program}}`
"
avahi-browse,https://www.avahi.org/,,"# avahi-browse

> Displays services and hosts exposed on the local network via mDNS/DNS-SD.
> Avahi is compatible with Bonjour (Zeroconf) found in Apple devices.
> More information: <https://www.avahi.org/>.

- List all services available on the local network along with their addresses and ports while ignoring local ones:

`avahi-browse --all --resolve --ignore-local`

- List all domains:

`avahi-browse --browse-domains`

- Limit the search to a particular domain:

`avahi-browse --all --domain={{domain}}`
"
chfn,,"
CHPASS(1)		  BSD General Commands Manual		     CHPASS(1)

NAME
     chpass, chfn, chsh -- add or change user database information

SYNOPSIS
     chpass [-l location] [-u authname] [-s newshell] [user]

DESCRIPTION
     The chpass utility allows editing of the user database information asso-
     ciated with user or, by default, the current user.

     The chpass utility cannot change the user's password on Open Directory
     systems.  Use the passwd(1) utility instead.

     The chfn, and chsh utilities behave identically to chpass.  (There is
     only one program.)

     The information is formatted and supplied to an editor for changes.

     Only the information that the user is allowed to change is displayed.

     The options are as follows:

     -l location
	     If not specified, chpass will perform a search for the user
	     record on all available Open Directory nodes.  When specified,
	     chpass will edit the user record on the directory node at the
	     given location.

     -u authname
	     The user name to use when authenticating to the directory node
	     containing the user.

     -s newshell
	     Attempt to change the user's shell to newshell.

     Possible display items are as follows:

	   Login:	       user's login name
	   Uid: 	       user's login
	   Gid: 	       user's login group
	   Generated uid:      user's UUID
	   Full Name:	       user's real name
	   Office Location:    user's office location
	   Office Phone:       user's office phone
	   Home Phone:	       user's home phone
	   Home Directory:     user's home directory
	   Shell:	       user's login shell

     The login field is the user name used to access the computer account.

     The uid field is the number associated with the login field.  Both of
     these fields should be unique across the system (and often across a group
     of systems) as they control file access.

     While it is possible to have multiple entries with identical login names
     and/or identical user id's, it is usually a mistake to do so.  Routines
     that manipulate these files will often return only one of the multiple
     entries, and that one by random selection.

     The group field is the group that the user will be placed in at login.
     Since BSD supports multiple groups (see groups(1)) this field currently
     has little special meaning.  This field may be filled in with either a
     number or a group name (see group(5)).

     The generated uid field is the globally unique identifier (UUID) for the
     user.  The full name field contains the full name of the user.

     The user's home directory is the full UNIX path name where the user will
     be placed at login.

     The shell field is the command interpreter the user prefers.  If the
     shell field is empty, the Bourne shell, /bin/sh, is assumed.  When alter-
     ing a login shell, and not the super-user, the user may not change from a
     non-standard shell or to a non-standard shell.  Non-standard is defined
     as a shell not found in /etc/shells.

     The picture field is the path to a picture to be displayed for the user.

OPEN DIRECTORY
     User database entries are under the control of DirectoryService(8) and
     may be physically located in many different places, including the local
     Directory Service node, and remote LDAP servers.  This version of chpass
     uses Open Directory to change user database information.  It does not
     interact with the historic flat file database /etc/master.passwd

ENVIRONMENT
     The vi(1) editor will be used unless the environment variable EDITOR is
     set to an alternate editor.  When the editor terminates, the information
     is re-read and used to update the user database itself.  Only the user,
     or the super-user, may edit the information associated with the user.

FILES
     /etc/chpass.XXXXXX  temporary copy of the data to edit
     /etc/shells	 the list of approved shells

SEE ALSO
     login(1), passwd(1), getusershell(3), passwd(5)

     Robert Morris and Ken Thompson, UNIX Password security.

HISTORY
     The chpass utility appeared in 4.3BSD-Reno.

BSD			       December 30, 1993			   BSD
","# chfn

> Update `finger` info for a user.

- Update a user's ""Name"" field in the output of `finger`:

`chfn -f {{new_display_name}} {{username}}`

- Update a user's ""Office Room Number"" field for the output of `finger`:

`chfn -o {{new_office_room_number}} {{username}}`

- Update a user's ""Office Phone Number"" field for the output of `finger`:

`chfn -p {{new_office_telephone_number}} {{username}}`

- Update a user's ""Home Phone Number"" field for the output of `finger`:

`chfn -h {{new_home_telephone_number}} {{username}}`
"
tlp,,,"# tlp

> Advanced power management for Linux. See `tlp-stat` page for additional information.

- Apply settings (according to the actual power source):

`sudo tlp start`

- Apply battery settings (ignoring the actual power source):

`sudo tlp bat`

- Apply AC settings (ignoring the actual power source):

`sudo tlp ac`
"
shutdown,,"
SHUTDOWN(8)		  BSD System Manager's Manual		   SHUTDOWN(8)

NAME
     shutdown -- close down the system at a given time

SYNOPSIS
     shutdown [-] [-h [-u] | -r | -s | -k] [-o [-n]] time
	      [warning-message ...]

DESCRIPTION
     The shutdown utility provides an automated shutdown procedure for super-
     users to nicely notify users when the system is shutting down, saving
     them from system administrators, hackers, and gurus, who would otherwise
     not bother with such niceties.

     The following options are available:

     -h      The system is halted at the specified time.

     -k      Kick everybody off.  The -k option does not actually halt the
	     system, but leaves the system multi-user with logins disabled
	     (for all but super-user).

     -n      If the -o is specified, prevent the file system cache from being
	     flushed by passing -n option to halt(8) or reboot(8).  This
	     option should probably not be used.

     -o      If -h or -r is specified, shutdown will execute halt(8) or
	     reboot(8) instead of sending a signal to launchd(8).

     -r      The system is rebooted at the specified time.

     -s      The system is put to sleep at the specified time.

     -u      The system is halted up until the point of removing system power,
	     but waits before removing power for 5 minutes so that an external
	     UPS (uninterruptible power supply) can forcibly remove power.
	     This simulates a dirty shutdown to permit a later automatic power
	     on. OS X uses this mode automatically with supported UPSs in
	     emergency shutdowns.

     time    Time is the time at which shutdown will bring the system down and
	     may be the word now (indicating an immediate shutdown) or specify
	     a future time in one of two formats: +number, or yymmddhhmm,
	     where the year, month, and day may be defaulted to the current
	     system values.  The first form brings the system down in number
	     minutes and the second at the absolute time specified.

     warning-message
	     Any other arguments comprise the warning message that is broad-
	     cast to users currently logged into the system.

     -	     If `-' is supplied as an option, the warning message is read from
	     the standard input.

     At intervals, becoming more frequent as apocalypse approaches and start-
     ing at ten hours before shutdown, warning messages are displayed on the
     terminals of all users logged in.

     At shutdown time a message is written to the system log, containing the
     time of shutdown, the person who initiated the shutdown and the reason.
     Corresponding signal is then sent to launchd(8) to respectively halt,
     reboot or bring the system down to single-user state (depending on the
     above options).

     A scheduled shutdown can be canceled by killing the shutdown process (a
     SIGTERM should suffice).

SIGTERM TO SIGKILL INTERVAL
     Upon shutdown, all running processes are sent a SIGTERM followed by a
     SIGKILL.  The SIGKILL will follow the SIGTERM by an intentionally inde-
     terminate period of time.	Programs are expected to take only enough time
     to flush all dirty data and exit.	Developers are encouraged to file a
     bug with the OS vendor, should they encounter an issue with this func-
     tionality.

SEE ALSO
     kill(1), login(1), wall(1), halt(8), launchd(8), reboot(8)

BACKWARD COMPATIBILITY
     The hours and minutes in the second time format may be separated by a
     colon (``:'') for backward compatibility.

HISTORY
     The shutdown utility appeared in 4.0BSD.

BSD			       December 11, 1998			   BSD
","# shutdown

> Shutdown and reboot the system.

- Power off (halt) immediately:

`shutdown -h now`

- Reboot immediately:

`shutdown -r now`

- Reboot in 5 minutes:

`shutdown -r +{{5}} &`

- Shutdown at 1:00 pm (Uses 24h clock):

`shutdown -h 13:00`

- Cancel a pending shutdown/reboot operation:

`shutdown -c`
"
phpquery,,,"# phpquery

> PHP extension manager for Debian-based OSes.

- List available PHP versions:

`sudo phpquery -V`

- List available SAPIs for PHP 7.3:

`sudo phpquery -v {{7.3}} -S`

- List enabled extensions for PHP 7.3 with the cli SAPI:

`sudo phpquery -v {{7.3}} -s {{cli}} -M`

- Check if the json extension is enabled for PHP 7.3 with the apache2 SAPI:

`sudo phpquery -v {{7.3}} -s {{apache2}} -m {{json}}`
"
ul,,"
UL(1)			  BSD General Commands Manual			 UL(1)

NAME
     ul -- do underlining

SYNOPSIS
     ul [-i] [-t terminal] [file ...]

DESCRIPTION
     The ul utility reads the named files (or standard input if none are
     given) and translates occurrences of underscores to the sequence which
     indicates underlining for the terminal in use, as specified by the envi-
     ronment variable TERM.  The file /etc/termcap is read to determine the
     appropriate sequences for underlining.  If the terminal is incapable of
     underlining, but is capable of a standout mode then that is used instead.
     If the terminal can overstrike, or handles underlining automatically, ul
     degenerates to cat(1).  If the terminal cannot underline, underlining is
     ignored.

     The following options are available:

     -i      Underlining is indicated by a separate line containing appropri-
	     ate dashes `-'; this is useful when you want to look at the
	     underlining which is present in an nroff(1) output stream on a
	     crt-terminal.

     -t terminal
	     Overrides the terminal type specified in the environment with
	     terminal.

ENVIRONMENT
     The LANG, LC_ALL, LC_CTYPE and TERM environment variables affect the exe-
     cution of ul as described in environ(7).

EXIT STATUS
     The ul utility exits 0 on success, and >0 if an error occurs.

SEE ALSO
     colcrt(1), man(1), nroff(1)

HISTORY
     The ul command appeared in 3.0BSD.

BUGS
     The nroff(1) command usually outputs a series of backspaces and under-
     lines intermixed with the text to indicate underlining.  No attempt is
     made to optimize the backward motion.

BSD				August 4, 2004				   BSD
","# ul

> Performs the underlining of a text.
> Each character in a given string must be underlined separately.

- Display the contents of the file with underlines where applicable:

`ul {{file.txt}}`

- Display the contents of the file with underlines made of dashes `-`:

`ul -i {{file.txt}}`
"
wmctrl,,,"# wmctrl

> CLI for X Window Manager.

- List all windows, managed by the window manager:

`wmctrl -l`

- Switch to the first window whose (partial) title matches:

`wmctrl -a {{window_title}}`

- Move a window to the current workspace, raise it and give it focus:

`wmctrl -R {{window_title}}`

- Switch to a workspace:

`wmctrl -s {{workspace_number}}`

- Select a window and toggle fullscreen:

`wmctrl -r {{window_title}} -b toggle,fullscreen`

- Select a window a move it to a workspace:

`wmctrl -r {{window_title}} -t {{workspace_number}}`
"
wall,,"
WALL(1) 		  BSD General Commands Manual		       WALL(1)

NAME
     wall -- write a message to users

SYNOPSIS
     wall [-g group] [file]

DESCRIPTION
     The wall utility displays the contents of file or, by default, its stan-
     dard input, on the terminals of all currently logged in users.

     Only the super-user can write on the terminals of users who have chosen
     to deny messages or are using a program which automatically denies mes-
     sages.

     -g      Send messages to users in this group.  This option may be speci-
	     fied multiple times, and any user in any of the specified groups
	     will receive the message.

SEE ALSO
     mesg(1), talk(1), write(1), shutdown(8)

HISTORY
     A wall command appeared in PWB UNIX.

BUGS
     The sender's LC_CTYPE setting is used to determine which characters are
     safe to write to a terminal, not the receiver's (which wall has no way of
     knowing).

     The wall utility does not recognize multibyte characters.

BSD				 July 17, 2004				   BSD
","# wall

> Write a message on the terminals of users currently logged in.

- Send a message:

`echo ""{{message}}"" | wall`

- Send a message from a file:

`wall {{file}}`

- Send a message with timeout (default 300):

`wall -t {{seconds}} {{file}}`
"
runuser,,,"# runuser

> Run commands as a specific user and group without asking for password (needs root privileges).

- Run command as a different user:

`runuser {{user}} -c '{{command}}'`

- Run command as a different user and group:

`runuser {{user}} -g {{group}} -c '{{command}}'`

- Start a login shell as a specific user:

`runuser {{user}} -l`

- Specify a shell for running instead of the default shell (also works for login):

`runuser {{user}} -s {{/bin/sh}}`

- Preserve the entire environment of root (only if `--login` is not specified):

`runuser {{user}} --preserve-environment -c '{{command}}'`
"
zenity,,,"# zenity

> Display dialogs from the command line/shell scripts.
> Return user-inserted values or 1 if error.

- Display the default question dialog:

`zenity --question`

- Display an info dialog displaying the text ""Hello!"":

`zenity --info --text=""{{Hello!}}""`

- Display a name/password form and output the data separated by "";"":

`zenity --forms --add-entry=""{{Name}}"" --add-password=""{{Password}}"" --separator=""{{;}}""`

- Display a file selection form in which the user can only select directories:

`zenity --file-selection --directory`

- Display a progress bar which updates its message every second and show a progress percent:

`{{(echo ""#1""; sleep 1; echo ""50""; echo ""#2""; sleep 1; echo ""100"")}} | zenity --progress`
"
pulseaudio,,,"# pulseaudio

> The pulseaudio sound system daemon and manager.

- Check if pulseaudio is running (a non-zero exit code means it is not running):

`pulseaudio --check`

- Start the pulseaudio daemon in the background:

`pulseaudio --start`

- Kill the running pulseaudio daemon:

`pulseaudio --kill`

- List available modules:

`pulseaudio --dump-modules`

- Load a module into the currently running daemon with the specified arguments:

`pulseaudio --load=""{{module_name}} {{arguments}}""`
"
taskset,,,"# taskset

> Get or set a process' CPU affinity or start a new process with a defined CPU affinity.

- Get a running process' CPU affinity by PID:

`taskset --pid --cpu-list {{pid}}`

- Set a running process' CPU affinity by PID:

`taskset --pid --cpu-list {{cpu_id}} {{pid}}`

- Start a new process with affinity for a single CPU:

`taskset --cpu-list {{cpu_id}} {{command}}`

- Start a new process with affinity for multiple non-sequential CPUs:

`taskset --cpu-list {{cpu_id_1}} {{cpu_id_2}} {{cpu_id_3}}`

- Start a new process with affinity for CPUs 1 through 4:

`taskset --cpu-list {{cpu_id_1}},{{cpu_id_4}}`
"
check-support-status,https://manpages.debian.org/buster/debian-security-support/check-support-status.1.en.html,,"# check-support-status

> Identify installed Debian packages for which support has had to be limited or prematurely ended.
> More information: <https://manpages.debian.org/buster/debian-security-support/check-support-status.1.en.html>.

- Display packages whose support is limited, has already ended or will end earlier than the distribution's end of life:

`check-support-status`

- Display only packages whose support has ended:

`check-support-status --type {{ended}}`

- Skip printing a headline:

`check-support-status --no-heading`
"
extundelete,http://extundelete.sourceforge.net,,"# extundelete

> Recover deleted files from ext3 or ext4 partitions by parsing the journal.
> See also `date` for Unix time information and `umount` for unmounting partitions.
> More information: <http://extundelete.sourceforge.net>.

- Restore all deleted files inside partition N on device X:

`sudo extundelete {{/dev/sdXN}} --restore-all`

- Restore a file from a path relative to root (Do not start the path with `/`):

`extundelete {{/dev/sdXN}} --restore-file {{path/to/file}}`

- Restore a directory from a path relative to root (Do not start the path with `/`):

`extundelete {{/dev/sdXN}} --restore-directory {{path/to/directory}}`

- Restore all files deleted after January 1st, 2020 (in Unix time):

`extundelete {{/dev/sdXN}} --restore-all --after {{1577840400}}`
"
ethtool,http://man7.org/linux/man-pages/man8/ethtool.8.html,,"# ethtool

> Display and modify Network Interface Controller (NIC) parameters.
> More information: <http://man7.org/linux/man-pages/man8/ethtool.8.html>.

- Set the link speed, duplex mode, and parameter autonegotiation for a given interface:

`ethtool -s {{eth0}} speed {{10|100|1000}} duplex {{half|full}} autoneg {{on|off}}`
"
guake,,,"# guake

> A drop-down terminal for GNOME.

- Toggle Guake visiblity:

`F12`

- Toggle fullscreen mode:

`F11`

- Open a new tab:

`Ctrl+Shift+T`

- Close the terminal:

`Super+X`

- Go to the previous tab:

`Ctrl+PageUp`

- Search the selected text in the browser:

`Shift+Ctrl+L`
"
tcpflow,,,"# tcpflow

> Capture TCP traffic for debugging and analysis.

- Show all data on the given interface and port:

`tcpflow -c -i {{eth0}} port {{80}}`
"
apt-file,,,"# apt-file

> Search for files in apt packages, including ones not yet installed.

- Update the metadata database:

`sudo apt update`

- Search for packages that contain the specified file or path:

`apt-file search {{part/of/filename}}`

- List the contents of a specific package:

`apt-file list {{package_name}}`
"
apt-add-repository,,,"# apt-add-repository

> Manages apt repository definitions.

- Add a new apt repository:

`apt-add-repository {{repository_spec}}`

- Remove an apt repository:

`apt-add-repository --remove {{repository_spec}}`

- Update the package cache after adding a repository:

`apt-add-repository --update {{repository_spec}}`

- Enable source packages:

`apt-add-repository --enable-source {{repository_spec}}`
"
squeue,,,"# squeue

> View the jobs queued in the SLURM scheduler.

- View the queue:

`squeue`

- View jobs queued by a specific user:

`squeue -u {{username}}`

- View the queue and refresh every 5 seconds:

`squeue -i {{5}}`

- View the queue with expected start times:

`squeue --start`
"
mcookie,,,"# mcookie

> Generates random 128 bit hexadecimal numbers.

- Generate a random number:

`mcookie`

- Generate a random number, using the contents of a file as a seed for the randomness:

`mcookie --file {{path/to/file}}`

- Generate a random number, using a specific number of bytes from a file as a seed for the randomness:

`mcookie --file {{path/to/file}} --max-size {{number_of_bytes}}`

- Print the details of the randomness used, such as the origin and seed for each source:

`mcookie --verbose`
"
xfce4-terminal,,,"# xfce4-terminal

> The XFCE4 terminal emulator.

- Open a new terminal window:

`xfce4-terminal`

- Set the initial title:

`xfce4-terminal --initial-title ""{{initial_title}}""`

- Open a new tab in the current terminal window:

`xfce4-terminal --tab`

- Execute a command in a new terminal window:

`xfce4-terminal --command ""{{command_with_args}}""`

- Keep the terminal around after the executed command finishes executing:

`xfce4-terminal --command ""{{command_with_args}}"" --hold`

- Open multiple new tabs, executing a command in each:

`xfce4-terminal --tab --command ""{{command_a}}"" --tab --command ""{{command_b}}""`
"
enum4linux,,,"# enum4linux

> Tool for enumerating Windows and Samba information from remote systems.
> It attempts to offer similar functionality to enum.exe formerly available from www.bindview.com.

- Try to enumerate using all methods:

`enum4linux -a {{remote_host}}`

- Enumerate using given login credentials:

`enum4liux -u {{user_name}} -p {{password}} {{remote_host}}`

- List usernames from a given host:

`enum4liux -U {{remote_host}}`

- List shares:

`enum4liux -S {{remote_host}}`

- Get OS information:

`enum4liux -o {{remote_host}}`
"
a2enmod,https://manpages.debian.org/buster/apache2/a2enmod.8.en.html,,"# a2enmod

> Enable an Apache module on Debian-based OSes.
> More information: <https://manpages.debian.org/buster/apache2/a2enmod.8.en.html>.

- Enable a module:

`sudo a2enmod {{module}}`

- Don't show informative messages:

`sudo a2enmod --quiet {{module}}`
"
cpuid,,,"# cpuid

> Display detailed information about all CPUs.

- Display information for all CPUs:

`cpuid`

- Display information only for the current CPU:

`cpuid -1`

- Display raw hex information with no decoding:

`cpuid -r`
"
notify-send,,,"# notify-send

> Uses the current desktop environment's notification system to create a notification.

- Show a notification with the title ""Test"" and the content ""This is a test"":

`notify-send {{""Test""}} {{""This is a test""}}`

- Show a notification with a custom icon:

`notify-send -i {{icon.png}} {{""Test""}} {{""This is a test""}}`

- Show a notification for 5 seconds:

`notify-send -t 5000 {{""Test""}} {{""This is a test""}}`

- Show a notification with an app's icon:

`notify-send {{""Test""}} --icon={{google-chrome}}`
"
ufw,,,"# ufw

> Uncomplicated Firewall.
> Frontend for iptables aiming to make configuration of a firewall easier.

- Enable ufw:

`ufw enable`

- Disable ufw:

`ufw disable`

- Show ufw rules, along with their numbers:

`ufw status numbered`

- Allow incoming traffic on port 5432 on this host with a comment identifying the service:

`ufw allow {{5432}} comment {{""Service""}}`

- Allow only TCP traffic from 192.168.0.4 to any address on this host, on port 22:

`ufw allow proto {{tcp}} from {{192.168.0.4}} to {{any}} port {{22}}`

- Deny traffic on port 80 on this host:

`ufw deny {{80}}`

- Deny all UDP traffic to port 22:

`ufw deny proto {{udp}} from {{any}} to {{any}} port {{22}}`

- Delete a particular rule. The rule number can be retrieved from the `ufw status numbered` command:

`ufw delete {{rule_number}}`
"
mandb,,,"# mandb

> Manage the pre-formatted manual page database.

- Purge and process manual pages:

`mandb`

- Update a single entry:

`mandb --filename {{path/to/file}}`

- Create entries from scratch instead of updating:

`mandb --create`

- Only process user databases:

`mandb --user-db`

- Do not purge obsolete entries:

`mandb --no-purge`

- Check the validity of manual pages:

`mandb --test`
"
radeontop,https://github.com/clbr/radeontop,,"# radeontop

> Show utilisation of AMD GPUs.
> More information: <https://github.com/clbr/radeontop>.

- Show the utilisation of the default AMD GPU:

`sudo radeontop`

- Enable colourised output:

`sudo radeontop --colour`

- Select a specific GPU (the bus number is the first number in the output of `lspci`):

`sudo radeontop --bus {{bus_number}}`

- Specify the display refresh rate (higher means more GPU overhead):

`sudo radeontop --ticks {{samples_per_second}}`
"
dash,,,"# dash

> Debian Almquist Shell.
> Modern POSIX-compliant implementation of `sh` (isn't Bash compatible).

- Start interactive shell:

`dash`

- Execute a command:

`dash -c ""{{command}}""`

- Run commands from a file:

`dash {{file.sh}}`

- Run commands from a file, logging all commands executed to the terminal:

`dash -x {{file.sh}}`
"
at,,"
AT(1)			  BSD General Commands Manual			 AT(1)

NAME
     at, batch, atq, atrm -- queue, examine, or delete jobs for later execu-
     tion

SYNOPSIS
     at [-q queue] [-f file] [-mldbv] time
     at [-q queue] [-f file] [-mldbv] -t [[CC]YY]MMDDhhmm[.SS]
     at -c job [job ...]
     at -l [job ...]
     at -l -q queue
     at -r job [job ...]

     atq [-q queue] [-v]

     atrm job [job ...]

     batch [-q queue] [-f file] [-mv] [time]

DESCRIPTION
     The at and batch utilities read commands from standard input or a speci-
     fied file.  The commands are executed at a later time, using sh(1).

     at      executes commands at a specified time;

     atq     lists the user's pending jobs, unless the user is the superuser;
	     in that case, everybody's jobs are listed;

     atrm    deletes jobs;

     batch   executes commands when system load levels permit; in other words,
	     when the load average drops below _LOADAVG_MX (1.5), or the value
	     specified in the invocation of atrun.

     The at utility allows some moderately complex time specifications.  It
     accepts times of the form HHMM or HH:MM to run a job at a specific time
     of day.  (If that time is already past, the next day is assumed.)	As an
     alternative, the following keywords may be specified: midnight, noon, or
     teatime (4pm) and time-of-day may be suffixed with AM or PM for running
     in the morning or the evening.  The day on which the job is to be run may
     also be specified by giving a date in the form month-name day with an
     optional year, or giving a date of the forms DD.MM.YYYY, DD.MM.YY,
     MM/DD/YYYY, MM/DD/YY, MMDDYYYY, or MMDDYY.  The specification of a date
     must follow the specification of the time of day.	Time can also be spec-
     ified as: [now] + count time-units, where the time-units can be minutes,
     hours, days, weeks, months or years and at may be told to run the job
     today by suffixing the time with today and to run the job tomorrow by
     suffixing the time with tomorrow.	The shortcut next can be used instead
     of + 1.

     For example, to run a job at 4pm three days from now, use at 4pm + 3
     days, to run a job at 10:00am on July 31, use at 10am Jul 31 and to run a
     job at 1am tomorrow, use at 1am tomorrow.

     The at utility also supports the POSIX time format (see -t option).

     For both at and batch, commands are read from standard input or the file
     specified with the -f option.  The working directory, the environment
     (except for the variables TERM, TERMCAP, DISPLAY and _), and the umask
     are retained from the time of invocation.	An at or batch command invoked
     from a su(1) shell will retain the current userid.  The user will be
     mailed standard error and standard output from his commands, if any.
     Mail will be sent using the command sendmail(8).  If at is executed from
     a su(1) shell, the owner of the login shell will receive the mail.

     The superuser may use these commands in any case.	For other users, per-
     mission to use at is determined by the files _PERM_PATH/at.allow and
     _PERM_PATH/at.deny.

     If the file _PERM_PATH/at.allow exists, only usernames mentioned in it
     are allowed to use at.  In these two files, a user is considered to be
     listed only if the user name has no blank or other characters before it
     on its line and a newline character immediately after the name, even at
     the end of the file.  Other lines are ignored and may be used for com-
     ments.

     If _PERM_PATH/at.allow does not exist, _PERM_PATH/at.deny is checked,
     every username not mentioned in it is then allowed to use at.

     If neither exists, only the superuser is allowed use of at.

IMPLEMENTATION NOTES
     Note that at is implemented through the launchd(8) daemon periodically
     invoking atrun(8), which is disabled by default.  See atrun(8) for infor-
     mation about enabling atrun.

OPTIONS
     -b      Is an alias for batch.

     -c      Cat the jobs listed on the command line to standard output.

     -d      Is an alias for atrm (this option is deprecated; use -r instead).

     -f file
	     Read the job from file rather than standard input.

     -l      With no arguments, list all jobs for the invoking user.  If one
	     or more job numbers are given, list only those jobs.

     -m      Send mail to the user when the job has completed even if there
	     was no output.

     -q queue
	     Use the specified queue.  A queue designation consists of a sin-
	     gle letter; valid queue designations range from a to z and A to
	     Z.  The _DEFAULT_AT_QUEUE queue (a) is the default for at and the
	     _DEFAULT_BATCH_QUEUE queue (b) is the default for batch.  Queues
	     with higher letters run with increased niceness.  If a job is
	     submitted to a queue designated with an uppercase letter, it is
	     treated as if it had been submitted to batch at that time.  If
	     atq is given a specific queue, it will only show jobs pending in
	     that queue.

     -r      Remove the specified jobs.

     -t      Specify the job time using the POSIX time format.	The argument
	     should be in the form [[CC]YY]MMDDhhmm[.SS] where each pair of
	     letters represents the following:

		   CC	   The first two digits of the year (the century).
		   YY	   The second two digits of the year.
		   MM	   The month of the year, from 1 to 12.
		   DD	   the day of the month, from 1 to 31.
		   hh	   The hour of the day, from 0 to 23.
		   mm	   The minute of the hour, from 0 to 59.
		   SS	   The second of the minute, from 0 to 61.

	     If the CC and YY letter pairs are not specified, the values
	     default to the current year.  If the SS letter pair is not speci-
	     fied, the value defaults to 0.

     -v      For atq, shows completed but not yet deleted jobs in the queue;
	     otherwise shows the time the job will be executed.

FILES
     _ATJOB_DIR 	   directory containing job files
			   (/usr/lib/cron/jobs/)
     _ATJOB_DIR/_LOCKFILE  job-creation lock file (/usr/lib/cron/jobs/...)
     _ATSPOOL_DIR	   directory containing output spool files
			   (/usr/lib/cron/spool/)
     _PERM_PATH/at.allow   allow permission control (/usr/lib/cron/at.allow)
     _PERM_PATH/at.deny    deny permission control (/usr/lib/cron/at.deny)
     /var/run/utmpx	   login records

SEE ALSO
     nice(1), sh(1), umask(2), compat(5), atrun(8), cron(8), sendmail(8)

BUGS
     If the file /var/run/utmpx is not available or corrupted, or if the user
     is not logged on at the time at is invoked, the mail is sent to the
     userid found in the environment variable LOGNAME.	If that is undefined
     or empty, the current userid is assumed.

     The at and batch utilities as presently implemented are not suitable when
     users are competing for resources.  If this is the case, another batch
     system such as nqs may be more suitable.

     Specifying a date past 2038 may not work on some systems.

AUTHORS
     At was mostly written by Thomas Koenig <ig25@rz.uni-karlsruhe.de>.  The
     time parsing routines are by
     David Parsons <orc@pell.chi.il.us>, with minor enhancements by
     Joe Halpin <joe.halpin@attbi.com>.

BSD			       January 13, 2002 			   BSD
","# at

> Executes commands at a specified time.

- Open an `at` prompt to create a new set of scheduled commands, press `Ctrl + D` to save and exit:

`at {{hh:mm}}`

- Execute the commands and email the result using a local mailing program such as sendmail:

`at {{hh:mm}} -m`

- Execute a script at the given time:

`at {{hh:mm}} -f {{path/to/file}}`

- Display a system notification at 11pm on February 18th:

`echo ""notify-send '{{Wake up!}}'"" | at {{11pm}} {{Feb 18}}`
"
postfix,http://postfix.org,"POSTFIX(1)							    POSTFIX(1)



NAME
       postfix - Postfix control program

SYNOPSIS
       postfix [-Dv] [-c config_dir] command

DESCRIPTION
       This  command  is  reserved  for the superuser. To submit mail, use the
       Postfix sendmail(1) command.

       The postfix(1) command controls the operation of the Postfix mail  sys-
       tem:  start  or stop the master(8) daemon, do a health check, and other
       maintenance.

       By default, the postfix(1) command sets up a  standardized  environment
       and runs the postfix-script shell script to do the actual work.

       However,  when  support	for  multiple Postfix instances is configured,
       postfix(1) executes the command specified with the multi_instance_wrap-
       per configuration parameter.  This command will execute the command for
       each applicable Postfix instance.

       The following commands are implemented:

       check  Warn about bad directory/file ownership or permissions, and cre-
	      ate missing directories.

       start  Start  the Postfix mail system. This also runs the configuration
	      check described above.

       stop   Stop the Postfix mail system in an orderly fashion. If possible,
	      running  processes  are  allowed	to terminate at their earliest
	      convenience.

	      Note: in order to refresh the Postfix mail system after  a  con-
	      figuration  change,  do  not  use the start and stop commands in
	      succession. Use the reload command instead.

       abort  Stop the Postfix mail system  abruptly.  Running	processes  are
	      signaled to stop immediately.

       flush  Force delivery: attempt to deliver every message in the deferred
	      mail queue. Normally, attempts to deliver delayed mail happen at
	      regular  intervals,  the	interval  doubling  after  each failed
	      attempt.

	      Warning: flushing undeliverable mail frequently will  result  in
	      poor delivery performance of all other mail.

       reload Re-read  configuration  files.  Running  processes  terminate at
	      their earliest convenience.

       status Indicate if the Postfix mail system is currently running.

       set-permissions [name=value ...]
	      Set the ownership and permissions of Postfix related  files  and
	      directories, as specified in the postfix-files file.

	      Specify  name=value to override and update specific main.cf con-
	      figuration parameters. Use this,	for  example,  to  change  the
	      mail_owner  or  setgid_group  setting  for  an already installed
	      Postfix system.

	      This feature is available in Postfix 2.1 and later.  With  Post-
	      fix   2.0   and	earlier,  use  ""$config_directory/post-install
	      set-permissions"".

       tls subcommand
	      Enable opportunistic TLS in the Postfix SMTP client  or  server,
	      and  manage  Postfix  SMTP  server TLS private keys and certifi-
	      cates.  See postfix-tls(1) for documentation.

	      This feature is available in Postfix 3.1 and later.

       upgrade-configuration [name=value ...]
	      Update the main.cf and master.cf	files  with  information  that
	      Postfix  needs  in order to run: add or update services, and add
	      or update configuration parameter settings.

	      Specify name=value to override and update specific main.cf  con-
	      figuration parameters.

	      This  feature is available in Postfix 2.1 and later.  With Post-
	      fix  2.0	and   earlier,	 use   ""$config_directory/post-install
	      upgrade-configuration"".

       The following options are implemented:

       -c config_dir
	      Read  the main.cf and master.cf configuration files in the named
	      directory instead of the default configuration  directory.   Use
	      this  to	distinguish  between multiple Postfix instances on the
	      same host.

	      With Postfix 2.6 and later, this option  forces  the  postfix(1)
	      command to operate on the specified Postfix instance only.  This
	      behavior is inherited by	postfix(1)  commands  that  run  as  a
	      descendant of the current process.

       -D (with postfix start only)
	      Run each Postfix daemon under control of a debugger as specified
	      via the debugger_command configuration parameter.

       -v     Enable verbose  logging  for  debugging  purposes.  Multiple  -v
	      options make the software increasingly verbose.

ENVIRONMENT
       The  postfix(1)	command  exports  the  following environment variables
       before executing the postfix-script file:

       MAIL_CONFIG
	      This is set when the -c command-line option is present.

	      With Postfix 2.6 and later, this environment variable forces the
	      postfix(1)  command to operate on the specified Postfix instance
	      only.  This behavior is inherited by  postfix(1)	commands  that
	      run as a descendant of the current process.

       MAIL_VERBOSE
	      This is set when the -v command-line option is present.

       MAIL_DEBUG
	      This is set when the -D command-line option is present.

CONFIGURATION PARAMETERS
       The following main.cf configuration parameters are exported as environ-
       ment variables with the same names:

       config_directory (see 'postconf -d' output)
	      The default location of the Postfix main.cf and  master.cf  con-
	      figuration files.

       command_directory (see 'postconf -d' output)
	      The location of all postfix administrative commands.

       daemon_directory (see 'postconf -d' output)
	      The directory with Postfix support programs and daemon programs.

       html_directory (see 'postconf -d' output)
	      The location of Postfix HTML files that describe how  to	build,
	      configure or operate a specific Postfix subsystem or feature.

       mail_owner (postfix)
	      The  UNIX  system  account  that owns the Postfix queue and most
	      Postfix daemon processes.

       mailq_path (see 'postconf -d' output)
	      Sendmail compatibility feature that specifies where the  Postfix
	      mailq(1) command is installed.

       manpage_directory (see 'postconf -d' output)
	      Where the Postfix manual pages are installed.

       newaliases_path (see 'postconf -d' output)
	      Sendmail	compatibility  feature	that specifies the location of
	      the newaliases(1) command.

       queue_directory (see 'postconf -d' output)
	      The location of the Postfix top-level queue directory.

       readme_directory (see 'postconf -d' output)
	      The location of Postfix README files that describe how to build,
	      configure or operate a specific Postfix subsystem or feature.

       sendmail_path (see 'postconf -d' output)
	      A  Sendmail compatibility feature that specifies the location of
	      the Postfix sendmail(1) command.

       setgid_group (postdrop)
	      The  group  ownership  of  set-gid  Postfix  commands   and   of
	      group-writable Postfix directories.

       Available in Postfix version 2.5 and later:

       data_directory (see 'postconf -d' output)
	      The  directory  with  Postfix-writable  data files (for example:
	      caches, pseudo-random numbers).

       Available in Postfix version 3.0 and later:

       meta_directory (see 'postconf -d' output)
	      The location of non-executable files that are shared among  mul-
	      tiple  Postfix instances, such as postfix-files, dynamicmaps.cf,
	      and the multi-instance template  files  main.cf.proto  and  mas-
	      ter.cf.proto.

       shlib_directory (see 'postconf -d' output)
	      The  location  of Postfix dynamically-linked libraries (libpost-
	      fix-*.so), and the default location of Postfix database  plugins
	      (postfix-*.so)  that  have  a  relative  pathname  in the dynam-
	      icmaps.cf file.

       Available in Postfix version 3.1 and later:

       openssl_path (openssl)
	      The location of the OpenSSL command line program openssl(1).

       Other configuration parameters:

       import_environment (see 'postconf -d' output)
	      The list of environment parameters that a Postfix  process  will
	      import from a non-Postfix parent process.

       syslog_facility (mail)
	      The syslog facility of Postfix logging.

       syslog_name (see 'postconf -d' output)
	      A  prefix  that  is  prepended  to  the  process	name in syslog
	      records, so that, for example, ""smtpd"" becomes ""prefix/smtpd"".

       Available in Postfix version 2.6 and later:

       multi_instance_directories (empty)
	      An optional list of non-default Postfix  configuration  directo-
	      ries;  these  directories belong to additional Postfix instances
	      that share the Postfix executable files and  documentation  with
	      the  default  Postfix  instance,	and that are started, stopped,
	      etc., together with the default Postfix instance.

       multi_instance_wrapper (empty)
	      The pathname of a multi-instance manager command that the  post-
	      fix(1)   command	invokes  when  the  multi_instance_directories
	      parameter value is non-empty.

       multi_instance_group (empty)
	      The optional instance group name of this Postfix instance.

       multi_instance_name (empty)
	      The optional instance name of this Postfix instance.

       multi_instance_enable (no)
	      Allow this Postfix instance to be started, stopped, etc.,  by  a
	      multi-instance manager.

FILES
       Prior  to Postfix version 2.6, all of the following files were in $con-
       fig_directory. Some files are now in $daemon_directory so that they can
       be shared among multiple instances that run the same Postfix version.

       Use  the command ""postconf config_directory"" or ""postconf daemon_direc-
       tory"" to expand the names into their actual values.

       $config_directory/main.cf, Postfix configuration parameters
       $config_directory/master.cf, Postfix daemon processes
       $daemon_directory/postfix-files, file/directory permissions
       $daemon_directory/postfix-script, administrative commands
       $daemon_directory/post-install, post-installation configuration
       $daemon_directory/dynamicmaps.cf, plug-in database clients

SEE ALSO
       Commands:
       postalias(1), create/update/query alias database
       postcat(1), examine Postfix queue file
       postconf(1), Postfix configuration utility
       postfix(1), Postfix control program
       postfix-tls(1), Postfix TLS management
       postkick(1), trigger Postfix daemon
       postlock(1), Postfix-compatible locking
       postlog(1), Postfix-compatible logging
       postmap(1), Postfix lookup table manager
       postmulti(1), Postfix multi-instance manager
       postqueue(1), Postfix mail queue control
       postsuper(1), Postfix housekeeping
       mailq(1), Sendmail compatibility interface
       newaliases(1), Sendmail compatibility interface
       sendmail(1), Sendmail compatibility interface

       Postfix configuration:
       bounce(5), Postfix bounce message templates
       master(5), Postfix master.cf file syntax
       postconf(5), Postfix main.cf file syntax
       postfix-wrapper(5), Postfix multi-instance API

       Table-driven mechanisms:
       access(5), Postfix SMTP access control table
       aliases(5), Postfix alias database
       canonical(5), Postfix input address rewriting
       generic(5), Postfix output address rewriting
       header_checks(5), body_checks(5), Postfix content inspection
       relocated(5), Users that have moved
       transport(5), Postfix routing table
       virtual(5), Postfix virtual aliasing

       Table lookup mechanisms:
       cidr_table(5), Associate CIDR pattern with value
       ldap_table(5), Postfix LDAP client
       lmdb_table(5), Postfix LMDB database driver
       memcache_table(5), Postfix memcache client
       mysql_table(5), Postfix MYSQL client
       nisplus_table(5), Postfix NIS+ client
       pcre_table(5), Associate PCRE pattern with value
       pgsql_table(5), Postfix PostgreSQL client
       regexp_table(5), Associate POSIX regexp pattern with value
       socketmap_table(5), Postfix socketmap client
       sqlite_table(5), Postfix SQLite database driver
       tcp_table(5), Postfix client-server table lookup

       Daemon processes:
       anvil(8), Postfix connection/rate limiting
       bounce(8), defer(8), trace(8), Delivery status reports
       cleanup(8), canonicalize and enqueue message
       discard(8), Postfix discard delivery agent
       dnsblog(8), DNS black/whitelist logger
       error(8), Postfix error delivery agent
       flush(8), Postfix fast ETRN service
       local(8), Postfix local delivery agent
       master(8), Postfix master daemon
       oqmgr(8), old Postfix queue manager
       pickup(8), Postfix local mail pickup
       pipe(8), deliver mail to non-Postfix command
       postscreen(8), Postfix zombie blocker
       proxymap(8), Postfix lookup table proxy server
       qmgr(8), Postfix queue manager
       qmqpd(8), Postfix QMQP server
       scache(8), Postfix connection cache manager
       showq(8), list Postfix mail queue
       smtp(8), lmtp(8), Postfix SMTP+LMTP client
       smtpd(8), Postfix SMTP server
       spawn(8), run non-Postfix server
       tlsmgr(8), Postfix TLS cache and randomness manager
       tlsproxy(8), Postfix TLS proxy server
       trivial-rewrite(8), Postfix address rewriting
       verify(8), Postfix address verification
       virtual(8), Postfix virtual delivery agent

       Other:
       syslogd(8), system logging

README FILES
       Use ""postconf readme_directory"" or ""postconf html_directory"" to	locate
       this information.
       OVERVIEW, overview of Postfix commands and processes
       BASIC_CONFIGURATION_README, Postfix basic configuration
       ADDRESS_REWRITING_README, Postfix address rewriting
       SMTPD_ACCESS_README, SMTP relay/access control
       CONTENT_INSPECTION_README, Postfix content inspection
       QSHAPE_README, Postfix queue analysis

LICENSE
       The Secure Mailer license must be distributed with this software.

AUTHOR(S)
       Wietse Venema
       IBM T.J. Watson Research
       P.O. Box 704
       Yorktown Heights, NY 10598, USA

       Wietse Venema
       Google, Inc.
       111 8th Avenue
       New York, NY 10011, USA

       TLS support by:
       Lutz Jaenicke
       Brandenburg University of Technology
       Cottbus, Germany

       Victor Duchovni
       Morgan Stanley

       SASL support originally by:
       Till Franke
       SuSE Rhein/Main AG
       65760 Eschborn, Germany

       LMTP support originally by:
       Philip A. Prindeville
       Mirapoint, Inc.
       USA.

       Amos Gouaux
       University of Texas at Dallas
       P.O. Box 830688, MC34
       Richardson, TX 75083, USA

       IPv6 support originally by:
       Mark Huizer, Eindhoven University, The Netherlands
       Jun-ichiro 'itojun' Hagino, KAME project, Japan
       The Linux PLD project
       Dean Strik, Eindhoven University, The Netherlands



								    POSTFIX(1)
","# postfix

> Postfix mail transfer agent (MTA) control program.
> See also `dovecot`, a mail delivery agent (MDA) that integrates with Postfix.
> More information: <http://postfix.org>.

- Check the configuration:

`sudo postfix check`

- Check the status of the Postfix daemon:

`sudo postfix status`

- Start Postfix:

`sudo postfix start`

- Gracefully stop Postfix:

`sudo postfix stop`

- Flush the mail queue:

`sudo postfix flush`

- Reload the configuration files:

`sudo postfix reload`
"
wodim,,,"# wodim

> Command (aliased as `cdrecord` on some systems) for recording data to CDs or DVDs.
> Some invocations of wodim can cause destructive actions, such as erasing all the data on a disc.

- Display optical drives available to `wodim`:

`wodim --devices`

- Record (""burn"") an audio-only disc:

`wodim dev=/dev/{{optical_drive}} -audio {{track*.cdaudio}}`

- Burn a file to a disc, ejecting the disc once done (some recorders require this):

`wodim -eject dev=/dev/{{optical_drive}} -data {{file.iso}}`

- Burn a file to the disc in an optical drive, potentially writing to multiple discs in succession:

`wodim -tao dev=/dev/{{optical_drive}} -data {{file.iso}}`
"
logger,,"
LOGGER(1)		  BSD General Commands Manual		     LOGGER(1)

NAME
     logger -- make entries in the system log

SYNOPSIS
     logger [-is] [-f file] [-p pri] [-t tag] [message ...]

DESCRIPTION
     Logger provides a shell command interface to the syslog(3) system log
     module.

     Options:

     -i       Log the process id of the logger process with each line.

     -s       Log the message to standard error, as well as the system log.

     -f file  Log the specified file.

     -p pri   Enter the message with the specified priority.  The priority may
	      be specified numerically or as a ``facility.level'' pair.  For
	      example, ``-p local3.info'' logs the message(s) as informational
	      level in the local3 facility.  The default is ``user.notice.''

     -t tag   Mark every line in the log with the specified tag.

     message  Write the message to log; if not specified, and the -f flag is
	      not provided, standard input is logged.

     The logger utility exits 0 on success, and >0 if an error occurs.

EXAMPLES
	   logger System rebooted

	   logger -p local0.notice -t HOSTIDM -f /dev/idmc

SEE ALSO
     syslog(3), syslogd(8)

STANDARDS
     The logger utility conforms to IEEE Std 1003.2-1992 (``POSIX.2'').

4.3 Berkeley Distribution	 June 6, 1993	     4.3 Berkeley Distribution
","# logger

> Add messages to syslog (/var/log/syslog).

- Log a message to syslog:

`logger {{message}}`

- Take input from `stdin` and log to syslog:

`echo {{log_entry}} | logger`

- Send the output to a remote syslog server running at a given port. Default port is 514:

`echo {{log_entry}} | logger --server {{hostname}} --port {{port}}`

- Use a specific tag for every line logged. Default is the name of logged in user:

`echo {{log_entry}} | logger --tag {{tag}}`

- Log messages with a given priority. Default is `user.notice`. See `man logger` for all priority options:

`echo {{log_entry}} | logger --priority {{user.warning}}`
"
mkfs.exfat,,,"# mkfs.exfat

> Creates an exfat filesystem inside a partition.

- Create an exfat filesystem inside partition 1 on device b (`sdb1`):

`mkfs.exfat {{/dev/sdb1}}`

- Create filesystem with a volume-name:

`mkfs.exfat -n {{volume_name}} {{/dev/sdb1}}`

- Create filesystem with a volume-id:

`mkfs.exfat -i {{volume_id}} {{/dev/sdb1}}`
"
top,,"
TOP(1)			  BSD General Commands Manual			TOP(1)

NAME
     top -- display and update sorted information about processes

SYNOPSIS
     top [-a | -d | -e | -c mode]
	 [-F | -f]
	 [-h]
	 [-i interval]
	 [-l samples]
	 [-ncols columns]
	 [-o key | -O skey]
	 [-R | -r]
	 [-S]
	 [-s delay-secs]
	 [-n nprocs]
	 [-stats keys]
	 [-pid processid]
	 [-user username]
	 [-U username]
	 [-u]

DESCRIPTION
     The top program periodically displays a sorted list of system processes.
     The default sorting key is pid, but other keys can be used instead.  Var-
     ious output options are available.

OPTIONS
     Command line option specifications are processed from left to right.
     Options can be specified more than once.  If conflicting options are
     specified, later specifications override earlier ones.  This makes it
     viable to create a shell alias for top with preferred defaults specified,
     then override those preferred defaults as desired on the command line.

     -a      Equivalent to Fl c Ar a .

     -c mode
	     Set event counting mode to mode.  The supported modes are

	     a	     Accumulative mode.  Count events cumulatively, starting
		     at the launch of top.  Calculate CPU usage and CPU time
		     since the launch of top.

	     d	     Delta mode.  Count events relative to the previous sam-
		     ple.  Calculate CPU usage since the previous sample.
		     This mode by default disables the memory object map
		     reporting.  The memory object map reporting may be re-
		     enabled with the -r option or the interactive r command.

	     e	     Absolute mode.  Count events using absolute counters.

	     n	     Non-event mode (default).	Calculate CPU usage since the
		     previous sample.

     -d      Equivalent to -c d.

     -e      Equivalent to -c e.

     -F      Do not calculate statistics on shared libraries, also known as
	     frameworks.

     -f      Calculate statistics on shared libraries, also known as frame-
	     works (default).

     -h      Print command line usage information and exit.

     -i interval
	     Update framework (-f) info every interval samples; see the
	     PERFORMANCE/ACCURACY TRADEOFF section for more details.

     -l samples
	     Use logging mode and display samples samples, even if standard
	     output is a terminal.  0 is treated as infinity.  Rather than
	     redisplaying, output is periodically printed in raw form.	Note
	     that the first sample displayed will have an invalid %CPU dis-
	     played for each process, as it is calculated using the delta
	     between samples.

     -ncols columns
	     Display columns when using logging mode.  The default is infi-
	     nite.  The number must be >0 or an error will occur.

     -n nprocs
	     Only display up to nprocs processes.

     -O skey
	     Use skey as a secondary key when ordering the process display.
	     See -o for key names (pid is the default).

     -o key  Order the process display by sorting on key in descending order.
	     A + or - can be prefixed to the key name to specify ascending or
	     descending order, respectively.  The supported keys are:

	     pid     Process ID (default).

	     command
		     Command name.

	     cpu     CPU usage.

	     cpu_me  CPU time charged to me by other processes.

	     cpu_others
		     CPU time charged to other processes by me.

	     csw     The number of context switches.

	     time    Execution time.

	     threads
		     alias: th
		     Number of threads (total/running).

	     ports   alias: prt
		     Number of Mach ports.

	     mregion
		     alias: mreg, reg
		     Number of memory regions.

	     mem     Physical memory footprint of the process.

	     rprvt   Resident private address space size.

	     purg    Purgeable memory size.

	     vsize   Total memory size.

	     vprvt   Private address space size.

	     kprvt   Private kernel memory size.

	     kshrd   Shared kernel memory size.

	     pgrp    Process group ID.

	     ppid    Parent process ID.

	     state   alias: pstate
		     Process state.

	     uid     User ID.

	     wq      alias: #wq, workqueue
		     The workqueue total/running.

	     faults  alias: fault
		     The number of page faults.

	     cow     alias: cow_faults
		     The copy-on-write faults.

	     user    alias: username
		     Username.

	     msgsent
		     Total number of Mach messages sent.

	     msgrecv
		     Total number of Mach messages received.

	     sysbsd  Total BSD syscalls.

	     sysmach
		     Total Mach syscalls.

	     pageins
		     Total pageins.

	     boosts  The number of boosts help by the process.	This is fol-
		     lowed by the number of times the process has transitioned
		     from unboosted to boosted in brackets.  An asterisk
		     before the value indicates that the process was able to
		     send boosts at some point since the previous update.  For
		     more information about boosts, see xpc_transac-
		     tion_begin(3).

	     instrs  The number of instructions retired by the process in both
		     user space and the kernel.

	     cycles  The number of cycles spent executing instructions in the
		     process in both user space and the kernel.

     -R      Do not traverse and report the memory object map for each process
	     (default).

     -r      Traverse and report the memory object map for each process.

     -S      Display the global statistics for swap and purgeable memory.

     -s delay-secs
	     Set the delay between updates to delay-secs seconds.  The default
	     delay between updates is 1 second.

     -stats keys
	     Only display the comma separated statistics.  See the -o flag for
	     the valid keys.

     -pid processid
	     Only display processid in top.  This option may be specified mul-
	     tiple times.

     -user user
	     Only display processes owned by user

     -U user
	     This is an alias for -user.

     -u      This is an alas equivalent to: -o cpu -O time

DISPLAY
     The first several lines of the top display show various global state.
     All of the information is labeled.  Following is an alphabetical list of
     global state fields and their descriptions.

     CPU	 Percentage of processor usage, broken into user, system, and
		 idle components.  The time period for which these percentages
		 are calculated depends on the event counting mode.

     Disks	 Number and total size of disk reads and writes.

     LoadAvg	 Load average over 1, 5, and 15 minutes.  The load average is
		 the average number of jobs in the run queue.

     MemRegions  Number and total size of memory regions, and total size of
		 memory regions broken into private (broken into non-library
		 and library) and shared components.

     Networks	 Number and total size of input and output network packets.

     PhysMem	 Physical memory usage, broken into wired, active, inactive,
		 used, and free components.

     Procs	 Total number of processes and number of processes in each
		 process state.

     SharedLibs  Resident sizes of code and data segments, and link editor
		 memory usage.

     Threads	 Number of threads.

     Time	 Time, in H:MM:SS format.  When running in logging mode, Time
		 is in YYYY/MM/DD HH:MM:SS format by default, but may be over-
		 ridden with accumulative mode.  When running in accumulative
		 event counting mode, the Time is in HH:MM:SS since the begin-
		 ning of the top process.

     VirtMem	 Total virtual memory, virtual memory consumed by shared
		 libraries, and number of pageins and pageouts.

     Swap	 Swap usage: total size of swap areas, amount of swap space in
		 use and amount of swap space available.

     Purgeable	 Number of pages purged and number of pages currently purge-
		 able.

     Below the global state fields, a list of processes is displayed.  The
     fields that are displayed depend on the options that are set.  The pid
     field displays the following for the architecture:

     + for 64-bit native architecture, or - for 32-bit native architecture, or
     * for a non-native architecture.

INTERACTION
     When top is run in interactive (non-logging) mode, it is possible to con-
     trol the output of top, as well as interactively send signals to pro-
     cesses.  The interactive command syntax is terse.	Each command is one
     character, followed by 0 to 2 arguments.  Commands that take arguments
     prompt interactively for the arguments, and where applicable, the default
     value is shown in square brackets.  The default value can be selected by
     leaving the input field blank and pressing enter.	^G escapes the inter-
     active argument prompt, and has the same effect as leaving the input
     field blank and pressing enter.

     The following commands are supported:

     ?	     Display the help screen.  Any character exits help screen mode.
	     This command always works, even in the middle of a command.

     ^L      Redraw the screen.

     cmode   Set output mode to mode.  See the -c option for descriptions of
	     the allowed modes.

     Oskey   Use skey as a secondary key when ordering the process display.
	     See the -o option for key names.

     okey    Order the process display by sorting on key in descending order.
	     A + or - can be prefixed to the key name to specify ascending or
	     descending order, respectively.  The supported keys and alises
	     are listed with the -o option above.

     q	     Quit.

     r	     Toggle traversal and reporting of the memory object map for each
	     process.

     Ssignalpid
	     Send signal signal to pid.  signal can be specified either as a
	     number or as a name (for example, HUP).  The default signal
	     starts out as TERM.  Each time a signal is successfully sent, the
	     default signal is updated to be that signal.  pid is a process
	     id.

     s delay-secs
	     Set the delay between updates to delay-secs seconds.

     U user  Only display processes owned by user. Either the username or uid
	     number can be specified.  To display all processes, press enter
	     without entering a username or uid number.

PERFORMANCE/ACCURACY TRADEOFF
     Calculating detailed memory statistics is fundamentally resource-inten-
     sive.  To reduce the CPU usage in top, the -i option has been introduced
     to allow the user to tune this tradeoff.  With the default value of 10,
     framework stats will be updated once every 10 samples.  Specifying -i 1
     will result in the most accurate display, at the expense of system
     resources.

NOT AVAILABLE
     When N/A occurs in a stat, it's caused by the memory object map reporting
     being disabled.  Memory object map reporting is disabled by default in
     delta mode, but may be optionally enabled via -r or the interactive r
     command.  To enable the -r option, use it after any -c mode options.

EXAMPLES
     top -o cpu -O +rsize -s 5 -n 20
	     Sort the processes according to CPU usage (descending) and resi-
	     dent memory size (ascending), sample and update the display at 5
	     second intervals, and limit the display to 20 processes.

     top -c d
	     Run top in delta mode.

     top -stats pid,command,cpu,th,pstate,time
	     Display only the specified statistics, regardless of any growth
	     of the terminal.  If the terminal is too small, only the statis-
	     tics that fit will be displayed.

SEE ALSO
     kill(2), vm_stat(1), signal(3), vmmap(1)

Darwin				 13 March 2017				Darwin
","# top

> Display dynamic real-time information about running processes.

- Start top:

`top`

- Do not show any idle or zombie processes:

`top -i`

- Show only processes owned by given user:

`top -u {{username}}`

- Sort processes by a field:

`top -o {{field_name}}`

- Show the individual threads of a given process:

`top -Hp {{process_id}}`

- Show only the processes with the given PID(s), passed as a comma-separated list. (Normally you wouldn't know PIDs off hand. This example picks the PIDs from the process name):

`top -p $(pgrep -d ',' {{process_name}})`

- Get help about interactive commands:

`?`
"
xsel,,,"# xsel

> X11 selection and clipboard manipulation tool.

- Use a command's output as input of the clip[b]oard (equivalent to `Ctrl + C`):

`echo 123 | xsel -ib`

- Use the contents of a file as input of the clipboard:

`cat {{file}} | xsel -ib`

- Output the clipboard's contents into the terminal (equivalent to `Ctrl + V`):

`xsel -ob`

- Output the clipboard's contents into a file:

`xsel -ob > {{file}}`

- Clear the clipboard:

`xsel -cb`

- Output the X11 primary selection's contents into the terminal (equivalent to a mouse middle-click):

`xsel -op`
"
export,,"
BUILTIN(1)		  BSD General Commands Manual		    BUILTIN(1)

NAME
     builtin, !, %, ., :, @, {, }, alias, alloc, bg, bind, bindkey, break,
     breaksw, builtins, case, cd, chdir, command, complete, continue, default,
     dirs, do, done, echo, echotc, elif, else, end, endif, endsw, esac, eval,
     exec, exit, export, false, fc, fg, filetest, fi, for, foreach, getopts,
     glob, goto, hash, hashstat, history, hup, if, jobid, jobs, kill, limit,
     local, log, login, logout, ls-F, nice, nohup, notify, onintr, popd,
     printenv, pushd, pwd, read, readonly, rehash, repeat, return, sched, set,
     setenv, settc, setty, setvar, shift, source, stop, suspend, switch,
     telltc, test, then, time, times, trap, true, type, ulimit, umask,
     unalias, uncomplete, unhash, unlimit, unset, unsetenv, until, wait,
     where, which, while -- shell built-in commands

SYNOPSIS
     builtin [-options] [args ...]

DESCRIPTION
     Shell builtin commands are commands that can be executed within the run-
     ning shell's process.  Note that, in the case of csh(1) builtin commands,
     the command is executed in a subshell if it occurs as any component of a
     pipeline except the last.

     If a command specified to the shell contains a slash ``/'', the shell
     will not execute a builtin command, even if the last component of the
     specified command matches the name of a builtin command.  Thus, while
     specifying ``echo'' causes a builtin command to be executed under shells
     that support the echo builtin command, specifying ``/bin/echo'' or
     ``./echo'' does not.

     While some builtin commands may exist in more than one shell, their oper-
     ation may be different under each shell which supports them.  Below is a
     table which lists shell builtin commands, the standard shells that sup-
     port them and whether they exist as standalone utilities.

     Only builtin commands for the csh(1) and sh(1) shells are listed here.
     Consult a shell's manual page for details on the operation of its builtin
     commands.	Beware that the sh(1) manual page, at least, calls some of
     these commands ``built-in commands'' and some of them ``reserved words''.
     Users of other shells may need to consult an info(1) page or other
     sources of documentation.

     Commands marked ``No**'' under External do exist externally, but are
     implemented as scripts using a builtin command of the same name.

	   Command	 External    csh(1)    sh(1)
	   !		 No	     No        Yes
	   %		 No	     Yes       No
	   .		 No	     No        Yes
	   :		 No	     Yes       Yes
	   @		 No	     Yes       Yes
	   {		 No	     No        Yes
	   }		 No	     No        Yes
	   alias	 No**	     Yes       Yes
	   alloc	 No	     Yes       No
	   bg		 No**	     Yes       Yes
	   bind 	 No	     No        Yes
	   bindkey	 No	     Yes       No
	   break	 No	     Yes       Yes
	   breaksw	 No	     Yes       No
	   builtin	 No	     No        Yes
	   builtins	 No	     Yes       No
	   case 	 No	     Yes       Yes
	   cd		 No**	     Yes       Yes
	   chdir	 No	     Yes       Yes
	   command	 No**	     No        Yes
	   complete	 No	     Yes       No
	   continue	 No	     Yes       Yes
	   default	 No	     Yes       No
	   dirs 	 No	     Yes       No
	   do		 No	     No        Yes
	   done 	 No	     No        Yes
	   echo 	 Yes	     Yes       Yes
	   echotc	 No	     Yes       No
	   elif 	 No	     No        Yes
	   else 	 No	     Yes       Yes
	   end		 No	     Yes       No
	   endif	 No	     Yes       No
	   endsw	 No	     Yes       No
	   esac 	 No	     No        Yes
	   eval 	 No	     Yes       Yes
	   exec 	 No	     Yes       Yes
	   exit 	 No	     Yes       Yes
	   export	 No	     No        Yes
	   false	 Yes	     No        Yes
	   fc		 No**	     No        Yes
	   fg		 No**	     Yes       Yes
	   filetest	 No	     Yes       No
	   fi		 No	     No        Yes
	   for		 No	     No        Yes
	   foreach	 No	     Yes       No
	   getopts	 No**	     No        Yes
	   glob 	 No	     Yes       No
	   goto 	 No	     Yes       No
	   hash 	 No	     No        Yes
	   hashstat	 No	     Yes       No
	   history	 No	     Yes       No
	   hup		 No	     Yes       No
	   if		 No	     Yes       Yes
	   jobid	 No	     No        Yes
	   jobs 	 No**	     Yes       Yes
	   kill 	 Yes	     Yes       No
	   limit	 No	     Yes       No
	   local	 No	     No        Yes
	   log		 No	     Yes       No
	   login	 Yes	     Yes       No
	   logout	 No	     Yes       No
	   ls-F 	 No	     Yes       No
	   nice 	 Yes	     Yes       No
	   nohup	 Yes	     Yes       No
	   notify	 No	     Yes       No
	   onintr	 No	     Yes       No
	   popd 	 No	     Yes       No
	   printenv	 Yes	     Yes       No
	   pushd	 No	     Yes       No
	   pwd		 Yes	     No        Yes
	   read 	 No**	     No        Yes
	   readonly	 No	     No        Yes
	   rehash	 No	     Yes       No
	   repeat	 No	     Yes       No
	   return	 No	     No        Yes
	   sched	 No	     Yes       No
	   set		 No	     Yes       Yes
	   setenv	 No	     Yes       No
	   settc	 No	     Yes       No
	   setty	 No	     Yes       No
	   setvar	 No	     No        Yes
	   shift	 No	     Yes       Yes
	   source	 No	     Yes       No
	   stop 	 No	     Yes       No
	   suspend	 No	     Yes       No
	   switch	 No	     Yes       No
	   telltc	 No	     Yes       No
	   test 	 Yes	     No        Yes
	   then 	 No	     No        Yes
	   time 	 Yes	     Yes       No
	   times	 No	     No        Yes
	   trap 	 No	     No        Yes
	   true 	 Yes	     No        Yes
	   type 	 No	     No        Yes
	   ulimit	 No	     No        Yes
	   umask	 No**	     Yes       Yes
	   unalias	 No**	     Yes       Yes
	   uncomplete	 No	     Yes       No
	   unhash	 No	     Yes       No
	   unlimit	 No	     Yes       No
	   unset	 No	     Yes       Yes
	   unsetenv	 No	     Yes       No
	   until	 No	     No        Yes
	   wait 	 No**	     Yes       Yes
	   where	 No	     Yes       No
	   which	 Yes	     Yes       No
	   while	 No	     Yes       Yes

SEE ALSO
     csh(1), echo(1), false(1), info(1), kill(1), login(1), nice(1), nohup(1),
     printenv(1), pwd(1), sh(1), test(1), time(1), true(1), which(1)

HISTORY
     The builtin manual page first appeared in FreeBSD 3.4.

AUTHORS
     This manual page was written by Sheldon Hearn <sheldonh@FreeBSD.org>.

BSD			       February 23, 2005			   BSD
","# export

> Command to mark shell variables in the current environment to be exported with any newly forked child processes.

- Set a new environment variable:

`export {{VARIABLE}}={{value}}`

- Remove an environment variable:

`export -n {{VARIABLE}}`

- Mark a shell function for export:

`export -f {{FUNCTION_NAME}}`

- Append something to the PATH variable:

`export PATH=$PATH:{{path/to/append}}`
"
pvcreate,,,"# pvcreate

> Initialize a physical volume (disk or partition) for use by the Logical Volume Manager (LVM).

- Initialize the `/dev/sda1` volume for use by LVM:

`pvcreate {{/dev/sda1}}`

- Force the creation without any confirmation prompts:

`pvcreate --force {{/dev/sda1}}`
"
modinfo,,,"# modinfo

> Extract information about a Linux kernel module.

- List all attributes of a kernel module:

`modinfo {{kernel_module}}`

- List the specified attribute only:

`modinfo -F {{author|description|license|parm|filename}} {{kernel_module}}`
"
hostnamectl,,,"# hostnamectl

> Get or set the hostname of the computer.

- Get the hostname of the computer:

`hostnamectl`

- Set the hostname of the computer:

`sudo hostnamectl set-hostname ""{{some_hostname}}""`
"
sm,https://github.com/nomeata/screen-message,,"# sm

> Displays a short message fullscreen.
> More information: <https://github.com/nomeata/screen-message>.

- Display a message in full-screen:

`sm ""{{Hello World!}}""`

- Display a message with inverted colors:

`sm -i ""{{Hello World!}}""`

- Display a message with a custom foreground color:

`sm -f {{blue}} ""{{Hello World!}}""`

- Display a message with a custom background color:

`sm -b {{#008888}} ""{{Hello World!}}""`

- Display a message rotated 3 times (in steps of 90 degrees, counterclockwise):

`sm -r {{3}} ""{{Hello World!}}""`

- Display a message using the output from another command:

`{{echo ""Hello World!""}} | sm -`
"
ddrescue,https://www.gnu.org/software/ddrescue/,,"# ddrescue

> Data recovery tool that reads data from damaged block devices.
> More information: <https://www.gnu.org/software/ddrescue/>.

- Take an image of a device, creating a log file:

`sudo ddrescue {{/dev/sdb}} {{path/to/image.dd}} {{path/to/log.txt}}`

- Clone Disk A to Disk B, creating a log file:

`sudo ddrescue --force --no-scrape {{/dev/sda}} {{/dev/sdb}} {{path/to/log.txt}}`
"
phpdismod,,,"# phpdismod

> Disable PHP extensions on Debian-based OSes.

- Disable the json extension for every SAPI of every PHP version:

`sudo phpdismod {{json}}`

- Disable the json extension for PHP 7.3 with the cli SAPI:

`sudo phpdismod -v {{7.3}} -s {{cli}} {{json}}`
"
lastcomm,https://manpages.debian.org/stable/acct/lastcomm.1.en.html,"
LASTCOMM(1)		  BSD General Commands Manual		   LASTCOMM(1)

NAME
     lastcomm -- show last commands executed in reverse order

SYNOPSIS
     lastcomm [-f file] [command ...] [user ...] [terminal ...]

DESCRIPTION
     lastcomm gives information on previously executed commands.  With no
     arguments, lastcomm prints information about all the commands recorded
     during the current accounting file's lifetime.

     Option:

     -f file	 Read from file rather than the default accounting file.

     If called with arguments, only accounting entries with a matching command
     name, user name, or terminal name are printed.  So, for example:

	   lastcomm a.out root ttyd0

     would produce a listing of all the executions of commands named a.out by
     user root on the terminal ttyd0.

     For each process entry, the following are printed.

	   o   The name of the user who ran the process.
	   o   Flags, as accumulated by the accounting facilities in the sys-
	       tem.
	   o   The command name under which the process was called.
	   o   The amount of cpu time used by the process (in seconds).
	   o   The time the process started.
	   o   The elapsed time of the process.

     The flags are encoded as follows: ``S'' indicates the command was exe-
     cuted by the super-user, ``F'' indicates the command ran after a fork,
     but without a following exec(3), ``C'' indicates the command was run in
     PDP-11 compatibility mode (VAX only), ``D'' indicates the command termi-
     nated with the generation of a core file, and ``X'' indicates the command
     was terminated with a signal.

FILES
     /var/account/acct	Default accounting file.

SEE ALSO
     last(1), sigaction(2), acct(5), core(5)

HISTORY
     The lastcomm command appeared in 3.0BSD.

BSD			       December 22, 2006			   BSD
","# lastcomm

> Show last commands executed.
> More information: <https://manpages.debian.org/stable/acct/lastcomm.1.en.html>.

- Print informations about all of the commands in the acct (record file):

`lastcomm`

- Display commands executed by a given user:

`lastcomm --user {{user}}`

- Display information about a given command executed on the system:

`lastcomm --command {{command}}`

- Display information about commands executed on a given terminal:

`lastcomm --tty {{terminal_name}}`
"
cp,,"
CP(1)			  BSD General Commands Manual			 CP(1)

NAME
     cp -- copy files

SYNOPSIS
     cp [-R [-H | -L | -P]] [-fi | -n] [-apvX] source_file target_file
     cp [-R [-H | -L | -P]] [-fi | -n] [-apvX] source_file ...
	target_directory

DESCRIPTION
     In the first synopsis form, the cp utility copies the contents of the
     source_file to the target_file.  In the second synopsis form, the con-
     tents of each named source_file is copied to the destination
     target_directory.	The names of the files themselves are not changed.  If
     cp detects an attempt to copy a file to itself, the copy will fail.

     The following options are available:

     -a    Same as -pPR options. Preserves structure and attributes of files
	   but not directory structure.

     -f    If the destination file cannot be opened, remove it and create a
	   new file, without prompting for confirmation regardless of its per-
	   missions.  (The -f option overrides any previous -n option.)

	   The target file is not unlinked before the copy.  Thus, any exist-
	   ing access rights will be retained.

     -H    If the -R option is specified, symbolic links on the command line
	   are followed.  (Symbolic links encountered in the tree traversal
	   are not followed.)

     -i    Cause cp to write a prompt to the standard error output before
	   copying a file that would overwrite an existing file.  If the
	   response from the standard input begins with the character `y' or
	   `Y', the file copy is attempted.  (The -i option overrides any pre-
	   vious -n option.)

     -L    If the -R option is specified, all symbolic links are followed.

     -n    Do not overwrite an existing file.  (The -n option overrides any
	   previous -f or -i options.)

     -P    If the -R option is specified, no symbolic links are followed.
	   This is the default.

     -p    Cause cp to preserve the following attributes of each source file
	   in the copy: modification time, access time, file flags, file mode,
	   user ID, and group ID, as allowed by permissions.  Access Control
	   Lists (ACLs) and Extended Attributes (EAs), including resource
	   forks, will also be preserved.

	   If the user ID and group ID cannot be preserved, no error message
	   is displayed and the exit value is not altered.

	   If the source file has its set-user-ID bit on and the user ID can-
	   not be preserved, the set-user-ID bit is not preserved in the
	   copy's permissions.	If the source file has its set-group-ID bit on
	   and the group ID cannot be preserved, the set-group-ID bit is not
	   preserved in the copy's permissions.  If the source file has both
	   its set-user-ID and set-group-ID bits on, and either the user ID or
	   group ID cannot be preserved, neither the set-user-ID nor set-
	   group-ID bits are preserved in the copy's permissions.

     -R    If source_file designates a directory, cp copies the directory and
	   the entire subtree connected at that point.	If the source_file
	   ends in a /, the contents of the directory are copied rather than
	   the directory itself.  This option also causes symbolic links to be
	   copied, rather than indirected through, and for cp to create spe-
	   cial files rather than copying them as normal files.  Created
	   directories have the same mode as the corresponding source direc-
	   tory, unmodified by the process' umask.

	   In -R mode, cp will continue copying even if errors are detected.

	   Note that cp copies hard-linked files as separate files.  If you
	   need to preserve hard links, consider using tar(1), cpio(1), or
	   pax(1) instead.

     -v    Cause cp to be verbose, showing files as they are copied.

     -X    Do not copy Extended Attributes (EAs) or resource forks.

     -c    copy files using clonefile(2)

     For each destination file that already exists, its contents are overwrit-
     ten if permissions allow.	Its mode, user ID, and group ID are unchanged
     unless the -p option was specified.

     In the second synopsis form, target_directory must exist unless there is
     only one named source_file which is a directory and the -R flag is speci-
     fied.

     If the destination file does not exist, the mode of the source file is
     used as modified by the file mode creation mask (umask, see csh(1)).  If
     the source file has its set-user-ID bit on, that bit is removed unless
     both the source file and the destination file are owned by the same user.
     If the source file has its set-group-ID bit on, that bit is removed
     unless both the source file and the destination file are in the same
     group and the user is a member of that group.  If both the set-user-ID
     and set-group-ID bits are set, all of the above conditions must be ful-
     filled or both bits are removed.

     Appropriate permissions are required for file creation or overwriting.

     Symbolic links are always followed unless the -R flag is set, in which
     case symbolic links are not followed, by default.	The -H or -L flags (in
     conjunction with the -R flag) cause symbolic links to be followed as
     described above.  The -H, -L and -P options are ignored unless the -R
     option is specified.  In addition, these options override each other and
     the command's actions are determined by the last one specified.

     If cp receives a SIGINFO (see the status argument for stty(1)) signal,
     the current input and output file and the percentage complete will be
     written to the standard output.

EXIT STATUS
     The cp utility exits 0 on success, and >0 if an error occurs.

COMPATIBILITY
     Historic versions of the cp utility had a -r option.  This implementation
     supports that option; however, its use is strongly discouraged, as it
     does not correctly copy special files, symbolic links, or fifo's.

     The -v and -n options are non-standard and their use in scripts is not
     recommended.

LEGACY DESCRIPTION
     In legacy mode, -f will override -i.  Also, under the -f option, the tar-
     get file is always unlinked before the copy.  Thus, new access rights
     will always be set.

     In -R mode, copying will terminate if an error is encountered.

     For more information about legacy mode, see compat(5).

SEE ALSO
     mv(1), rcp(1), umask(2), fts(3), compat(5), symlink(7)

STANDARDS
     The cp command is expected to be IEEE Std 1003.2 (``POSIX.2'') compati-
     ble.

HISTORY
     A cp command appeared in Version 1 AT&T UNIX.

BSD			       February 23, 2005			   BSD
","# cp

> Copy files and directories.

- Copy a file to another location:

`cp {{path/to/source_file.ext}} {{path/to/target_file.ext}}`

- Copy a file into another directory, keeping the filename:

`cp {{path/to/source_file.ext}} {{path/to/target_parent_directory}}`

- Recursively copy a directory's contents to another location (if the destination exists, the directory is copied inside it):

`cp -r {{path/to/source_directory}} {{path/to/target_directory}}`

- Copy a directory recursively, in verbose mode (shows files as they are copied):

`cp -vr {{path/to/source_directory}} {{path/to/target_directory}}`

- Copy text files to another location, in interactive mode (prompts user before overwriting):

`cp -i {{*.txt}} {{path/to/target_directory}}`

- Dereference symbolic links before copying:

`cp -L {{link}} {{path/to/target_directory}}`

- Use the full path of source files, creating any missing intermediate directories when copying:

`cp --parents {{source/path/to/file}} {{path/to/target_file}}`
"
reportbug,https://manpages.debian.org/buster/reportbug/reportbug.1.en.html,,"# reportbug

> Bug report tool of Debian distribution.
> More information: <https://manpages.debian.org/buster/reportbug/reportbug.1.en.html>.

- Generate a bug report about a specific package, then send it by e-mail:

`reportbug {{package}}`

- Report a bug that is not about a specific package (general problem, infrastructure, etc.):

`reportbug other`

- Write the bug report to a file instead of sending it by e-mail:

`reportbug -o {{filename}} {{package}}`
"
calcurse,https://calcurse.org,,"# calcurse

> A text-based calendar and scheduling application for the command line.
> More information: <https://calcurse.org>.

- Start calcurse on interactive mode:

`calcurse`

- Print the appointments and events for the current day and exit:

`calcurse --appointment`

- Remove all local calcurse items and import remote objects:

`calcurse-caldav --init=keep-remote`

- Remove all remote objects and push local calcurse items:

`calcurse-caldav --init=keep-local`

- Copy local objects to the CalDAV server and vice versa:

`calcurse-caldav --init=two-way`
"
see,,,"# see

> Alias to `run-mailcap`'s view.
> An alias to a `run-mailcap`'s action print.

- See action can be used to view any file (usually image) on default mailcap explorer:

`see {{filename}}`

- Using with `run-mailcap`:

`run-mailcap --action=view {{filename}}`
"
isoinfo,,,"# isoinfo

> Utility programs for dumping and verifying ISO disk images.

- List all the files included in an ISO image:

`isoinfo -f -i {{path/to/image.iso}}`

- E[x]tract a specific file from an ISO image and send it out `stdout`:

`isoinfo -i {{path/to/image.iso}} -x {{/PATH/TO/FILE/INSIDE/ISO.EXT}}`

- Show header information for an ISO disk image:

`isoinfo -d -i {{path/to/image.iso}}`
"
sensible-browser,,,"# sensible-browser

> Open the default browser.

- Open a new window of the default browser:

`sensible-browser`

- Open a url in the default browser:

`sensible-browser {{url}}`
"
thunar,,,"# thunar

> Graphical file manager for XFCE desktop environments.

- Open a new window showing the current directory:

`thunar`

- Open the bulk rename utility:

`thunar --bulk-rename`

- Close all open thunar windows:

`thunar --quit`
"
debuild,https://manpages.debian.org/debuild,,"# debuild

> Tool to build a Debian package from source.
> More information: <https://manpages.debian.org/debuild>.

- Build the package in the current directory:

`debuild`

- Build a binary package only:

`debuild -b`

- Do not run lintian after building the package:

`debuild --no-lintian`
"
pamac,,,"# pamac

> A command line utility for the GUI package manager pamac.

- Install a new package:

`pamac install {{package_name}}`

- Remove a package and its no longer required dependencies (orphans):

`pamac remove -o {{package_name}}`

- Search the package database for a package:

`pamac search {{package_name}}`

- List installed packages:

`pamac list -i`

- Check for package updates:

`pamac checkupdates`
"
foreman,,,"# foreman

> Manage Procfile-based applications.

- Start an application with the Procfile in the current directory:

`foreman start`

- Start an application with a specified Procfile:

`foreman start -f {{Procfile}}`

- Start a specific application:

`foreman start {{process}}`

- Validate Procfile format:

`foreman check`

- Run one-off commands with the process's environment:

`foreman run {{command}}`

- Start all processes except the one named ""worker"":

`foreman start -m all=1,{{worker}}=0`
"
lastb,,,"# lastb

> Show a listing of last logged in users.

- Show a list of all last logged in users:

`sudo lastb`

- Show a list of all last logged in users since a given time:

`sudo lastb --since {{YYYY-MM-DD}}`

- Show a list of all last logged in users until a given time:

`sudo lastb --until {{YYYY-MM-DD}}`

- Show a list of all logged in users at a specific time:

`sudo lastb --present {{hh:mm}}`

- Show a list of all last logged in users and translate the IP into a hostname:

`sudo lastb --dns`
"
prename,,,"# rename

> Rename multiple files.
> NOTE: this page refers to the command from the `prename` Fedora package.

- Rename files using a Perl Common Regular Expression (substitute 'foo' with 'bar' wherever found):

`rename {{'s/foo/bar/'}} {{*}}`

- Dry-run - display which renames would occur without performing them:

`rename -n {{'s/foo/bar/'}} {{*}}`

- Force renaming even if the operation would remove existing destination files:

`rename -f {{'s/foo/bar/'}} {{*}}`

- Convert filenames to lower case (use `-f` in case-insensitive filesystems to prevent ""already exists"" errors):

`rename 'y/A-Z/a-z/' {{*}}`

- Replace whitespace with underscores:

`rename 's/\s+/_/g' {{*}}`
"
poweroff,,,"# poweroff

> Shutdown the system.

- Poweroff the system:

`sudo poweroff`
"
e2label,,,"# e2label

> Change the label on an ext2/ext3/ext4 filesystem.

- Change the volume label on a specific ext partition:

`e2label {{/dev/sda1}} {{""label_name""}}`
"
lsattr,,,"# lsattr

> List file attributes on a Linux file system.

- Display the attributes of the files in the current directory:

`lsattr`

- List the attributes of files in a particular path:

`lsattr {{path}}`

- List file attributes recursively in the current and subsequent directories:

`lsattr -R`

- Show attributes of all the files in the current directory, including hidden ones:

`lsattr -a`

- Display attributes of directories in the current directory:

`lsattr -d`
"
getent,,,"# getent

> Get entries from Name Service Switch libraries.

- Get list of all groups:

`getent group`

- See the members of a group:

`getent group {{group_name}}`

- Get list of all services:

`getent services`

- Find a username by UID:

`getent passwd 1000`

- Perform a reverse DNS lookup:

`getent hosts {{host}}`
"
ascii,http://www.catb.org/~esr/ascii/,"
ASCII(7)	     BSD Miscellaneous Information Manual	      ASCII(7)

NAME
     ascii -- octal, hexadecimal and decimal ASCII character sets

DESCRIPTION
     The octal set:

     000 nul  001 soh  002 stx	003 etx  004 eot  005 enq  006 ack  007 bel
     010 bs   011 ht   012 nl	013 vt	 014 np   015 cr   016 so   017 si
     020 dle  021 dc1  022 dc2	023 dc3  024 dc4  025 nak  026 syn  027 etb
     030 can  031 em   032 sub	033 esc  034 fs   035 gs   036 rs   037 us
     040 sp   041  !   042  ""	043  #	 044  $   045  %   046	&   047  '
     050  (   051  )   052  *	053  +	 054  ,   055  -   056	.   057  /
     060  0   061  1   062  2	063  3	 064  4   065  5   066	6   067  7
     070  8   071  9   072  :	073  ;	 074  <   075  =   076	>   077  ?
     100  @   101  A   102  B	103  C	 104  D   105  E   106	F   107  G
     110  H   111  I   112  J	113  K	 114  L   115  M   116	N   117  O
     120  P   121  Q   122  R	123  S	 124  T   125  U   126	V   127  W
     130  X   131  Y   132  Z	133  [	 134  \   135  ]   136	^   137  _
     140  `   141  a   142  b	143  c	 144  d   145  e   146	f   147  g
     150  h   151  i   152  j	153  k	 154  l   155  m   156	n   157  o
     160  p   161  q   162  r	163  s	 164  t   165  u   166	v   167  w
     170  x   171  y   172  z	173  {	 174  |   175  }   176	~   177 del

     The hexadecimal set:

     00 nul   01 soh   02 stx	03 etx	 04 eot   05 enq   06 ack   07 bel
     08 bs    09 ht    0a nl	0b vt	 0c np	  0d cr    0e so    0f si
     10 dle   11 dc1   12 dc2	13 dc3	 14 dc4   15 nak   16 syn   17 etb
     18 can   19 em    1a sub	1b esc	 1c fs	  1d gs    1e rs    1f us
     20 sp    21  !    22  ""	23  #	 24  $	  25  %    26  &    27	'
     28  (    29  )    2a  *	2b  +	 2c  ,	  2d  -    2e  .    2f	/
     30  0    31  1    32  2	33  3	 34  4	  35  5    36  6    37	7
     38  8    39  9    3a  :	3b  ;	 3c  <	  3d  =    3e  >    3f	?
     40  @    41  A    42  B	43  C	 44  D	  45  E    46  F    47	G
     48  H    49  I    4a  J	4b  K	 4c  L	  4d  M    4e  N    4f	O
     50  P    51  Q    52  R	53  S	 54  T	  55  U    56  V    57	W
     58  X    59  Y    5a  Z	5b  [	 5c  \	  5d  ]    5e  ^    5f	_
     60  `    61  a    62  b	63  c	 64  d	  65  e    66  f    67	g
     68  h    69  i    6a  j	6b  k	 6c  l	  6d  m    6e  n    6f	o
     70  p    71  q    72  r	73  s	 74  t	  75  u    76  v    77	w
     78  x    79  y    7a  z	7b  {	 7c  |	  7d  }    7e  ~    7f del

     The decimal set:

       0 nul	1 soh	 2 stx	  3 etx    4 eot    5 enq    6 ack    7 bel
       8 bs	9 ht	10 nl	 11 vt	  12 np    13 cr    14 so    15 si
      16 dle   17 dc1	18 dc2	 19 dc3   20 dc4   21 nak   22 syn   23 etb
      24 can   25 em	26 sub	 27 esc   28 fs    29 gs    30 rs    31 us
      32 sp    33  !	34  ""	 35  #	  36  $    37  %    38	&    39  '
      40  (    41  )	42  *	 43  +	  44  ,    45  -    46	.    47  /
      48  0    49  1	50  2	 51  3	  52  4    53  5    54	6    55  7
      56  8    57  9	58  :	 59  ;	  60  <    61  =    62	>    63  ?
      64  @    65  A	66  B	 67  C	  68  D    69  E    70	F    71  G
      72  H    73  I	74  J	 75  K	  76  L    77  M    78	N    79  O
      80  P    81  Q	82  R	 83  S	  84  T    85  U    86	V    87  W
      88  X    89  Y	90  Z	 91  [	  92  \    93  ]    94	^    95  _
      96  `    97  a	98  b	 99  c	 100  d   101  e   102	f   103  g
     104  h   105  i   106  j	107  k	 108  l   109  m   110	n   111  o
     112  p   113  q   114  r	115  s	 116  t   117  u   118	v   119  w
     120  x   121  y   122  z	123  {	 124  |   125  }   126	~   127 del

FILES
     /usr/share/misc/ascii

HISTORY
     An ascii manual page appeared in Version 7 AT&T UNIX.

BSD				 June 5, 1993				   BSD
","# ascii

> Show ASCII character aliases.
> More information: <http://www.catb.org/~esr/ascii/>.

- Show ASCII aliases of a character:

`ascii {{a}}`

- Show ASCII aliases in short, script-friendly mode:

`ascii -t {{a}}`

- Show ASCII aliases of multiple characters:

`ascii -s {{tldr}}`

- Show ASCII table in decimal:

`ascii -d`

- Show ASCII table in hexadecimal:

`ascii -x`

- Show ASCII table in octal:

`ascii -o`

- Show ASCII table in binary:

`ascii -b`

- Show options summary and complete ASCII table:

`ascii`
"
bluetoothctl,,,"# bluetoothctl

> Handling bluetooth devices from the shell.

- Enter the bluetoothctl shell:

`bluetoothctl`

- List devices:

`bluetoothctl -- devices`

- Pair a device:

`bluetoothctl -- pair {{mac_address}}`

- Remove a device:

`bluetoothctl -- remove {{mac_address}}`

- Connect a paired device:

`bluetoothctl -- connect {{mac_address}}`

- Disconnect a paired device:

`bluetoothctl -- disconnect {{mac_address}}`
"
mkfs.vfat,,,"# mkfs.vfat

> Creates an MS-DOS filesystem inside a partition.

- Create a.vfat filesystem inside partition 1 on device b (`sdb1`):

`mkfs.vfat {{/dev/sdb1}}`

- Create filesystem with a volume-name:

`mkfs.vfat -n {{volume_name}} {{/dev/sdb1}}`

- Create filesystem with a volume-id:

`mkfs.vfat -i {{volume_id}} {{/dev/sdb1}}`

- Use 5 instead of 2 file allocation tables:

`mkfs.vfat -f 5 {{/dev/sdb1}}`
"
nft,,,"# nft

> Allows configuration of tables, chains and rules provided by the Linux kernel firewall.
> Nftables replaces iptables.

- View current configuration:

`sudo nft list ruleset`

- Add a new table with family ""inet"" and table ""filter"":

`sudo nft add table {{inet}} {{filter}}`

- Add a new chain to accept all inbound traffic:

`sudo nft add chain {{inet}} {{filter}} {{input}} \{ type {{filter}} hook {{input}} priority {{0}} \; policy {{accept}} \}`

- Add a new rule to accept several TCP ports:

`sudo nft add rule {{inet}} {{filter}} {{input}} {{tcp}} {{dport \{ telnet, ssh, http, https \} accept}}`

- Show rule handles:

`sudo nft --handle --numeric list chain {{family}} {{table}} {{chain}}`

- Delete a rule:

`sudo nft delete rule {{inet}} {{filter}} {{input}} handle {{3}}`

- Save current configuration:

`sudo nft list ruleset > {{/etc/nftables.conf}}`
"
ark,https://docs.kde.org/stable5/en/kdeutils/ark/,,"# ark

> KDE archiving tool.
> More information: <https://docs.kde.org/stable5/en/kdeutils/ark/>.

- Extract an archive into the current directory:

`ark --batch {{archive}}`

- Change extraction directory:

`ark --batch --destination {{path/to/directory}} {{archive}}`

- Create an archive if it does not exist and add files to it:

`ark --add-to {{archive}} {{file1}} {{file2}}`
"
medusa,,,"# Medusa

> A modular and parallel login brute-forcer for a variety of protocols.

- Execute brute force against an FTP server using a file containing usernames and a file containing passwords:

`medusa -M ftp -h host -U {{path/to/username_file}} -P {{path/to/password_file}}`

- Execute a login attempt against a HTTP server using the username, password and user-agent specified:

`medusa -M HTTP -h host -u {{username}} -p {{password}} -m USER-AGENT:""{{Agent}}""`

- Execute a brute force against a MySQL server using a file cointaining usernames and a hash:

`medusa -M mysql -h host -U {{path/to/username_file}} -p {{hash}} -m PASS:HASH`

- Execute a brute force against a list of SMB servers using a username and a pwdump file:

`medusa -M smbnt -H {{path/to/hosts_file}} -C {{path/to/pwdump_file}} -u {{username}} -m PASS:HASH`
"
blkdiscard,,,"# blkdiscard

> Discards device sectors on storage devices. Useful for SSDs.

- Discard all sectors on a device, removing all data:

`blkdiscard /dev/{{device}}`

- Securely discard all blocks on a device, removing all data:

`blkdiscard --secure /dev/{{device}}`

- Discard the first 100MB of a device:

`blkdiscard --length {{100MB}} /dev/{{device}}`
"
cal,,"
CAL(1)			  BSD General Commands Manual			CAL(1)

NAME
     cal, ncal -- displays a calendar and the date of Easter

SYNOPSIS
     cal [-3hjy] [-A number] [-B number] [[month] year]
     cal [-3hj] [-A number] [-B number] -m month [year]
     ncal [-3hjJpwy] [-A number] [-B number] [-s country_code] [[month] year]
     ncal [-3hJeo] [-A number] [-B number] [year]
     ncal [-CN] [-H yyyy-mm-dd] [-d yyyy-mm]

DESCRIPTION
     The cal utility displays a simple calendar in traditional format and ncal
     offers an alternative layout, more options and the date of Easter.  The
     new format is a little cramped but it makes a year fit on a 25x80 termi-
     nal.  If arguments are not specified, the current month is displayed.

     The options are as follows:

     -h      Turns off highlighting of today.

     -J      Display Julian Calendar, if combined with the -e option, display
	     date of Easter according to the Julian Calendar.

     -e      Display date of Easter (for western churches).

     -j      Display Julian days (days one-based, numbered from January 1).

     -m month
	     Display the specified month.  If month is specified as a decimal
	     number, it may be followed by the letter `f' or `p' to indicate
	     the following or preceding month of that number, respectively.

     -o      Display date of Orthodox Easter (Greek and Russian Orthodox
	     Churches).

     -p      Print the country codes and switching days from Julian to Grego-
	     rian Calendar as they are assumed by ncal.  The country code as
	     determined from the local environment is marked with an asterisk.

     -s country_code
	     Assume the switch from Julian to Gregorian Calendar at the date
	     associated with the country_code.	If not specified, ncal tries
	     to guess the switch date from the local environment or falls back
	     to September 2, 1752.  This was when Great Britain and her
	     colonies switched to the Gregorian Calendar.

     -w      Print the number of the week below each week column.

     -y      Display a calendar for the specified year.

     -3      Display the previous, current and next month surrounding today.

     -A number
	     Display the number of months after the current month.

     -B number
	     Display the number of months before the current month.

     -C      Switch to cal mode.

     -N      Switch to ncal mode.

     -d yyyy-mm
	     Use yyyy-mm as the current date (for debugging of date selec-
	     tion).

     -H yyyy-mm-dd
	     Use yyyy-mm-dd as the current date (for debugging of highlight-
	     ing).

     A single parameter specifies the year (1-9999) to be displayed; note the
     year must be fully specified: ``cal 89'' will not display a calendar for
     1989.  Two parameters denote the month and year; the month is either a
     number between 1 and 12, or a full or abbreviated name as specified by
     the current locale.  Month and year default to those of the current sys-
     tem clock and time zone (so ``cal -m 8'' will display a calendar for the
     month of August in the current year).

     Not all options can be used together. For example ``-3 -A 2 -B 3 -y -m
     7'' would mean: show me the three months around the seventh month, three
     before that, two after that and the whole year.  ncal will warn about
     these combinations.

     A year starts on January 1.

     Highlighting of dates is disabled if stdout is not a tty.

SEE ALSO
     calendar(3), strftime(3)

HISTORY
     A cal command appeared in Version 5 AT&T UNIX.  The ncal command appeared
     in FreeBSD 2.2.6.

AUTHORS
     The ncal command and manual were written by Wolfgang Helbig
     <helbig@FreeBSD.org>.

BUGS
     The assignment of Julian-Gregorian switching dates to country codes is
     historically naive for many countries.

     Not all options are compatible and using them in different orders will
     give varying results.

BSD				March 14, 2009				   BSD
","# cal

> Prints calendar information, with the current day highlighted.

- Display a calendar for the current month:

`cal`

- Display previous, current and next month:

`cal -3`

- Use monday as the first day of the week:

`cal --monday`

- Display a calendar for a specific year (4 digits):

`cal {{year}}`

- Display a calendar for a specific month and year:

`cal {{month}} {{year}}`
"
dos2unix,,,"# dos2unix

> Change DOS-style line endings to Unix-style.
> Replaces CRLF with CR.

- Change the line endings of a file:

`dos2unix {{filename}}`

- Create a copy with Unix-style line endings:

`dos2unix -n {{filename}} {{new_filename}}`
"
homeshick,https://github.com/andsens/homeshick/wiki,,"# Homeshick

> Synchronize Git dotfiles.
> More information <https://github.com/andsens/homeshick/wiki>.

- Create a new castle:

`homeshick generate {{castle_name}}`

- Add a file to your castle:

`homeshick track {{castle_name}} {{path/to/file}}`

- Go to a castle:

`homeshick cd {{castle_name}}`

- Clone a castle:

`homeshick clone {{github_username}}/{{repository_name}}`

- Symlink all files from a castle:

`homeshick link {{castle_name}}`
"
rc-service,,,"# rc-service

> Locate and run OpenRC services with arguments.
> See also `openrc`.

- Show a service's status:

`rc-service {{service_name}} status`

- Start a service:

`sudo rc-service {{service_name}} start`

- Stop a service:

`sudo rc-servie {{service_name}} stop`

- Restart a service:

`sudo rc-service {{service_name}} restart`

- Simulate running a service's custom command:

`sudo rc-service --dry-run {{service_name}} {{command_name}}`

- Actually run a service's custom command:

`sudo rc-service {{service_name}} {{command_name}}`

- Resolve the location of a service definition on disk:

`sudo rc-service --resolve {{service_name}}`
"
tune2fs,,,"# tune2fs

> Adjust parameters of an ext2, ext3 or ext4 filesystem.
> May be used on mounted filesystems.

- Set the max number of counts before a filesystem is checked to 2:

`tune2fs -c {{2}} {{/dev/sdXN}}`

- Set the filesystem label to MY_LABEL:

`tune2fs -L {{'MY_LABEL'}} {{/dev/sdXN}}`

- Enable discard and user-specified extended attributes for a filesystem:

`tune2fs -o {{discard,user_xattr}} {{/dev/sdXN}}`

- Enable journaling for a filesystem:

`tune2fs -o^{{nobarrier}} {{/dev/sdXN}}`
"
sinfo,https://slurm.schedmd.com/sinfo.html,,"# sinfo

> View information about Slurm nodes and partitions.
> See also `squeue` and `sbatch`, which are also part of the Slurm workload manager.
> More information: <https://slurm.schedmd.com/sinfo.html>.

- Show a quick summary overview of the cluster:

`sinfo --summarize`

- View the detailed status of all partitions across the entire cluster:

`sinfo`

- View the detailed status of a specific partition:

`sinfo --partition {{partition_name}}`

- View information about idle nodes:

`sinfo --states {{idle}}`

- Summarise dead nodes:

`sinfo --dead`

- List dead nodes and the reasons why:

`sinfo --list-reasons`
"
fallocate,,,"# fallocate

> Reserve or deallocate disk space to files.
> The utility allocates space without zeroing.

- Reserve a file taking up 700MB of disk space:

`fallocate --length {{700M}} {{path/to/file}}`

- Shrink an already allocated file by 200MB:

`fallocate --collapse-range --length {{200M}} {{path/to/file}}`

- Shrink 20MB of space after 100MB in a file:

`fallocate --collapse-range --offset {{100M}} --length {{20M}} {{path/to/file}}`
"
brctl,,"
BRCTL(1)		  BSD General Commands Manual		      BRCTL(1)

NAME
     brctl -- Manage the CloudDocs daemon

SYNOPSIS
     brctl <command> [command-options and arguments]

DESCRIPTION
     brctl understands the following commands:

     diagnose [options] [<diagnosis-output-path>]
	 diagnose and collect logs

	 -M,--collect-mobile-documents[=<container>]  (default: all contain-
     ers)
	 -s,--sysdiagnose     Do not collect what's already part of sysdiag-
     nose
	 -n,--name=<name>     Change the device name
	 [<diagnosis-output-path>]
			      Specifies the output path of the diagnosis; -n
     becomes useless.

     download <path>
	 download a local copy of the document at this path

     evict <path>
	 evict the local copy of the document at this path

     log [options] [<command>]

	 -c,--color[={yes,no}]
			      turn on or off color use
	 -d,--path=<logs-dir> use <logs-dir> instead of default
	 -H,--home=<home-dir> use this as the ~ prefix, to look for ~/L/
	 -f,--filter=<predicate>
			      only show lines matching predicate
	 -m,--multiline[={yes,no}]
			      turn on or off multiple line logging
	 -n=<number>	      number of initial lines to display
	 -p,--page	      use paging
	 -w,--wait	      wait for new logs continuously (syslog -w)
	 -t,--shorten	      Shorten UUIDs, paths, etc
	 -s,--digest	      Only print digest logs

     dump [options] [<container>]
	 dump the CloudDocs database

	 -o,--output=<file-path>
			      redirect output to <file-path>
	 -d,--database-path=<db-path>
			      Use the database at <db-path>
	 [<container>]	      the container to be dumped

     monitor [options] <container>
	 use NSMetadataQuery to monitor the container

	 -S,--scope=<scope>
			      restrict the NSMDQ scope to DOCS, DATA, or BOTH

     versions [options] <path> [ALL|etags...]
	 list the non-local versions of the document at this path.

	 -a,--all	      List all non-local versions including those that
			      are locally cached

SEE ALSO
     bird(8)

Mac OS			      September 23, 2020			Mac OS
","# brctl

> Ethernet bridge administration.

- Show a list with information about currently existing ethernet bridges:

`sudo brctl show`

- Create a new ethernet bridge interface:

`sudo brctl add {{bridge_name}}`

- Delete an existing ethernet bridge interface:

`sudo brctl del {{bridge_name}}`

- Add an interface to an existing bridge:

`sudo brctl addif {{bridge_name}} {{interface_name}}`

- Remove an interface from an existing bridge:

`sudo brctl delif {{bridge_name}} {{interface_name}}`
"
ncdu,,,"# ncdu

> Disk usage analyzer with an ncurses interface.

- Analyze the current working directory:

`ncdu`

- Analyze a given directory:

`ncdu {{path/to/directory}}`

- Save results to a file:

`ncdu -o {{path/to/file}}`

- Exclude files that match a pattern, argument can be given multiple times to add more patterns:

`ncdu --exclude '{{*.txt}}'`
"
ncat,,,"# ncat

> Use the normal `cat` functionality over networks.

- Listen for input on the specified port and write it to the specified file:

`ncat -l {{port}} > {{path/to/file}}`

- Accept multiple connections and keep ncat open after they have been closed:

`ncat -lk {{port}}`

- Write output of specified file to the specified host on the specified port:

`ncat {{address}} {{port}} < {{path/to/file}}`
"
extrace,https://github.com/chneukirchen/extrace,,"# extrace

> Trace exec() calls.
> More information: <https://github.com/chneukirchen/extrace>.

- Trace all program executions occurring on the system:

`sudo extrace`

- Run a command and only trace descendants of this command:

`sudo extrace {{command}}`

- Print the current working directory of each process:

`sudo extrace -d`

- Resolve the full path of each executable:

`sudo extrace -l`

- Display the user running each process:

`sudo extrace -u`
"
ipcalc,,,"# ipcalc

> Perform simple operations and calculations on IP addresses and networks.

- Show information about an address or network with a given subnet mask:

`ipcalc {{1.2.3.4}} {{255.255.255.0}}`

- Show information about an address or network in CIDR notation:

`ipcalc {{1.2.3.4}}/{{24}}`

- Show the broadcast address of an address or network:

`ipcalc -b {{1.2.3.4}}/{{30}}`

- Show the network address of provided IP address and netmask:

`ipcalc -n {{1.2.3.4}}/{{24}}`

- Display geographic information about a given IP address:

`ipcalc -g {{1.2.3.4}}`
"
terminator,,,"# terminator

> Arrange multiple GNOME terminals in one window.

- Start terminator window:

`terminator`

- Start with a fullscreen window:

`terminator -f`

- Split terminals horizontally:

`Ctrl + Shift + O`

- Split terminals vertically:

`Ctrl + Shift + E`

- Open new tab:

`Ctrl + Shift + T`
"
i7z,,,"# i7z

> An Intel CPU (only i3, i5 and i7) realtime reporting tool.

- Start i7z (needs to be run in super user mode):

`sudo i7z`
"
etckeeper,http://etckeeper.branchable.com/,,"# etckeeper

> Track system configuration files in git.
> More information: <http://etckeeper.branchable.com/>.

- Set up a git repo and perform various setup tasks (run from /etc):

`sudo etckeeper init`

- Commit all changes in /etc:

`sudo etckeeper commit {{message}}`

- Run arbitrary git commands:

`sudo etckeeper vcs {{status}}`

- Check if there are uncommitted changes (only returns an exit code):

`sudo etckeeper unclean`

- Destroy existing repo and stop tracking changes:

`sudo etckeeper uninit`
"
macchanger,,,"# macchanger

> Command-line utility for manipulating network interface MAC addresses.

- View the current and permanent MAC addresses of a interface:

`macchanger --show {{interface}}`

- Set interface to a random MAC:

`macchanger --random {{interface}}`

- Set interface to a specific MAC:

`macchanger --mac {{XX:XX:XX:XX:XX:XX}} {{interface}}`

- Reset interface to its permanent hardware MAC:

`macchanger --permanent {{interface}}`
"
namei,,,"# namei

> Follows a pathname (which can be a symbolic link) until a terminal point is found (a file/directory/char device etc).
> This program is useful for finding ""too many levels of symbolic links"" problems.

- Resolve the pathnames specified as the argument parameters:

`namei {{path/to/a}} {{path/to/b}} {{path/to/c}}`

- Display the results in a long-listing format:

`namei --long {{path/to/a}} {{path/to/b}} {{path/to/c}}`

- Show the mode bits of each file type in the style of `ls`:

`namei --modes {{path/to/a}} {{path/to/b}} {{path/to/c}}`

- Show owner and group name of each file:

`namei --owners {{path/to/a}} {{path/to/b}} {{path/to/c}}`

- Don't follow symlinks while resolving:

`namei --nosymlinks {{path/to/a}} {{path/to/b}} {{path/to/c}}`
"
reflector,,,"# reflector

> Arch script to fetch and sort mirrorlists.

- Get all mirrors, sort for download speed and save them:

`sudo reflector --sort {{rate}} --save {{/etc/pacman.d/mirrorlist}}`

- Only get German HTTPS mirrors:

`reflector --country {{Germany}} --protocol {{https}}`

- Only get the 10 recently sync'd mirrors:

`reflector --latest {{10}}`
"
ports,,,"# ports

> Update/list the ports tree on a CRUX system.

- Update the ports tree:

`ports -u`

- List the ports in the current tree:

`ports -l`

- Check the differences between installed packages and the ports tree:

`ports -d`
"
lvs,https://www.man7.org/linux/man-pages/man8/lvs.8.html,,"# lvs

> Display information about LVM logical volumes.
> More information: <https://www.man7.org/linux/man-pages/man8/lvs.8.html>.

- Display information about logical volumes:

`lvs`

- Display all logical volumes:

`lvs -a`

- Change default display to show more details:

`lvs -v`

- Display only specific fields:

`lvs -o {{field_name_1}},{{field_name_2}}`

- Append field to default display:

`lvs -o +{{field_name}}`

- Suppress heading line:

`lvs --noheadings`

- Use a separator to separate fields:

`lvs --separator {{=}}`
"
reset,,"tput(1) 							       tput(1)



NAME
       tput, reset - initialize a terminal or query terminfo database

SYNOPSIS
       tput [-Ttype] capname [parms ... ]
       tput [-Ttype] init
       tput [-Ttype] reset
       tput [-Ttype] longname
       tput -S	<<
       tput -V

DESCRIPTION
       The  tput utility uses the terminfo database to make the values of ter-
       minal-dependent capabilities and information  available	to  the  shell
       (see  sh(1)),  to  initialize or reset the terminal, or return the long
       name of the requested terminal type.  The result depends upon the capa-
       bility's type:

	      string
		   tput writes the string to the standard output.  No trailing
		   newline is supplied.

	      integer
		   tput writes the decimal value to the standard output,  with
		   a trailing newline.

	      boolean
		   tput  simply sets the exit code (0 for TRUE if the terminal
		   has the capability, 1 for FALSE if it does not), and writes
		   nothing to the standard output.

       Before  using  a value returned on the standard output, the application
       should test the exit code (e.g., $?, see sh(1)) to be  sure  it	is  0.
       (See  the EXIT CODES and DIAGNOSTICS sections.)	For a complete list of
       capabilities and the capname associated with each, see terminfo(5).

       -Ttype indicates the type of terminal.  Normally this option is	unnec-
	      essary,  because the default is taken from the environment vari-
	      able TERM.  If -T is specified, then the shell  variables  LINES
	      and COLUMNS will be ignored,and the operating system will not be
	      queried for the actual screen size.

       capname
	      indicates the capability from the terminfo database.  When term-
	      cap  support is compiled in, the termcap name for the capability
	      is also accepted.

       parms  If the capability is a string that takes parameters,  the  argu-
	      ments parms will be instantiated into the string.

	      Most  parameters	are numbers.  Only a few terminfo capabilities
	      require string parameters; tput uses a table to decide which  to
	      pass  as	strings.  Normally tput uses tparm (3X) to perform the
	      substitution.  If no parameters are given  for  the  capability,
	      tput writes the string without performing the substitution.

       -S     allows  more  than  one  capability per invocation of tput.  The
	      capabilities must be passed to  tput  from  the  standard  input
	      instead  of  from the command line (see example).  Only one cap-
	      name is allowed per line.  The -S option changes the meaning  of
	      the  0  and  1 boolean and string exit codes (see the EXIT CODES
	      section).

	      Again, tput uses a table and the presence of parameters  in  its
	      input  to decide whether to use tparm (3X), and how to interpret
	      the parameters.

       -V     reports the version of ncurses which was used in	this  program,
	      and exits.

       init   If  the terminfo database is present and an entry for the user's
	      terminal exists (see -Ttype, above), the following will occur:

	      (1)    if present, the terminal's initialization strings will be
		     output as detailed in the terminfo(5) section on Tabs and
		     Initialization,

	      (2)    any delays (e.g., newline) specified in the entry will be
		     set in the tty driver,

	      (3)    tabs  expansion will be turned on or off according to the
		     specification in the entry, and

	      (4)    if tabs are not  expanded,  standard  tabs  will  be  set
		     (every 8 spaces).

	      If  an  entry does not contain the information needed for any of
	      the four	above  activities,  that  activity  will  silently  be
	      skipped.

       reset  Instead  of  putting  out initialization strings, the terminal's
	      reset strings will be output if present (rs1, rs2, rs3, rf).  If
	      the  reset  strings  are not present, but initialization strings
	      are, the initialization  strings	will  be  output.   Otherwise,
	      reset acts identically to init.

       longname
	      If  the terminfo database is present and an entry for the user's
	      terminal exists (see -Ttype above), then the long  name  of  the
	      terminal will be put out.  The long name is the last name in the
	      first line of the terminal's description in the  terminfo  data-
	      base [see term(5)].

       If  tput  is invoked by a link named reset, this has the same effect as
       tput reset.  See tset for comparison, which has similar behavior.

EXAMPLES
       tput init
	    Initialize the terminal according to the type of terminal  in  the
	    environmental  variable  TERM.  This command should be included in
	    everyone's .profile after the environmental variable TERM has been
	    exported, as illustrated on the profile(5) manual page.

       tput -T5620 reset
	    Reset  an  AT&T  5620 terminal, overriding the type of terminal in
	    the environmental variable TERM.

       tput cup 0 0
	    Send the sequence to move the cursor to row 0, column 0 (the upper
	    left  corner  of  the  screen,  usually known as the ""home"" cursor
	    position).

       tput clear
	    Echo the clear-screen sequence for the current terminal.

       tput cols
	    Print the number of columns for the current terminal.

       tput -T450 cols
	    Print the number of columns for the 450 terminal.

       bold=`tput smso` offbold=`@TPUT@ rmso`
	    Set the shell variables bold, to begin  stand-out  mode  sequence,
	    and offbold, to end standout mode sequence, for the current termi-
	    nal.  This might be followed by a prompt: echo ""${bold}Please type
	    in your name: ${offbold}\c""

       tput hc
	    Set  exit  code to indicate if the current terminal is a hard copy
	    terminal.

       tput cup 23 4
	    Send the sequence to move the cursor to row 23, column 4.

       tput cup
	    Send the terminfo string for cursor-movement, with	no  parameters
	    substituted.

       tput longname
	    Print  the	long  name  from the terminfo database for the type of
	    terminal specified in the environmental variable TERM.

	    tput -S <<!
	    > clear
	    > cup 10 10
	    > bold
	    > !

	    This example shows tput processing	several  capabilities  in  one
	    invocation.   It  clears  the screen, moves the cursor to position
	    10, 10 and turns on bold (extra bright) mode.  The list is	termi-
	    nated by an exclamation mark (!) on a line by itself.

FILES
       /usr/share/terminfo
	      compiled terminal description database

       /usr/share/tabset/*
	      tab  settings  for some terminals, in a format appropriate to be
	      output to the terminal (escape sequences that  set  margins  and
	      tabs);  for  more information, see the ""Tabs and Initialization""
	      section of terminfo(5)

EXIT CODES
       If the -S option is used, tput checks for errors from each line, and if
       any  errors  are  found, will set the exit code to 4 plus the number of
       lines with errors.  If no errors are found, the exit  code  is  0.   No
       indication  of which line failed can be given so exit code 1 will never
       appear.	Exit codes 2, 3, and 4 retain their usual interpretation.   If
       the  -S	option	is not used, the exit code depends on the type of cap-
       name:

	    boolean
		   a value of 0 is set for TRUE and 1 for FALSE.

	    string a value of 0 is set if the capname is defined for this ter-
		   minal  type	(the  value of capname is returned on standard
		   output); a value of 1 is set if capname is not defined  for
		   this terminal type (nothing is written to standard output).

	    integer
		   a value of 0 is always  set,  whether  or  not  capname  is
		   defined for this terminal type.  To determine if capname is
		   defined for this terminal type,  the  user  must  test  the
		   value written to standard output.  A value of -1 means that
		   capname is not defined for this terminal type.

	    other  reset or init may fail to find their respective files.   In
		   that case, the exit code is set to 4 + errno.

       Any other exit code indicates an error; see the DIAGNOSTICS section.

DIAGNOSTICS
       tput  prints  the  following  error messages and sets the corresponding
       exit codes.


       exit code   error message
       ---------------------------------------------------------------------
       0	   (capname is a numeric variable that is not specified  in
		   the	terminfo(5)  database  for this terminal type, e.g.
		   tput -T450 lines and @TPUT@ -T2621 xmc)
       1	   no error message is printed, see the EXIT CODES section.
       2	   usage error
       3	   unknown terminal type or no terminfo database
       4	   unknown terminfo capability capname
       >4	   error occurred in -S
       ---------------------------------------------------------------------

PORTABILITY
       The longname and -S options, and  the  parameter-substitution  features
       used in the cup example, are not supported in BSD curses or in AT&T/USL
       curses before SVr4.

       X/Open documents only the operands for clear, init and reset.  In  this
       implementation,	clear is part of the capname support.  Other implemen-
       tations of tput on SVr4-based systems such as Solaris, IRIX64 and  HPUX
       as well as others such as AIX and Tru64 provide support for capname op-
       erands.	A few platforms such as FreeBSD and NetBSD  recognize  termcap
       names  rather  than  terminfo capability names in their respective tput
       commands.

SEE ALSO
       clear(1), stty(1), tabs(1), terminfo(5).

       This describes ncurses version 5.7 (patch 20081102).



								       tput(1)
","# reset

> Reinitialises the current terminal. Clears the entire terminal screen.

- Reinitialise the current terminal:

`reset`

- Display the terminal type instead:

`reset -q`
"
lspci,,,"# lspci

> List all PCI devices.

- Show a brief list of devices:

`lspci`

- Display additional info:

`lspci -v`

- Display drivers and modules handling each device:

`lspci -k`

- Show a specific device:

`lspci -s {{00:18.3}}`

- Dump info in a readable form:

`lspci -vm`
"
readelf,http://man7.org/linux/man-pages/man1/readelf.1.html,,"# readelf

> Displays information about ELF files.
> More information: <http://man7.org/linux/man-pages/man1/readelf.1.html>.

- Display all information about the ELF file:

`readelf -all {{path/to/binary}}`

- Display all the headers present in the ELF file:

`readelf --headers {{path/to/binary}}`

- Display the entries in symbol table section of the ELF file, if it has one:

`readelf --symbols {{path/to/binary}}`

- Display the information contained in the ELF header at the start of the file:

`readelf --file-header {{path/to/binary}}`
"
htop,,"HTOP(1) 			     Utils			       HTOP(1)



NAME
       htop - interactive process viewer

SYNOPSIS
       htop [-dChustv]

DESCRIPTION
       Htop is a free (GPL) ncurses-based process viewer for Linux.

       It  is similar to top, but allows you to scroll vertically and horizon-
       tally, so you can see all the processes running on  the	system,  along
       with  their  full  command  lines, as well as viewing them as a process
       tree, selecting multiple processes and acting on them all at once.

       Tasks related to processes (killing,  renicing)	can  be  done  without
       entering their PIDs.

COMMAND-LINE OPTIONS
       Mandatory  arguments  to  long  options are mandatory for short options
       too.


       -d --delay=DELAY
	      Delay between updates, in tenths of seconds

       -C --no-color --no-colour
	      Start htop in monochrome mode

       -h --help
	      Display a help message and exit

       -p --pid=PID,PID...
	      Show only the given PIDs

       -s --sort-key COLUMN
	      Sort by this column (use --sort-key help for a column list)

       -u --user=USERNAME
	      Show only the processes of a given user

       -v --version
	      Output version information and exit

       -t --tree
	      Show processes in tree view


INTERACTIVE COMMANDS
       The following commands are supported while in htop:


       Up, Alt-k
	    Select (highlight) the  previous  process  in  the	process  list.
	    Scroll the list if necessary.

       Down, Alt-j
	    Select  (highlight)  the  next process in the process list. Scroll
	    the list if necessary.

       Left, Alt-h
	    Scroll the process list left.

       Right, Alt-l
	    Scroll the process list right.

       PgUp, PgDn
	    Scroll the process list up or down one window.

       Home Scroll to the top  of  the	process  list  and  select  the  first
	    process.

       End  Scroll  to	the  bottom  of  the  process list and select the last
	    process.

       Ctrl-A, ^
	    Scroll left to the beginning of the process entry (i.e.  beginning
	    of line).

       Ctrl-E, $
	    Scroll right to the end of the process entry (i.e. end of line).

       Space
	    Tag or untag a process. Commands that can operate on multiple pro-
	    cesses, like ""kill"", will then apply over the list of tagged  pro-
	    cesses, instead of the currently highlighted one.

       U    Untag all processes (remove all tags added with the Space key).

       s    Trace  process  system  calls: if strace(1) is installed, pressing
	    this key will attach it to the currently  selected	process,  pre-
	    senting a live update of system calls issued by the process.

       l    Display  open files for a process: if lsof(1) is installed, press-
	    ing this key will display the list of file descriptors  opened  by
	    the process.

       F1, h, ?
	    Go to the help screen

       F2, S
	    Go	to  the  setup screen, where you can configure the meters dis-
	    played at the top of the  screen,  set  various  display  options,
	    choose  among  color  schemes,  and  select which columns are dis-
	    played, in which order.

       F3, /
	    Incrementally search the command lines of all the  displayed  pro-
	    cesses.  The  currently selected (highlighted) command will update
	    as you type. While in search mode, pressing F3 will cycle  through
	    matching occurrences.

       F4, \
	    Incremental  process  filtering: type in part of a process command
	    line and only processes whose names match will be shown. To cancel
	    filtering, enter the Filter option again and press Esc.

       F5, t
	    Tree  view: organize processes by parenthood, and layout the rela-
	    tions between them as a tree. Toggling the key will switch between
	    tree and your previously selected sort view. Selecting a sort view
	    will exit tree view.

       F6   On sorted view,  select  a	field  for  sorting,  also  accessible
	    through  <	and >.	The current sort field is indicated by a high-
	    light in the header.  On tree view, expand or collapse the current
	    subtree.  A  ""+""  indicator  in the tree node indicates that it is
	    collapsed.

       F7, ]
	    Increase the selected process's  priority  (subtract  from	'nice'
	    value).  This can only be done by the superuser.

       F8, [
	    Decrease the selected process's priority (add to 'nice' value)

       F9, k
	    ""Kill"" process: sends a signal which is selected in a menu, to one
	    or a group of processes. If processes were tagged, sends the  sig-
	    nal to all tagged processes.  If none is tagged, sends to the cur-
	    rently selected process.

       F10, q
	    Quit

       I    Invert the sort order: if sort  order  is  increasing,  switch  to
	    decreasing, and vice-versa.

       +, - When in tree view mode, expand or collapse subtree. When a subtree
	    is collapsed a ""+"" sign shows to the left of the process name.

       a (on multiprocessor machines)
	    Set CPU affinity: mark which CPUs a process is allowed to use.

       u    Show only processes owned by a specified user.

       M    Sort by memory usage (top compatibility key).

       P    Sort by processor usage (top compatibility key).

       T    Sort by time (top compatibility key).

       F    ""Follow"" process: if the sort order causes the currently  selected
	    process  to  move  in  the list, make the selection bar follow it.
	    This is useful for monitoring a process: this way, you can keep  a
	    process  always  visible  on  screen. When a movement key is used,
	    ""follow"" loses effect.

       K    Hide kernel threads: prevent the threads belonging the  kernel  to
	    be displayed in the process list. (This is a toggle key.)

       H    Hide user threads: on systems that represent them differently than
	    ordinary processes (such as recent NPTL-based systems),  this  can
	    hide  threads  from userspace processes in the process list. (This
	    is a toggle key.)

       p    Show full paths to running programs, where applicable. (This is  a
	    toggle key.)

       Ctrl-L
	    Refresh: redraw screen and recalculate values.

       Numbers
	    PID search: type in process ID and the selection highlight will be
	    moved to it.


COLUMNS
       The following columns can display data about each process. A  value  of
       '-' in all the rows indicates that a column is unsupported on your sys-
       tem, or currently unimplemented in htop. The names below are  the  ones
       used  in the ""Available Columns"" section of the setup screen. If a dif-
       ferent name is shown in htop's main screen, it is shown below in paren-
       thesis.


       Command
	    The  full command line of the process (i.e. program name and argu-
	    ments).

       PID  The process ID.

       STATE (S)
	    The state of the process:
	       S for sleeping (idle)
	       R for running
	       D for disk sleep (uninterruptible)
	       Z for zombie (waiting for parent to read its exit status)
	       T for traced or suspended (e.g by SIGTSTP)
	       W for paging

       PPID The parent process ID.

       PGRP The process's group ID.

       SESSION (SID)
	    The process's session ID.

       TTY_NR (TTY)
	    The controlling terminal of the process.

       TPGID
	    The process ID of the foreground process group of the  controlling
	    terminal.

       MINFLT
	    The number of page faults happening in the main memory.

       CMINFLT
	    The  number  of minor faults for the process's waited-for children
	    (see MINFLT above).

       MAJFLT
	    The number of page faults happening out of the main memory.

       CMAJFLT
	    The number of major faults for the process's  waited-for  children
	    (see MAJFLT above).

       UTIME (UTIME+)
	    The  user  CPU  time,  which is the amount of time the process has
	    spent executing on the CPU in user mode (i.e. everything but  sys-
	    tem calls), measured in clock ticks.

       STIME (STIME+)
	    The  system  CPU  time, which is the amount of time the kernel has
	    spent executing system calls on behalf of the process, measured in
	    clock ticks.

       CUTIME (CUTIME+)
	    The  children's  user  CPU	time,  which is the amount of time the
	    process's waited-for children have spent executing	in  user  mode
	    (see UTIME above).

       CSTIME (CSTIME+)
	    The  children's  system  CPU time, which is the amount of time the
	    kernel has spent executing system  calls  on  behalf  of  all  the
	    process's waited-for children (see STIME above).

       PRIORITY (PRI)
	    The  kernel's  internal priority for the process, usually just its
	    nice value plus twenty. Different for real-time processes.

       NICE (NI)
	    The nice value of a process, from 19 (low priority) to  -20  (high
	    priority).	A  high value means the process is being nice, letting
	    others have a higher relative priority. The  usual	OS  permission
	    restrictions for adjusting priority apply.

       STARTTIME (START)
	    The time the process was started.

       PROCESSOR (CPU)
	    The ID of the CPU the process last executed on.

       M_SIZE (VIRT)
	    The size of the virtual memory of the process.

       M_RESIDENT (RES)
	    The  resident  set size (text + data + stack) of the process (i.e.
	    the size of the process's used physical memory).

       M_SHARE (SHR)
	    The size of the process's shared pages.

       M_TRS (CODE)
	    The text resident set size of the process (i.e. the  size  of  the
	    process's executable instructions).

       M_DRS (DATA)
	    The data resident set size (data + stack) of the process (i.e. the
	    size of anything except the process's executable instructions).

       M_LRS (LIB)
	    The library size of the process.

       M_DT (DIRTY)
	    The size of the dirty pages of the process.

       ST_UID (UID)
	    The user ID of the process owner.

       PERCENT_CPU (CPU%)
	    The percentage of the CPU  time  that  the	process  is  currently
	    using.

       PERCENT_MEM (MEM%)
	    The  percentage of memory the process is currently using (based on
	    the process's resident memory size, see M_RESIDENT above).

       USER The username of the process owner, or the  user  ID  if  the  name
	    can't be determined.

       TIME (TIME+)
	    The  time,	measured  in clock ticks that the process has spent in
	    user and system time (see UTIME, STIME above).

       NLWP The number of threads in the process.

       TGID The thread group ID.

       CTID OpenVZ container ID, a.k.a virtual environment ID.

       VPID OpenVZ process ID.

       VXID VServer process ID.

       RCHAR (RD_CHAR)
	    The number of bytes the process has read.

       WCHAR (WR_CHAR)
	    The number of bytes the process has written.

       SYSCR (RD_SYSC)
	    The number of read(2) syscalls for the process.

       SYSCW (WR_SYSC)
	    The number of write(2) syscalls for the process.

       RBYTES (IO_RBYTES)
	    Bytes of read(2) I/O for the process.

       WBYTES (IO_WBYTES)
	    Bytes of write(2) I/O for the process.

       CNCLWB (IO_CANCEL)
	    Bytes of cancelled write(2) I/O.

       IO_READ_RATE (DISK READ)
	    The I/O rate of read(2) in bytes per second, for the process.

       IO_WRITE_RATE (DISK WRITE)
	    The I/O rate of write(2) in bytes per second, for the process.

       IO_RATE (DISK R/W)
	    The I/O rate, IO_READ_RATE + IO_WRITE_RATE (see above).

       CGROUP
	    Which cgroup the process is in.

       OOM  OOM killer score.

       IO_PRIORITY (IO)
	    The I/O scheduling class followed by the  priority	if  the  class
	    supports it:
	       R for Realtime
	       B for Best-effort
	       id for Idle

       PERCENT_CPU_DELAY (CPUD%)
	    The  percentage  of time spent waiting for a CPU (while runnable).
	    Requires CAP_NET_ADMIN.

       PERCENT_IO_DELAY (IOD%)
	    The percentage of time spent waiting for the  completion  of  syn-
	    chronous block I/O. Requires CAP_NET_ADMIN.

       PERCENT_SWAP_DELAY (SWAPD%)
	    The   percentage   of  time  spent	swapping  in  pages.  Requires
	    CAP_NET_ADMIN.

       All other flags
	    Currently unsupported (always displays '-').


CONFIG FILE
       By default htop reads its configuration	from  the  XDG-compliant  path
       ~/.config/htop/htoprc  --  the  configuration  file  is	overwritten by
       htop's in-program Setup configuration, so it should not be hand-edited.
       If no user configuration exists htop tries to read the system-wide con-
       figuration from ${prefix}/etc/htoprc and as a last resort,  falls  back
       to its hard coded defaults.

       You may override the location of the configuration file using the $HTO-
       PRC environment variable (so you can have multiple  configurations  for
       different machines that share the same home directory, for example).


MEMORY SIZES
       Memory  sizes  in  htop are displayed as they are in tools from the GNU
       Coreutils (when ran with the --human-readable option). This means  that
       sizes are printed in powers of 1024. (e.g., 1023M = 1072693248 Bytes)

       The  decision  to  use  this  convention  was made in order to conserve
       screen space and make memory size representations consistent throughout
       htop.


SEE ALSO
       proc(5), top(1), free(1), ps(1), uptime(1), limits.conf(5)


AUTHORS
       htop is developed by Hisham Muhammad <hisham@gobolinux.org>.

       This  man  page	was  written  by  Bartosz Fenski <fenio@o2.pl> for the
       Debian GNU/Linux distribution (but it may be used by  others).  It  was
       updated	by Hisham Muhammad, and later by Vincent Launchbury, who wrote
       the 'Columns' section.



htop 2.2.0			     2015			       HTOP(1)
","# htop

> Display dynamic real-time information about running processes. An enhanced version of `top`.

- Start htop:

`htop`

- Start htop displaying only processes owned by given user:

`htop -u {{username}}`

- Sort processes by a column (use `--sort-key help` for a column list):

`htop -s {{column_name}}`

- Get help about interactive commands:

`?`
"
apk,,,"# apk

> Alpine Linux package management tool.

- Update repository indexes from all remote repositories:

`apk update`

- Install a new package:

`apk add {{package}}`

- Remove a package:

`apk del {{package}}`

- Repair package or upgrade it without modifying main dependencies:

`apk fix {{package}}`

- Search package via keyword:

`apk search {{keyword}}`

- Get info about a specific package:

`apk info {{package}}`
"
snap,,,"# snap

> Tool for managing the ""snap"" self-contained software packages.
> Similar to what `apt` is for "".deb"".

- Search for a package:

`snap find {{package_name}}`

- Install a package:

`snap install {{package_name}}`

- Update a package:

`snap refresh {{package_name}}`

- Update all packages:

`snap refresh`

- Display basic information about installed snap software:

`snap list`

- Uninstall a package:

`snap remove {{package_name}}`

- Check for recent snap changes in the system:

`snap changes`
"
xar,,"XAR(1)				 User Commands				XAR(1)



NAME
       xar - eXtensible ARchiver

SYNOPSIS
       xar -[ctx][v] ...

DESCRIPTION
       The  XAR  project  aims to provide an easily extensible archive format.
       Important design decisions include an easily extensible	XML  table  of
       contents  (TOC) for random access to archived files, storing the TOC at
       the beginning of  the  archive  to  allow  for  efficient  handling  of
       streamed  archives,  the  ability  to handle files of arbitrarily large
       sizes, the ability to choose independent encodings for individual files
       in  the archive, the ability to store checksums for individual files in
       both compressed and uncompressed form, and the ability to query the ta-
       ble of content's rich meta-data.

FUNCTIONS
       One of the following options must be used:

       -c     Creates an archive

       -t     Lists the contents of an archive

       -x     Extracts an archive

       NOTE:  all  of the above require the use of the -f option (filename) as
       this release of xar doesn't correctly handle pipes or sockets.

       -f     The  filename  to use for creation, listing or extraction.  With
	      extraction, this can be a POSIX regular expression.

OPTIONS
       --compression
	      Specifies the compression type  to  use.	 Valid	values:  none,
	      gzip, bzip2, lzma (on some systems).  Default value: gzip

       -C <path>
	      On extract, xar will chdir to the specified path before extract-
	      ing the archive.

       -a     Synonym for --compression=lzma

       -j     Synonym for --compression=bzip2

       -z     Synonym for --compression=gzip

       --compression-args=<arguments>
	      Specifies arguments to the compression engine  selected.	 gzip,
	      bzip2, and lzma all take a single integer argument between 0 and
	      9 specifying the compression level to use.

       --dump-toc=<filename>
	      Has xar dump the xml header into the specified file.  ""-"" can be
	      specified to mean stdout.

       --dump-toc-cksum
	      Dumps the ToC checksum to stdout along with the algorithm of the
	      ToC.

       --dump-header
	      Has xar print out the xar binary header information to stdout.

       --extract-subdoc=<name>
	      Extracts the specified subdocument to a document	in  cwd  named
	      <name>.xml

       --list-subdocs
	      List the subdocuments in the xml header

       --toc-cksum
	      Specifies  the hashing algorithm to use for xml header verifica-
	      tion.  Valid values: md5 (on some systems),  sha1,  sha256,  and
	      sha512.  Default value: sha1

       --file-cksum
	      Specifies  the hashing algorithm to use for file content verifi-
	      cation.  Valid values: md5 (on some systems), sha1, sha256,  and
	      sha512.  Default value: sha1

       -l     On archival, stay on the local device.

       -P     On  extract, set ownership based on uid/gid.  If the uid/gid can
	      be set on the extracted file, setuid/setgid bits	will  also  be
	      preserved.

       -p     On  extract, set ownership based on symbolic names, if possible.
	      If the uid/gid can be set on the extracted  file,  setuid/setgid
	      bits will also be preserved.

       -s <filename>
	      On  extract,  specifies the file to extract subdocuments to.  On
	      archival, specifies an xml file to add as a subdocument.

       -v     Verbose output

       --exclude
	      Specifies a POSIX regular expression of files  to  exclude  from
	      adding  to  the  archive during creation or from being extracted
	      during extraction.  This option can be specified multiple times.

       --rsize
	      Specifies  a size (in bytes) for the internal libxar read buffer
	      while performing I/O.

       --coalesce-heap
	      When multiple files in the archive are identical, only store one
	      copy  of	the  data in the heap.	This creates smaller archives,
	      but the archives created are not streamable.

       --link-same
	      When the data section of multiple files are identical,  hardlink
	      them within the archive.

       --no-compress
	      Specifies  a  POSIX  regular expression of files to archive, but
	      not compress.  The archived files will be copied	raw  into  the
	      archive.	This can be used to exclude already gzipped files from
	      being gzipped during the archival process.

       --prop-include
	      Specifies a file property to be included in the  archive.   When
	      this  option  is	specified,  only the specified options will be
	      included.  Anything not specifically included with  this	option
	      will be omitted.	This option can be used multiple times.

       --prop-exclude
	      Specifies a file property to be excluded from the archive.  When
	      this option is specified, all file properties will  be  included
	      except the specified properties.	This option can be used multi-
	      ple times.

       --distribution
	      Creates an archive to only contain file properties safe for file
	      distribution.   Currently,  only	name, type, mode, and data are
	      preserved with this option.

       --keep-existing
	      Does not overwrite existing files during extraction.  Keeps  any
	      previously existing files while extracting.

       -k     Synonym for --keep-existing.

       --keep-setuid
	      When extracting without -p or -P options, xar will extract files
	      as the uid/gid of the extracting process.   In  this  situation,
	      xar  will  strip setuid/setgid bits from the extracted files for
	      security reasons.  --keep-setuid will preserve the setuid/setgid
	      bits  even  though  the uid/gid of the extracted file is not the
	      same as the archived file.

EXAMPLES
       xar -cf sample.xar /home/uid
	      Create a xar archive of all files in /home/uid

       xar -tf sample.xar
	      List the contents of the xar archive sample.xar

       xar -xf sample.xar
	      Extract the contents of sample.xar to the current working direc-
	      tory

BUGS
       Doesn't	currently  work  with  pipes  or streams.  Might be fixed in a
       future release.

       Probably  one  or  two  more somewhere in there. If you find one please
       report it to http://code.google.com/p/xar/

AUTHORS
       Rob Braun <bbraun AT synack DOT net>
       Landon Fuller <landonf AT bikemonkey DOT org>
       David Leimbach
       Kevin Van Vechten




version 1.8			 June 4, 2015				XAR(1)
","# xar

> Manage .xar archives.

- Create a xar archive of all files in a given directory:

`xar -cf {{archive.xar}} {{path/to/directory}}`

- List the contents of a given xar archive:

`xar -tf {{archive.xar}}`

- Extract the contents of a given xar archive to the current directory:

`xar -xf {{archive.xar}}`
"
xclock,,,"# xclock

> Display the time in analog or digital form.

- Display an analog clock:

`xclock`

- Display a 24-hour digital clock with the hour and minute fields only:

`xclock -digital -brief`

- Display a digital clock using an strftime format string (see strftime(3)):

`xclock -digital -strftime {{format}}`

- Display a 24-hour digital clock with the hour, minute and second fields that updates every second:

`xclock -digital -strftime '%H:%M:%S' -update 1`

- Display a 12-hour digital clock with the hour and minute fields only:

`xclock -digital -twelve -brief`
"
mkfs,,,"# mkfs

> Build a Linux filesystem on a hard disk partition.
> This command is deprecated in favor of filesystem specific mkfs.<type> utils.

- Build a Linux ext2 filesystem on a partition:

`mkfs {{path/to/partition}}`

- Build a filesystem of a specified type:

`mkfs -t {{ext4}} {{path/to/partition}}`

- Build a filesystem of a specified type and check for bad blocks:

`mkfs -c -t {{ntfs}} {{path/to/partition}}`
"
mimetype,,,"# mimetype

> Automatically determine the MIME type of a file.

- Print the MIME type of a given file:

`mimetype {{path/to/file}}`

- Display only the MIME type, and not the filename:

`mimetype --brief {{path/to/file}}`

- Display a description of the MIME type:

`mimetype --describe {{path/to/file}}`

- Determine the MIME type of stdin (does not check a filename):

`{{some_command}} | mimetype --stdin`

- Display debug information about how the MIME type was determined:

`mimetype --debug {{path/to/file}}`

- Display all the possible MIME types of a given file in confidence order:

`mimetype --all {{path/to/file}}`

- Explicitly specify the 2-letter language code of the output:

`mimetype --language {{path/to/file}}`
"
iw,,,"# iw

> Show and manipulate wireless devices.

- Scan for available wireless networks:

`iw dev {{wlp}} scan`

- Join an open wireless network:

`iw dev {{wlp}} connect {{SSID}}`

- Close the current connection:

`iw dev {{wlp}} disconnect`

- Show information about the current connection:

`iw dev {{wlp}} link`
"
halt,,"
REBOOT(8)		  BSD System Manager's Manual		     REBOOT(8)

NAME
     halt, reboot -- stopping and restarting the system

SYNOPSIS
     halt [-lnqu]
     reboot [-lnq]

DESCRIPTION
     The halt and reboot utilities flush the file system cache to disk, send
     all running processes a SIGTERM (and subsequently a SIGKILL) and, respec-
     tively, halt or restart the system.  The action is logged, including
     entering a shutdown record into the wtmp(5) file.

     When the system is halted with the halt command, the system is powered
     off.

     The options are as follows:

     -l      The halt or reboot is not recorded in the system log.  This
	     option is intended for applications such as shutdown(8), that
	     call reboot or halt and log this themselves.

     -n      The file system cache is not flushed.  This option should proba-
	     bly not be used.

     -q      The system is halted or restarted quickly and ungracefully, and
	     only the flushing of the file system cache is performed (if the
	     -n option is not specified).  This option should probably not be
	     used.

     -u      The system is halted up until the point of removing system power,
	     but waits before removing power for 5 minutes so that an external
	     UPS (uninterruptible power supply) can forcibly remove power.
	     This simulates a dirty shutdown to permit a later automatic power
	     on. OS X uses this mode automatically with supported UPSs in
	     emergency shutdowns.

     Normally, the shutdown(8) utility is used when the system needs to be
     halted or restarted, giving users advance warning of their impending doom
     and cleanly terminating specific programs.

SIGTERM TO SIGKILL INTERVAL
     The SIGKILL will follow the SIGTERM by an intentionally indeterminate
     period of time.  Programs are expected to take only enough time to flush
     all dirty data and exit.  Developers are encouraged to file a bug with
     the OS vendor, should they encounter an issue with this functionality.

SEE ALSO
     wtmp(5), shutdown(8), sync(8)

HISTORY
     A reboot utility appeared in Version 6 AT&T UNIX.

BSD				 June 9, 1993				   BSD
","# halt

> Power off or reboot the machine.

- Power the machine off:

`halt`

- Reboot the machine:

`halt --reboot`
"
chattr,,,"# chattr

> Change attributes of files or directories.

- Make a file or directory immutable to changes and deletion, even by superuser:

`chattr +i {{path/to/file_or_directory}}`

- Make a file or directory mutable:

`chattr -i {{path/to/file_or_directory}}`

- Recursively make an entire directory and contents immutable:

`chattr -R +i {{path/to/directory}}`
"
a2disconf,https://manpages.debian.org/buster/apache2/a2disconf.8.en.html,,"# a2disconf

> Disable an Apache configuration file on Debian-based OSes.
> More information: <https://manpages.debian.org/buster/apache2/a2disconf.8.en.html>.

- Disable a configuration file:

`sudo a2disconf {{configuration_file}}`

- Don't show informative messages:

`sudo a2disconf --quiet {{configuration_file}}`
"
locate,,"
LOCATE(1)		  BSD General Commands Manual		     LOCATE(1)

NAME
     locate -- find filenames quickly

SYNOPSIS
     locate [-0Scims] [-l limit] [-d database] pattern ...

DESCRIPTION
     The locate program searches a database for all pathnames which match the
     specified pattern.  The database is recomputed periodically (usually
     weekly or daily), and contains the pathnames of all files which are pub-
     licly accessible.

     Shell globbing and quoting characters (``*'', ``?'', ``\'', ``['' and
     ``]'') may be used in pattern, although they will have to be escaped from
     the shell.  Preceding any character with a backslash (``\'') eliminates
     any special meaning which it may have.  The matching differs in that no
     characters must be matched explicitly, including slashes (``/'').

     As a special case, a pattern containing no globbing characters (``foo'')
     is matched as though it were ``*foo*''.

     Historically, locate only stored characters between 32 and 127.  The cur-
     rent implementation store any character except newline (`\n') and NUL
     (`\0').  The 8-bit character support does not waste extra space for plain
     ASCII file names.	Characters less than 32 or greater than 127 are stored
     in 2 bytes.

     The following options are available:

     -0 	 Print pathnames separated by an ASCII NUL character (charac-
		 ter code 0) instead of default NL (newline, character code
		 10).

     -S 	 Print some statistics about the database and exit.

     -c 	 Suppress normal output; instead print a count of matching
		 file names.

     -d database
		 Search in database instead of the default file name database.
		 Multiple -d options are allowed.  Each additional -d option
		 adds the specified database to the list of databases to be
		 searched.

		 The option database may be a colon-separated list of data-
		 bases.  A single colon is a reference to the default data-
		 base.

		 $ locate -d $HOME/lib/mydb: foo

		 will first search string ``foo'' in $HOME/lib/mydb and then
		 in /var/db/locate.database.

		 $ locate -d $HOME/lib/mydb::/cdrom/locate.database foo

		 will first search string ``foo'' in $HOME/lib/mydb and then
		 in /var/db/locate.database and then in
		 /cdrom/locate.database.

		       $ locate -d db1 -d db2 -d db3 pattern

		 is the same as

		       $ locate -d db1:db2:db3 pattern

		 or

		       $ locate -d db1:db2 -d db3 pattern

		 If - is given as the database name, standard input will be
		 read instead.	For example, you can compress your database
		 and use:

		 $ zcat database.gz | locate -d - pattern

		 This might be useful on machines with a fast CPU and little
		 RAM and slow I/O.  Note: you can only use one pattern for
		 stdin.

     -i 	 Ignore case distinctions in both the pattern and the data-
		 base.

     -l number	 Limit output to number of file names and exit.

     -m 	 Use mmap(2) instead of the stdio(3) library.  This is the
		 default behavior and is faster in most cases.

     -s 	 Use the stdio(3) library instead of mmap(2).

ENVIRONMENT
     LOCATE_PATH  path to the locate database if set and not empty, ignored if
		  the -d option was specified.

FILES
     /var/db/locate.database				   locate database
     /usr/libexec/locate.updatedb			   Script to update
							   the locate database
     /System/Library/LaunchDaemons/com.apple.locate.plist  Job that starts the
							   database rebuild

SEE ALSO
     find(1), whereis(1), which(1), fnmatch(3), locate.updatedb(8)

     Woods, James A., ""Finding Files Fast"", ;login, 8:1, pp. 8-10, 1983.

HISTORY
     The locate command first appeared in 4.4BSD.  Many new features were
     added in FreeBSD 2.2.

BUGS
     The locate program may fail to list some files that are present, or may
     list files that have been removed from the system.  This is because
     locate only reports files that are present in the database, which is typ-
     ically only regenerated once a week by the
     /System/Library/LaunchDaemons/com.apple.locate.plist job.	Use find(1) to
     locate files that are of a more transitory nature.

     The locate database is typically built by user ``nobody'' and the
     locate.updatedb(8) utility skips directories which are not readable for
     user ``nobody'', group ``nobody'', or world.  For example, if your HOME
     directory is not world-readable, none of your files are in the database.

     The locate database is not byte order independent.  It is not possible to
     share the databases between machines with different byte order.  The cur-
     rent locate implementation understands databases in host byte order or
     network byte order if both architectures use the same integer size.  So
     on a FreeBSD/i386 machine (little endian), you can read a locate database
     which was built on SunOS/sparc machine (big endian, net).

     The locate utility does not recognize multibyte characters.

BSD				August 17, 2006 			   BSD
","# locate

> Find filenames quickly.

- Look for pattern in the database. Note: the database is recomputed periodically (usually weekly or daily):

`locate {{pattern}}`

- Look for a file by its exact filename (a pattern containing no globbing characters is interpreted as `*pattern*`):

`locate */{{filename}}`

- Recompute the database. You need to do it if you want to find recently added files:

`sudo updatedb`
"
vboxmanage,https://www.virtualbox.org/manual/ch08.html#vboxmanage-intro,,"# VBoxManage

> Command-line interface to VirtualBox.
> Includes all the functionality of the GUI and more.
> More information: <https://www.virtualbox.org/manual/ch08.html#vboxmanage-intro>.

- List all VirtualBox virtual machines:

`VBoxManage list vms`

- Show information about a particular virtual machine:

`VBoxManage showvminfo {{name|uuid}}`

- Start a virtual machine:

`VBoxManage startvm {{name|uuid}}`

- Start a virtual machine in headless mode:

`VBoxManage startvm {{name|uuid}} -type headless`

- Shutdown the virtual machine and save its current state:

`VBoxManage controlvm {{name|uuid}} savestate`

- Shutdown down the virtual machine without saving its state:

`VBoxManage controlvm {{name|uuid}} poweroff`

- Update VBox extension packs:

`VBoxManage extpack install --replace {{VboxExtensionPackFileName}}`
"
wine,https://wiki.winehq.org/,,"# wine

> Run Windows programs on Unix.
> More information: <https://wiki.winehq.org/>.

- Run ipconfig.exe program:

`wine {{ipconfig}} {{/all}}`

- Run cmd.exe in background:

`wine start {{cmd}}`

- Run Windows-like Package Manager:

`wine uninstaller`

- Install MSI packages:

`wine msiexec /i {{package}}`
"
fatlabel,,,"# fatlabel

> Sets or gets the label of a FAT32 partition.

- Get the label of a FAT32 partition:

`fatlabel {{/dev/sda1}}`

- Set the label of a FAT32 partition:

`fatlabel {{/dev/sdc3}} ""{{new_label}}""`
"
line,,,"# line

> Read a single line of input.

- Read input:

`line`
"
daemonize,http://software.clapper.org/daemonize/,,"# daemonize

> Run a command (that does not daemonize itself) as a Unix daemon.
> More information: <http://software.clapper.org/daemonize/>.

- Run a command as a daemon:

`daemonize {{command}} {{command_arguments}}`

- Write the pid to the specified file:

`daemonize -p {{path/to/pidfile}} {{command}} {{command_arguments}}`

- Use a lock file to ensure that only one instance runs at a time:

`daemonize -l {{path/to/lockfile}} {{command}} {{command_arguments}}`

- Use the specified user account:

`sudo daemonize -u {{user}} {{command}} {{command_arguments}}`
"
modprobe,,,"# modprobe

> Add or remove modules from the Linux kernel.

- Pretend to load a module into the kernel, but don't actually do it:

`sudo modprobe --dry-run {{module_name}}`

- Load a module into the kernel:

`sudo modprobe {{module_name}}`

- Remove a module from the kernel:

`sudo modprobe --remove {{module_name}}`

- Remove a module and those that depend on it from the kernel:

`sudo modprobe --remove-dependencies {{module_name}}`

- Show a kernel module's dependencies:

`sudo modprobe --show-depends {{module_name}}`
"
mkisofs,,,"# mkisofs

> Create ISO files from directories.
> Also aliased as `genisoimage`.

- Create an ISO from a directory:

`mkisofs -o {{filename.iso}} {{path/to/source_directory}}`

- Set the disc label when creating an ISO:

`mkisofs -o {{filename.iso}} -V {{""label_name""}} {{path/to/source_directory}}`
"
fcrackzip,,,"# fcrackzip

> ZIP archive password cracking utility.

- Brute-force a password with a length of 4 to 8 characters, and contains only alphanumeric characters (order matters):

`fcrackzip --brute-force --length 4-8 --charset aA1 {{archive}}`

- Brute-force a password in verbose mode with a length of 3 characters that only contains lowercase characters, `$` and `%`:

`fcrackzip -v --brute-force --length 3 --charset a:$% {{archive}}`

- Brute-force a password that contains only lowercase and special characters:

`fcrackzip --brute-force --length 4 --charset a! {{archive}}`

- Brute-force a password containing only digits, starting from the password `12345`:

`fcrackzip --brute-force --length 5 --charset 1 --init-password 12345 {{archive}}`

- Crack a password using a wordlist:

`fcrackzip --use-unzip --dictionary --init-password {{wordlist}} {{archive}}`

- Benchmark cracking performance:

`fcrackzip --benchmark`
"
gpasswd,,,"# gpasswd

> Administer ""/etc/group"" and ""/etc/gshadow"".

- Define group administrators:

`sudo gpasswd -A {{user1,user2}} {{group}}`

- Set the list of group members:

`sudo gpasswd -M {{user1,user2}} {{group}}`

- Create a password for the named group:

`gpasswd {{group}}`

- Add a user to the named group:

`gpasswd -a {{user}} {{group}}`

- Remove a user from the named group:

`gpasswd -d {{user}} {{group}}`
"
slapt-get,,,"# slapt-get

> An apt like system for Slackware package management.
> Package sources need to be configured in the slapt-getrc file.

- Update the list of available packages and versions:

`slapt-get --update`

- Install a package, or update it to the latest available version:

`slapt-get --install {{package_name}}`

- Remove a package:

`slapt-get --remove {{package_name}}`

- Upgrade all installed packages to their latest available versions:

`slapt-get --upgrade {{package_name}}`

- Locate packages of interest by the package name, disk set, or version:

`slapt-get --search {{package_name}}`

- Show information about a package:

`slapt-get --show {{package_name}}`
"
quotacheck,,"
QUOTACHECK(8)		  BSD System Manager's Manual		 QUOTACHECK(8)

NAME
     quotacheck -- filesystem quota consistency checker

SYNOPSIS
     quotacheck [-g] [-u] [-v] filesystem ...
     quotacheck [-g] [-u] [-v] -a

DESCRIPTION
     Quotacheck examines each filesystem, builds a table of current disk
     usage, and compares this table against that recorded in the disk quota
     file for the filesystem.  If any inconsistencies are detected, both the
     quota file and the current system copy of the incorrect quotas are
     updated (the latter only occurs if an active filesystem is checked).  By
     default both user and group quotas are checked.

     Available options:

     -a      If the -a flag is supplied in place of any filesystem names,
	     quotacheck will check all the read-write filesystems with an
	     existing mount option file at its root.  The mount option file
	     specifies the types of quotas that are to be checked.

     -g      Only group quotas are checked. The mount option file,
	     .quota.ops.group, must exist at the root of the filesystem.

     -u      Only user quotas are checked.  The mount option file,
	     .quota.ops.user, must exist at the root of the filesystem.

     -v      quotacheck reports discrepancies between the calculated and
	     recorded disk quotas.

     Specifying both -g and -u is equivalent to the default.  Parallel passes
     are run on the filesystems required, in an identical fashion to fsck(8).

     Normally quotacheck operates silently.

     Quotacheck expects each filesystem being checked to have quota data files
     named .quota.user and/or .quota.group located at the filesystem root.  If
     a binary data file is not present, quotacheck will create it.  The
     default filename and root location cannot be overridden.

     Quotacheck is normally run at fsck time.

     Quotacheck accesses the raw device in calculating the actual disk usage
     for each user.  Thus, the filesystems checked should be quiescent while
     quotacheck is running.

FILES
     Each of the following quota files is located at the root of the mounted
     filesystem.  The mount option files are empty files whose existence indi-
     cates that quotas are to be enabled for that filesystem. The binary data
     files will be created by quotacheck, if they don't already exist.

     .quota.user       data file containing user quotas
     .quota.group      data file containing group quotas
     .quota.ops.user   mount option file used to enable user quotas
     .quota.ops.group  mount option file used to enable group quotas

SEE ALSO
     quota(1), quotactl(2), edquota(8), fsck(8), quotaon(8), repquota(8)

HISTORY
     The quotacheck command appeared in 4.2BSD.

4.2 Berkeley Distribution      October 17, 2002      4.2 Berkeley Distribution
","# quotacheck

> Scan a filesystem for disk usage; create, check and repair quota files.
> It is best to run quota check with quotas turned off to prevent damage or loss to quota files.

- Check quotas on all mounted non-NFS filesystems:

`sudo quotacheck --all`

- Force check even if quotas are enabled (this can cause damage or loss to quota files):

`sudo quotacheck --force {{mountpoint}}`

- Check quotas on a given filesystem in debug mode:

`sudo quotacheck --debug {{mountpoint}}`

- Check quotas on a given filesystem, displaying the progress:

`sudo quotacheck --verbose {{mountpoint}}`

- Check user quotas:

`sudo quotacheck --user {{user}} {{mountpoint}}`

- Check group quotas:

`sudo quotacheck --group {{group}} {{mountpoint}}`
"
datamash,,,"# datamash

> Tool to perform basic numeric, textual and statistical operations on input textual data files.

- Get max, min, mean and median of a single column of numbers:

`seq 3 | datamash max 1 min 1 mean 1 median 1`

- Get the mean of a single column of float numbers (floats must use "","" and not "".""):

`echo -e '1.0\n2.5\n3.1\n4.3\n5.6\n5.7' | tr '.' ',' | datamash mean 1`

- Get the mean of a single column of numbers with a given decimal precision:

`echo -e '1\n2\n3\n4\n5\n5' | datamash -R {{number_of_decimals_wanted}} mean 1`

- Get the mean of a single column of numbers ignoring ""Na"" and ""NaN"" (literal) strings:

`echo -e '1\n2\nNa\n3\nNaN' | datamash --narm mean 1`
"
bmon,,,"# bmon

> Monitor bandwidth and capture network related statistics.

- Display the list of all the interfaces:

`bmon -a`

- Display data transfer rates in bits per second:

`bmon -b`

- Set policy to define which network interface(s) is/are displayed:

`bmon -p {{interface_1,interface_2,interface_3}}`

- Set interval (in seconds) in which rate per counter is calculated:

`bmon -R {{2.0}}`
"
eix,,,"# eix

> Utilities for searching local Gentoo packages.
> Update local package cache using `eix-update`.

- Search for a package:

`eix {{package_name}}`

- Search for installed packages:

`eix --installed {{package_name}}`

- Seach in package descriptions:

`eix --description ""{{description}}""`

- Seach by package license:

`eix --license {{license}}`

- Exclude results from search:

`eix --not --license {{license}}`
"
